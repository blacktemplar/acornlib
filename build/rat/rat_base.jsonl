{"goal":"Int.1 > Int.0","proof":["not Int.0 <= Int.1 or lib(order).PartialOrder.lt<Int>(Int.0, Int.1) or Int.1 = Int.0","Int.0 <= Int.1 or Int.0.is_positive or Int.1.is_negative","lib(order).PartialOrder.lt<Int>(Int.0, Int.1) = Int.1 > Int.0","not lib(order).PartialOrder.lt<Int>(Int.0, Int.1)","not Int.1.is_positive or not Int.1.is_negative","not Int.0 <= Int.1","Int.1.is_negative"]}
{"goal":"a.gcd(Int.1) = Int.1","proof":["a.gcd(Int.1) = Int.1.gcd(a)","Int.1.gcd(a) != Int.1","Int.1.gcd(a) = Int.1"]}
{"goal":"denom_one_is_reduced","proof":["not Int.1 > Int.0 or a.gcd(Int.1) != Int.1 or is_reduced(a, Int.1)"]}
{"goal":"exists(k0: Int, k1: Int) { is_reduced(k0, k1) }","proof":["let s0: Int satisfy { true }","not is_reduced(s0, Int.1)","is_reduced(s0, Int.1)"]}
{"goal":"zero_num","proof":["not is_reduced(Int.0, Int.1) or Rat.new(Int.0, Int.1).num = Int.0","Rat.new(Int.0, Int.1).num != Int.0","is_reduced(Int.0, Int.1)"]}
{"goal":"zero_denom","proof":["not is_reduced(Int.0, Int.1) or Rat.new(Int.0, Int.1).denom = Int.1","Rat.new(Int.0, Int.1).denom != Int.1","is_reduced(Int.0, Int.1)"]}
{"goal":"r.denom > Int.0","proof":["not is_reduced(r.num, r.denom) or r.denom > Int.0","not is_reduced(r.num, r.denom)","is_reduced(r.num, r.denom)"]}
{"goal":"denom_nonzero","proof":["Int.0 > Int.0","lib(order).PartialOrder.lt<Int>(Int.0, Int.0) = Int.0 > Int.0","lib(order).PartialOrder.lt<Int>(Int.0, Int.0)","not lib(order).PartialOrder.lt<Int>(Int.0, Int.0) or Int.0 != Int.0"]}
{"goal":"r.denom > Int.0","proof":["not is_reduced(r.num, r.denom) or r.denom > Int.0","not is_reduced(r.num, r.denom)","is_reduced(r.num, r.denom)"]}
{"goal":"denom_positive","proof":["not Int.0 <= r.denom or (r.denom - Int.0).is_positive or r.denom = Int.0","lib(order).PartialOrder.lt<Int>(Int.0, r.denom) = r.denom > Int.0","not lib(order).PartialOrder.lt<Int>(Int.0, r.denom) or Int.0 <= r.denom","r.denom - Int.0 = r.denom","not (r.denom - Int.0).is_positive","r.denom != Int.0","lib(order).PartialOrder.lt<Int>(Int.0, r.denom)","not Int.0 <= r.denom","Int.0 <= r.denom"]}
{"goal":"from_int_num","proof":["not is_reduced(n, Int.1) or Rat.new(n, Int.1).num = n","Rat.new(n, Int.1) = Rat.from_int(n)","Rat.new(n, Int.1).num != n","is_reduced(n, Int.1)"]}
{"goal":"from_int_denom","proof":["not is_reduced(n, Int.1) or Rat.new(n, Int.1).denom = Int.1","Rat.new(n, Int.1) = Rat.from_int(n)","Rat.new(n, Int.1).denom != Int.1","is_reduced(n, Int.1)"]}
{"goal":"a * d = b * c","proof":["not cross_equals(a, b, c, d) or c * b = a * d","c * b = b * c","c * b = a * d","c * b != a * d"]}
{"goal":"c * f = d * e","proof":["not cross_equals(c, d, e, f) or e * d = c * f","e * d = d * e","e * d = c * f","e * d != c * f"]}
{"goal":"a * d * f = b * c * f","proof":["b * c != a * d"]}
{"goal":"a * d * f = b * d * e","proof":["b * (c * f) = b * c * f","b * (d * e) = b * d * e"]}
{"goal":"a * f * d = b * e * d","proof":["b * (d * e) = b * d * e","b * (e * d) = b * e * d","f * (a * d) = f * a * d","e * d = d * e","f * (a * d) = a * d * f","f * a = a * f"]}
{"goal":"d != Int.0","proof":["not cross_equals(a, b, c, d) or Int.0 != d"]}
{"goal":"a * f = b * e","proof":["b * e * d != a * f * d or Int.0 = d or b * e = a * f"]}
{"goal":"cross_equals_trans","proof":["e * b != a * f or cross_equals(a, b, e, f) or f = Int.0 or Int.0 = b","e * b != a * f or cross_equals(a, b, e, f) or Int.0 = b or f = Int.0","not cross_equals(c, d, e, f) or f != Int.0","not cross_equals(a, b, c, d) or Int.0 != b","e * b = b * e","Int.0 != b","f != Int.0","e * b = a * f","e * b != a * f"]}
{"goal":"Rat.0 = Rat.0","proof":[]}
{"goal":"a.gcd(b) != Int.0","proof":["a.gcd(b) != Int.0 or Int.0 = b"]}
{"goal":"exists(k0: Int) { k0 * a.gcd(b) = a }","proof":["let s0: (Int, Int) -> Int satisfy { forall(x0: Int, x1: Int) { not x0.divides(x1) or s0(x0, x1) * x0 = x1 } and forall(x2: Int, x3: Int, x4: Int) { x2 * x3 != x4 or x3.divides(x4) } }","s0(a.gcd(b), a) * a.gcd(b) != a","not a.gcd(b).divides(a) or s0(a.gcd(b), a) * a.gcd(b) = a","not a.gcd(b).divides(a)","a.gcd(b) = b.gcd(a)","b.gcd(a).divides(a)"]}
{"goal":"exists(k0: Int) { k0 * a.gcd(b) = b }","proof":["let s0: (Int, Int) -> Int satisfy { forall(x0: Int, x1: Int) { not x0.divides(x1) or s0(x0, x1) * x0 = x1 } and forall(x2: Int, x3: Int, x4: Int) { x2 * x3 != x4 or x3.divides(x4) } }","s0(a.gcd(b), b) * a.gcd(b) != b","not a.gcd(b).divides(b) or s0(a.gcd(b), b) * a.gcd(b) = b","not a.gcd(b).divides(b)","a.gcd(b).divides(b)"]}
{"goal":"b1 != Int.0","proof":["Int.0 * a.gcd(b) = b","Int.0 * a.gcd(b) = Int.0"]}
{"goal":"a * b = a * b1 * a.gcd(b)","proof":["a * (b1 * a.gcd(b)) = a * b1 * a.gcd(b)"]}
{"goal":"a * b = b * a1 * a.gcd(b)","proof":["b * (a1 * a.gcd(b)) = b * a1 * a.gcd(b)","a * b = b * a"]}
{"goal":"a * b1 * a.gcd(b) = b * a1 * a.gcd(b)","proof":["a * b1 * a.gcd(b) != a * b"]}
{"goal":"a * b1 = b * a1","proof":["a * b1 * a.gcd(b) != b * a1 * a.gcd(b) or a.gcd(b) = Int.0 or a * b1 = b * a1"]}
{"goal":"cross_equals(a1, b1, a, b)","proof":["a * b1 != a1 * b or cross_equals(a1, b1, a, b) or Int.0 = b or Int.0 = b1","a * b1 != a1 * b or cross_equals(a1, b1, a, b) or Int.0 = b1 or Int.0 = b","a1 * b = b * a1","a * b1 != a1 * b","a * b1 = a1 * b"]}
{"goal":"a1.gcd(b1) = Int.1","proof":["a1 * a.gcd(b) != a or b1 * a.gcd(b) != b or a1.gcd(b1) = Int.1 or a.gcd(b) = Int.0","a1 * a.gcd(b) != a or b1 * a.gcd(b) != b or a.gcd(b) = Int.0 or a1.gcd(b1) = Int.1","a.gcd(b) != Int.0 or Int.0 = b","a.gcd(b) != Int.0","b1 * a.gcd(b) != b or a1 * a.gcd(b) != a or a.gcd(b) = Int.0"]}
{"goal":"b2 = Int.from_nat(abs(b1))","proof":["unit_sign(b1) * b1 = Int.from_nat(abs(b1))","unit_sign(b1) * b1 != b2","b1 * unit_sign(b1) = unit_sign(b1) * b1"]}
{"goal":"b2 != Int.0","proof":["lib(int.int_base).abs(b1) != Nat.0 or Int.0 = b1","lib(int.int_base).abs(Int.from_nat(lib(int.int_base).abs(b1))) = lib(int.int_base).abs(b1)","lib(int.int_base).abs(b2) = Nat.0","lib(int.int_base).abs(Int.from_nat(lib(int.int_base).abs(b1))) = Nat.0","lib(int.int_base).abs(b1) != Nat.0","lib(int.int_base).abs(b1) = Nat.0"]}
{"goal":"a1 * unit_sign(b1) * b1 = b1 * unit_sign(b1) * a1","proof":["a1 * (unit_sign(b1) * b1) = a1 * unit_sign(b1) * b1","unit_sign(b1) * b1 = Int.from_nat(abs(b1))","a1 * (b1 * unit_sign(b1)) = b1 * unit_sign(b1) * a1"]}
{"goal":"cross_equals(a2, b2, a1, b1)","proof":["a2 * b1 != a1 * b2 or cross_equals(a2, b2, a1, b1) or Int.0 = b1 or Int.0 = b2","a2 * b1 != a1 * b2 or cross_equals(a2, b2, a1, b1) or Int.0 = b2 or Int.0 = b1","a1 * (unit_sign(b1) * b1) = a1 * unit_sign(b1) * b1","unit_sign(b1) * b1 = Int.from_nat(abs(b1))","a2 * b1 != a1 * b2"]}
{"goal":"a2.gcd(b2) = Int.1 * Int.from_nat(abs(unit_sign(b1)))","proof":["(a1 * unit_sign(b1)).gcd(b1 * unit_sign(b1)) = a1.gcd(b1) * Int.from_nat(abs(unit_sign(b1)))"]}
{"goal":"Int.from_nat(abs(unit_sign(b1))) = Int.1","proof":["not lattice.is_unit(unit_sign(b1)) or abs(unit_sign(b1)) = Nat.1","lattice.is_unit(unit_sign(b1))","Int.from_nat(abs(unit_sign(b1))) != Int.from_nat(Nat.1)","abs(unit_sign(b1)) != Nat.1"]}
{"goal":"a2.gcd(b2) = Int.1","proof":["Int.1 * Int.1 = a2.gcd(b2)","Int.1 * Int.1 = Int.1.exp(Nat.2)","Int.1.exp(Nat.2) = Int.1","Int.1.exp(Nat.2) != a2.gcd(b2)"]}
{"goal":"b2 != Int.0","proof":[]}
{"goal":"b2 > Int.0","proof":["not Int.0 <= b2 or lib(order).PartialOrder.lt<Int>(Int.0, b2) or Int.0 = b2","Int.0 <= b2 or Int.0.is_positive or b2.is_negative","lib(order).PartialOrder.lt<Int>(Int.0, b2) = b2 > Int.0","not lib(order).PartialOrder.lt<Int>(Int.0, b2)","not Int.0 <= b2","Int.from_nat(lib(int.int_base).abs(b2)) != b2 or not b2.is_negative","lib(int.int_base).abs(Int.from_nat(lib(int.int_base).abs(b1))) = lib(int.int_base).abs(b1)","Int.from_nat(lib(int.int_base).abs(Int.from_nat(lib(int.int_base).abs(b1)))) = b2","Int.from_nat(lib(int.int_base).abs(b2)) = b2","b2.is_negative","not b2.is_negative"]}
{"goal":"is_reduced(a2, b2)","proof":["not b2 > Int.0 or a2.gcd(b2) != Int.1 or is_reduced(a2, b2)"]}
{"goal":"r.num = a2","proof":["Rat.new(a2, b2).num != a2","not is_reduced(a2, b2) or Rat.new(a2, b2).num = a2"]}
{"goal":"r.denom = b2","proof":["Rat.new(a2, b2).denom != b2","not is_reduced(a2, b2) or Rat.new(a2, b2).denom = b2"]}
{"goal":"cross_equals(r.num, r.denom, a2, b2)","proof":["not cross_equals(r.num, b2, a2, b2)","not cross_equals(a2, b2, a2, b2)","a2 * b2 != a2 * b2 or cross_equals(a2, b2, a2, b2) or Int.0 = b2 or Int.0 = b2"]}
{"goal":"cross_equals(a2, b2, a, b)","proof":["not cross_equals(a2, b2, a1, b1) or not cross_equals(a1, b1, a, b) or cross_equals(a2, b2, a, b)","not cross_equals(a2, b2, a1, b1) or not cross_equals(a1, b1, a, b)"]}
{"goal":"cross_equals(r.num, r.denom, a, b)","proof":[]}
{"goal":"exists(k0: Rat) { if b = Int.0 { k0 = Rat.0 } else { cross_equals(k0.num, k0.denom, a, b) } }","proof":["let s0: Rat satisfy { cross_equals(s0.num, s0.denom, a, b) or Int.0 = b }","not cross_equals(s0.num, s0.denom, a, b) or Int.0 = b","Int.0 != b or Rat.0 != Rat.0","Int.0 != b"]}
{"goal":"r1.num.gcd(r1.denom) = Int.1","proof":["not is_reduced(r1.num, r1.denom) or r1.num.gcd(r1.denom) = Int.1","not is_reduced(r1.num, r1.denom)","is_reduced(r1.num, r1.denom)"]}
{"goal":"r1.denom.divides(r1.num * r2.denom)","proof":["not cross_equals(r1.num, r1.denom, r2.num, r2.denom) or r2.num * r1.denom = r1.num * r2.denom","r2.num * r1.denom != r1.num * r2.denom or r1.denom.divides(r1.num * r2.denom)","r2.num * r1.denom != r1.num * r2.denom"]}
{"goal":"r1.denom.divides(r2.denom)","proof":["not r1.denom.divides(r1.num * r2.denom) or r1.denom.gcd(r1.num) != Int.1 or r1.denom.divides(r2.denom)","r1.denom.gcd(r1.num) = r1.num.gcd(r1.denom)","r1.denom.gcd(r1.num) != Int.1","r1.denom.gcd(r1.num) = Int.1"]}
{"goal":"abs(r1.denom).divides(abs(r2.denom))","proof":["not r1.denom.divides(r2.denom) or abs(r1.denom).divides(abs(r2.denom))"]}
{"goal":"r2.num.gcd(r2.denom) = Int.1","proof":["not is_reduced(r2.num, r2.denom) or r2.num.gcd(r2.denom) = Int.1","not is_reduced(r2.num, r2.denom)","is_reduced(r2.num, r2.denom)"]}
{"goal":"r2.denom.divides(r2.num * r1.denom)","proof":["not cross_equals(r1.num, r1.denom, r2.num, r2.denom) or r2.num * r1.denom = r1.num * r2.denom","r2.num * r1.denom != r1.num * r2.denom or r2.denom.divides(r2.num * r1.denom)","r2.num * r1.denom != r1.num * r2.denom"]}
{"goal":"r2.denom.divides(r1.denom)","proof":["not r2.denom.divides(r2.num * r1.denom) or r2.denom.gcd(r2.num) != Int.1 or r2.denom.divides(r1.denom)","r2.denom.gcd(r2.num) = r2.num.gcd(r2.denom)","r2.denom.gcd(r2.num) != Int.1","r2.denom.gcd(r2.num) = Int.1"]}
{"goal":"abs(r2.denom).divides(abs(r1.denom))","proof":["not r2.denom.divides(r1.denom) or abs(r2.denom).divides(abs(r1.denom))"]}
{"goal":"abs(r1.denom) = abs(r2.denom)","proof":["not abs(r2.denom).divides(abs(r1.denom)) or not abs(r1.denom).divides(abs(r2.denom)) or abs(r2.denom) = abs(r1.denom)"]}
{"goal":"r1.denom.is_positive","proof":["r1.denom.is_positive"]}
{"goal":"r2.denom.is_positive","proof":["r2.denom.is_positive"]}
{"goal":"r1.denom = r2.denom","proof":["not r1.denom.is_positive or r1.denom.abs = r1.denom","not r2.denom.is_positive or r2.denom.abs = r2.denom","Int.from_nat(lib(int.int_base).abs(r1.denom)) = r1.denom.abs","Int.from_nat(lib(int.int_base).abs(r2.denom)) = r2.denom.abs","r2.denom.abs = r2.denom","r1.denom.abs = r1.denom"]}
{"goal":"r1.num * r2.denom = r2.num * r1.denom","proof":["not cross_equals(r1.num, r1.denom, r2.num, r2.denom) or r2.num * r1.denom = r1.num * r2.denom"]}
{"goal":"r1.num * r2.denom = r2.num * r2.denom","proof":["r2.num * r1.denom != r1.num * r2.denom"]}
{"goal":"r2.denom != Int.0","proof":["Int.0.is_positive"]}
{"goal":"r1.num = r2.num","proof":["r2.num * r2.denom != r1.num * r2.denom or r2.denom = Int.0 or r2.num = r1.num"]}
{"goal":"cross_eq_imp_eq","proof":["Rat.new(r1.num, r1.denom) = r1","Rat.new(r2.num, r2.denom) = r2"]}
{"goal":"reduce_idempotent","proof":["cross_equals(reduce(r.num, r.denom).num, reduce(r.num, r.denom).denom, r.num, r.denom) or r.denom = Int.0","not cross_equals(reduce(r.num, r.denom).num, reduce(r.num, r.denom).denom, r.num, r.denom) or reduce(r.num, r.denom) = r","r.denom != Int.0","not cross_equals(reduce(r.num, r.denom).num, reduce(r.num, r.denom).denom, r.num, r.denom)"]}
{"goal":"r.denom > Int.0","proof":["not is_reduced(r.num, r.denom) or r.denom > Int.0","not is_reduced(r.num, r.denom)","is_reduced(r.num, r.denom)"]}
{"goal":"(-r.num).gcd(r.denom) = r.num.gcd(r.denom)","proof":["Int.from_nat(abs(-r.num).gcd(abs(r.denom))) = (-r.num).gcd(r.denom)","Int.from_nat(abs(r.num).gcd(abs(r.denom))) = r.num.gcd(r.denom)","abs(-r.num) = abs(r.num)","Int.from_nat(abs(r.num).gcd(abs(r.denom))) != (-r.num).gcd(r.denom)"]}
{"goal":"neg_is_reduced","proof":["not r.denom > Int.0 or (-r.num).gcd(r.denom) != Int.1 or is_reduced(-r.num, r.denom)","not is_reduced(r.num, r.denom) or r.num.gcd(r.denom) = Int.1","is_reduced(r.num, r.denom)","(-r.num).gcd(r.denom) != Int.1","r.num.gcd(r.denom) != Int.1"]}
{"goal":"neg_num","proof":["Rat.new(-r.num, r.denom) = -r","not is_reduced(-r.num, r.denom) or Rat.new(-r.num, r.denom).num = -r.num","is_reduced(-r.num, r.denom)","Rat.new(-r.num, r.denom).num != -r.num"]}
{"goal":"neg_denom","proof":["Rat.new(-r.num, r.denom) = -r","not is_reduced(-r.num, r.denom) or Rat.new(-r.num, r.denom).denom = r.denom","is_reduced(-r.num, r.denom)","Rat.new(-r.num, r.denom).denom != r.denom"]}
{"goal":"a + Rat.0 = reduce(a.num * Int.1 + Int.0 * a.denom, a.denom * Int.1)","proof":["reduce(a.num * Rat.0.denom + Rat.0.num * a.denom, a.denom * Rat.0.denom) = a + Rat.0","a.num * Int.1 = Int.1 * a.num","Int.1 * a.num + Int.0 * a.denom = Int.0 * a.denom + Int.1 * a.num","Rat.new(Int.0, Int.1) = Rat.from_int(Int.0)","Rat.from_int(Int.0).num = Int.0","Int.1 * a.num = a.num","(Int.0 * a.denom + a.num * Int.1) * Int.1 = Int.0 * a.denom + a.num * Int.1","Int.0 * a.denom = Int.0","a.num * Int.1 + Int.0 = a.num * Int.1"]}
{"goal":"a + Rat.0 = reduce(a.num, a.denom)","proof":["a.denom * Int.1 = Int.1 * a.denom","a.num * Int.1 = Int.1 * a.num","Int.1 * a.denom = a.denom","Int.1 * a.num = a.num","Int.0 * a.denom = Int.0","a.num * Int.1 + Int.0 = a.num * Int.1"]}
{"goal":"add_zero_right","proof":["reduce(a.num, a.denom) = a"]}
{"goal":"add_zero_left","proof":["reduce(Rat.0.num * a.denom + a.num * Rat.0.denom, Rat.0.denom * a.denom) = Rat.0 + a","reduce(a.num * Rat.0.denom + Rat.0.num * a.denom, a.denom * Rat.0.denom) = a + Rat.0","a.num * Rat.0.denom + Rat.0.num * a.denom = Rat.0.num * a.denom + a.num * Rat.0.denom","a + Rat.0 = a","Int.1 * a.denom = a.denom","a.denom * Int.1 = a.denom"]}
{"goal":"add_comm","proof":["reduce(a.num * b.denom + b.num * a.denom, a.denom * b.denom) = a + b","reduce(b.num * a.denom + a.num * b.denom, b.denom * a.denom) = b + a","b.denom * a.denom = a.denom * b.denom","b.num * a.denom + a.num * b.denom = a.num * b.denom + b.num * a.denom"]}
{"goal":"from_int_cancel","proof":["lib(int.int_base).sub_nat(a.pos_part, a.neg_part) = a","lib(int.int_base).sub_nat(b.pos_part, b.neg_part) = b","Rat.from_int(lib(int.int_base).sub_nat(a.pos_part, a.neg_part)).num = lib(int.int_base).sub_nat(a.pos_part, a.neg_part)","Rat.from_int(lib(int.int_base).sub_nat(b.pos_part, b.neg_part)).num = lib(int.int_base).sub_nat(b.pos_part, b.neg_part)"]}
{"goal":"mul_comm","proof":["reduce(a.num * b.num, a.denom * b.denom) = a * b","reduce(b.num * a.num, b.denom * a.denom) = b * a","b.denom * a.denom = a.denom * b.denom","b.num * a.num = a.num * b.num"]}
{"goal":"Rat.1 = Rat.new(Int.1, Int.1)","proof":["Rat.new(Int.1, Int.1) = Rat.from_int(Int.1)","Rat.from_int(Int.1) != Rat.1"]}
{"goal":"Rat.from_int(-Int.1) = Rat.new(-Int.1, Int.1)","proof":["Rat.new(-Int.1, Int.1) = Rat.from_int(-Int.1)"]}
{"goal":"rat_neg_one","proof":["(-Rat.from_int(Int.1)).num = -Rat.from_int(Int.1).num","Rat.new((-Rat.1).num, (-Rat.1).denom) = -Rat.1","(-Rat.1).denom = Rat.1.denom","Rat.new(Int.1, Int.1) = Rat.from_int(Int.1)","Rat.from_int(Int.1).denom = Int.1","Rat.from_int(Int.1).num = Int.1"]}
{"goal":"r * Rat.from_int(-Int.1) = -r","proof":["reduce(r.num * Rat.from_int(-Int.1).num, r.denom * Rat.from_int(-Int.1).denom) = r * Rat.from_int(-Int.1)","r.num * -Int.1 = -(r.num * Int.1)","(-r).num = -r.num","reduce((-r).num, (-r).denom) = -r","(-r).denom = r.denom","Rat.from_int(-Int.1).denom = Int.1","Rat.from_int(-Int.1).num = -Int.1","r.denom * Int.1 = r.denom","r.num * Int.1 = r.num"]}
{"goal":"mul_neg_one_right","proof":[]}
{"goal":"mul_neg_one_left","proof":["r * -Rat.1 = -r","r * -Rat.1 = -Rat.1 * r"]}
{"goal":"r * Rat.from_int(Int.1) = r","proof":["reduce(Rat.from_int(Int.1).num * r.num, Rat.from_int(Int.1).denom * r.denom) = Rat.from_int(Int.1) * r","r * Rat.from_int(Int.1) = Rat.from_int(Int.1) * r","reduce(r.num, r.denom) = r","Rat.from_int(Int.1).denom = Int.1","Rat.from_int(Int.1).num = Int.1","Int.1 * r.denom = r.denom","Int.1 * r.num = r.num"]}
{"goal":"mul_one_right","proof":[]}
{"goal":"mul_one_left","proof":["r * Rat.1 = Rat.1 * r","r * Rat.1 != r","r * Rat.1 = r"]}
{"goal":"mul_int_eq_int_mul","proof":["reduce(Rat.0.num * Rat.from_int(a * b).denom + Rat.from_int(a * b).num * Rat.0.denom, Rat.0.denom * Rat.from_int(a * b).denom) = Rat.0 + Rat.from_int(a * b)","reduce(Rat.from_int(b).num * Rat.from_int(a).num, Rat.from_int(b).denom * Rat.from_int(a).denom) = Rat.from_int(b) * Rat.from_int(a)","Rat.from_int(b) * Rat.from_int(a) = Rat.from_int(a) * Rat.from_int(b)","b * a = a * b","Rat.new(Int.0, Int.1) = Rat.from_int(Int.0)","Rat.0 + Rat.from_int(a * b) = Rat.from_int(a * b)","Rat.from_int(a * b).denom = Int.1","Rat.from_int(a).denom = Int.1","Rat.from_int(b).denom = Int.1","Rat.from_int(Int.0).num = Int.0","Rat.from_int(a * b).num = a * b","Rat.from_int(a).num = a","Rat.from_int(b).num = b","Int.1 * Rat.from_int(a * b).denom = Rat.from_int(a * b).denom","Int.1 * Rat.from_int(a).denom = Rat.from_int(a).denom","Int.0 * Int.1 = Int.0","a * b * Int.1 = a * b","Int.0 + a * b = a * b"]}
{"goal":"cross_equals(r.num, r.denom, a, b)","proof":["cross_equals(reduce(a, b).num, reduce(a, b).denom, a, b) or Int.0 = b","not cross_equals(reduce(a, b).num, r.denom, a, b)","cross_equals(reduce(a, b).num, reduce(a, b).denom, a, b)"]}
{"goal":"r.num * b = a * r.denom","proof":["not cross_equals(r.num, r.denom, a, b) or a * r.denom = r.num * b"]}
{"goal":"r.num.gcd(r.denom) = Int.1","proof":["not is_reduced(r.num, r.denom) or r.num.gcd(r.denom) = Int.1","not is_reduced(r.num, r.denom)","is_reduced(r.num, r.denom)"]}
{"goal":"r.denom.divides(r.num * b)","proof":["a * r.denom != r.num * b or r.denom.divides(r.num * b)"]}
{"goal":"r.denom.divides(b)","proof":["not r.denom.divides(r.num * b) or r.denom.gcd(r.num) != Int.1 or r.denom.divides(b)","r.denom.gcd(r.num) = r.num.gcd(r.denom)","r.denom.gcd(r.num) != Int.1","r.denom.gcd(r.num) = Int.1"]}
{"goal":"exists(k0: Int) { r.denom * k0 = b }","proof":["let s0: (Int, Int) -> Int satisfy { forall(x0: Int, x1: Int) { not x0.divides(x1) or s0(x0, x1) * x0 = x1 } and forall(x2: Int, x3: Int, x4: Int) { x2 * x3 != x4 or x3.divides(x4) } }","r.denom * s0(r.denom, b) != b","not r.denom.divides(b) or s0(r.denom, b) * r.denom = b","s0(r.denom, b) * r.denom = r.denom * s0(r.denom, b)","s0(r.denom, b) * r.denom = b"]}
{"goal":"r.num * b * d = a * r.denom * d","proof":["a * r.denom != r.num * b"]}
{"goal":"r.num * d * b = a * b","proof":["a * (r.denom * d) = a * r.denom * d","d * (r.num * b) = d * r.num * b","d * (r.num * b) = r.num * b * d","d * r.num = r.num * d"]}
{"goal":"r.num * d = a","proof":["r.num * d * b != a * b or Int.0 = b or r.num * d = a"]}
{"goal":"unreduce_right","proof":["reduce(a, b).denom * d != b or reduce(a, b).num * d != a","reduce(a, b).denom * d = b","reduce(a, b).num * d = a","reduce(a, b).num * d != a"]}
{"goal":"exists(k0: Int) { reduce(a, b).num * k0 = a and reduce(a, b).denom * k0 = b }","proof":["let s0: (Int, Int) -> Int satisfy { forall(x0: Int, x1: Int) { reduce(x0, x1).num * s0(x0, x1) = x0 or Int.0 = x1 } and forall(x2: Int, x3: Int) { reduce(x2, x3).denom * s0(x2, x3) = x3 or Int.0 = x3 } }","reduce(a, b).denom * s0(a, b) != b or reduce(a, b).num * s0(a, b) != a","reduce(a, b).denom * s0(a, b) = b or Int.0 = b","reduce(a, b).num * s0(a, b) = a or Int.0 = b","reduce(a, b).num * s0(a, b) = a","reduce(a, b).denom * s0(a, b) = b"]}
{"goal":"d * reduce(a, b).num = a","proof":["d * reduce(a, b).num = reduce(a, b).num * d"]}
{"goal":"d * reduce(a, b).denom = b","proof":["d * reduce(a, b).denom = reduce(a, b).denom * d"]}
{"goal":"unreduce_left","proof":["d * reduce(a, b).denom != b or d * reduce(a, b).num != a","d * reduce(a, b).num != a"]}
{"goal":"mul_int_right","proof":["reduce(Rat.from_int(n).num * r.num, Rat.from_int(n).denom * r.denom) = Rat.from_int(n) * r","r * Rat.from_int(n) = Rat.from_int(n) * r","n * r.num = r.num * n","Rat.from_int(n).denom = Int.1","Rat.from_int(n).num = n","Int.1 * r.denom = r.denom"]}
{"goal":"mul_int_left","proof":["reduce(r.num * n, r.denom) = r * Rat.from_int(n)","r * Rat.from_int(n) = Rat.from_int(n) * r","n * r.num = r.num * n","reduce(r.num * n, r.denom) != Rat.from_int(n) * r"]}
{"goal":"b != Int.0","proof":["cross_equals(a, Int.0, c, d)","not cross_equals(a, Int.0, c, d) or Int.0 != Int.0"]}
{"goal":"d != Int.0","proof":["not cross_equals(a, b, c, d) or Int.0 != d"]}
{"goal":"cross_equals(reduce(a, b).num, rab.denom, a, b)","proof":["cross_equals(reduce(a, b).num, reduce(a, b).denom, a, b) or Int.0 = b","not cross_equals(reduce(a, b).num, reduce(a, b).denom, a, b)"]}
{"goal":"cross_equals(rab.num, rab.denom, a, b)","proof":["not cross_equals(reduce(a, b).num, rab.denom, a, b)"]}
{"goal":"cross_equals(rab.num, rab.denom, c, d)","proof":["not cross_equals(rab.num, rab.denom, a, b) or not cross_equals(a, b, c, d) or cross_equals(rab.num, rab.denom, c, d)","not cross_equals(rab.num, rab.denom, a, b) or not cross_equals(a, b, c, d)"]}
{"goal":"cross_equals(reduce(c, d).num, rcd.denom, c, d)","proof":["cross_equals(reduce(c, d).num, reduce(c, d).denom, c, d) or Int.0 = d","not cross_equals(reduce(c, d).num, reduce(c, d).denom, c, d)"]}
{"goal":"cross_equals(rcd.num, rcd.denom, c, d)","proof":["not cross_equals(reduce(c, d).num, rcd.denom, c, d)"]}
{"goal":"c * rab.denom = rab.num * d","proof":["not cross_equals(rab.num, rab.denom, c, d) or rab.num * d = c * rab.denom"]}
{"goal":"cross_equals(rcd.num, rcd.denom, rab.num, rab.denom)","proof":["not cross_equals(rcd.num, rcd.denom, c, d) or not cross_equals(c, d, rab.num, rab.denom) or cross_equals(rcd.num, rcd.denom, rab.num, rab.denom)","rab.num * d != c * rab.denom or cross_equals(c, d, rab.num, rab.denom) or rab.denom = Int.0 or Int.0 = d","rab.num * d != c * rab.denom or cross_equals(c, d, rab.num, rab.denom) or Int.0 = d or rab.denom = Int.0","rab.denom != Int.0","not cross_equals(rcd.num, rcd.denom, c, d) or not cross_equals(c, d, rab.num, rab.denom)","cross_equals(c, d, rab.num, rab.denom)","not cross_equals(c, d, rab.num, rab.denom)"]}
{"goal":"rab = rcd","proof":["not cross_equals(rcd.num, rcd.denom, rab.num, rab.denom) or rcd = rab"]}
{"goal":"cross_eq_imp_reduce_eq","proof":[]}
{"goal":"cross_equals(reduce(a, b).num, reduce(a, b).denom, a, b)","proof":["cross_equals(reduce(a, b).num, reduce(a, b).denom, a, b) or Int.0 = b"]}
{"goal":"cross_equals(reduce(c, d).num, reduce(c, d).denom, c, d)","proof":["cross_equals(reduce(c, d).num, reduce(c, d).denom, c, d) or Int.0 = d"]}
{"goal":"cross_equals(reduce(a, b).num, reduce(c, d).denom, a, b)","proof":["not cross_equals(reduce(a, b).num, reduce(a, b).denom, a, b)"]}
{"goal":"cross_equals(a, b, reduce(a, b).num, reduce(c, d).denom)","proof":["a * reduce(c, d).denom != reduce(a, b).num * b or cross_equals(a, b, reduce(a, b).num, reduce(c, d).denom) or reduce(c, d).denom = Int.0 or Int.0 = b","a * reduce(c, d).denom != reduce(a, b).num * b or cross_equals(a, b, reduce(a, b).num, reduce(c, d).denom) or Int.0 = b or reduce(c, d).denom = Int.0","not cross_equals(reduce(a, b).num, reduce(c, d).denom, a, b) or a * reduce(c, d).denom = reduce(a, b).num * b","reduce(c, d).denom != Int.0","a * reduce(c, d).denom = reduce(a, b).num * b","a * reduce(c, d).denom != reduce(a, b).num * b"]}
{"goal":"reduce_eq_imp_cross_eq","proof":["not cross_equals(a, b, reduce(a, b).num, reduce(c, d).denom) or not cross_equals(reduce(a, b).num, reduce(c, d).denom, c, d) or cross_equals(a, b, c, d)","cross_equals(reduce(a, b).num, reduce(c, d).denom, c, d)","not cross_equals(reduce(a, b).num, reduce(c, d).denom, c, d) or not cross_equals(a, b, reduce(a, b).num, reduce(c, d).denom)"]}
{"goal":"reduce(a, b) = Rat.0","proof":["reduce(a, Int.0) != Rat.0","Int.0 != Int.0 or reduce(a, Int.0) = Rat.0"]}
{"goal":"reduce(a * c, b) = Rat.0","proof":["Int.0 != b or reduce(a * c, b) = Rat.0"]}
{"goal":"reduce(a, b) * Rat.from_int(c) = reduce(a * c, b)","proof":["reduce(a * c, b) != Rat.0 * Rat.from_int(c)","Rat.0 * Rat.from_int(c) != Rat.0","Rat.from_int(Int.0) * Rat.from_int(c) = Rat.from_int(Int.0 * c)","Rat.new(Int.0, Int.1) = Rat.from_int(Int.0)","Rat.new(b, Int.1) = Rat.from_int(b)","Rat.new(b, Int.1) = Rat.0","Rat.from_int(b) = Rat.0","Int.0 * c = Int.0","Rat.new(Int.0, Int.1) * Rat.from_int(c) != Rat.0","Rat.from_int(Int.0) * Rat.from_int(c) != Rat.0","Rat.from_int(Int.0) = Rat.0","Rat.from_int(Int.0 * c) != Rat.0"]}
{"goal":"r * Rat.from_int(c) = reduce(r.num * c, r.denom)","proof":["reduce(r.num * c, r.denom) = r * Rat.from_int(c)"]}
{"goal":"cross_equals(r.num, r.denom, a, b)","proof":["reduce(r.num, r.denom) != reduce(a, b) or cross_equals(r.num, r.denom, a, b) or r.denom = Int.0 or Int.0 = b","reduce(r.num, r.denom) = r","r.denom != Int.0","reduce(r.num, r.denom) = reduce(a, b)","reduce(r.num, r.denom) != reduce(a, b)"]}
{"goal":"r.num * b = r.denom * a","proof":["not cross_equals(r.num, r.denom, a, b) or r.num * b = a * r.denom","a * r.denom = r.denom * a","r.num * b = a * r.denom","r.num * b != a * r.denom"]}
{"goal":"r.num * c * b = r.denom * (a * c)","proof":["c * (r.num * b) = c * r.num * b","r.denom * (a * c) = r.denom * a * c","c * (r.denom * a) = r.denom * a * c","c * r.num = r.num * c"]}
{"goal":"reduce(r.num * c, r.denom) = reduce(a * c, b)","proof":["r.num * c * b != a * c * r.denom or cross_equals(a * c, b, r.num * c, r.denom) or r.denom = Int.0 or Int.0 = b","r.num * c * b != a * c * r.denom or cross_equals(a * c, b, r.num * c, r.denom) or Int.0 = b or r.denom = Int.0","not cross_equals(a * c, b, r.num * c, r.denom) or reduce(r.num * c, r.denom) = reduce(a * c, b)","r.denom * (a * c) = a * c * r.denom","r.denom != Int.0","r.num * c * b = a * c * r.denom","not cross_equals(a * c, b, r.num * c, r.denom)","cross_equals(a * c, b, r.num * c, r.denom)"]}
{"goal":"reduce(a, b) * Rat.from_int(c) = reduce(a * c, b)","proof":[]}
{"goal":"mul_reduced_int_right","proof":[]}
{"goal":"mul_reduced_int_left","proof":["reduce(a, b) * Rat.from_int(c) = reduce(a * c, b)","Rat.from_int(c) * reduce(a, b) = reduce(a, b) * Rat.from_int(c)","reduce(a, b) * Rat.from_int(c) != reduce(c * a, b)","a * c = c * a"]}
{"goal":"r1 * Rat.from_int(n) = reduce(r1.num * n, r1.denom)","proof":["reduce(r1.num * n, r1.denom) = r1 * Rat.from_int(n)"]}
{"goal":"r2 * Rat.from_int(n) = reduce(r2.num * n, r2.denom)","proof":["reduce(r2.num * n, r2.denom) = r2 * Rat.from_int(n)"]}
{"goal":"reduce(r1.num * n, r1.denom) = reduce(r2.num * n, r2.denom)","proof":[]}
{"goal":"r1.num * n * r2.denom = r1.denom * r2.num * n","proof":["reduce(r2.num * n, r2.denom) != reduce(r1.num * n, r1.denom) or cross_equals(r1.num * n, r1.denom, r2.num * n, r2.denom) or r1.denom = Int.0 or r2.denom = Int.0","not cross_equals(r1.num * n, r1.denom, r2.num * n, r2.denom) or r2.num * n * r1.denom = r1.num * n * r2.denom","r1.denom * (r2.num * n) = r1.denom * r2.num * n","r1.denom * (r2.num * n) = r2.num * n * r1.denom","r1.denom != Int.0","r2.denom != Int.0","r1.denom * (r2.num * n) != r1.num * n * r2.denom","r2.num * n * r1.denom != r1.num * n * r2.denom","cross_equals(r1.num * n, r1.denom, r2.num * n, r2.denom)","not cross_equals(r1.num * n, r1.denom, r2.num * n, r2.denom)"]}
{"goal":"r1.num * r2.denom = r1.denom * r2.num","proof":["r1.num * r2.denom * n != r1.denom * r2.num * n or Int.0 = n or r1.num * r2.denom = r1.denom * r2.num","n * (r1.num * r2.denom) = n * r1.num * r2.denom","n * (r1.num * r2.denom) = r1.num * r2.denom * n","n * r1.num = r1.num * n","r1.num * r2.denom * n != r1.denom * r2.num * n or r1.num * r2.denom = r1.denom * r2.num","r1.num * r2.denom * n != r1.denom * r2.num * n"]}
{"goal":"r1 = r2","proof":["r2.num * r1.denom != r1.num * r2.denom or cross_equals(r2.num, r2.denom, r1.num, r1.denom) or r1.denom = Int.0 or r2.denom = Int.0","r2.num * r1.denom != r1.num * r2.denom or cross_equals(r2.num, r2.denom, r1.num, r1.denom) or r2.denom = Int.0 or r1.denom = Int.0","not cross_equals(r2.num, r2.denom, r1.num, r1.denom) or r2 = r1","r2.num * r1.denom = r1.denom * r2.num","r1.denom != Int.0","r2.denom != Int.0","not cross_equals(r2.num, r2.denom, r1.num, r1.denom)","r2.num * r1.denom = r1.num * r2.denom","r2.num * r1.denom != r1.num * r2.denom"]}
{"goal":"mul_int_right_cancel","proof":[]}
{"goal":"mul_int_left_cancel","proof":["r2 * Rat.from_int(n) != r1 * Rat.from_int(n) or Int.0 = n or r2 = r1","r1 * Rat.from_int(n) = Rat.from_int(n) * r1","r2 * Rat.from_int(n) = Rat.from_int(n) * r2","r2 * Rat.from_int(n) != r1 * Rat.from_int(n) or Int.0 = n","r2 * Rat.from_int(n) != r1 * Rat.from_int(n)"]}
{"goal":"exists(k0: Int) { reduce(a, b).num * k0 = a and reduce(a, b).denom * k0 = b }","proof":["let s0: (Int, Int) -> Int satisfy { forall(x0: Int, x1: Int) { reduce(x0, x1).num * s0(x0, x1) = x0 or Int.0 = x1 } and forall(x2: Int, x3: Int) { reduce(x2, x3).denom * s0(x2, x3) = x3 or Int.0 = x3 } }","reduce(a, b).denom * s0(a, b) != b or reduce(a, b).num * s0(a, b) != a","reduce(a, b).denom * s0(a, b) = b or Int.0 = b","reduce(a, b).num * s0(a, b) = a or Int.0 = b","reduce(a, b).num * s0(a, b) = a","reduce(a, b).denom * s0(a, b) = b"]}
{"goal":"e != Int.0","proof":["reduce(a, b).denom * Int.0 = Int.0","reduce(a, b).denom * Int.0 = b"]}
{"goal":"exists(k0: Int) { reduce(c, d).num * k0 = c and reduce(c, d).denom * k0 = d }","proof":["let s0: (Int, Int) -> Int satisfy { forall(x0: Int, x1: Int) { reduce(x0, x1).num * s0(x0, x1) = x0 or Int.0 = x1 } and forall(x2: Int, x3: Int) { reduce(x2, x3).denom * s0(x2, x3) = x3 or Int.0 = x3 } }","reduce(c, d).denom * s0(c, d) != d or reduce(c, d).num * s0(c, d) != c","reduce(c, d).denom * s0(c, d) = d or Int.0 = d","reduce(c, d).num * s0(c, d) = c or Int.0 = d","reduce(c, d).num * s0(c, d) = c","reduce(c, d).denom * s0(c, d) = d"]}
{"goal":"f != Int.0","proof":["reduce(c, d).denom * Int.0 = d","reduce(c, d).denom * Int.0 = Int.0 * reduce(c, d).denom","Int.0 * reduce(c, d).denom = d","Int.0 * reduce(c, d).denom = Int.0"]}
{"goal":"reduce(a, b).num * e * (reduce(c, d).num * f) = a * c","proof":[]}
{"goal":"reduce(a, b).num * e * reduce(c, d).num * f = a * c","proof":["reduce(a, b).num * e * (reduce(c, d).num * f) = reduce(a, b).num * e * reduce(c, d).num * f"]}
{"goal":"reduce(a, b).num * reduce(c, d).num * e * f = a * c","proof":["reduce(c, d).num * (reduce(a, b).num * e) = reduce(c, d).num * reduce(a, b).num * e","f * (reduce(a, b).num * e * reduce(c, d).num) = reduce(a, b).num * e * reduce(c, d).num * f","f * (reduce(a, b).num * reduce(c, d).num * e) = reduce(a, b).num * reduce(c, d).num * e * f","reduce(c, d).num * (reduce(a, b).num * e) = reduce(a, b).num * e * reduce(c, d).num","reduce(c, d).num * reduce(a, b).num = reduce(a, b).num * reduce(c, d).num"]}
{"goal":"reduce(a, b).num * reduce(c, d).num * (e * f) = a * c","proof":["reduce(a, b).num * reduce(c, d).num * (e * f) = reduce(a, b).num * reduce(c, d).num * e * f"]}
{"goal":"nums * (e * f) = a * c","proof":["reduce(a, b).num * reduce(c, d).num * (e * f) != a * c"]}
{"goal":"reduce(a, b).denom * e * (reduce(c, d).denom * f) = b * d","proof":[]}
{"goal":"reduce(a, b).denom * reduce(c, d).denom * e * f = b * d","proof":["reduce(a, b).denom * e * (reduce(c, d).denom * f) = reduce(a, b).denom * e * reduce(c, d).denom * f","reduce(c, d).denom * (reduce(a, b).denom * e) = reduce(c, d).denom * reduce(a, b).denom * e","f * (reduce(a, b).denom * e * reduce(c, d).denom) = reduce(a, b).denom * e * reduce(c, d).denom * f","f * (reduce(a, b).denom * reduce(c, d).denom * e) = reduce(a, b).denom * reduce(c, d).denom * e * f","reduce(c, d).denom * (reduce(a, b).denom * e) = reduce(a, b).denom * e * reduce(c, d).denom","reduce(c, d).denom * reduce(a, b).denom = reduce(a, b).denom * reduce(c, d).denom"]}
{"goal":"reduce(a, b).denom * reduce(c, d).denom * (e * f) = b * d","proof":["reduce(a, b).denom * reduce(c, d).denom * (e * f) = reduce(a, b).denom * reduce(c, d).denom * e * f"]}
{"goal":"denoms * (e * f) = b * d","proof":["reduce(a, b).denom * reduce(c, d).denom * (e * f) != b * d"]}
{"goal":"nums * (b * d) = denoms * (a * c)","proof":["denoms * (nums * (e * f)) = denoms * nums * (e * f)","nums * (denoms * (e * f)) = nums * denoms * (e * f)","denoms * nums = nums * denoms"]}
{"goal":"reduce(a, b).denom * reduce(c, d).denom != Int.0","proof":["Int.0 * (e * f) = b * d","b * d != Int.0 or Int.0 = b or Int.0 = d","Int.0 * (e * f) = Int.0","b * d = Int.0"]}
{"goal":"denoms != Int.0","proof":["reduce(a, b).denom * reduce(c, d).denom != denoms"]}
{"goal":"cross_equals(nums, denoms, a * c, b * d)","proof":["a * c * denoms != nums * (b * d) or cross_equals(nums, denoms, a * c, b * d) or b * d = Int.0 or denoms = Int.0","a * c * denoms != nums * (b * d) or cross_equals(nums, denoms, a * c, b * d) or denoms = Int.0 or b * d = Int.0","b * d != Int.0 or Int.0 = b or Int.0 = d","denoms * (a * c) = a * c * denoms","a * c * denoms = nums * (b * d)","b * d = Int.0"]}
{"goal":"cross_equals(reduce(a, b).num * reduce(c, d).num, reduce(a, b).denom * reduce(c, d).denom, a * c, b * d)","proof":[]}
{"goal":"mul_reduced_nondegen","proof":["reduce(reduce(a, b).num * reduce(c, d).num, reduce(a, b).denom * reduce(c, d).denom) = reduce(a, b) * reduce(c, d)","not cross_equals(reduce(a, b).num * reduce(c, d).num, reduce(a, b).denom * reduce(c, d).denom, a * c, b * d) or reduce(reduce(a, b).num * reduce(c, d).num, reduce(a, b).denom * reduce(c, d).denom) = reduce(a * c, b * d)","reduce(reduce(a, b).num * reduce(c, d).num, reduce(a, b).denom * reduce(c, d).denom) != reduce(a * c, b * d)","reduce(reduce(a, b).num * reduce(c, d).num, reduce(a, b).denom * reduce(c, d).denom) = reduce(a * c, b * d)"]}
{"goal":"reduce(Int.0, a) = Rat.0","proof":["reduce(Int.0, Int.0) != Rat.0","Int.0 != Int.0 or reduce(Int.0, Int.0) = Rat.0"]}
{"goal":"Rat.0 = reduce(Int.0, Int.1)","proof":["reduce(Rat.from_int(Int.0).num, Rat.from_int(Int.0).denom) = Rat.from_int(Int.0)","Rat.new(Int.0, Int.1) = Rat.from_int(Int.0)","Rat.from_int(Int.0).num = Int.0"]}
{"goal":"cross_equals(Int.0, a, Int.0, Int.1)","proof":["Int.0 * Int.1 != Int.0 * a or cross_equals(Int.0, a, Int.0, Int.1) or Int.0 = Int.1 or Int.0 = a","Int.0 * Int.1 != Int.0 * a or cross_equals(Int.0, a, Int.0, Int.1) or Int.0 = a or Int.0 = Int.1","Int.0 * Int.1 = Int.0","Int.0 * a = Int.0","Int.0 * Int.1 != Int.0 * a"]}
{"goal":"reduce(Int.0, a) = reduce(Int.0, Int.1)","proof":["not cross_equals(Int.0, a, Int.0, Int.1) or reduce(Int.0, Int.1) = reduce(Int.0, a)"]}
{"goal":"reduce(Int.0, a) = Rat.0","proof":["reduce(Int.0, Int.1) != reduce(Int.0, a)"]}
{"goal":"reduce_zero_num","proof":[]}
{"goal":"r * Rat.0 = reduce(r.num * Int.0, r.denom)","proof":["reduce(r.num * Int.0, r.denom) = r * Rat.from_int(Int.0)","r * Rat.from_int(Int.0) != r * Rat.0","Rat.from_int(Int.0) != Rat.0","Rat.new(Int.0, Int.1) = Rat.from_int(Int.0)","Rat.new(Int.0, Int.1) != Rat.0"]}
{"goal":"r * Rat.0 = reduce(Int.0, r.denom)","proof":["r.num * Int.0 = Int.0"]}
{"goal":"mul_zero_right","proof":["reduce(Int.0, r.denom) != Rat.0","reduce(Int.0, r.denom) = Rat.0"]}
{"goal":"reduce(c, Int.0) = Rat.0","proof":["Int.0 != Int.0 or reduce(c, Int.0) = Rat.0"]}
{"goal":"reduce(a, b) * Rat.0 = Rat.0","proof":["reduce(a, b) * Rat.0 = Rat.0"]}
{"goal":"reduce(a * c, b * Int.0) = Rat.0","proof":["Int.0 * b != Int.0 or reduce(a * c, Int.0 * b) = Rat.0","b * Int.0 = Int.0 * b","reduce(a * c, Int.0 * b) != Rat.0","Int.0 * b != Int.0","Int.0 * b = Int.0"]}
{"goal":"mul_reduced_degen","proof":[]}
{"goal":"reduce(a, Int.0) * reduce(c, d) = reduce(a * c, Int.0 * d)","proof":["Rat.0 * reduce(c, d) = reduce(c, d) * Rat.0","Int.0 != Int.0 or reduce(a * c, Int.0) = Rat.0","Int.0 != Int.0 or reduce(a, Int.0) = Rat.0","reduce(c, d) * Rat.0 = Rat.0","Int.0 * d = Int.0","reduce(a, Int.0) * reduce(c, d) != reduce(a * c, Int.0)","reduce(a * c, Int.0) = Rat.0","reduce(a, Int.0) = Rat.0","reduce(a, Int.0) * reduce(c, d) != Rat.0","Rat.0 * reduce(c, d) != Rat.0"]}
{"goal":"reduce(a, b) * reduce(c, d) = reduce(a * c, b * d)","proof":[]}
{"goal":"d = Int.0","proof":[]}
{"goal":"reduce(a, b) * reduce(c, Int.0) = reduce(a * c, b * Int.0)","proof":["reduce(a, b) * reduce(c, Int.0) = reduce(a * c, b * Int.0)"]}
{"goal":"reduce(a, b) * reduce(c, d) = reduce(a * c, b * d)","proof":[]}
{"goal":"reduce(a, b) * reduce(c, d) = reduce(a * c, b * d)","proof":["reduce(a, b) * reduce(c, d) = reduce(a * c, b * d) or Int.0 = b or Int.0 = d"]}
{"goal":"mul_reduced","proof":[]}
{"goal":"a * b * c = reduce(a.num * b.num * c.num, a.denom * b.denom * c.denom)","proof":["reduce(a.num * b.num, a.denom * b.denom) * reduce(c.num, c.denom) = reduce(a.num * b.num * c.num, a.denom * b.denom * c.denom)","reduce(a.num * b.num, a.denom * b.denom) = a * b","reduce(c.num, c.denom) = c"]}
{"goal":"a * (b * c) = reduce(a.num * (b.num * c.num), a.denom * (b.denom * c.denom))","proof":["reduce(a.num, a.denom) * reduce(b.num * c.num, b.denom * c.denom) = reduce(a.num * (b.num * c.num), a.denom * (b.denom * c.denom))","reduce(b.num * c.num, b.denom * c.denom) = b * c","reduce(a.num, a.denom) = a"]}
{"goal":"mul_assoc","proof":["a.denom * (b.denom * c.denom) = a.denom * b.denom * c.denom","a.num * (b.num * c.num) = a.num * b.num * c.num"]}
{"goal":"add_int_eq_int_add","proof":["reduce(Rat.0.num * Rat.from_int(a + b).denom + Rat.from_int(a + b).num * Rat.0.denom, Rat.0.denom * Rat.from_int(a + b).denom) = Rat.0 + Rat.from_int(a + b)","reduce(Rat.from_int(b).num * Rat.from_int(a).denom + Rat.from_int(a).num * Rat.from_int(b).denom, Rat.from_int(b).denom * Rat.from_int(a).denom) = Rat.from_int(b) + Rat.from_int(a)","Rat.from_int(b) + Rat.from_int(a) = Rat.from_int(a) + Rat.from_int(b)","b + a = a + b","Rat.new(Int.0, Int.1) = Rat.from_int(Int.0)","Rat.0 + Rat.from_int(a + b) = Rat.from_int(a + b)","Rat.from_int(a + b).denom = Int.1","Rat.from_int(a).denom = Int.1","Rat.from_int(b).denom = Int.1","Rat.from_int(Int.0).num = Int.0","Rat.from_int(a + b).num = a + b","Rat.from_int(a).num = a","Rat.from_int(b).num = b","Int.1 * Rat.from_int(a + b).denom = Rat.from_int(a + b).denom","Int.1 * Rat.from_int(a).denom = Rat.from_int(a).denom","(a + b) * Int.1 = a + b","Int.0 * Int.1 = Int.0","a * Int.1 = a","b * Int.1 = b","Int.0 + (a + b) = a + b"]}
{"goal":"reduce(a, b) = Rat.0","proof":["Int.0 != b or reduce(a, b) = Rat.0"]}
{"goal":"b * c = Int.0","proof":["Int.0 * c != Int.0","Int.0 * c = Int.0"]}
{"goal":"reduce(a * c, b * c) = Rat.0","proof":["b * c != Int.0 or reduce(a * c, b * c) = Rat.0"]}
{"goal":"reduce(a, b) = reduce(a * c, b * c)","proof":["reduce(a * c, b * c) != Rat.0"]}
{"goal":"cross_equals(a, b, a * c, b * c)","proof":["a * (c * b) != a * c * b or cross_equals(a, b, a * c, c * b) or c * b = Int.0 or Int.0 = b","a * (c * b) != a * c * b or cross_equals(a, b, a * c, c * b) or Int.0 = b or c * b = Int.0","a * (c * b) = a * c * b","c * b != Int.0 or Int.0 = c or Int.0 = b","b * c = c * b","not cross_equals(a, b, a * c, c * b)","c * b = Int.0"]}
{"goal":"reduce(a, b) = reduce(a * c, b * c)","proof":["not cross_equals(a, b, a * c, b * c) or reduce(a * c, b * c) = reduce(a, b)"]}
{"goal":"reduce_cancels_right","proof":[]}
{"goal":"reduce_cancels_left","proof":["reduce(--a * c, b * c) = reduce(--a, b) or Int.0 = c","a * c = c * a","b * c = c * b","--a = a","reduce(--a * c, b * c) = reduce(--a, b)"]}
{"goal":"exists(k0: Int) { reduce(a, b).num * k0 = a and reduce(a, b).denom * k0 = b }","proof":["let s0: (Int, Int) -> Int satisfy { forall(x0: Int, x1: Int) { reduce(x0, x1).num * s0(x0, x1) = x0 or Int.0 = x1 } and forall(x2: Int, x3: Int) { reduce(x2, x3).denom * s0(x2, x3) = x3 or Int.0 = x3 } }","reduce(a, b).denom * s0(a, b) != b or reduce(a, b).num * s0(a, b) != a","reduce(a, b).denom * s0(a, b) = b or Int.0 = b","reduce(a, b).num * s0(a, b) = a or Int.0 = b","reduce(a, b).num * s0(a, b) = a","reduce(a, b).denom * s0(a, b) = b"]}
{"goal":"c != Int.0","proof":["reduce(a, b).denom * Int.0 = Int.0","reduce(a, b).denom * Int.0 = b"]}
{"goal":"r + reduce(a, b) = reduce(r.num * reduce(a, b).denom + r.denom * reduce(a, b).num, reduce(a, b).denom * r.denom)","proof":["reduce(r.num * reduce(a, b).denom + reduce(a, b).num * r.denom, r.denom * reduce(a, b).denom) = r + reduce(a, b)","r.denom * reduce(a, b).denom = reduce(a, b).denom * r.denom","r.denom * reduce(a, b).num = reduce(a, b).num * r.denom"]}
{"goal":"reduce(x0 * c, x1 * c) = reduce(x0, x1)","proof":["reduce(x0 * c, x1 * c) = reduce(x0, x1) or Int.0 = c"]}
{"goal":"r + reduce(a, b) = reduce((r.num * reduce(a, b).denom + r.denom * reduce(a, b).num) * c, reduce(a, b).denom * r.denom * c)","proof":["reduce((r.num * reduce(a, b).denom + r.denom * reduce(a, b).num) * c, reduce(a, b).denom * r.denom * c) = reduce(r.num * reduce(a, b).denom + r.denom * reduce(a, b).num, reduce(a, b).denom * r.denom)","reduce(r.num * reduce(a, b).denom + r.denom * reduce(a, b).num, reduce(a, b).denom * r.denom) != r + reduce(a, b)"]}
{"goal":"r + reduce(a, b) = reduce(r.num * reduce(a, b).denom * c + r.denom * reduce(a, b).num * c, reduce(a, b).denom * r.denom * c)","proof":["r.num * reduce(a, b).denom * c + r.denom * reduce(a, b).num * c = (r.num * reduce(a, b).denom + r.denom * reduce(a, b).num) * c"]}
{"goal":"r + reduce(a, b) = reduce(r.num * b + a * r.denom, r.denom * b)","proof":["lib(int.int_base).sub_nat((r.num * b).pos_part + (a * r.denom).pos_part, (r.num * b).neg_part + (a * r.denom).neg_part) = r.num * b + a * r.denom","lib(int.int_base).sub_nat((r.num * reduce(a, b).denom * c).pos_part + (r.denom * reduce(a, b).num * c).pos_part, (r.num * reduce(a, b).denom * c).neg_part + (r.denom * reduce(a, b).num * c).neg_part) = r.num * reduce(a, b).denom * c + r.denom * reduce(a, b).num * c","r.denom * (reduce(a, b).denom * c) = r.denom * reduce(a, b).denom * c","r.denom * (reduce(a, b).num * c) = r.denom * reduce(a, b).num * c","r.num * (reduce(a, b).denom * c) = r.num * reduce(a, b).denom * c","a * r.denom = r.denom * a","r.denom * reduce(a, b).denom = reduce(a, b).denom * r.denom"]}
{"goal":"add_reduce_right","proof":[]}
{"goal":"reduce(a, b) + reduce(c, d) = reduce(reduce(a, b).num * d + c * reduce(a, b).denom, reduce(a, b).denom * d)","proof":["reduce(reduce(a, b).num * d + c * reduce(a, b).denom, reduce(a, b).denom * d) = reduce(a, b) + reduce(c, d) or Int.0 = d"]}
{"goal":"exists(k0: Int) { reduce(a, b).num * k0 = a and reduce(a, b).denom * k0 = b }","proof":["let s0: (Int, Int) -> Int satisfy { forall(x0: Int, x1: Int) { reduce(x0, x1).num * s0(x0, x1) = x0 or Int.0 = x1 } and forall(x2: Int, x3: Int) { reduce(x2, x3).denom * s0(x2, x3) = x3 or Int.0 = x3 } }","reduce(a, b).denom * s0(a, b) != b or reduce(a, b).num * s0(a, b) != a","reduce(a, b).denom * s0(a, b) = b or Int.0 = b","reduce(a, b).num * s0(a, b) = a or Int.0 = b","reduce(a, b).num * s0(a, b) = a","reduce(a, b).denom * s0(a, b) = b"]}
{"goal":"e != Int.0","proof":["reduce(a, b).denom * Int.0 = Int.0","reduce(a, b).denom * Int.0 = b"]}
{"goal":"reduce(reduce(a, b).num * d + c * reduce(a, b).denom, reduce(a, b).denom * d) = reduce((reduce(a, b).num * d + c * reduce(a, b).denom) * e, reduce(a, b).denom * d * e)","proof":["reduce((reduce(a, b).num * d + c * reduce(a, b).denom) * e, reduce(a, b).denom * d * e) = reduce(reduce(a, b).num * d + c * reduce(a, b).denom, reduce(a, b).denom * d) or Int.0 = e"]}
{"goal":"reduce(a, b) + reduce(c, d) = reduce((reduce(a, b).num * d + c * reduce(a, b).denom) * e, reduce(a, b).denom * d * e)","proof":["reduce((reduce(a, b).num * d + c * reduce(a, b).denom) * e, reduce(a, b).denom * d * e) != reduce(reduce(a, b).num * d + c * reduce(a, b).denom, reduce(a, b).denom * d)"]}
{"goal":"reduce(a, b) + reduce(c, d) = reduce(reduce(a, b).num * d * e + c * reduce(a, b).denom * e, reduce(a, b).denom * d * e)","proof":["reduce(a, b).num * d * e + c * reduce(a, b).denom * e = (reduce(a, b).num * d + c * reduce(a, b).denom) * e"]}
{"goal":"reduce(a, b) + reduce(c, d) = reduce(reduce(a, b).num * e * d + reduce(a, b).denom * e * c, reduce(a, b).denom * e * d)","proof":["reduce(a, b).num * d * e + c * reduce(a, b).denom * e = (reduce(a, b).num * d + c * reduce(a, b).denom) * e","c * (reduce(a, b).denom * e) = c * reduce(a, b).denom * e","reduce(a, b).denom * (d * e) = reduce(a, b).denom * d * e","reduce(a, b).denom * (e * d) = reduce(a, b).denom * e * d","reduce(a, b).num * (d * e) = reduce(a, b).num * d * e","reduce(a, b).num * (e * d) = reduce(a, b).num * e * d","c * (reduce(a, b).denom * e) = reduce(a, b).denom * e * c","e * d = d * e","c * reduce(a, b).denom * e + reduce(a, b).num * d * e = reduce(a, b).num * d * e + c * reduce(a, b).denom * e","reduce(a, b).denom * e * c + reduce(a, b).num * e * d = reduce(a, b).num * e * d + reduce(a, b).denom * e * c"]}
{"goal":"add_reduced","proof":[]}
{"goal":"reduce(a, c) = Rat.0","proof":["Int.0 != c or reduce(a, c) = Rat.0"]}
{"goal":"reduce(b, c) = Rat.0","proof":["Int.0 != c or reduce(b, c) = Rat.0"]}
{"goal":"reduce(a + b, c) = Rat.0","proof":["Int.0 != c or reduce(a + b, c) = Rat.0"]}
{"goal":"reduce(a, c) + reduce(b, c) = reduce(a + b, c)","proof":["reduce(a, c) + Rat.0 != reduce(a + b, c)","reduce(a, c) + Rat.0 != Rat.0","Rat.0 + Rat.0 != Rat.0","Rat.0 + Rat.0 = Rat.0"]}
{"goal":"reduce(a, c) + reduce(b, c) = reduce(a * c + b * c, c * c)","proof":["reduce(a * c + c * b, c * c) = reduce(a, c) + reduce(b, c) or Int.0 = c or Int.0 = c","b * c = c * b","reduce(a * c + c * b, c * c) != reduce(a, c) + reduce(b, c)"]}
{"goal":"reduce(a, c) + reduce(b, c) = reduce((a + b) * c, c * c)","proof":["a * c + b * c = (a + b) * c"]}
{"goal":"reduce(a, c) + reduce(b, c) = reduce(a + b, c)","proof":["reduce((a + b) * c, c * c) = reduce(a + b, c) or Int.0 = c","reduce((a + b) * c, c * c) = reduce(a + b, c)"]}
{"goal":"add_reduced_same_denom","proof":[]}
{"goal":"a = reduce(a.num, a.denom)","proof":["reduce(a.num, a.denom) = a"]}
{"goal":"b.denom * c.denom != Int.0","proof":["b.denom * c.denom != Int.0 or b.denom = Int.0 or c.denom = Int.0","c.denom = Int.0 or b.denom = Int.0","b.denom != Int.0","c.denom != Int.0"]}
{"goal":"a = reduce(a.num * (b.denom * c.denom), a.denom * (b.denom * c.denom))","proof":["reduce(a.num * (b.denom * c.denom), a.denom * (b.denom * c.denom)) = reduce(a.num, a.denom) or b.denom * c.denom = Int.0","reduce(a.num, a.denom) = a","reduce(a.num * (b.denom * c.denom), a.denom * (b.denom * c.denom)) != reduce(a.num, a.denom)"]}
{"goal":"a = reduce(an, d)","proof":["a.denom * (b.denom * c.denom) = a.denom * b.denom * c.denom"]}
{"goal":"b = reduce(b.num, b.denom)","proof":["reduce(b.num, b.denom) = b"]}
{"goal":"a.denom * c.denom != Int.0","proof":["a.denom * c.denom != Int.0 or a.denom = Int.0 or c.denom = Int.0","c.denom = Int.0 or a.denom = Int.0","a.denom != Int.0","c.denom != Int.0"]}
{"goal":"b = reduce(b.num * (a.denom * c.denom), b.denom * (a.denom * c.denom))","proof":["reduce(b.num * (a.denom * c.denom), b.denom * (a.denom * c.denom)) = reduce(b.num, b.denom) or a.denom * c.denom = Int.0","reduce(b.num, b.denom) = b","reduce(b.num * (a.denom * c.denom), b.denom * (a.denom * c.denom)) != reduce(b.num, b.denom)"]}
{"goal":"b = reduce(bn, d)","proof":["b.denom * (a.denom * c.denom) = b.denom * a.denom * c.denom","b.denom * a.denom = a.denom * b.denom"]}
{"goal":"c = reduce(c.num, c.denom)","proof":["reduce(c.num, c.denom) = c"]}
{"goal":"a.denom * b.denom != Int.0","proof":["a.denom * b.denom != Int.0 or a.denom = Int.0 or b.denom = Int.0","b.denom = Int.0 or a.denom = Int.0","a.denom != Int.0","b.denom != Int.0"]}
{"goal":"c = reduce(c.num * (a.denom * b.denom), c.denom * (a.denom * b.denom))","proof":["reduce(c.num * (a.denom * b.denom), c.denom * (a.denom * b.denom)) = reduce(c.num, c.denom) or a.denom * b.denom = Int.0","reduce(c.num, c.denom) = c","reduce(c.num * (a.denom * b.denom), c.denom * (a.denom * b.denom)) != reduce(c.num, c.denom)"]}
{"goal":"c = reduce(cn, d)","proof":["c.denom * (a.denom * b.denom) = a.denom * b.denom * c.denom"]}
{"goal":"a + b + c = reduce(an, d) + reduce(bn, d) + reduce(cn, d)","proof":[]}
{"goal":"a + b + c = reduce(an + bn, d) + reduce(cn, d)","proof":["reduce(an, d) + reduce(bn, d) = reduce(an + bn, d)"]}
{"goal":"a + b + c = reduce(an + bn + cn, d)","proof":["reduce(an + bn, d) + reduce(cn, d) = reduce(an + bn + cn, d)"]}
{"goal":"a + b + c = reduce(an + (bn + cn), d)","proof":["an + (bn + cn) = an + bn + cn"]}
{"goal":"a + b + c = reduce(an, d) + reduce(bn + cn, d)","proof":["reduce(an, d) + reduce(bn + cn, d) = reduce(an + (bn + cn), d)"]}
{"goal":"a + b + c = reduce(an, d) + (reduce(bn, d) + reduce(cn, d))","proof":["reduce(bn, d) + reduce(cn, d) = reduce(bn + cn, d)"]}
{"goal":"a + b + c = a + (b + c)","proof":[]}
{"goal":"add_assoc","proof":[]}
{"goal":"d != Int.0","proof":["r1.denom * r2.denom != Int.0 or r1.denom = Int.0 or r2.denom = Int.0","r1.denom * r2.denom = Int.0","r1.denom != Int.0","r2.denom != Int.0"]}
{"goal":"r1 = reduce(r1.num * r2.denom, r1.denom * r2.denom)","proof":["reduce(r1.num * r2.denom, r1.denom * r2.denom) = reduce(r1.num, r1.denom) or r2.denom = Int.0","reduce(r1.num, r1.denom) = r1","r2.denom != Int.0","reduce(r1.num * r2.denom, r1.denom * r2.denom) != reduce(r1.num, r1.denom)"]}
{"goal":"r1 = reduce(n1, d)","proof":[]}
{"goal":"r2 = reduce(r2.num * r1.denom, r2.denom * r1.denom)","proof":["reduce(r2.num * r1.denom, r2.denom * r1.denom) = reduce(r2.num, r2.denom) or r1.denom = Int.0","reduce(r2.num, r2.denom) = r2","r1.denom != Int.0","reduce(r2.num * r1.denom, r2.denom * r1.denom) != reduce(r2.num, r2.denom)"]}
{"goal":"r2 = reduce(n2, d)","proof":["r2.denom * r1.denom = r1.denom * r2.denom"]}
{"goal":"common_denom","proof":["reduce(n1, d) != r1 or reduce(n2, d) != r2","reduce(n2, d) != r2"]}
{"goal":"exists(k0: Int, k1: Int, k2: Int) { r2 = reduce(k0, k2) and r3 = reduce(k1, k2) }","proof":["let (s0: (Rat, Rat) -> Int, s1: (Rat, Rat) -> Int, s2: (Rat, Rat) -> Int) satisfy { forall(x0: Rat, x1: Rat) { reduce(s0(x0, x1), s2(x0, x1)) = x0 } and forall(x2: Rat, x3: Rat) { reduce(s1(x2, x3), s2(x2, x3)) = x3 } }","reduce(s1(r3, r2), s2(r3, r2)) != r2 or reduce(s0(r3, r2), s2(r3, r2)) != r3","reduce(s1(r3, r2), s2(r3, r2)) = r2","reduce(s0(r3, r2), s2(r3, r2)) = r3","reduce(s1(r3, r2), s2(r3, r2)) != r2"]}
{"goal":"r2 + r3 = reduce(a + b, c)","proof":["reduce(a, c) + reduce(b, c) = reduce(a + b, c)"]}
{"goal":"r1 * (r2 + r3) = r1 * reduce(a + b, c)","proof":["reduce(a + b, c) != r2 + r3"]}
{"goal":"r1 * (r2 + r3) = reduce(r1.num * (a + b), r1.denom * c)","proof":["reduce(r1.num, r1.denom) * reduce(a + b, c) = reduce(r1.num * (a + b), r1.denom * c)","reduce(r1.num, r1.denom) = r1"]}
{"goal":"r1 * (r2 + r3) = reduce(r1.num * a + r1.num * b, r1.denom * c)","proof":["r1.num * a + r1.num * b = r1.num * (a + b)"]}
{"goal":"r1 * r2 = reduce(r1.num * a, r1.denom * c)","proof":["reduce(r1.num, r1.denom) * reduce(a, c) = reduce(r1.num * a, r1.denom * c)","reduce(r1.num, r1.denom) = r1"]}
{"goal":"r1 * r3 = reduce(r1.num * b, r1.denom * c)","proof":["reduce(r1.num, r1.denom) * reduce(b, c) = reduce(r1.num * b, r1.denom * c)","reduce(r1.num, r1.denom) = r1"]}
{"goal":"r1 * r2 + r1 * r3 = reduce(r1.num * a + r1.num * b, r1.denom * c)","proof":["reduce(r1.num * a, r1.denom * c) + reduce(r1.num * b, r1.denom * c) = reduce(r1.num * a + r1.num * b, r1.denom * c)"]}
{"goal":"distrib_left","proof":["reduce(r1.num * a + r1.num * b, r1.denom * c) != r1 * r2 + r1 * r3"]}
{"goal":"distrib_right","proof":["r3 * r1 + r3 * r2 = r3 * (r1 + r2)","r3 * (r1 + r2) = (r1 + r2) * r3","r3 * r1 = r1 * r3","r3 * r2 = r2 * r3"]}
{"goal":"a + -a = reduce(a.num * a.denom + -a.num * a.denom, a.denom * a.denom)","proof":["reduce((-a).num * a.denom + a.num * (-a).denom, (-a).denom * a.denom) = -a + a","-a.num * a.denom = -(a.num * a.denom)","a + -a = -a + a","(-a).num = -a.num","a.num * a.denom + -(a.num * a.denom) = -(a.num * a.denom) + a.num * a.denom","(-a).denom = a.denom"]}
{"goal":"a + -a = reduce(a.num * a.denom - a.num * a.denom, a.denom * a.denom)","proof":["-a.num * a.denom = -(a.num * a.denom)","a.num * a.denom + -(a.num * a.denom) = a.num * a.denom - a.num * a.denom"]}
{"goal":"a + -a = reduce(Int.0, a.denom * a.denom)","proof":["a.num * a.denom - a.num * a.denom = Int.0"]}
{"goal":"a + -a = Rat.0","proof":["reduce(Int.0, a.denom * a.denom) = Rat.0"]}
{"goal":"add_inv_cancels_right","proof":[]}
{"goal":"add_inv_cancels_left","proof":["a + -a = -a + a","a + -a != Rat.0","a + -a = Rat.0"]}
{"goal":"forall(x0: Rat, x1: Rat, x2: Rat) { x0 + (x1 + x2) = x0 + x1 + x2 }","proof":["let (s0: Rat, s1: Rat, s2: Rat) satisfy { s0 + (s1 + s2) != s0 + s1 + s2 }","s0 + (s1 + s2) = s0 + s1 + s2"]}
{"goal":"forall(x0: Rat, x1: Rat) { AddSemigroup.add[Rat](x0, x1) = AddSemigroup.add[Rat](x1, x0) }","proof":["let (s0: Rat, s1: Rat) satisfy { s1 + s0 != s0 + s1 }","s1 + s0 = s0 + s1"]}
{"goal":"forall(x0: Rat) { AddSemigroup.add[Rat](Rat.0, x0) = x0 } and forall(x1: Rat) { AddSemigroup.add[Rat](x1, Rat.0) = x1 }","proof":["let (s0: Rat, s1: Rat) satisfy { s1 + Rat.0 != s1 or Rat.0 + s0 != s0 }","s1 + Rat.0 = Rat.0 + s1","Rat.0 + s0 = s0","Rat.0 + s1 = s1","s1 + Rat.0 != s1"]}
{"goal":"forall(x0: Rat) { AddSemigroup.add[Rat](x0, -x0) = add_monoid.AddMonoid.0[Rat] }","proof":["let s0: Rat satisfy { s0 + -s0 != Rat.0 }","s0 + -s0 = -s0 + s0","-s0 + s0 != Rat.0","-s0 + s0 = Rat.0"]}
{"goal":"sub_self","proof":["a + -a = a - a","a + -a != Rat.0","a + -a = Rat.0"]}
{"goal":"reduce_one_one","proof":["reduce(Rat.from_int(Int.1).num, Rat.from_int(Int.1).denom) = Rat.from_int(Int.1)","Rat.from_int(Int.1).denom = Int.1","Rat.from_int(Int.1).num = Int.1"]}
{"goal":"Rat.1 = Rat.new(Int.1, Int.1)","proof":["Rat.new(Int.1, Int.1) = Rat.from_int(Int.1)","Rat.from_int(Int.1) != Rat.1"]}
{"goal":"cross_equals(Int.1, Int.1, n, n)","proof":["n * Int.1 != Int.1 * n or cross_equals(Int.1, Int.1, n, n) or Int.0 = n or Int.0 = Int.1","n * Int.1 != Int.1 * n or cross_equals(Int.1, Int.1, n, n) or Int.0 = Int.1 or Int.0 = n","n * Int.1 = Int.1 * n","Int.0 = Int.1"]}
{"goal":"reduce(n, n) = reduce(Int.1, Int.1)","proof":["not cross_equals(Int.1, Int.1, n, n) or reduce(Int.1, Int.1) = reduce(n, n)"]}
{"goal":"reduce(n, n) = Rat.1","proof":["reduce(Int.1, Int.1) != Rat.1"]}
{"goal":"reduce_self","proof":[]}
{"goal":"a * a.reciprocal = reduce(a.num * a.denom, a.denom * a.num)","proof":["reduce(a.num, a.denom) * reduce(a.denom, a.num) = reduce(a.num * a.denom, a.denom * a.num)","reduce(a.denom, a.num) = a.reciprocal","reduce(a.num, a.denom) = a"]}
{"goal":"a * a.reciprocal = reduce(a.num * a.denom, a.num * a.denom)","proof":["a.num * a.denom = a.denom * a.num"]}
{"goal":"a.num * a.denom != Int.0","proof":["a.num * a.denom != Int.0 or a.num = Int.0 or a.denom = Int.0","reduce(a.num, a.denom) = a","a.num = Int.0 or a.denom = Int.0","reduce(Int.0, a.denom) = Rat.0","a.denom != Int.0","a.num = Int.0","reduce(a.num, a.denom) != Rat.0"]}
{"goal":"a * a.reciprocal = Rat.1","proof":["reduce(a.num * a.denom, a.num * a.denom) = Rat.1 or a.num * a.denom = Int.0","reduce(a.num * a.denom, a.num * a.denom) != Rat.1","reduce(a.num * a.denom, a.num * a.denom) = Rat.1"]}
{"goal":"mul_inv_cancels_right","proof":[]}
{"goal":"mul_inv_cancels_left","proof":["a * a.reciprocal = Rat.1 or Rat.0 = a","a * a.reciprocal = a.reciprocal * a","a * a.reciprocal = Rat.1","a * a.reciprocal != Rat.1"]}
{"goal":"sub_zero","proof":["Rat.new(-Rat.0.num, Rat.0.denom) = -Rat.0","a + -Rat.0 = a - Rat.0","a + -Rat.0 = -Rat.0 + a","a + Rat.0 = Rat.0 + a","Rat.new(Int.0, Int.1) = Rat.from_int(Int.0)","a + Rat.0 = a","Rat.from_int(Int.0).num = Int.0"]}
{"goal":"not_pos_and_neg","proof":["a.num.is_negative = a.is_negative","a.num.is_negative","a.num.is_positive = a.is_positive","not a.num.is_negative or not a.num.is_positive","a.num.is_positive","not a.num.is_positive"]}
{"goal":"b != Int.0","proof":["Int.0.is_positive"]}
{"goal":"exists(k0: Int) { reduce(a, b).num * k0 = a and reduce(a, b).denom * k0 = b }","proof":["let s0: (Int, Int) -> Int satisfy { forall(x0: Int, x1: Int) { reduce(x0, x1).num * s0(x0, x1) = x0 or Int.0 = x1 } and forall(x2: Int, x3: Int) { reduce(x2, x3).denom * s0(x2, x3) = x3 or Int.0 = x3 } }","reduce(a, b).num * s0(a, b) != a or reduce(a, b).denom * s0(a, b) != b","reduce(a, b).denom * s0(a, b) = b or Int.0 = b","reduce(a, b).num * s0(a, b) = a or Int.0 = b","reduce(a, b).num * s0(a, b) = a","reduce(a, b).denom * s0(a, b) = b"]}
{"goal":"reduce(a, b).denom.is_positive","proof":["reduce(a, b).denom.is_positive"]}
{"goal":"d.is_positive","proof":["not (reduce(a, b).denom * d).is_positive or reduce(a, b).denom.is_negative or d.is_positive","not (reduce(a, b).denom * d).is_positive or reduce(a, b).denom.is_negative","not reduce(a, b).denom.is_negative or not reduce(a, b).denom.is_positive","not reduce(a, b).denom.is_negative","(reduce(a, b).denom * d).is_positive","not (reduce(a, b).denom * d).is_positive"]}
{"goal":"reduce_pos_pos","proof":["not (reduce(a, b).num * d).is_positive or d.is_negative or reduce(a, b).num.is_positive","reduce(a, b).num.is_positive = reduce(a, b).is_positive","not reduce(a, b).num.is_positive","not d.is_negative or not d.is_positive","not d.is_negative","(reduce(a, b).num * d).is_positive"]}
{"goal":"a + b = reduce(a.num * b.denom + b.num * a.denom, a.denom * b.denom)","proof":["reduce(a.num * b.denom + b.num * a.denom, a.denom * b.denom) = a + b"]}
{"goal":"(a.num * b.denom).is_positive","proof":["not a.num.is_positive or not b.denom.is_positive or (a.num * b.denom).is_positive","not a.num.is_positive or not b.denom.is_positive","a.num.is_positive = a.is_positive","b.denom.is_positive","a.num.is_positive","not a.num.is_positive"]}
{"goal":"(b.num * a.denom).is_positive","proof":["not b.num.is_positive or not a.denom.is_positive or (b.num * a.denom).is_positive","not b.num.is_positive or not a.denom.is_positive","b.num.is_positive = b.is_positive","a.denom.is_positive","b.num.is_positive","not b.num.is_positive"]}
{"goal":"(a.num * b.denom + b.num * a.denom).is_positive","proof":["not (a.num * b.denom).is_positive or (a.num * b.denom + b.num * a.denom).is_positive or (b.num * a.denom).is_negative","(b.num * a.denom).is_negative","not (b.num * a.denom).is_negative or not (b.num * a.denom).is_positive"]}
{"goal":"(a.denom * b.denom).is_positive","proof":["not a.denom.is_positive or not b.denom.is_positive or (a.denom * b.denom).is_positive","not b.denom.is_positive or not a.denom.is_positive","a.denom.is_positive","b.denom.is_positive"]}
{"goal":"add_pos_pos","proof":["reduce(a.num * b.denom + b.num * a.denom, a.denom * b.denom) = a + b","not (a.num * b.denom + b.num * a.denom).is_positive or not (a.denom * b.denom).is_positive or reduce(a.num * b.denom + b.num * a.denom, a.denom * b.denom).is_positive","not reduce(a.num * b.denom + b.num * a.denom, a.denom * b.denom).is_positive"]}
{"goal":"a * b = reduce(a.num * b.num, a.denom * b.denom)","proof":["reduce(a.num * b.num, a.denom * b.denom) = a * b"]}
{"goal":"(a.num * b.num).is_positive","proof":["not a.num.is_positive or not b.num.is_positive or (a.num * b.num).is_positive","not b.num.is_positive or not a.num.is_positive","a.num.is_positive = a.is_positive","b.num.is_positive = b.is_positive","b.num.is_positive","a.num.is_positive","not a.num.is_positive"]}
{"goal":"(a.denom * b.denom).is_positive","proof":["not a.denom.is_positive or not b.denom.is_positive or (a.denom * b.denom).is_positive","not b.denom.is_positive or not a.denom.is_positive","a.denom.is_positive","b.denom.is_positive"]}
{"goal":"mul_pos_pos","proof":["reduce(a.num * b.num, a.denom * b.denom) = a * b","not (a.num * b.num).is_positive or not (a.denom * b.denom).is_positive or reduce(a.num * b.num, a.denom * b.denom).is_positive","not reduce(a.num * b.num, a.denom * b.denom).is_positive"]}
{"goal":"a.reciprocal = reduce(a.denom, a.num)","proof":["reduce(a.denom, a.num) = a.reciprocal"]}
{"goal":"a.denom.is_positive","proof":["(-a).denom = a.denom","not (-a).denom.is_positive","(-a).denom.is_positive"]}
{"goal":"a.num.is_positive","proof":["a.num.is_positive = a.is_positive"]}
{"goal":"pos_reciprocal","proof":["not a.denom.is_positive or not a.num.is_positive or reduce(a.denom, a.num).is_positive","reduce(a.denom, a.num) = a.reciprocal","not reduce(a.denom, a.num).is_positive"]}
{"goal":"a + (-b + b) = a","proof":["-b + b = Rat.0","a + Rat.0 != a","a + Rat.0 = a"]}
{"goal":"a + -b + b = a","proof":["a + (-b + b) = a + -b + b"]}
{"goal":"add_cancels_sub","proof":["a + -b = a - b"]}
{"goal":"neg_neg_is_pos","proof":["(-a).num = -a.num","a.num.is_negative = a.is_negative","(-a).num.is_positive = (-a).is_positive","(--a.num).is_negative = (-a.num).is_positive","--a.num = a.num"]}
{"goal":"neg_pos_is_neg","proof":["(-a).num = -a.num","(-a).num.is_negative = (-a).is_negative","a.num.is_positive = a.is_positive","(-a.num).is_negative = a.num.is_positive"]}
{"goal":"zero_minus","proof":["Rat.0 + -a = Rat.0 - a","-a + Rat.0 = Rat.0 + -a","Rat.0 + -a != -a","-a + Rat.0 = -a"]}
{"goal":"a / b * b = a * b.reciprocal * b","proof":["a * b.reciprocal != a / b","a * b.reciprocal = a / b"]}
{"goal":"a / b * b = a * (b.reciprocal * b)","proof":["a * (b.reciprocal * b) = a * b.reciprocal * b"]}
{"goal":"a / b * b = a * Rat.1","proof":["b.reciprocal * b = Rat.1 or Rat.0 = b","a * (b.reciprocal * b) != a * Rat.1","b.reciprocal * b = Rat.1","b.reciprocal * b != Rat.1"]}
{"goal":"a / b * b = a","proof":["a * Rat.1 != a","a * Rat.1 = Rat.1 * a","Rat.1 * a != a","Rat.1 * a = a"]}
{"goal":"mul_cancels_div","proof":[]}
{"goal":"rat_is_reflexive","proof":["let s0: (Rat, Rat) -> Bool -> Rat satisfy { forall(x0: (Rat, Rat) -> Bool, x1: Rat) { not is_reflexive[Rat](x0) or x0(x1, x1) } and forall(x2: (Rat, Rat) -> Bool) { not x2(s0(x2), s0(x2)) or is_reflexive[Rat](x2) } }","not s0(Rat.lte) <= s0(Rat.lte) or is_reflexive[Rat](Rat.lte)","not s0(Rat.lte) <= s0(Rat.lte)","s0(Rat.lte) != s0(Rat.lte) or s0(Rat.lte) <= s0(Rat.lte)"]}
{"goal":"a <= c","proof":[]}
{"goal":"(b - a).is_positive","proof":["not a <= b or (b - a).is_positive or b = a","not a < b or a <= b","not a < b or b != a","b != a","a <= b","not a <= b"]}
{"goal":"a <= c","proof":[]}
{"goal":"(c - b).is_positive","proof":["not b <= c or (c - b).is_positive or c = b","not b < c or b <= c","not b < c or c != b","c != b","b <= c","not b <= c"]}
{"goal":"(c - b + (b - a)).is_positive","proof":["not (c - b).is_positive or not (b - a).is_positive or (c - b + (b - a)).is_positive"]}
{"goal":"(c - a).is_positive","proof":["c - b + (b + -a) = c - b + b + -a","b + -a = b - a","c + -a = c - a","not (c + -a).is_positive","c - b + b = c","(c - b + (b + -a)).is_positive","(c - b + b + -a).is_positive"]}
{"goal":"a <= c","proof":["not (c - a).is_positive or a <= c"]}
{"goal":"lte_trans","proof":[]}
{"goal":"rat_is_transitive","proof":["let (s0: (Rat, Rat) -> Bool -> Rat, s1: (Rat, Rat) -> Bool -> Rat, s2: (Rat, Rat) -> Bool -> Rat) satisfy { forall(x0: (Rat, Rat) -> Bool, x1: Rat, x2: Rat, x3: Rat) { not is_transitive[Rat](x0) or not x0(x1, x2) or not x0(x2, x3) or x0(x1, x3) } and forall(x4: (Rat, Rat) -> Bool) { x4(s0(x4), s1(x4)) or is_transitive[Rat](x4) } and forall(x5: (Rat, Rat) -> Bool) { x5(s1(x5), s2(x5)) or is_transitive[Rat](x5) } and forall(x6: (Rat, Rat) -> Bool) { not x6(s0(x6), s2(x6)) or is_transitive[Rat](x6) } }","not s0(Rat.lte) <= s1(Rat.lte) or not s1(Rat.lte) <= Rat.0 + s2(Rat.lte) or s0(Rat.lte) <= Rat.0 + s2(Rat.lte)","not s0(Rat.lte) <= s2(Rat.lte) or is_transitive[Rat](Rat.lte)","not s0(Rat.lte) <= s2(Rat.lte)","s1(Rat.lte) <= s2(Rat.lte) or is_transitive[Rat](Rat.lte)","s1(Rat.lte) <= s2(Rat.lte)","s0(Rat.lte) <= s1(Rat.lte) or is_transitive[Rat](Rat.lte)","s0(Rat.lte) <= s1(Rat.lte)","Rat.0 + s2(Rat.lte) = s2(Rat.lte)","s1(Rat.lte) <= Rat.0 + s2(Rat.lte)","not s0(Rat.lte) <= Rat.0 + s2(Rat.lte)","not s1(Rat.lte) <= Rat.0 + s2(Rat.lte) or s0(Rat.lte) <= Rat.0 + s2(Rat.lte)"]}
{"goal":"a = b","proof":["a * Rat.1 = Rat.1 * a","b * Rat.1 = Rat.1 * b","Rat.1 * a = a","Rat.1 * b = b"]}
{"goal":"(b - a).is_positive","proof":["not a <= b or (b - a).is_positive or b = a","not a < b or a <= b","not a < b or b != a","b != a","a <= b","not a <= b"]}
{"goal":"(a - b).is_positive","proof":["not b <= a or (a - b).is_positive or b = a"]}
{"goal":"(b - a + (a - b)).is_positive","proof":["not (b - a).is_positive or not (a - b).is_positive or (b - a + (a - b)).is_positive"]}
{"goal":"Rat.0.is_positive","proof":["b - a + (a + -b) = b - a + a + -b","a + -b = a - b","b - a + a = b","b + -b = Rat.0","not (b + -b).is_positive","(b - a + (a + -b)).is_positive","(b - a + a + -b).is_positive"]}
{"goal":"false","proof":["Rat.0.num.is_positive = Rat.0.is_positive","Rat.new(Int.0, Int.1) = Rat.from_int(Int.0)","Rat.from_int(Int.0).num = Int.0"]}
{"goal":"lte_antisymm","proof":[]}
{"goal":"rat_is_antisymmetric","proof":["let (s0: (Rat, Rat) -> Bool -> Rat, s1: (Rat, Rat) -> Bool -> Rat) satisfy { forall(x0: (Rat, Rat) -> Bool, x1: Rat, x2: Rat) { not is_antisymmetric[Rat](x0) or not x0(x1, x2) or not x0(x2, x1) or x1 = x2 } and forall(x3: (Rat, Rat) -> Bool) { x3(s0(x3), s1(x3)) or is_antisymmetric[Rat](x3) } and forall(x4: (Rat, Rat) -> Bool) { x4(s1(x4), s0(x4)) or is_antisymmetric[Rat](x4) } and forall(x5: (Rat, Rat) -> Bool) { s1(x5) != s0(x5) or is_antisymmetric[Rat](x5) } }","not s1(Rat.lte) <= s0(Rat.lte) or not s0(Rat.lte) <= s1(Rat.lte) or s1(Rat.lte) = s0(Rat.lte)","s1(Rat.lte) <= s0(Rat.lte) or is_antisymmetric[Rat](Rat.lte)","s1(Rat.lte) <= s0(Rat.lte)","s0(Rat.lte) <= s1(Rat.lte) or is_antisymmetric[Rat](Rat.lte)","s0(Rat.lte) <= s1(Rat.lte)","s1(Rat.lte) != s0(Rat.lte) or is_antisymmetric[Rat](Rat.lte)","s1(Rat.lte) = s0(Rat.lte)","s1(Rat.lte) != s0(Rat.lte)"]}
{"goal":"is_antisymmetric[Rat](Rat.lte) and is_reflexive[Rat](Rat.lte) and is_transitive[Rat](Rat.lte)","proof":["not is_transitive[Rat](Rat.lte) or not is_reflexive[Rat](Rat.lte)","not is_reflexive[Rat](Rat.lte)"]}
{"goal":"(a - Rat.0).is_positive","proof":["a - Rat.0 = a"]}
{"goal":"pos_imp_zero_lt","proof":["not Rat.0 <= a or Rat.0 < a or Rat.0 = a","not Rat.0 <= a or Rat.0 = a","not (a - Rat.0).is_positive or Rat.0 <= a","a.num.is_positive = a.is_positive","Rat.new(Int.0, Int.1) = Rat.from_int(Int.0)","(-Int.0).is_negative = Int.0.is_positive","(-a.num).is_negative = a.num.is_positive","Rat.from_int(Int.0).num = Int.0","Rat.0 <= a","Rat.0 = a"]}
{"goal":"a - Rat.0 = a","proof":["a - Rat.0 = a"]}
{"goal":"a.is_positive","proof":["not (a - Rat.0).is_positive","not Rat.0 <= a or (a - Rat.0).is_positive or Rat.0 = a","not Rat.0 < a or Rat.0 <= a","not Rat.0 < a or Rat.0 != a","Rat.0 != a","Rat.0 <= a","not Rat.0 <= a"]}
{"goal":"zero_lt_imp_pos","proof":[]}
{"goal":"(b - a).is_positive","proof":["not a <= b or (b - a).is_positive or b = a","not a < b or a <= b","not a < b or b != a","b != a","a <= b","not a <= b"]}
{"goal":"(c - b).is_positive","proof":["not b <= c or (c - b).is_positive or c = b","not b < c or b <= c","not b < c or c != b","c != b","b <= c","not b <= c"]}
{"goal":"c - b + (b - a) = c - b + b - a","proof":["c - b + (b + -a) = c - b + b + -a","b + -a = b - a","c - b + b + -a = c - b + b - a","c - b + (b + -a) != c - b + b - a"]}
{"goal":"c - b + (b - a) = c - a","proof":["c - b + b = c"]}
{"goal":"(c - a).is_positive","proof":["not (c - b).is_positive or not (b - a).is_positive or (c - b + (b - a)).is_positive","not (c - b + (b - a)).is_positive"]}
{"goal":"lt_trans","proof":["not a <= c or a < c or c = a","not a <= c or c = a","not (c - a).is_positive or a <= c","(c - a).num.is_positive = (c - a).is_positive","Rat.new(Int.0, Int.1) = Rat.from_int(Int.0)","a - a = Rat.0","Rat.from_int(Int.0).num = Int.0","a <= c","c = a"]}
{"goal":"(-a).is_positive","proof":["not a.is_negative or (-a).is_positive"]}
{"goal":"(Rat.0 - a).is_positive","proof":["Rat.0 - a = -a"]}
{"goal":"neg_imp_lt_zero","proof":["not a <= Rat.0 or a < Rat.0 or Rat.0 = a","not a <= Rat.0 or Rat.0 = a","not (Rat.0 - a).is_positive or a <= Rat.0","Rat.0 * -Rat.1 = -Rat.0","a * -Rat.1 = -a","Rat.0 - Rat.0 = -Rat.0","not (-a).is_negative or not (-a).is_positive","Rat.0 - Rat.0 = Rat.0","not (-a).is_negative","a <= Rat.0","Rat.0 = a"]}
{"goal":"(Rat.0 - a).is_positive","proof":["not a <= Rat.0 or (Rat.0 - a).is_positive or Rat.0 = a","not a < Rat.0 or a <= Rat.0","not a < Rat.0 or Rat.0 != a","Rat.0 != a","a <= Rat.0","not a <= Rat.0"]}
{"goal":"(-a).is_positive","proof":["Rat.0 - a = -a"]}
{"goal":"lt_zero_imp_neg","proof":["not (-a).is_positive or (--a).is_negative","--a = a","(--a).is_negative","not (--a).is_negative"]}
{"goal":"two_neq_zero","proof":["Rat.new(Int.0, Int.1) = Rat.from_int(Int.0)","Rat.from_int(Int.0).num = Int.0","Rat.from_int(Int.1 + Int.1).num = Int.1 + Int.1","lib(int.int_base).abs(Int.from_nat(Nat.2)) = Nat.2"]}
{"goal":"Rat.2 * r = reduce(Int.2 * r.num, Int.1 * r.denom)","proof":["reduce(Int.2 * r.num, r.denom) = Rat.from_int(Int.2) * r","Int.1 * r.denom = r.denom","reduce(Int.2 * r.num, r.denom) != Rat.2 * r","Rat.from_int(Int.2) * r != Rat.2 * r","Rat.from_int(Int.2) != Rat.2"]}
{"goal":"Rat.2 * r = reduce(r.num + r.num, r.denom)","proof":["reduce(Int.2 * r.num, r.denom) = Rat.from_int(Int.2) * r","r.num + r.num = Int.2 * r.num","reduce(Int.2 * r.num, r.denom) != Rat.2 * r","Rat.from_int(Int.2) * r != Rat.2 * r","Rat.from_int(Int.2) != Rat.2"]}
{"goal":"r + r = reduce(r.num + r.num, r.denom)","proof":["reduce(r.num, r.denom) + reduce(r.num, r.denom) = reduce(r.num + r.num, r.denom)","reduce(r.num, r.denom) = r"]}
{"goal":"times_two","proof":["reduce(r.num + r.num, r.denom) != Rat.2 * r"]}
{"goal":"a * c * c.reciprocal = b * c * c.reciprocal","proof":["b * c != a * c"]}
{"goal":"a * (c * c.reciprocal) = b * (c * c.reciprocal)","proof":["a * (c * c.reciprocal) = a * c * c.reciprocal","b * (c * c.reciprocal) = b * c * c.reciprocal"]}
{"goal":"a * Rat.1 = b * Rat.1","proof":["b != a","c * c.reciprocal = Rat.1 or Rat.0 = c","a * (c * c.reciprocal) = c * c.reciprocal * a","b * (c * c.reciprocal) = c * c.reciprocal * b","Rat.1 * a = a","Rat.1 * b = b","c * c.reciprocal = Rat.1"]}
{"goal":"a = b","proof":["a * Rat.1 = Rat.1 * a","b * Rat.1 = Rat.1 * b","Rat.1 * a = a","Rat.1 * b = b"]}
{"goal":"mul_cancels_right","proof":[]}
{"goal":"r / Rat.2 * Rat.2 = r","proof":["r / Rat.2 * Rat.2 = r or Rat.2 = Rat.0","Rat.2 = Rat.0"]}
{"goal":"(r / Rat.2 + r / Rat.2) * Rat.2 = r + r","proof":["r / Rat.2 * Rat.2 + r / Rat.2 * Rat.2 = (r / Rat.2 + r / Rat.2) * Rat.2"]}
{"goal":"(r / Rat.2 + r / Rat.2) * Rat.2 = r * Rat.2","proof":["r / Rat.2 + r / Rat.2 = Rat.2 * (r / Rat.2)","Rat.2 * (r / Rat.2) * Rat.2 != r * Rat.2","Rat.2 * (r / Rat.2) != r","Rat.2 * (r / Rat.2) = r / Rat.2 * Rat.2"]}
{"goal":"r / Rat.2 + r / Rat.2 = r","proof":["(r / Rat.2 + r / Rat.2) * Rat.2 != r * Rat.2 or Rat.2 = Rat.0 or r / Rat.2 + r / Rat.2 = r","Rat.2 = Rat.0"]}
{"goal":"half_plus_half","proof":[]}
{"goal":"neg_mul","proof":["-Rat.1 * (a * b) = -Rat.1 * a * b","-Rat.1 * (a * b) = -(a * b)","-Rat.1 * a = -a","-Rat.1 * a * b != -(a * b)"]}
{"goal":"(-a).is_positive","proof":["not a.is_negative or (-a).is_positive"]}
{"goal":"(-a * b).is_positive","proof":["not (-a).is_positive or not b.is_positive or (-a * b).is_positive"]}
{"goal":"(-(a * b)).is_positive","proof":["-a * b = -(a * b)"]}
{"goal":"(a * b).is_negative","proof":["-a * b = -(a * b)","(-(a * b)).num = -(a * b).num","(a * b).num.is_negative = (a * b).is_negative","(-(a * b)).num.is_positive = (-(a * b)).is_positive","(-(-a * b).num).is_negative = (-a * b).num.is_positive","--(a * b).num = (a * b).num"]}
{"goal":"mul_neg_pos","proof":[]}
{"goal":"mul_pos_neg","proof":["not a.is_positive or not b.is_negative or (b * a).is_negative","b * a = a * b","not (b * a).is_negative"]}
{"goal":"(-b).is_positive","proof":["not b.is_negative or (-b).is_positive"]}
{"goal":"(-b * a).is_negative","proof":["not a.is_negative or not (-b).is_positive or (-b * a).is_negative"]}
{"goal":"mul_neg_neg","proof":["--b * a = -(-b * a)","Rat.new(-(-b).num, (-b).denom) = --b","b * a = a * b","(-b).num = -b.num","Rat.new(b.num, b.denom) = b","not (-b * a).is_negative or (-(-b * a)).is_positive","(-b).denom = b.denom","--b.num = b.num","(-(-b * a)).is_positive"]}
{"goal":"one_is_pos","proof":["not Int.1.is_positive or not Int.1.is_positive or reduce(Int.1, Int.1).is_positive","not reduce(Int.1, Int.1).is_positive","not Int.1.is_positive"]}
{"goal":"two_is_pos","proof":["not Rat.1.is_positive or not Rat.1.is_positive or (Rat.1 + Rat.1).is_positive","Rat.2 * Rat.1 = Rat.1 + Rat.1","Rat.2 * Rat.1 = Rat.2","not (Rat.2 * Rat.1).is_positive","not (Rat.1 + Rat.1).is_positive","not Rat.1.is_positive"]}
{"goal":"half_is_pos","proof":["not Rat.2.is_positive or Rat.2.reciprocal.is_positive","not Rat.2.is_positive"]}
{"goal":"a - (a + b) = a + -Rat.1 * (a + b)","proof":["a + -(a + b) = a - (a + b)","-Rat.1 * (a + b) = -(a + b)"]}
{"goal":"a - (a + b) = a + (-Rat.1 * a + -Rat.1 * b)","proof":["-Rat.1 * a + -Rat.1 * b = -Rat.1 * (a + b)"]}
{"goal":"a - (a + b) = a + (-a + -b)","proof":["-a + -b = -(b + a)","a + -(b + a) != a - (a + b)","a + -(b + a) = a - (b + a)","b + a = a + b"]}
{"goal":"a - (a + b) = a + -a + -b","proof":["a + (-a + -b) = a + -a + -b"]}
{"goal":"a - (a + b) = Rat.0 + -b","proof":["a + -a = Rat.0"]}
{"goal":"a - (a + b) = -b","proof":["Rat.0 + -b != -b","Rat.0 + -b = Rat.0 - b","Rat.0 - b != -b","Rat.0 - b = -b"]}
{"goal":"sub_add_quasi_cancel","proof":[]}
{"goal":"not_lt_self","proof":["not a < a or a != a"]}
{"goal":"not_lt_both_ways","proof":["not a < b or not b < a or a < a","not a < b or a < a","a < a","not a < a"]}
{"goal":"a + b - a = a + b + -a","proof":["a + b + -a = a + b - a"]}
{"goal":"a + b - a = -a + (a + b)","proof":["-a + (a + b) = a + b + -a"]}
{"goal":"a + b - a = -a + a + b","proof":["-a + (a + b) = -a + a + b"]}
{"goal":"a + b - a = Rat.0 + b","proof":["-a + a = Rat.0"]}
{"goal":"a + b - a = b","proof":["Rat.0 + b != b","b + Rat.0 = Rat.0 + b","b + Rat.0 != b","b + Rat.0 = b"]}
{"goal":"a <= a + b","proof":["not (a + b - a).is_positive or a <= a + b","(a + b - a).is_positive","not (a + b - a).is_positive"]}
{"goal":"a != a + b","proof":["a + b - a = a + -a","a + -a = b","a + -a = Rat.0","Rat.0 = b","not b.is_positive or Rat.0 < b","not Rat.0 < b or Rat.0 != b","Rat.0 < b","not Rat.0 < b"]}
{"goal":"lt_add_pos","proof":["not a <= a + b or a < a + b or a + b = a"]}
{"goal":"-(a - b) = -(a + -b)","proof":["a + -b != a - b","a + -b = a - b"]}
{"goal":"-(a - b) = -a + --b","proof":["-a + --b = -(-b + a)","-(-b + a) != -(a - b)","a + -b = -b + a"]}
{"goal":"-(a - b) = -a + b","proof":["--b = b"]}
{"goal":"-(a - b) = b + -a","proof":["b + -a = -a + b"]}
{"goal":"neg_sub","proof":["b + -a = b - a"]}
{"goal":"a.is_positive","proof":["a.num.is_positive = a.is_positive"]}
{"goal":"a.is_negative","proof":["a.num.is_negative = a.is_negative"]}
{"goal":"a.num = Int.0","proof":["a.num.is_negative or a.num.is_positive or a.num = Int.0"]}
{"goal":"a = Rat.0","proof":["reduce(a.num, a.denom) = a","reduce(a.num, a.denom) != Rat.0","reduce(Int.0, a.denom) = Rat.0"]}
{"goal":"single_trichotomy","proof":["a.num.is_negative","a.num.is_negative = a.is_negative"]}
{"goal":"a > b","proof":["not b <= a or b < a or b = a","-(b - a) = a - b","not (a - b).is_positive or b <= a","a > b = b < a","not b < a","not (a - b).is_positive or (-(a - b)).is_negative","not (a - b).is_negative or not (a - b).is_positive","not b <= a or b = a","b <= a","b = a","not (a - b).is_negative","(-(a - b)).is_negative"]}
{"goal":"(-(a - b)).is_positive","proof":["not (a - b).is_negative or (-(a - b)).is_positive"]}
{"goal":"(b - a).is_positive","proof":["-(a - b) = b - a"]}
{"goal":"a < b","proof":["not a <= b or a < b or b = a","not a <= b or b = a","a + -b = a - b","b + -a = b - a","-(a - b) = b - a","not (b - a).is_positive or a <= b","Rat.0 - a = -a","Rat.0 - b = -b","(-(a - b)).num.is_positive = (-(a - b)).is_positive","(a - b).num.is_positive = (a - b).is_positive","a <= b","b = a"]}
{"goal":"a = b","proof":["(a - b).is_negative or (a - b).is_positive or a - b = Rat.0","a - b + b = a","b + Rat.0 = Rat.0 + b","b + Rat.0 = b","b + Rat.0 != a","Rat.0 + b != a","a - b = Rat.0"]}
{"goal":"trichotomy","proof":["(a - b).is_negative","not a <= b or a < b or b = a","not a <= b","-(a - b) = b - a","not (b - a).is_positive or a <= b","not (a - b).is_negative or (-(a - b)).is_positive","(-(a - b)).is_positive","not (b - a).is_positive","(b - a).is_positive"]}
{"goal":"(b - a).is_positive","proof":["not a <= b or (b - a).is_positive or b = a","not a < b or a <= b","not a < b or b != a","b != a","a <= b","not a <= b"]}
{"goal":"b + c - (a + c) = b + c + (-a + -c)","proof":["-a + -c = -(c + a)","b + c + -(c + a) != b + c - (a + c)","b + c + -(c + a) = b + c - (c + a)","c + a = a + c"]}
{"goal":"b + c - (a + c) = b + c + (-c + -a)","proof":["-c + -a = -(a + c)","b + c + -(a + c) != b + c - (a + c)","b + c + -(a + c) = b + c - (a + c)"]}
{"goal":"b + c - (a + c) = b + (c + -c) + -a","proof":["b + (c + -c) = b + c + -c","b + c + (-c + -a) = b + c + -c + -a"]}
{"goal":"b + c - (a + c) = b + -a","proof":["-a + (b + (c + -c)) = b + (c + -c) + -a","b + -a = -a + b","c + -c = Rat.0","b + Rat.0 = b"]}
{"goal":"(b + c - (a + c)).is_positive","proof":["not (b + -a).is_positive","b + -a = b - a"]}
{"goal":"lt_add_right","proof":["b + c != a + c or b = a","not a + c <= b + c or a + c < b + c or b + c = a + c","not (b + c - (a + c)).is_positive or a + c <= b + c","not a < b or b != a","b != a","not a + c <= b + c or b + c = a + c","a + c <= b + c","b + c = a + c"]}
{"goal":"add_neg_lt","proof":["not a < Rat.0 or a + b < Rat.0 + b","b + a = a + b","not a.is_negative or a < Rat.0","Rat.0 + b = b","not b + a < Rat.0 + b","a < Rat.0","not a + b < Rat.0 + b"]}
{"goal":"a + c < b + c","proof":["not a < b or a + c < b + c"]}
{"goal":"b + c < b + d","proof":["not c < d or c + b < d + b","c + b = b + c","d + b = b + d","not c + b < b + d","c + b < d + b"]}
{"goal":"adding_lts","proof":["not a + c < b + c or not b + c < b + d or a + c < b + d","not b + c < b + d or not a + c < b + c"]}
{"goal":"a + b - b = a + b + -b","proof":["a + b + -b = a + b - b"]}
{"goal":"a + b - b = a + (b + -b)","proof":["a + (b + -b) = a + b + -b"]}
{"goal":"a + b - b = a + Rat.0","proof":["b + -b = Rat.0"]}
{"goal":"a + b - b = a","proof":["a + Rat.0 != a","a + Rat.0 = a"]}
{"goal":"minus_cancels_plus","proof":[]}
{"goal":"a - (a - b) = b","proof":["a + -b = a - b","a - (a + -b) = --b","--b = b","a - (a + -b) != b"]}
{"goal":"(a - (a - b)).is_positive","proof":[]}
{"goal":"gt_minus_pos","proof":["a + -b = a - b","not (-b).is_negative or a + -b < a","a > a + -b = a + -b < a","not a > a + -b","not b.is_positive or (-b).is_negative","(-b).is_negative","not a + -b < a"]}
{"goal":"a - (b + c) = a + -(b + c)","proof":["a + -(b + c) = a - (b + c)"]}
{"goal":"a - (b + c) = a + (-b + -c)","proof":["-b + -c = -(c + b)","a + -(c + b) != a - (b + c)","c + b = b + c"]}
{"goal":"a - (b + c) = a + -b + -c","proof":["a + (-b + -c) = a + -b + -c"]}
{"goal":"a - (b + c) = a - b - c","proof":["a + -b + -c = a + -b - c","a + -b = a - b"]}
{"goal":"sub_add","proof":[]}
{"goal":"no_greatest","proof":["not a < a + Rat.2.reciprocal","not Rat.2.reciprocal.is_positive or a < a + Rat.2.reciprocal","not Rat.2.reciprocal.is_positive"]}
{"goal":"Rat.from_int(a) - Rat.from_int(b) = Rat.from_int(a) + -Rat.from_int(b)","proof":["Rat.from_int(a) + -Rat.from_int(b) = Rat.from_int(a) - Rat.from_int(b)"]}
{"goal":"Rat.from_int(a) - Rat.from_int(b) = Rat.from_int(a) + Rat.from_int(-b)","proof":["Rat.from_int(-Int.1) * Rat.from_int(b) = Rat.from_int(-Int.1 * b)","Rat.from_int(a) + -Rat.from_int(b) = Rat.from_int(a) - Rat.from_int(b)","-Int.1 * b = -b","-Rat.1 * Rat.from_int(b) = -Rat.from_int(b)","Rat.from_int(a) + -Rat.from_int(b) != Rat.from_int(a) + Rat.from_int(-b)","-Rat.from_int(b) != Rat.from_int(-b)"]}
{"goal":"Rat.from_int(a) - Rat.from_int(b) = Rat.from_int(a + -b)","proof":["Rat.from_int(a) + Rat.from_int(-b) = Rat.from_int(a + -b)"]}
{"goal":"Rat.from_int(a) - Rat.from_int(b) = Rat.from_int(a - b)","proof":["Rat.from_int(a + -b) != Rat.from_int(a - b)","a + -b != a - b","a + -b = a - b"]}
{"goal":"sub_from_int","proof":[]}
{"goal":"Rat.from_int(b) - Rat.from_int(a) = Rat.from_int(b - a)","proof":["Rat.from_int(b) - Rat.from_int(a) = Rat.from_int(b - a)"]}
{"goal":"Rat.from_int(a) <= Rat.from_int(b)","proof":["Rat.from_int(b) - Rat.from_int(a) = Rat.from_int(b - a)","not a <= b or (b - a).is_positive or b = a","not (Rat.from_int(b) - Rat.from_int(a)).is_positive or Rat.from_int(a) <= Rat.from_int(b)","not a < b or a <= b","not (Rat.from_int(b) - Rat.from_int(a)).is_positive","not a < b or b != a","b != a","(Rat.from_int(b) - Rat.from_int(a)).num.is_positive = (Rat.from_int(b) - Rat.from_int(a)).is_positive","Rat.from_int(b - a).num = b - a","a <= b","not (Rat.from_int(b) - Rat.from_int(a)).num.is_positive","not Rat.from_int(b - a).num.is_positive","(b - a).is_positive","not (b - a).is_positive"]}
{"goal":"Rat.from_int(a) != Rat.from_int(b)","proof":["Rat.from_int(b) != Rat.from_int(a) or b = a","b = a","a < a","not a < a or a != a"]}
{"goal":"lt_from_int","proof":["not Rat.from_int(a) <= Rat.from_int(b) or Rat.from_int(a) < Rat.from_int(b) or Rat.from_int(b) = Rat.from_int(a)"]}
{"goal":"lte_from_int","proof":["Rat.from_int(b) - Rat.from_int(a) = Rat.from_int(b - a)","not a <= b or (b - a).is_positive or b = a","not (Rat.from_int(b) - Rat.from_int(a)).is_positive or Rat.from_int(a) <= Rat.from_int(b)","not (Rat.from_int(b) - Rat.from_int(a)).is_positive","Rat.from_int(b) != Rat.from_int(a) or Rat.from_int(a) <= Rat.from_int(b)","Rat.from_int(b) != Rat.from_int(a)","b != a","(Rat.from_int(b) - Rat.from_int(a)).num.is_positive = (Rat.from_int(b) - Rat.from_int(a)).is_positive","Rat.from_int(b - a).num = b - a","(b - a).is_positive"]}
{"goal":"gt_from_int","proof":["not b < a or Rat.from_int(b) < Rat.from_int(a)","a > b = b < a","b < a","Rat.from_int(a) > Rat.from_int(b) = Rat.from_int(b) < Rat.from_int(a)","Rat.from_int(b) < Rat.from_int(a)","not Rat.from_int(b) < Rat.from_int(a)"]}
{"goal":"gte_from_int","proof":["not b <= a or Rat.from_int(b) <= Rat.from_int(a)","Rat.from_int(b) <= Rat.from_int(a) = Rat.from_int(a) >= Rat.from_int(b)","not Rat.from_int(b) <= Rat.from_int(a)","b <= a = a >= b","not b <= a","b <= a"]}
{"goal":"b - a > Rat.0","proof":["not a <= b or (b - a).is_positive or b = a","b - a > Rat.0 = Rat.0 < b - a","not Rat.0 < b - a","not a < b or a <= b","not (b - a).is_positive or Rat.0 < b - a","not (b - a).is_positive","not a < b or b != a","b != a","a <= b","not a <= b"]}
{"goal":"c > Rat.0","proof":["c > Rat.0 = Rat.0 < c","not Rat.0 < c","not c.is_positive or Rat.0 < c"]}
{"goal":"(b - a) * c > Rat.0","proof":["not (b - a).is_positive or not c.is_positive or ((b - a) * c).is_positive","not ((b - a) * c).is_positive or (b - a) * c > (b - a) * c - (b - a) * c","b - a > Rat.0 = Rat.0 < b - a","Rat.0 < b - a","not Rat.0 < b - a or (b - a).is_positive","(b - a) * c - (b - a) * c = Rat.0","not (b - a) * c > (b - a) * c - (b - a) * c","not ((b - a) * c).is_positive","(b - a).is_positive","not (b - a).is_positive"]}
{"goal":"b * c - a * c > Rat.0","proof":["b * c + -a * c = (b + -a) * c","-(a * c) = -a * c","b * c + -(a * c) = b * c - a * c","b + -a = b - a","((b - a) * c - Rat.0).is_positive = Rat.0 < (b - a) * c","(b * c - a * c - Rat.0).is_positive = Rat.0 < b * c - a * c","(b - a) * c > Rat.0 = Rat.0 < (b - a) * c","b * c - a * c > Rat.0 = Rat.0 < b * c - a * c","(b - a) * c - Rat.0 = (b - a) * c","b * c - a * c - Rat.0 = b * c - a * c"]}
{"goal":"a * c != b * c","proof":["a * c - a * c > Rat.0","a * c - a * c > Rat.0 = Rat.0 < a * c - a * c","Rat.0 < a * c - a * c","not Rat.0 < a * c - a * c or a * c - a * c != Rat.0","a * c - a * c = Rat.0"]}
{"goal":"a * c <= b * c","proof":["not (b * c - a * c).is_positive or a * c <= b * c","b * c - a * c > Rat.0 = Rat.0 < b * c - a * c","not Rat.0 < b * c - a * c or (b * c - a * c).is_positive","Rat.0 < b * c - a * c","not (b * c - a * c).is_positive","(b * c - a * c).is_positive"]}
{"goal":"a * c < b * c","proof":["not a * c <= b * c or a * c < b * c or b * c = a * c"]}
{"goal":"lt_mul_pos","proof":[]}
{"goal":"a < b or a = b","proof":["not a <= b or a < b or b = a"]}
{"goal":"a * c < b * c or a * c = b * c","proof":["b != a","not c.is_positive or not a < b or a * c < b * c"]}
{"goal":"lte_mul_pos","proof":["not a * c < b * c or a * c <= b * c","b * c != a * c or a * c <= b * c","b * c != a * c","not a * c < b * c","a * c < b * c"]}
{"goal":"c.reciprocal.is_positive","proof":["not c.is_positive or c.reciprocal.is_positive"]}
{"goal":"a * c.reciprocal < b * c.reciprocal","proof":["not c.reciprocal.is_positive or not a < b or a * c.reciprocal < b * c.reciprocal"]}
{"goal":"lt_div_pos","proof":["a * c.reciprocal = a / c","b * c.reciprocal = b / c"]}
{"goal":"c.reciprocal.is_positive","proof":["not c.is_positive or c.reciprocal.is_positive"]}
{"goal":"a * c.reciprocal <= b * c.reciprocal","proof":["not a <= b or not c.reciprocal.is_positive or a * c.reciprocal <= b * c.reciprocal"]}
{"goal":"lte_div_pos","proof":["a * c.reciprocal = a / c","b * c.reciprocal = b / c"]}
{"goal":"a * b / b = a * (b / b)","proof":["a * (b * b.reciprocal) = a * b * b.reciprocal","a * b * b.reciprocal = a * b / b","b * b.reciprocal = b / b","a * (b * b.reciprocal) != a * b / b"]}
{"goal":"a * b / b = a * Rat.1","proof":["b * b.reciprocal = Rat.1 or Rat.0 = b","b * b.reciprocal = b / b","a * (b / b) != a * Rat.1","b / b != Rat.1","b * b.reciprocal = Rat.1","b * b.reciprocal != Rat.1"]}
{"goal":"mul_div_cancels","proof":["a * Rat.1 != a","a * Rat.1 = Rat.1 * a","Rat.1 * a != a","Rat.1 * a = a"]}
{"goal":"Rat.from_int(a.num) / Rat.from_int(a.denom) = reduce(a.num, Int.1) * reduce(Int.1, a.denom)","proof":["Rat.from_int(a.num) * reduce(Int.1, Int.1) = reduce(a.num * Int.1, Int.1)","Rat.from_int(a.num) * Rat.from_int(a.denom).reciprocal = Rat.from_int(a.num) / Rat.from_int(a.denom)","reduce(Rat.from_int(a.denom).denom, Rat.from_int(a.denom).num) = Rat.from_int(a.denom).reciprocal","Rat.from_int(a.denom).reciprocal * Rat.from_int(a.num) = Rat.from_int(a.num) * Rat.from_int(a.denom).reciprocal","reduce(a.num, Int.1) * reduce(Int.1, a.denom) = reduce(Int.1, a.denom) * reduce(a.num, Int.1)","a.num * Int.1 = Int.1 * a.num","Rat.from_int(a.num) * Rat.1 = Rat.from_int(a.num)","Rat.from_int(a.denom).denom = Int.1","Rat.from_int(a.denom).num = a.denom","Int.1 * a.num = a.num"]}
{"goal":"div_from_int","proof":["reduce(a.num, Int.1) * reduce(Int.1, a.denom) = reduce(a.num * Int.1, Int.1 * a.denom)","reduce(a.num, a.denom) = a","Int.1 * a.denom = a.denom","a.num * Int.1 = a.num"]}
{"goal":"Rat.from_int(a.num) < Rat.from_int(n * a.denom)","proof":["not a.num < n * a.denom or Rat.from_int(a.num) < Rat.from_int(n * a.denom)"]}
{"goal":"Rat.from_int(a.num) < Rat.from_int(n) * Rat.from_int(a.denom)","proof":["Rat.from_int(n) * Rat.from_int(a.denom) = Rat.from_int(n * a.denom)"]}
{"goal":"Rat.from_int(a.denom).is_positive","proof":["Rat.from_int(a.denom).num.is_positive = Rat.from_int(a.denom).is_positive","not Rat.from_int(a.denom).num.is_positive","Rat.from_int(a.denom).num = a.denom","not a.denom.is_positive","a.denom.is_positive"]}
{"goal":"Rat.from_int(a.num) / Rat.from_int(a.denom) < Rat.from_int(n) * Rat.from_int(a.denom) / Rat.from_int(a.denom)","proof":["not Rat.from_int(a.num) < Rat.from_int(n) * Rat.from_int(a.denom) or not Rat.from_int(a.denom).is_positive or Rat.from_int(a.num) / Rat.from_int(a.denom) < Rat.from_int(n) * Rat.from_int(a.denom) / Rat.from_int(a.denom)"]}
{"goal":"Rat.from_int(n) * Rat.from_int(a.denom) / Rat.from_int(a.denom) = Rat.from_int(n)","proof":["Rat.from_int(n) * Rat.from_int(a.denom) / Rat.from_int(a.denom) = Rat.from_int(n) or Rat.from_int(a.denom) = Rat.0","Rat.from_int(a.denom) = Rat.0","Rat.0.is_positive","not Rat.0.is_positive or Rat.0 < Rat.0","not Rat.0 < Rat.0"]}
{"goal":"Rat.from_int(a.num) / Rat.from_int(a.denom) < Rat.from_int(n)","proof":["not Rat.from_int(a.num) / Rat.from_int(a.denom) < Rat.from_int(n) * Rat.from_int(a.denom) / Rat.from_int(a.denom)"]}
{"goal":"lt_from_int_mul_denom","proof":["Rat.from_int(a.num) / Rat.from_int(a.denom) = a"]}
{"goal":"a = Rat.from_int(n)","proof":["a.num * Int.1 != n * a.denom or cross_equals(n, Int.1, a.num, a.denom) or a.denom = Int.0 or Int.0 = Int.1","a.num * Int.1 != n * a.denom or cross_equals(n, Int.1, a.num, a.denom) or Int.0 = Int.1 or a.denom = Int.0","not cross_equals(Rat.from_int(n).num, Rat.from_int(n).denom, a.num, a.denom) or Rat.from_int(n) = a","Rat.from_int(n).denom = Int.1","Rat.from_int(n).num = n","a.num * Int.1 = a.num","a.denom != Int.0","not cross_equals(Rat.from_int(n).num, Rat.from_int(n).denom, a.num, a.denom)","not cross_equals(Rat.from_int(n).num, Int.1, a.num, a.denom)","not cross_equals(n, Int.1, a.num, a.denom)","a.num * Int.1 = n * a.denom","a.num * Int.1 != n * a.denom"]}
{"goal":"a.num < n * a.denom","proof":["not a.num <= n * a.denom or a.num < n * a.denom or n * a.denom = a.num"]}
{"goal":"a < Rat.from_int(n)","proof":["not a.num < n * a.denom or a < Rat.from_int(n)","not a.num <= n * a.denom or (n * a.denom - a.num).is_positive or n * a.denom = a.num","(n * a.denom - a.num).is_positive = a.num < n * a.denom","not a.num < n * a.denom","(n * a.denom - a.num).is_positive","not (n * a.denom - a.num).is_positive"]}
{"goal":"lte_from_int_mul_denom","proof":["not a < Rat.from_int(n) or a <= Rat.from_int(n)","not a < Rat.from_int(n)","Rat.from_int(n) != a or a <= Rat.from_int(n)","Rat.from_int(n) != a","n * a.denom = a.num","n * a.denom != a.num"]}
{"goal":"a.denom.is_positive","proof":["(-a).denom = a.denom","not (-a).denom.is_positive","(-a).denom.is_positive"]}
{"goal":"exists(k0: Int, k1: Int) { Int.0 <= k1 and k1 < a.denom and a.num = k0 * a.denom + k1 }","proof":["let (s0: (Int, Int) -> Int, s1: (Int, Int) -> Int) satisfy { forall(x0: Int, x1: Int) { not x0.is_positive or Int.0 <= s1(x1, x0) } and forall(x2: Int, x3: Int) { not x2.is_positive or s1(x3, x2) < x2 } and forall(x4: Int, x5: Int) { not x4.is_positive or s0(x5, x4) * x4 + s1(x5, x4) = x5 } }","s0(a.num, a.denom) * a.denom + s1(a.num, a.denom) != a.num or not s1(a.num, a.denom) < a.denom or not Int.0 <= s1(a.num, a.denom)","not a.denom.is_positive or s0(a.num, a.denom) * a.denom + s1(a.num, a.denom) = a.num","not a.denom.is_positive or s1(a.num, a.denom) < a.denom","not a.denom.is_positive or Int.0 <= s1(a.num, a.denom)","Int.0 <= s1(a.num, a.denom)","s1(a.num, a.denom) < a.denom","s0(a.num, a.denom) * a.denom + s1(a.num, a.denom) = a.num"]}
{"goal":"Rat.from_int(a.num) = Rat.from_int(q * a.denom + r)","proof":["q * a.denom + r != a.num"]}
{"goal":"Rat.from_int(a.num) = Rat.from_int(q * a.denom) + Rat.from_int(r)","proof":["Rat.from_int(q * a.denom) + Rat.from_int(r) = Rat.from_int(q * a.denom + r)"]}
{"goal":"Rat.from_int(r) >= Rat.from_int(Int.0)","proof":["not Int.0 <= r or Rat.from_int(Int.0) <= Rat.from_int(r)","Rat.from_int(Int.0) <= Rat.from_int(r) = Rat.from_int(r) >= Rat.from_int(Int.0)","Rat.from_int(Int.0) <= Rat.from_int(r)","not Rat.from_int(Int.0) <= Rat.from_int(r)"]}
{"goal":"x0 + Int.0 <= x0 + r","proof":["not Int.0 <= r or x0 + Int.0 <= x0 + r"]}
{"goal":"Rat.from_int(q * a.denom) + Rat.from_int(r) >= Rat.from_int(q * a.denom) + Rat.from_int(Int.0)","proof":["q * a.denom + Int.0 <= q * a.denom + r","Rat.from_int(q * a.denom) + Rat.from_int(Int.0) = Rat.from_int(q * a.denom + Int.0)","Rat.from_int(q * a.denom) + Rat.from_int(r) = Rat.from_int(q * a.denom + r)","not Rat.from_int(q * a.denom) + Rat.from_int(r) >= Rat.from_int(q * a.denom + Int.0)","not q * a.denom + Int.0 <= q * a.denom + r or Rat.from_int(q * a.denom + Int.0) <= Rat.from_int(q * a.denom + r)","Rat.from_int(q * a.denom + Int.0) <= Rat.from_int(q * a.denom + r) = Rat.from_int(q * a.denom + r) >= Rat.from_int(q * a.denom + Int.0)","not Rat.from_int(q * a.denom + r) >= Rat.from_int(q * a.denom + Int.0)","Rat.from_int(q * a.denom + Int.0) <= Rat.from_int(q * a.denom + r)"]}
{"goal":"Rat.from_int(a.num) >= Rat.from_int(q * a.denom)","proof":["Rat.from_int(q * a.denom) + Rat.from_int(Int.0) <= Rat.from_int(q * a.denom) + Rat.from_int(r) = Rat.from_int(q * a.denom) + Rat.from_int(r) >= Rat.from_int(q * a.denom) + Rat.from_int(Int.0)","Rat.from_int(q * a.denom) <= Rat.from_int(a.num) = Rat.from_int(a.num) >= Rat.from_int(q * a.denom)","q * a.denom = a.denom * q","Rat.new(Int.0, Int.1) = Rat.from_int(Int.0)","Rat.from_int(a.denom * q) + Rat.0 = Rat.from_int(a.denom * q)"]}
{"goal":"Rat.from_int(a.num) >= Rat.from_int(q) * Rat.from_int(a.denom)","proof":["Rat.from_int(q) * Rat.from_int(a.denom) = Rat.from_int(q * a.denom)"]}
{"goal":"Rat.from_int(a.denom).is_positive","proof":["Rat.from_int(a.denom).num.is_positive = Rat.from_int(a.denom).is_positive","not Rat.from_int(a.denom).num.is_positive","Rat.from_int(a.denom).num = a.denom"]}
{"goal":"Rat.from_int(q) * Rat.from_int(a.denom) / Rat.from_int(a.denom) <= Rat.from_int(a.num) / Rat.from_int(a.denom)","proof":["not Rat.from_int(q) * Rat.from_int(a.denom) <= Rat.from_int(a.num) or not Rat.from_int(a.denom).is_positive or Rat.from_int(q) * Rat.from_int(a.denom) / Rat.from_int(a.denom) <= Rat.from_int(a.num) / Rat.from_int(a.denom)","Rat.from_int(q) * Rat.from_int(a.denom) <= Rat.from_int(a.num) = Rat.from_int(a.num) >= Rat.from_int(q) * Rat.from_int(a.denom)","not Rat.from_int(q) * Rat.from_int(a.denom) <= Rat.from_int(a.num)","Rat.from_int(q) * Rat.from_int(a.denom) <= Rat.from_int(a.num)"]}
{"goal":"Rat.from_int(q) * Rat.from_int(a.denom) / Rat.from_int(a.denom) = Rat.from_int(q)","proof":["Rat.from_int(q) * Rat.from_int(a.denom) / Rat.from_int(a.denom) = Rat.from_int(q) or Rat.from_int(a.denom) = Rat.0","Rat.from_int(a.denom) = Rat.0","Rat.0.is_positive","not Rat.0.is_positive or Rat.0 < Rat.0","not Rat.0 < Rat.0"]}
{"goal":"Rat.from_int(q) <= Rat.from_int(a.num) / Rat.from_int(a.denom)","proof":["not Rat.from_int(q) * Rat.from_int(a.denom) / Rat.from_int(a.denom) <= Rat.from_int(a.num) / Rat.from_int(a.denom)"]}
{"goal":"Rat.from_int(q) <= a","proof":["Rat.from_int(a.num) / Rat.from_int(a.denom) = a"]}
{"goal":"q * a.denom + r < q * a.denom + a.denom","proof":["not r < a.denom or q * a.denom + r < q * a.denom + a.denom"]}
{"goal":"q * a.denom + a.denom = (q + Int.1) * a.denom","proof":["q * a.denom + Int.1 * a.denom = (q + Int.1) * a.denom","Int.1 * a.denom = a.denom"]}
{"goal":"a.num < (q + Int.1) * a.denom","proof":[]}
{"goal":"a < Rat.from_int(q + Int.1)","proof":["not a.num < (q + Int.1) * a.denom or a < Rat.from_int(q + Int.1)"]}
{"goal":"floor_exists","proof":["not a < Rat.from_int(q + Int.1) or not Rat.from_int(q) <= a","not a < Rat.from_int(q + Int.1)"]}
{"goal":"exists(k0: Int) { Rat.from_int(k0) <= a and a < Rat.from_int(k0 + Int.1) }","proof":["let s0: Rat -> Int satisfy { forall(x0: Rat) { Rat.from_int(s0(x0)) <= x0 } and forall(x1: Rat) { x1 < Rat.from_int(s0(x1) + Int.1) } }","not a < Rat.from_int(s0(a) + Int.1) or not Rat.from_int(s0(a)) <= a","a < Rat.from_int(s0(a) + Int.1)","Rat.from_int(s0(a)) <= a"]}
{"goal":"a * c < b * c","proof":["not c.is_positive or not a < b or a * c < b * c"]}
{"goal":"b.is_positive","proof":["not a <= b or (b - a).is_positive or b = a","not (b - a).is_positive or not a.is_positive or (b - a + a).is_positive","b - a + a = b","not a < b or a <= b","not (b - a + a).is_positive","not a < b or b != a","b != a","a <= b","not (b - a).is_positive or (b - a + a).is_positive","(b - a).is_positive","not (b - a).is_positive"]}
{"goal":"b * c < b * d","proof":["not b.is_positive or not c < d or c * b < d * b","b * c = c * b","d * b = b * d","not b * c < d * b","not c * b < d * b"]}
{"goal":"mul_lt_lt","proof":["not a * c < c * b or not c * b < b * d or a * c < b * d","b * c = c * b","a * c < c * b","c * b < b * d","not c * b < b * d or not a * c < c * b"]}
{"goal":"a * c < b * c","proof":["not c.is_positive or not a < b or a * c < b * c"]}
{"goal":"b.is_positive","proof":["not a <= b or (b - a).is_positive or b = a","not (b - a).is_positive or not a.is_positive or (b - a + a).is_positive","b - a + a = b","not a < b or a <= b","not (b - a + a).is_positive","not a < b or b != a","b != a","a <= b","not (b - a).is_positive or (b - a + a).is_positive","(b - a).is_positive","not (b - a).is_positive"]}
{"goal":"b * c <= b * d","proof":["not c <= d or not b.is_positive or c * b <= d * b","b * c = c * b","d * b = b * d","not b * c <= d * b","not c * b <= d * b"]}
{"goal":"mul_lt_lte","proof":["not a < b or not c < d or not a.is_positive or not c.is_positive or a * c < b * d","not c < d","not c <= d or c < d or d = c","d = c"]}
{"goal":"b.is_positive","proof":["not (b - a).is_positive or not a.is_positive or (b - a + a).is_positive","(b - a).is_positive = a < b","b - a + a = b","not (b - a + a).is_positive","(b - a).is_positive","not (b - a).is_positive or (b - a + a).is_positive"]}
{"goal":"a < b","proof":["not a <= b or a < b or b = a"]}
{"goal":"b.is_positive","proof":["not a <= b or (b - a).is_positive or b = a","(b - a).is_positive","not (b - a).is_positive or not a.is_positive or (b - a + a).is_positive","b - a + a = b","not (b - a + a).is_positive","not (b - a).is_positive or (b - a + a).is_positive"]}
{"goal":"pos_lte","proof":[]}
{"goal":"a * c <= b * c","proof":["not c.is_positive or not a <= b or a * c <= b * c"]}
{"goal":"b.is_positive","proof":["not a.is_positive or not a <= b or b.is_positive"]}
{"goal":"b * c < b * d","proof":["not c.is_positive or not b.is_positive or not c < d or not b <= b or c * b < d * b","b * c = c * b","d * b = b * d","b != b or b <= b","not b * c < d * b","b <= b","not c * b < d * b"]}
{"goal":"mul_lte_lt","proof":["not c < d or not c.is_positive or not a.is_positive or not a <= b or c * a < d * b","c * a = a * c","d * b = b * d","not a * c < d * b","not c < d or not c.is_positive or c * a < d * b","not c * a < d * b","c * a < d * b"]}
{"goal":"a.reciprocal * a < b.reciprocal * b","proof":["not a < b or not a.reciprocal <= b.reciprocal or not a.is_positive or not a.reciprocal.is_positive or a.reciprocal * a < b.reciprocal * b","not a < b or not a.reciprocal <= b.reciprocal or not a.reciprocal.is_positive or not a.is_positive or a.reciprocal * a < b.reciprocal * b","not a.reciprocal.is_positive","not a.is_positive or a.reciprocal.is_positive"]}
{"goal":"a.reciprocal * a = Rat.1","proof":["a.reciprocal * a = Rat.1 or Rat.0 = a","Rat.0 = a","a.num.is_positive = a.is_positive","Rat.new(Int.0, Int.1) = Rat.from_int(Int.0)","Rat.from_int(Int.0).num = Int.0"]}
{"goal":"b.reciprocal * b = Rat.1","proof":["b.reciprocal * b = Rat.1 or Rat.0 = b","Rat.0 = b","not a < Rat.0 or a.is_negative","not a.is_negative or not a.is_positive","not a.is_negative","a < Rat.0","not a < Rat.0"]}
{"goal":"Rat.1 < Rat.1","proof":[]}
{"goal":"false","proof":["not Rat.1 < Rat.1 or not Rat.1 < Rat.1"]}
{"goal":"lt_pos_reciprocal","proof":["a.reciprocal > b.reciprocal or a.reciprocal < b.reciprocal or b.reciprocal = a.reciprocal","a.reciprocal > b.reciprocal = b.reciprocal < a.reciprocal","not a.reciprocal > b.reciprocal","not a.reciprocal < b.reciprocal or a.reciprocal <= b.reciprocal","b.reciprocal != a.reciprocal or a.reciprocal <= b.reciprocal","b.reciprocal != a.reciprocal","not a.reciprocal < b.reciprocal","a.reciprocal < b.reciprocal"]}
{"goal":"a * a.reciprocal = Rat.1","proof":["a * a.reciprocal = Rat.1 or Rat.0 = a"]}
{"goal":"Rat.new(a.reciprocal.num, a.reciprocal.denom) / a * a = Rat.new(a.reciprocal.num, a.reciprocal.denom)","proof":["Rat.new(a.reciprocal.num, a.reciprocal.denom) / a * a = Rat.new(a.reciprocal.num, a.reciprocal.denom) or Rat.0 = a"]}
{"goal":"a.reciprocal != Rat.0","proof":["a * a.reciprocal = a.reciprocal * a","a * Rat.0 = Rat.0","Rat.1 * a = a"]}
{"goal":"a * a.reciprocal / a.reciprocal = a","proof":["a * a.reciprocal / a.reciprocal = a or a.reciprocal = Rat.0"]}
{"goal":"Rat.1 * a.reciprocal.reciprocal = a","proof":["Rat.1 / a.reciprocal = a","Rat.1 * a.reciprocal.reciprocal = Rat.1 / a.reciprocal"]}
{"goal":"reciprocal_inverts","proof":["Rat.1 * a.reciprocal.reciprocal = a.reciprocal.reciprocal"]}
{"goal":"a.reciprocal.is_positive","proof":["not a.is_positive or a.reciprocal.is_positive"]}
{"goal":"exists(k0: Int) { a.reciprocal < Rat.from_int(k0) }","proof":["not a.reciprocal < Rat.from_int(floor_impl(a.reciprocal) + Int.1)","a.reciprocal < Rat.from_int(floor_impl(a.reciprocal) + Int.1)"]}
{"goal":"Rat.from_int(n).reciprocal < a.reciprocal.reciprocal","proof":["not a.reciprocal < Rat.from_int(n) or not a.reciprocal.is_positive or Rat.from_int(n).reciprocal < a.reciprocal.reciprocal"]}
{"goal":"a.reciprocal.reciprocal = a","proof":["a.reciprocal.reciprocal = a or Rat.0 = a","Rat.0 = a","a.num.is_positive = a.is_positive","Rat.new(Int.0, Int.1) = Rat.from_int(Int.0)","Rat.from_int(Int.0).num = Int.0"]}
{"goal":"Rat.from_int(n).is_positive","proof":["not a.reciprocal <= Rat.from_int(n) or not a.reciprocal.is_positive or Rat.from_int(n).is_positive","not a.reciprocal < Rat.from_int(n) or a.reciprocal <= Rat.from_int(n)","not a.reciprocal <= Rat.from_int(n) or not a.reciprocal.is_positive","a.reciprocal <= Rat.from_int(n)","not a.reciprocal <= Rat.from_int(n)"]}
{"goal":"n.is_positive","proof":["-Int.from_nat(lib(int.int_base).abs(n)) = n or n.is_positive","-Int.from_nat(lib(int.int_base).abs(n)) = n","Rat.from_int(n).num.is_positive = Rat.from_int(n).is_positive","Rat.from_int(-Int.from_nat(lib(int.int_base).abs(n))).num = -Int.from_nat(lib(int.int_base).abs(n))"]}
{"goal":"smaller_int_reciprocal","proof":["not Rat.from_int(n).reciprocal < a or not n.is_positive","not Rat.from_int(n).reciprocal < a","Rat.from_int(n).reciprocal < a"]}
{"goal":"a >= Rat.from_int(a.floor)","proof":["Rat.from_int(a.floor) <= a = a >= Rat.from_int(a.floor)","not Rat.from_int(a.floor) <= a","Rat.from_int(floor_impl(a)) <= a","a.floor = floor_impl(a)"]}
{"goal":"gte_some_int","proof":["not a >= Rat.from_int(a.floor)"]}
{"goal":"Rat.from_int(r.denom).num != Int.0","proof":["(-r).denom = r.denom","Rat.from_int(r.denom).num = r.denom","r.denom = Int.0","(-r).denom = Int.0","(-r).denom != Int.0"]}
{"goal":"Rat.from_int(r.denom) != Rat.0","proof":["Rat.0.num != Int.0"]}
{"goal":"Rat.from_int(r.num) / Rat.from_int(r.denom) * Rat.from_int(r.denom) = Rat.from_int(r.num)","proof":["Rat.from_int(r.num) / Rat.from_int(r.denom) * Rat.from_int(r.denom) = Rat.from_int(r.num) or Rat.from_int(r.denom) = Rat.0"]}
{"goal":"mul_denom","proof":["Rat.from_int(r.num) / Rat.from_int(r.denom) = r"]}
{"goal":"half_pos","proof":["not r.is_positive or not Rat.2.reciprocal.is_positive or (r * Rat.2.reciprocal).is_positive","r * Rat.2.reciprocal = r / Rat.2","not (r * Rat.2.reciprocal).is_positive","not Rat.2.reciprocal.is_positive"]}
{"goal":"r / Rat.2 + r / Rat.2 = r / Rat.2 + r / Rat.2","proof":[]}
{"goal":"r / Rat.2 + r / Rat.2 = (r + r) / Rat.2","proof":["r * Rat.2.reciprocal + r * Rat.2.reciprocal = (r + r) * Rat.2.reciprocal","(r + r) * Rat.2.reciprocal = (r + r) / Rat.2","r * Rat.2.reciprocal = r / Rat.2"]}
{"goal":"r / Rat.2 + r / Rat.2 = Rat.2 * r / Rat.2","proof":["Rat.2 * r / Rat.2 != (r + r) / Rat.2","Rat.2 * r != r + r","Rat.2 * r = r + r"]}
{"goal":"r / Rat.2 + r / Rat.2 = r","proof":["r / Rat.2 + r / Rat.2 = r"]}
{"goal":"add_half_half","proof":[]}
{"goal":"(q - p).is_positive","proof":["not p <= q or (q - p).is_positive or q = p","not p < q or p <= q","not p < q or q != p","q != p","p <= q","not p <= q"]}
{"goal":"(-p - -q).is_positive","proof":["-p + --q = -p - -q","q + -p = q - p","-p + --q = --q + -p","(-p - -q).num.is_positive = (-p - -q).is_positive","(q - p).num.is_positive = (q - p).is_positive","--q = q"]}
{"goal":"lt_neg","proof":["not -q <= -p or -q < -p or -q = -p","not (-p - -q).is_positive or -q <= -p","-p * -Rat.1 = --p","-q * -Rat.1 = --q","not p < q or q != p","q != p","--p = p","--q = q","not -q <= -p or -q = -p","-q <= -p","-q = -p"]}
{"goal":"a < c","proof":[]}
{"goal":"b < c","proof":["not b <= c or b < c or c = b"]}
{"goal":"a < c","proof":["not a < b or not b < c or a < c","not b < c or not a < b"]}
{"goal":"lt_lte_trans","proof":[]}
{"goal":"a < c","proof":[]}
{"goal":"a < b","proof":["not a <= b or a < b or b = a"]}
{"goal":"a < c","proof":["not a < b or not b < c or a < c","not b < c or not a < b"]}
{"goal":"lte_lt_trans","proof":[]}
{"goal":"a / Rat.2 < b / Rat.2","proof":["not Rat.2.is_positive or not a < b or a / Rat.2 < b / Rat.2","not Rat.2.is_positive"]}
{"goal":"a < (a + b) * Rat.2.reciprocal","proof":["a * Rat.2.reciprocal + b * Rat.2.reciprocal = (a + b) * Rat.2.reciprocal","not a / Rat.2 < b / Rat.2 or a / Rat.2 + a / Rat.2 < b / Rat.2 + a / Rat.2","a / Rat.2 + a / Rat.2 = a","a * Rat.2.reciprocal = a / Rat.2","b * Rat.2.reciprocal = b / Rat.2","a * Rat.2.reciprocal + b / Rat.2 = b / Rat.2 + a * Rat.2.reciprocal","not a < a * Rat.2.reciprocal + b * Rat.2.reciprocal","not a < a * Rat.2.reciprocal + b / Rat.2","not a < b / Rat.2 + a * Rat.2.reciprocal","not a < b / Rat.2 + a / Rat.2","a / Rat.2 + a / Rat.2 < b / Rat.2 + a / Rat.2"]}
{"goal":"a / Rat.2 + b / Rat.2 < b","proof":["not a / Rat.2 < b / Rat.2 or a / Rat.2 + b / Rat.2 < b / Rat.2 + b / Rat.2","b / Rat.2 + b / Rat.2 = b","not a / Rat.2 + b / Rat.2 < b / Rat.2 + b / Rat.2"]}
{"goal":"(a + b) * Rat.2.reciprocal < b","proof":["a * Rat.2.reciprocal + b * Rat.2.reciprocal = (a + b) * Rat.2.reciprocal","a * Rat.2.reciprocal = a / Rat.2","b * Rat.2.reciprocal = b / Rat.2"]}
{"goal":"lt_imp_rat_between","proof":["not (a + b) * Rat.2.reciprocal < b or not a < (a + b) * Rat.2.reciprocal","not a < (a + b) * Rat.2.reciprocal"]}
{"goal":"b < a","proof":["b < a = a > b"]}
{"goal":"exists(k0: Rat) { b < k0 and k0 < a }","proof":["let s0: (Rat, Rat) -> Rat satisfy { forall(x0: Rat, x1: Rat) { not x0 < x1 or x0 < s0(x0, x1) } and forall(x2: Rat, x3: Rat) { not x2 < x3 or s0(x2, x3) < x3 } }","not b < s0(b, a) or not s0(b, a) < a","not b < a or s0(b, a) < a","not b < a or b < s0(b, a)","b < s0(b, a)","s0(b, a) < a","not s0(b, a) < a"]}
{"goal":"a > c","proof":["c < a = a > c"]}
{"goal":"c > b","proof":["b < c = c > b"]}
{"goal":"gt_imp_rat_between","proof":["not c > b or not a > c","not a > c"]}
{"goal":"not b * c < a * c","proof":["not a * c < b * c or not b * c < a * c"]}
{"goal":"b != a","proof":[]}
{"goal":"b > a","proof":["not c.is_positive or not b < a or b * c < a * c","b < a or b > a or b = a","not b < a","b < a"]}
{"goal":"lt_cancel_pos_mul_right","proof":["a < b = b > a"]}
{"goal":"not c * b < c * a","proof":["not c * a < c * b or not c * b < c * a"]}
{"goal":"b != a","proof":[]}
{"goal":"b > a","proof":["not a * c < b * c or not c.is_positive or a < b","a < b = b > a","not a < b","a * c = c * a","b * c = c * b","c * a < b * c","not a * c < b * c or a < b","a * c < b * c","not a * c < b * c"]}
{"goal":"lt_cancel_pos_mul_left","proof":["a < b = b > a"]}
{"goal":"not b * c > a * c","proof":["not b * c < a * c or not a * c < b * c","a * c < b * c = b * c > a * c","b * c < a * c = a * c > b * c","a * c < b * c","b * c < a * c","not b * c < a * c"]}
{"goal":"b != a","proof":[]}
{"goal":"b < a","proof":["not c.is_positive or not a < b or a * c < b * c","a < b or a > b or b = a","a * c < b * c = b * c > a * c","b < a = a > b","not a > b","a < b","not a * c < b * c"]}
{"goal":"gt_cancel_pos_mul_right","proof":["a < b or a > b or b = a","a < b","not a < b or not b < a"]}
{"goal":"not c * b > c * a","proof":["not c * b < c * a or not c * a < c * b","c * a < c * b = c * b > c * a","c * b < c * a = c * a > c * b","c * a < c * b","c * b < c * a","not c * b < c * a"]}
{"goal":"b != a","proof":[]}
{"goal":"b < a","proof":["not c * b < c * a or not c.is_positive or b < a","c * b < c * a = c * a > c * b","not c * b < c * a or not c.is_positive","c * b < c * a","not c * b < c * a"]}
{"goal":"gt_cancel_pos_mul_left","proof":["a < b or a > b or b = a","a < b","not a < b or not b < a"]}
{"goal":"(a * b).is_negative","proof":["not b.is_negative or not a.is_positive or (a * b).is_negative"]}
{"goal":"false","proof":["not (a * b).is_negative or not (a * b).is_positive"]}
{"goal":"cancel_positivity_left","proof":["b.is_negative or b.is_positive or Rat.0 = b","Rat.0 = b","b - Rat.0 = b","not (b - Rat.0).is_positive","b - b = Rat.0","a * Rat.0 = Rat.0","not (b - b).is_positive","not Rat.0.is_positive","(a * (b - Rat.0)).is_positive","(a * (b - b)).is_positive","(a * Rat.0).is_positive"]}
{"goal":"cancel_positivity_right","proof":["not (b * a).is_positive or not b.is_positive or a.is_positive","a * b = b * a","(b * a).is_positive"]}
{"goal":"mul_cancels_div_left","proof":["a / b * b = a or Rat.0 = b","b * (a / b) = a / b * b","a / b * b != a"]}
{"goal":"a.abs = -a","proof":["not a.is_negative or a.abs = -a"]}
{"goal":"(-a).abs = -a","proof":["(-a).abs = -a or (-a).is_negative","(-a).is_negative","not a.is_negative or (-a).is_positive","not (-a).is_negative or not (-a).is_positive","(-a).is_positive","not (-a).is_positive"]}
{"goal":"(-a).abs = a.abs","proof":["(-a).abs != -a"]}
{"goal":"(-a).abs = a.abs","proof":["-a != a","Rat.new(Rat.0.num, Rat.0.denom) = Rat.0","Rat.0 - Rat.0 = -Rat.0","Rat.new(a.num, a.denom) - Rat.0 = Rat.new(a.num, a.denom)"]}
{"goal":"a.is_positive","proof":["a.is_negative or a.is_positive or Rat.0 = a"]}
{"goal":"a.abs = a","proof":["a.abs = a or a.is_negative"]}
{"goal":"(-a).is_negative","proof":["not a.is_positive or (-a).is_negative"]}
{"goal":"(-a).abs = a","proof":["-(Rat.0 - a) = a - Rat.0","not (-a).is_negative or (-a).abs = --a","Rat.0 - a.abs = -a.abs","a.abs - Rat.0 = a.abs","(-a).abs = --a"]}
{"goal":"(-a).abs = a.abs","proof":["(-a).abs != a"]}
{"goal":"neg_abs","proof":[]}
{"goal":"abs_non_pos","proof":["a.is_positive or a.is_negative or Rat.0 = a","not a.is_negative or a.abs = -a","not a.is_negative","Rat.0 = a","a.is_negative or a.abs = a","Rat.0 - a = -a","Rat.0 - a != a.abs","a - a = Rat.0","a - a != a.abs","a.abs != Rat.0","a.abs = a","a.abs != a"]}
{"goal":"abs_non_neg","proof":["a.is_negative or a.abs = a"]}
{"goal":"b.abs = b","proof":["b.abs = b or b.is_negative","b.is_negative","not b.is_negative or not b.is_positive"]}
{"goal":"(a * b).abs = (a * b.abs).abs","proof":[]}
{"goal":"b.abs = -b","proof":["b.abs = -b or b.is_positive"]}
{"goal":"a * b.abs = a * -b","proof":["b.abs != -b"]}
{"goal":"a * b.abs = -(a * b)","proof":["-(b * a) = -b * a","a * -b = -b * a","a * b = b * a"]}
{"goal":"(a * b.abs).abs = (a * b).abs","proof":["(-(a * b)).abs != (a * b).abs","(-(a * b)).abs = (a * b).abs"]}
{"goal":"abs_mul_abs","proof":[]}
{"goal":"not (a * b).is_negative","proof":["-(a * b) = -a * b","-(Rat.0 - a) = a - Rat.0","not (a * b).is_negative or (-(a * b)).is_positive","(-(a * b)).is_positive","(-(a * b)).num.is_positive = (-(a * b)).is_positive","(a * b).num.is_positive = (a * b).is_positive","not (a * b).is_negative or not (a * b).is_positive","not (a * b).is_positive","Rat.0 - Rat.0 = Rat.0"]}
{"goal":"not (a * b).is_negative","proof":["(a * Rat.0).is_negative","not Rat.0.is_negative","a * Rat.0 = Rat.0"]}
{"goal":"a.is_positive","proof":["a.is_negative or Rat.0 = a or a.is_positive"]}
{"goal":"b.is_positive","proof":["b.is_negative or Rat.0 = b or b.is_positive"]}
{"goal":"(a * b).is_positive","proof":["not a.is_positive or not b.is_positive or (a * b).is_positive"]}
{"goal":"not (a * b).is_negative","proof":["not a * b < Rat.0 or not Rat.0 < a * b","not (a * b).is_negative or a * b < Rat.0","a * b < Rat.0","not (a * b).is_positive or Rat.0 < a * b","not Rat.0 < a * b","Rat.0 < a * b"]}
{"goal":"mul_non_neg","proof":[]}
{"goal":"(a * b).abs = (a.abs * b.abs).abs","proof":["(a.abs * b.abs).abs = (a.abs * b).abs","(b * a.abs).abs = (b * a).abs","b * a = a * b","b * a.abs = a.abs * b"]}
{"goal":"not a.abs.is_negative","proof":["(Rat.1 * a.abs).abs = (Rat.1 * a).abs","not a.abs.is_negative or a.abs.abs = -a.abs","a.abs.abs = -a.abs","(-a).abs = a.abs","not a.abs.is_negative or (-a.abs).is_positive","(-a.abs).is_positive","not a.abs.is_negative or not a.abs.is_positive","not a.abs.is_positive","Rat.1 * (-a).abs = (-a).abs","Rat.1 * a = a"]}
{"goal":"not b.abs.is_negative","proof":["(Rat.1 * b.abs).abs = (Rat.1 * b).abs","not b.abs.is_negative or b.abs.abs = -b.abs","b.abs.abs = -b.abs","(-b).abs = b.abs","not b.abs.is_negative or (-b.abs).is_positive","(-b.abs).is_positive","not b.abs.is_negative or not b.abs.is_positive","not b.abs.is_positive","Rat.1 * (-b).abs = (-b).abs","Rat.1 * b = b"]}
{"goal":"not (a.abs * b.abs).is_negative","proof":["not (a.abs * b.abs).is_negative or a.abs.is_negative or b.abs.is_negative"]}
{"goal":"(a.abs * b.abs).abs = a.abs * b.abs","proof":["(a.abs * b.abs).abs = a.abs * b.abs or (a.abs * b.abs).is_negative"]}
{"goal":"mul_two_abs","proof":["(a.abs * b.abs).abs != a.abs * b.abs"]}
{"goal":"a.abs != a","proof":["Rat.0 = a"]}
{"goal":"a.is_negative","proof":["a.is_negative or a.abs = a"]}
{"goal":"a.abs = -a","proof":["not a.is_negative or a.abs = -a"]}
{"goal":"a + Rat.0 != Rat.0","proof":["a + Rat.0 != a","a + Rat.0 - Rat.0 = a","a + Rat.0 - Rat.0 = a + Rat.0"]}
{"goal":"a + a.abs != Rat.0","proof":["a + Rat.0 = Rat.0"]}
{"goal":"false","proof":["a + a.abs = a.abs + a","a.abs + a != Rat.0","-a + a = Rat.0"]}
{"goal":"abs_zero_imp_zero","proof":[]}
{"goal":"a.abs = Rat.0","proof":["a.abs != a","not a.is_negative or a.abs = -a","a.is_negative or a.abs = a","a.is_negative","Rat.0 - Rat.0 = -Rat.0","Rat.0 - Rat.0 = Rat.0","Rat.0 - Rat.0 != a.abs","-Rat.0 != a.abs","a.abs = -a","a.abs != -a"]}
{"goal":"Rat.0 <= a.abs","proof":["a.abs != Rat.0 or Rat.0 <= a.abs"]}
{"goal":"a.abs != Rat.0","proof":["a.abs != Rat.0 or Rat.0 = a"]}
{"goal":"a.abs.is_positive","proof":["(Rat.1 * a.abs).abs = (Rat.1 * a).abs","a.abs.abs = -a.abs or a.abs.is_positive","a.abs.is_negative or a.abs.is_positive or a.abs = Rat.0","a.abs.is_negative","a.abs.abs = -a.abs","(-a).abs = a.abs","not a.abs.is_negative or (-a.abs).is_positive","Rat.1 * (-a).abs = (-a).abs","Rat.1 * a = a","(-a.abs).is_positive"]}
{"goal":"Rat.0 <= a.abs","proof":["not (a.abs - Rat.0).is_positive or Rat.0 <= a.abs","not (a.abs - Rat.0).is_positive","a.abs - Rat.0 = a.abs"]}
{"goal":"zero_lte_abs","proof":[]}
{"goal":"r / p * p < r / q * p","proof":["not r / p < r / q or not p.is_positive or r / p * p < r / q * p"]}
{"goal":"r / p * p = r","proof":["r / p * p = r or Rat.0 = p","Rat.0 = p","p.num.is_positive = p.is_positive","Rat.new(Int.0, Int.1) = Rat.from_int(Int.0)","Rat.from_int(Int.0).num = Int.0"]}
{"goal":"r < r / q * p","proof":["not r / p * p < r / q * p"]}
{"goal":"r * q < p * r / q * q","proof":["not r < p * r / q or not q.is_positive or r * q < p * r / q * q","p * (r * q.reciprocal) = p * r * q.reciprocal","p * r * q.reciprocal = p * r / q","r * q.reciprocal = r / q","r / p * p < r / q * p = r / q * p > r / p * p","r < p * r / q = p * r / q > r","p * (r / q) = r / q * p","not r < p * r / q"]}
{"goal":"p * r / q * q = p * r","proof":["p * r / q * q = p * r or Rat.0 = q","Rat.0 = q","q.num.is_positive = q.is_positive","Rat.new(Int.0, Int.1) = Rat.from_int(Int.0)","Rat.from_int(Int.0).num = Int.0"]}
{"goal":"r * q < p * r","proof":["not r * q < p * r / q * q"]}
{"goal":"q * r < p * r","proof":["r * q = q * r"]}
{"goal":"pos_inverses_lt","proof":["not q * r < p * r or not r.is_positive or q < p"]}
{"goal":"r / p * p = r / q * p","proof":["r / q != r / p"]}
{"goal":"r = r / q * p","proof":["r / p * p != r","r / p * p = r or Rat.0 = p"]}
{"goal":"r = p * r / q","proof":["p * (r * q.reciprocal) = p * r * q.reciprocal","p * r * q.reciprocal = p * r / q","r * q.reciprocal = r / q","p * (r / p) = r / p * p"]}
{"goal":"r * q = p * r / q * q","proof":["p * r / q != r"]}
{"goal":"r * q = p * r","proof":["p * r / q * q = p * r or Rat.0 = q","p * r / q * q != p * r"]}
{"goal":"q * r = p * r","proof":["r * q = q * r"]}
{"goal":"inverses_eq","proof":["q * r != p * r or Rat.0 = r or q = p"]}
{"goal":"p != Rat.0","proof":["Rat.0.is_positive","not Rat.0.is_positive or Rat.0 < Rat.0","not Rat.0 < Rat.0"]}
{"goal":"q != Rat.0","proof":["Rat.0.is_positive","not Rat.0.is_positive or Rat.0 < Rat.0","not Rat.0 < Rat.0"]}
{"goal":"q = p","proof":["r / q != r / p or Rat.0 = r or Rat.0 = q or Rat.0 = p or q = p","r / q != r / p or Rat.0 = q or Rat.0 = p or Rat.0 = r or q = p","Rat.0 = r","r.num.is_positive = r.is_positive","Rat.new(Int.0, Int.1) = Rat.from_int(Int.0)","Rat.from_int(Int.0).num = Int.0"]}
{"goal":"q <= p","proof":["not q <= q","not p <= q","q != p or p <= q"]}
{"goal":"q < p","proof":["not r / p < r / q or not r.is_positive or not p.is_positive or not q.is_positive or q < p","not r / p < r / q or not p.is_positive or not q.is_positive or not r.is_positive or q < p","not r / p <= r / q or r / p < r / q or r / q = r / p","not r / p < r / q or not r.is_positive","r / p < r / q","not r / p < r / q"]}
{"goal":"q <= p","proof":["not q < p or q <= p"]}
{"goal":"pos_inverses_lte","proof":[]}
{"goal":"pos_inverses_gt","proof":["not r / q < r / p or not r.is_positive or not q.is_positive or not p.is_positive or p < q","not r / q < r / p or not q.is_positive or not p.is_positive or not r.is_positive or p < q","p < q = q > p","r / q < r / p = r / p > r / q","not p < q","r / q < r / p"]}
{"goal":"pos_inverses_gte","proof":["not r / q <= r / p or not r.is_positive or not q.is_positive or not p.is_positive or p <= q","not r / q <= r / p or not q.is_positive or not p.is_positive or not r.is_positive or p <= q","p <= q = q >= p","r / q <= r / p = r / p >= r / q","not p <= q","r / q <= r / p"]}
{"goal":"not q + r < p + r","proof":["not p + r < q + r or not q + r < p + r"]}
{"goal":"q != p","proof":[]}
{"goal":"q > p","proof":["not q < p or q + r < p + r","q < p or q > p or q = p","not q < p","q < p"]}
{"goal":"lt_cancel_add_right","proof":["p < q = q > p"]}
{"goal":"p * (q - r) = p * (q + -r)","proof":["q + -r != q - r","q + -r = q - r"]}
{"goal":"p * (q - r) = p * q + p * -r","proof":["p * q + p * -r = p * (q + -r)"]}
{"goal":"p * (q - r) = p * q - p * r","proof":["-(r * p) = -r * p","p * q + -(p * r) = p * q - p * r","p * -r = -r * p","r * p = p * r"]}
{"goal":"sub_distrib","proof":[]}
{"goal":"(Rat.1 / Rat.2).is_positive","proof":["not Rat.1.is_positive or (Rat.1 / Rat.2).is_positive","not Rat.1.is_positive"]}
{"goal":"Rat.2.reciprocal < Rat.2.reciprocal + Rat.1 / Rat.2","proof":["not (Rat.1 / Rat.2).is_positive or Rat.2.reciprocal < Rat.2.reciprocal + Rat.1 / Rat.2"]}
{"goal":"Rat.2.reciprocal < Rat.1 / Rat.2 + Rat.1 / Rat.2","proof":["Rat.1 * Rat.2.reciprocal = Rat.1 / Rat.2","Rat.2.reciprocal < Rat.1 / Rat.2 + Rat.1 / Rat.2 = Rat.1 / Rat.2 + Rat.1 / Rat.2 > Rat.2.reciprocal","Rat.2.reciprocal < Rat.2.reciprocal + Rat.1 / Rat.2 = Rat.2.reciprocal + Rat.1 / Rat.2 > Rat.2.reciprocal","Rat.2.reciprocal + Rat.1 / Rat.2 = Rat.1 / Rat.2 + Rat.2.reciprocal","Rat.1 * Rat.2.reciprocal = Rat.2.reciprocal"]}
{"goal":"half_lt_one","proof":["Rat.1 / Rat.2 + Rat.1 / Rat.2 = Rat.1"]}
{"goal":"eps.is_positive","proof":["not Rat.2.reciprocal.is_positive"]}
{"goal":"eps < Rat.1","proof":["not Rat.2.reciprocal < Rat.1"]}
{"goal":"eps * eps < Rat.1","proof":["not eps.is_positive or not eps.is_positive or not eps < Rat.1 or not eps < Rat.1 or eps * eps < Rat.1 * Rat.1","Rat.1 * Rat.1 = Rat.1","not eps * eps < Rat.1 * Rat.1"]}
{"goal":"eps.is_positive and eps * eps < a","proof":["not eps * eps < a","not eps * eps < Rat.1 or not Rat.1 <= a or eps * eps < a","not eps * eps < Rat.1 or not Rat.1 <= a"]}
{"goal":"a < Rat.1","proof":["Rat.1 > a or Rat.1 < a or Rat.1 = a","Rat.1 > a = a < Rat.1","not Rat.1 > a","not Rat.1 < a or Rat.1 <= a","Rat.1 != a or Rat.1 <= a","Rat.1 != a","not Rat.1 < a","Rat.1 < a"]}
{"goal":"eps.is_positive","proof":["not (a * a).is_positive","not a.is_positive or not a.is_positive or (a * a).is_positive"]}
{"goal":"eps.is_positive and eps * eps < a","proof":["not eps * eps < a","not eps.is_positive or not eps.is_positive or not eps < a or not eps < Rat.1 or eps * eps < a * Rat.1","not a.is_positive or not a < Rat.1 or a * a < Rat.1 * a","not eps < a or not a < Rat.1 or eps < Rat.1","Rat.1 * a = a","a * Rat.1 = a","not eps * eps < a * Rat.1","not eps < a or eps < Rat.1","not a.is_positive or a * a < Rat.1 * a","a * a < Rat.1 * a","a * a < a","eps < a","not eps < Rat.1","eps < Rat.1"]}
{"goal":"lower_squared","proof":["let s0: Rat satisfy { s0.is_positive and s0 * s0 < a }","not s0 * s0 < a or not s0.is_positive","not s0 * s0 < a"]}
{"goal":"false","proof":["not b * a < b * b or not b.is_positive or a < b","not a.is_positive or not b <= a or b * a <= a * a","not a * a < b * b or not b * a <= a * a or b * a < b * b","not a < b or not b <= a or a < a","a >= b = b <= a","b <= a","not a < a","not a < b or a < a","not a < b","not b * a <= a * a or b * a < b * b","not b <= a or b * a <= a * a","not b * a < b * b or a < b","b * a <= a * a","not b * a < b * b","b * a < b * b"]}
{"goal":"square_lt_imp_lt","proof":["b > a or b < a or b = a","a >= b = b <= a","not b <= a","b > a = a < b","not b > a","not b < a or b <= a","b != a or b <= a","b != a","not b < a","b < a"]}
{"goal":"smaller_positive","proof":["not Rat.2.reciprocal * a < a or not (Rat.2.reciprocal * a).is_positive","not Rat.2.reciprocal < Rat.1 or not a.is_positive or Rat.2.reciprocal * a < Rat.1 * a","not Rat.2.reciprocal.is_positive or not a.is_positive or (Rat.2.reciprocal * a).is_positive","Rat.1 * a = a","not Rat.2.reciprocal.is_positive or (Rat.2.reciprocal * a).is_positive","(Rat.2.reciprocal * a).is_positive","not Rat.2.reciprocal < Rat.1 or Rat.2.reciprocal * a < Rat.1 * a","Rat.2.reciprocal * a < Rat.1 * a","not Rat.2.reciprocal * a < a","Rat.2.reciprocal * a < a"]}
{"goal":"exists(k0: Rat) { k0.is_positive and k0 < a }","proof":["let s0: Rat -> Rat satisfy { forall(x0: Rat) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Rat) { not x1.is_positive or s0(x1) < x1 } }","not s0(a) < a or not s0(a).is_positive","not a.is_positive or s0(a) < a","not a.is_positive or s0(a).is_positive","s0(a).is_positive","s0(a) < a","not s0(a) < a"]}
{"goal":"r.is_positive and r < a and r < b","proof":["not r < b","not r < a or not a < b or r < b","not r < a or not a < b"]}
{"goal":"exists(k0: Rat) { k0.is_positive and k0 < b }","proof":["let s0: Rat -> Rat satisfy { forall(x0: Rat) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Rat) { not x1.is_positive or s0(x1) < x1 } }","not s0(b) < b or not s0(b).is_positive","not b.is_positive or s0(b) < b","not b.is_positive or s0(b).is_positive","s0(b).is_positive","s0(b) < b","not s0(b) < b"]}
{"goal":"r.is_positive and r < a and r < b","proof":["not r < a","not r < b or not b <= a or r < a","not r < b or not b < a or r < a","b > a or b < a or b = a","b > a = a < b","b != a or b <= a","not b > a","not r < b or not b < a","not b < a","not r < b or not b <= a","not b <= a","b = a","b != a"]}
{"goal":"lt_both_pos","proof":["let s0: Rat satisfy { s0.is_positive and s0 < a and s0 < b }","not s0 < b or not s0 < a or not s0.is_positive","not s0.is_positive"]}
{"goal":"a * c < b / c * c","proof":["not a < b / c or not c.is_positive or a * c < b / c * c"]}
{"goal":"b / c * c = b","proof":["b / c * c = b or Rat.0 = c","Rat.0 = c","c.num.is_positive = c.is_positive","Rat.new(Int.0, Int.1) = Rat.from_int(Int.0)","Rat.from_int(Int.0).num = Int.0"]}
{"goal":"lt_rhs_div_pos","proof":["not a * c < b / c * c"]}
{"goal":"lte_abs","proof":["not q <= Rat.0 or not Rat.0 <= q.abs or q <= q.abs","not (Rat.0 - q).is_positive or q <= Rat.0","q.abs = q or q.is_negative","q.abs != q or q <= q.abs","q.abs != q","Rat.0 - q = -q","not q.is_negative or (-q).is_positive","Rat.0 <= q.abs","not Rat.0 <= q.abs or not q <= Rat.0","not q <= Rat.0","q.is_negative","not (Rat.0 - q).is_positive","(-q).is_positive","not (-q).is_positive"]}
{"goal":"a - b = -(b - a)","proof":["-(b - a) = a - b"]}
{"goal":"(a - b).abs = (b - a).abs","proof":["-(a - b) = b - a","(-(a - b)).abs = (a - b).abs"]}
{"goal":"(a - b).abs < eps","proof":["(a - b).abs < eps = a.is_close(b, eps)"]}
{"goal":"(b - a).abs < eps","proof":[]}
{"goal":"close_comm","proof":["(b - a).abs < eps = b.is_close(a, eps)"]}
{"goal":"(a - b).abs < eps","proof":["(a - b).abs < eps = a.is_close(b, eps)"]}
{"goal":"a - b <= (a - b).abs","proof":["a - b <= (a - b).abs"]}
{"goal":"a - b < eps","proof":["not a - b <= (a - b).abs or not (a - b).abs < eps or a - b < eps","not a - b <= (a - b).abs or not (a - b).abs < eps"]}
{"goal":"a - b + b < eps + b","proof":["not a - b < eps or a - b + b < eps + b"]}
{"goal":"a < eps + b","proof":["a - b + b = a"]}
{"goal":"a < b + eps","proof":["eps + b = b + eps"]}
{"goal":"(b - a).abs < eps","proof":["(b - a).abs < eps = b.is_close(a, eps)","not b.is_close(a, eps)","not a.is_close(b, eps) or b.is_close(a, eps)"]}
{"goal":"b - a <= (b - a).abs","proof":["b - a <= (b - a).abs"]}
{"goal":"b - a < eps","proof":["not b - a <= (b - a).abs or not (b - a).abs < eps or b - a < eps","not b - a <= (b - a).abs or not (b - a).abs < eps"]}
{"goal":"b - a + a < eps + a","proof":["not b - a < eps or b - a + a < eps + a"]}
{"goal":"b - a + a = b","proof":["b - a + a = b"]}
{"goal":"b < eps + a","proof":["not b - a + a < eps + a"]}
{"goal":"eps + a > b","proof":["eps + a = a + eps","not a + eps > b","b < a + eps","b < a + eps = a + eps > b"]}
{"goal":"a + eps > b","proof":["eps + a = a + eps"]}
{"goal":"a + eps + -eps > b + -eps","proof":["not b < a + eps or b + -eps < a + eps + -eps","eps + a = a + eps","b < a + eps","b + -eps < a + eps + -eps = a + eps + -eps > b + -eps","not b + -eps < a + eps + -eps"]}
{"goal":"a > b + -eps","proof":["a + eps + -eps = a + eps - eps","a + eps - eps = a","a + eps - eps > b + -eps"]}
{"goal":"close_imp_bounds","proof":["not a > b - eps","b + -eps = b - eps"]}
{"goal":"(a - b).abs = b - a","proof":["-(a - b) = b - a","not (a - b).is_negative or (a - b).abs = -(a - b)","(a - b).abs != -(a - b)","(a - b).abs = -(a - b)"]}
{"goal":"a > b + -eps","proof":["b + -eps = b - eps"]}
{"goal":"a + eps + -eps > b + -eps","proof":["a + eps + -eps = a + eps - eps","not a + eps - eps > b + -eps","a + eps - eps = a"]}
{"goal":"a + eps > b","proof":["not b + -eps < a + eps + -eps or b < a + eps","b + -eps < a + eps + -eps = a + eps + -eps > b + -eps","b < a + eps = a + eps > b","not b < a + eps","b + -eps < a + eps + -eps"]}
{"goal":"eps + a > b","proof":["eps + a = a + eps"]}
{"goal":"b < eps + a","proof":["eps + a = a + eps","not b < a + eps","b < a + eps = a + eps > b"]}
{"goal":"b - a + a = b","proof":["b - a + a = b"]}
{"goal":"b - a + a < eps + a","proof":[]}
{"goal":"b - a < eps","proof":["not b - a + a < eps + a or b - a < eps"]}
{"goal":"(a - b).abs < eps","proof":[]}
{"goal":"a.is_close(b, eps)","proof":["(a - b).abs < eps = a.is_close(b, eps)"]}
{"goal":"(a - b).abs = a - b","proof":["(a - b).is_negative or (a - b).abs = a - b"]}
{"goal":"a < eps + b","proof":["eps + b = b + eps"]}
{"goal":"a - b + b < eps + b","proof":["a - b + b = a"]}
{"goal":"a - b < eps","proof":["not a - b + b < eps + b or a - b < eps"]}
{"goal":"a - b < eps","proof":[]}
{"goal":"(a - b).abs < eps","proof":[]}
{"goal":"a.is_close(b, eps)","proof":["(a - b).abs < eps = a.is_close(b, eps)"]}
{"goal":"bounds_imp_close","proof":[]}
{"goal":"Rat.from_nat(a) < Rat.from_nat(b)","proof":["not Int.from_nat(a) < Int.from_nat(b) or Rat.from_int(Int.from_nat(a)) < Rat.from_int(Int.from_nat(b))","not a < b or Int.from_nat(a) < Int.from_nat(b)","Rat.from_int(Int.from_nat(a)) = Rat.from_nat(a)","Rat.from_int(Int.from_nat(b)) = Rat.from_nat(b)","not Rat.from_nat(a) < Rat.from_int(Int.from_nat(b))","Int.from_nat(a) < Int.from_nat(b)","not Rat.from_int(Int.from_nat(a)) < Rat.from_int(Int.from_nat(b))","Rat.from_int(Int.from_nat(a)) < Rat.from_int(Int.from_nat(b))"]}
{"goal":"nat_lt_imp_rat_lt","proof":[]}
{"goal":"Rat.from_nat(n) = Rat.0","proof":["Rat.from_int(Int.from_nat(Nat.0)) = Rat.from_nat(Nat.0)","Rat.new(Int.from_nat(Nat.0), Int.1) = Rat.from_int(Int.from_nat(Nat.0))","-Int.from_nat(n) = lib(int.int_base).neg_nat(n)","--Int.from_nat(Nat.0) = Int.from_nat(Nat.0)"]}
{"goal":"Rat.0 <= Rat.from_nat(n)","proof":["Rat.from_nat(n) != Rat.0 or Rat.0 <= Rat.from_nat(n)"]}
{"goal":"Nat.0 < n","proof":["lib(nat.nat_base).bounded_sub(Nat.0, n) + n = Nat.0 or Nat.0 < n","lib(nat.nat_base).bounded_sub(Nat.0, n) + n != Nat.0 or n = Nat.0","lib(nat.nat_base).bounded_sub(Nat.0, n) + n = Nat.0"]}
{"goal":"Rat.from_nat(Nat.0) < Rat.from_nat(n)","proof":["not Nat.0 < n or Rat.from_nat(Nat.0) < Rat.from_nat(n)"]}
{"goal":"Rat.0 < Rat.from_nat(n)","proof":["Rat.from_nat(n) > Rat.0 = Rat.0 < Rat.from_nat(n)","Rat.from_nat(n) > Rat.from_nat(Nat.0) = Rat.from_nat(Nat.0) < Rat.from_nat(n)","Rat.from_int(Int.from_nat(Nat.0)) = Rat.from_nat(Nat.0)","Rat.new(Int.0, Int.1) = Rat.from_int(Int.0)"]}
{"goal":"Rat.0 <= Rat.from_nat(n)","proof":["not Rat.0 < Rat.from_nat(n) or Rat.0 <= Rat.from_nat(n)"]}
{"goal":"from_nat_nonneg","proof":[]}
{"goal":"recip_eq_one_div","proof":["Rat.1 * a.reciprocal = Rat.1 / a","Rat.1 * a.reciprocal != a.reciprocal","Rat.1 * a.reciprocal = a.reciprocal"]}
