{"goal":"Real.1.is_positive","proof":["let s0: Real satisfy { true }","let s1: (Real, Rat) -> Rat satisfy { forall(x0: Rat, x1: Real) { not x0.is_positive or x1.is_close(Real.from_rat(s1(x1, x0)), Real.from_rat(x0)) } }","not Rat.1.is_positive or s0.is_close(Real.from_rat(s1(s0, Rat.1)), Real.from_rat(Rat.1))","not s0.is_close(Real.from_rat(s1(s0, Rat.1)), Real.from_rat(Rat.1)) or Real.from_rat(Rat.1).is_positive","not Real.from_rat(Rat.1).is_positive","not s0.is_close(Real.from_rat(s1(s0, Rat.1)), Real.from_rat(Rat.1))"]}
{"goal":"exists(k0: Nat) { cauchy_bound(q, k0, Real.1) }","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: Nat -> Real -> Real) satisfy { forall(x0: Nat -> Real, x1: Real) { not converges(x0) or not x1.is_positive or cauchy_bound(x0, s0(x0, x1), x1) } and forall(x2: Nat -> Real) { s1(x2).is_positive or converges(x2) } and forall(x3: Nat -> Real, x4: Nat) { not cauchy_bound(x3, x4, s1(x3)) or converges(x3) } }","not cauchy_bound(q, s0(q, Real.1), Real.1)","not converges(q) or not Real.1.is_positive or cauchy_bound(q, s0(q, Real.1), Real.1)"]}
{"goal":"exists(k0: Real) { k0 < q(n) - Real.1 }","proof":["let s0: Nat satisfy { true }","let s1: (Real, Rat) -> Rat satisfy { forall(x0: Real, x1: Rat) { not x0.is_close(Real.from_rat(s1(x0, x1)), Real.from_rat(x1)) or not x1.is_positive } and forall(x2: Rat, x3: Real) { not x2.is_positive or Real.from_rat(s1(x3, x2)) < x3 } }","not Real.from_rat(s1(q(n) - Real.1, rat.iop(s0))) < q(n) - Real.1","not rat.iop(s0).is_positive or Real.from_rat(s1(q(n) - Real.1, rat.iop(s0))) < q(n) - Real.1","not rat.iop(s0).is_positive","rat.iop(s0).is_positive"]}
{"goal":"exists(k0: Rat) { lb > Real.from_rat(k0) }","proof":["let s0: Nat satisfy { true }","let s1: (Real, Rat) -> Rat satisfy { forall(x0: Rat, x1: Real) { not x0.is_positive or Real.from_rat(s1(x1, x0)) < x1 } and forall(x2: Rat, x3: Real) { not x2.is_positive or x3 < Real.from_rat(s1(x3, x2) + x2) } }","not lb > Real.from_rat(-(s1(-lb, rat.iop(s0)) + rat.iop(s0)))","not rat.iop(s0).is_positive or -lb < Real.from_rat(s1(-lb, rat.iop(s0)) + rat.iop(s0))","not -lb < Real.from_rat(s1(-lb, rat.iop(s0)) + rat.iop(s0)) or lb > Real.from_rat(-(s1(-lb, rat.iop(s0)) + rat.iop(s0)))","not -lb < Real.from_rat(s1(-lb, rat.iop(s0)) + rat.iop(s0))","not rat.iop(s0).is_positive","rat.iop(s0).is_positive"]}
{"goal":"q(n).is_close(q(i), Real.1)","proof":["not cauchy_bound(q, n, Real.1) or not n <= n or not n <= i or q(n).is_close(q(i), Real.1)","n <= n","not cauchy_bound(q, n, Real.1) or not n <= i or not n <= n"]}
{"goal":"q(i) > q(n) - Real.1","proof":["not q(i).is_close(q(n), Real.1) or q(i) > q(n) - Real.1","not q(n).is_close(q(i), Real.1) or q(i).is_close(q(n), Real.1)","not q(i).is_close(q(n), Real.1)","q(i).is_close(q(n), Real.1)"]}
{"goal":"q(i) > lb","proof":["not lb < q(n) - Real.1 or not q(i) <= lb or q(i) < q(n) - Real.1","q(i) <= lb or q(i) > lb","q(i) <= lb","not q(i) <= q(n) - Real.1 or not q(i) > q(n) - Real.1","not q(i) < q(n) - Real.1 or q(i) <= q(n) - Real.1","not q(i) <= q(n) - Real.1","not q(i) <= lb or q(i) < q(n) - Real.1","not q(i) < q(n) - Real.1","q(i) < q(n) - Real.1"]}
{"goal":"lb <= q(i)","proof":["not q(i).is_close(q(n), Real.1) or q(n) - Real.1 < q(i)","not lb < q(n) - Real.1 or not q(n) - Real.1 <= q(i) or lb < q(i)","not q(n).is_close(q(i), Real.1) or q(i).is_close(q(n), Real.1)","not lb < q(i) or lb <= q(i)","not q(n) - Real.1 < q(i) or q(n) - Real.1 <= q(i)","not lb < q(i)","q(i).is_close(q(n), Real.1)","not q(n) - Real.1 <= q(i) or not lb < q(n) - Real.1","not q(n) - Real.1 <= q(i)","q(n) - Real.1 < q(i)","not q(n) - Real.1 < q(i)"]}
{"goal":"eventual_lb(q, lb)","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not s0(x0, x1) <= x2 or not eventual_lb(x0, x1) or x1 <= x0(x2) } and forall(x3: Nat, x4: Nat -> Real, x5: Real) { x3 <= s1(x4, x5, x3) or eventual_lb(x4, x5) } and forall(x6: Real, x7: Nat -> Real, x8: Nat) { not x6 <= x7(s1(x7, x6, x8)) or eventual_lb(x7, x6) } }","not n <= s1(q, lb, n) or lb <= q(s1(q, lb, n))","not lb <= q(s1(q, lb, n)) or eventual_lb(q, lb)","n <= s1(q, lb, n) or eventual_lb(q, lb)","n <= s1(q, lb, n)","not lb <= q(s1(q, lb, n))"]}
{"goal":"cauchy_gt_rat(q, r)","proof":["not lb > Real.from_rat(r) or not eventual_lb(q, lb) or cauchy_gt_rat(q, r)","not lb > Real.from_rat(r) or not eventual_lb(q, lb)"]}
{"goal":"cauchy_gt_something","proof":["not cauchy_gt_rat(q, r)"]}
{"goal":"Real.1.is_positive","proof":["let s0: Real satisfy { true }","let s1: (Real, Rat) -> Rat satisfy { forall(x0: Rat, x1: Real) { not x0.is_positive or x1.is_close(Real.from_rat(s1(x1, x0)), Real.from_rat(x0)) } }","not Rat.1.is_positive or s0.is_close(Real.from_rat(s1(s0, Rat.1)), Real.from_rat(Rat.1))","not s0.is_close(Real.from_rat(s1(s0, Rat.1)), Real.from_rat(Rat.1)) or Real.from_rat(Rat.1).is_positive","not Real.from_rat(Rat.1).is_positive","not s0.is_close(Real.from_rat(s1(s0, Rat.1)), Real.from_rat(Rat.1))"]}
{"goal":"exists(k0: Nat) { cauchy_bound(q, k0, Real.1) }","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: Nat -> Real -> Real) satisfy { forall(x0: Nat -> Real, x1: Real) { not converges(x0) or not x1.is_positive or cauchy_bound(x0, s0(x0, x1), x1) } and forall(x2: Nat -> Real) { s1(x2).is_positive or converges(x2) } and forall(x3: Nat -> Real, x4: Nat) { not cauchy_bound(x3, x4, s1(x3)) or converges(x3) } }","not cauchy_bound(q, s0(q, Real.1), Real.1)","not converges(q) or not Real.1.is_positive or cauchy_bound(q, s0(q, Real.1), Real.1)"]}
{"goal":"exists(k0: Rat) { Real.from_rat(k0) > q(n) + Real.1 }","proof":["let s0: Real satisfy { true }","let s1: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { x0 < Real.from_rat(s1(x0, x1)) } and forall(x2: Real, x3: Real) { x2 < Real.from_rat(s1(x3, x2)) } }","not Real.from_rat(s1(q(n) + Real.1, s0)) > q(n) + Real.1","not q(n) + Real.1 < Real.from_rat(s1(q(n) + Real.1, s0)) or not Real.from_rat(s1(q(n) + Real.1, s0)) <= q(n) + Real.1 or q(n) + Real.1 < q(n) + Real.1","q(n) + Real.1 < Real.from_rat(s1(q(n) + Real.1, s0))","Real.from_rat(s1(q(n) + Real.1, s0)) > q(n) + Real.1 or Real.from_rat(s1(q(n) + Real.1, s0)) <= q(n) + Real.1","not q(n) + Real.1 < q(n) + Real.1 or q(n) + Real.1 != q(n) + Real.1","Real.from_rat(s1(q(n) + Real.1, s0)) <= q(n) + Real.1","not q(n) + Real.1 < q(n) + Real.1","not q(n) + Real.1 < Real.from_rat(s1(q(n) + Real.1, s0)) or q(n) + Real.1 < q(n) + Real.1","q(n) + Real.1 < q(n) + Real.1"]}
{"goal":"exists(k0: Real) { k0 > Real.from_rat(r) and eventual_lb(q, k0) }","proof":["let s0: (Nat -> Real, Rat) -> Real satisfy { forall(x0: Nat -> Real, x1: Rat) { not cauchy_gt_rat(x0, x1) or s0(x0, x1) > Real.from_rat(x1) } and forall(x2: Nat -> Real, x3: Rat) { not cauchy_gt_rat(x2, x3) or eventual_lb(x2, s0(x2, x3)) } and forall(x4: Real, x5: Rat, x6: Nat -> Real) { not x4 > Real.from_rat(x5) or not eventual_lb(x6, x4) or cauchy_gt_rat(x6, x5) } }","not s0(q, r) > Real.from_rat(r) or not eventual_lb(q, s0(q, r))","not cauchy_gt_rat(q, r) or s0(q, r) > Real.from_rat(r)","not cauchy_gt_rat(q, r) or eventual_lb(q, s0(q, r))","eventual_lb(q, s0(q, r))","s0(q, r) > Real.from_rat(r)","not s0(q, r) > Real.from_rat(r)"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies q(x0) >= lb } }","proof":["let (s1: (Nat -> Real, Real) -> Nat, s2: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Nat) { not s1(x2, x3) <= x4 or not eventual_lb(x2, x3) or x3 <= x2(x4) } and forall(x5: Nat, x6: Nat -> Real, x7: Real) { x5 <= s2(x6, x7, x5) or eventual_lb(x6, x7) } and forall(x8: Real, x9: Nat -> Real, x10: Nat) { not x8 <= x9(s2(x9, x8, x10)) or eventual_lb(x9, x8) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not q(s0(x1)) >= lb } }","not q(s0(s1(q, lb))) >= lb","s1(q, lb) <= s0(s1(q, lb))","not s1(q, lb) <= s0(s1(q, lb)) or not eventual_lb(q, lb) or lb <= q(s0(s1(q, lb)))","q(s0(s1(q, lb))) >= lb = lb <= q(s0(s1(q, lb)))","not eventual_lb(q, lb) or lb <= q(s0(s1(q, lb)))","lb <= q(s0(s1(q, lb)))"]}
{"goal":"q(n2).is_close(q(n), Real.1)","proof":["not cauchy_bound(q, n, Real.1) or not n <= n2 or not n <= n or q(n2).is_close(q(n), Real.1)","n <= n","not cauchy_bound(q, n, Real.1) or not n <= n2 or not n <= n"]}
{"goal":"not Real.from_rat(r) <= q(n) + Real.1","proof":["not Real.from_rat(r) > q(n) + Real.1 or not Real.from_rat(r) <= q(n) + Real.1"]}
{"goal":"not lb < q(n) + Real.1","proof":["not lb < q(n) + Real.1 or not q(n) + Real.1 <= Real.from_rat(r) or lb < Real.from_rat(r)","not lb <= Real.from_rat(r) or not lb > Real.from_rat(r)","not lb < Real.from_rat(r) or lb <= Real.from_rat(r)","q(n) + Real.1 <= Real.from_rat(r) or Real.from_rat(r) <= q(n) + Real.1","not lb <= Real.from_rat(r)","not q(n) + Real.1 <= Real.from_rat(r) or lb < Real.from_rat(r)","q(n) + Real.1 <= Real.from_rat(r)","not lb < Real.from_rat(r)","lb < Real.from_rat(r)"]}
{"goal":"q(n2) > lb","proof":["not n2 <= n2 or q(n2) >= lb","not lb.is_close(q(n), Real.1) or lb < q(n) + Real.1","not q(n2) <= lb or q(n2) < lb or q(n2) = lb","not q(n2) >= lb or not q(n2) < lb","q(n2) <= lb or q(n2) > lb","q(n2) <= lb","n2 <= n2","q(n2) >= lb","not lb.is_close(q(n), Real.1)","q(n2) < lb or q(n2) = lb","not q(n2) < lb","q(n2) = lb"]}
{"goal":"q(n2) > Real.from_rat(r)","proof":["not n2 <= n2 or q(n2) >= lb","not q(n2).is_close(q(n), Real.1) or q(n2) < q(n) + Real.1","not lb < q(n2) or not q(n2) < q(n) + Real.1 or lb < q(n) + Real.1","not lb <= q(n2) or lb < q(n2) or q(n2) = lb","q(n2) >= lb = lb <= q(n2)","n2 <= n2","q(n2) >= lb","lb <= q(n2)","q(n2) < q(n) + Real.1","not q(n2) < q(n) + Real.1 or not lb < q(n2)","not lb < q(n2)","q(n2) = lb"]}
{"goal":"false","proof":["not n2 <= n2 or q(n2) >= lb","not lb.is_close(q(n), Real.1) or lb < q(n) + Real.1","not q(n2).is_close(q(n), Real.1) or q(n2) < q(n) + Real.1","not lb < q(n2) or not q(n2) < q(n) + Real.1 or lb < q(n) + Real.1","not lb <= q(n2) or lb < q(n2) or q(n2) = lb","q(n2) >= lb = lb <= q(n2)","n2 <= n2","q(n2) >= lb","not lb.is_close(q(n), Real.1)","lb <= q(n2)","q(n2) < q(n) + Real.1","not q(n2) < q(n) + Real.1 or not lb < q(n2)","not lb < q(n2)","q(n2) = lb"]}
{"goal":"n2 <= n","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or x0 + s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat) { Nat.0 != s0(x2, x3) or not x2 < x3 } }","not n2 < n or n2 + s0(n2, n) = n","n2 + s0(n2, n) != n or n2 <= n","n2 + s0(n2, n) != n","n2 < n or n <= n2","not n2 < n","n2 < n"]}
{"goal":"not Real.from_rat(r) <= q(n) + Real.1","proof":["not Real.from_rat(r) > q(n) + Real.1 or not Real.from_rat(r) <= q(n) + Real.1"]}
{"goal":"Real.from_rat(r) < lb + Real.1","proof":["not lb < lb + Real.1 or not Real.from_rat(r) <= lb or Real.from_rat(r) < lb + Real.1","lb <= Real.from_rat(r) or Real.from_rat(r) <= lb","not lb <= Real.from_rat(r) or not lb > Real.from_rat(r)","lb < lb + Real.1","not lb <= Real.from_rat(r)","not lb < lb + Real.1 or not Real.from_rat(r) <= lb","Real.from_rat(r) <= lb","not Real.from_rat(r) <= lb"]}
{"goal":"q(n) != lb","proof":["not Real.from_rat(r) <= lb + Real.1","lb + Real.1 = Real.1 + lb","not Real.from_rat(r) <= Real.1 + lb","Real.from_rat(r) < Real.1 + lb","not Real.from_rat(r) < Real.1 + lb or Real.from_rat(r) <= Real.1 + lb"]}
{"goal":"q(n) > lb","proof":["not n2 <= n or q(n) >= lb","not q(n) <= lb or q(n) < lb or q(n) = lb","not q(n) >= lb or not q(n) < lb","q(n) > lb or q(n) <= lb","q(n) <= lb","q(n) < lb","q(n) >= lb","not q(n) >= lb"]}
{"goal":"q(n) > Real.from_rat(r)","proof":["not n2 <= n or q(n) >= lb","not lb < q(n) or not q(n) <= Real.from_rat(r) or lb < Real.from_rat(r)","not lb <= q(n) or lb < q(n) or q(n) = lb","q(n) <= Real.from_rat(r) or q(n) > Real.from_rat(r)","q(n) <= Real.from_rat(r)","not lb <= Real.from_rat(r) or not lb > Real.from_rat(r)","q(n) >= lb = lb <= q(n)","not lb < Real.from_rat(r) or lb <= Real.from_rat(r)","not lb <= Real.from_rat(r)","q(n) >= lb","lb <= q(n)","lb < q(n)","not lb < Real.from_rat(r)","not lb < q(n) or lb < Real.from_rat(r)"]}
{"goal":"Real.from_rat(r) < q(n)","proof":["Real.from_rat(r) >= q(n) or Real.from_rat(r) < q(n)","Real.from_rat(r) >= q(n)","not q(n) <= Real.from_rat(r) or not q(n) > Real.from_rat(r)","Real.from_rat(r) >= q(n) = q(n) <= Real.from_rat(r)","not q(n) <= Real.from_rat(r)","q(n) <= Real.from_rat(r)"]}
{"goal":"false","proof":["not Real.from_rat(r) < q(n) or not q(n) < q(n) + Real.1 or Real.from_rat(r) < q(n) + Real.1","not Real.from_rat(r) < q(n) + Real.1 or Real.from_rat(r) <= q(n) + Real.1","q(n) < q(n) + Real.1","not Real.from_rat(r) < q(n) + Real.1","not q(n) < q(n) + Real.1 or Real.from_rat(r) < q(n) + Real.1"]}
{"goal":"cauchy_gt_not_everything","proof":["cauchy_gt_rat(q, r)"]}
{"goal":"cauchy_gt_is_cut","proof":["let s0: Nat -> Real -> Rat satisfy { forall(x0: Nat -> Real) { not cauchy_gt_rat(x0, s0(x0)) or not converges(x0) } }","not cauchy_gt_rat(q, s0(q)) or not converges(q)","let s1: Nat -> Real -> Rat satisfy { forall(x1: Nat -> Real) { not converges(x1) or cauchy_gt_rat(x1, s1(x1)) } }","not converges(q) or cauchy_gt_rat(q, s1(q))","let s2: Rat satisfy { true }","not cauchy_gt_rat(q, s1(q)) or is_cut(cauchy_gt_rat(q)) or cauchy_gt_rat(q, s2)","not cauchy_gt_rat(q, s2) or is_cut(cauchy_gt_rat(q)) or cauchy_gt_rat(q, s0(q))","not cauchy_gt_rat(q, s1(q)) or cauchy_gt_rat(q, s2)","not cauchy_gt_rat(q, s2) or cauchy_gt_rat(q, s0(q))","cauchy_gt_rat(q, s1(q))","not cauchy_gt_rat(q, s0(q))","cauchy_gt_rat(q, s2)","not cauchy_gt_rat(q, s2)"]}
{"goal":"exists(k0: Real) { k0 > Real.from_rat(y) and eventual_lb(q, k0) }","proof":["let s0: (Nat -> Real, Rat) -> Real satisfy { forall(x0: Nat -> Real, x1: Rat) { not cauchy_gt_rat(x0, x1) or s0(x0, x1) > Real.from_rat(x1) } and forall(x2: Nat -> Real, x3: Rat) { not cauchy_gt_rat(x2, x3) or eventual_lb(x2, s0(x2, x3)) } and forall(x4: Real, x5: Rat, x6: Nat -> Real) { not x4 > Real.from_rat(x5) or not eventual_lb(x6, x4) or cauchy_gt_rat(x6, x5) } }","not s0(q, y) > Real.from_rat(y) or not eventual_lb(q, s0(q, y))","not cauchy_gt_rat(q, y) or s0(q, y) > Real.from_rat(y)","not cauchy_gt_rat(q, y) or eventual_lb(q, s0(q, y))","eventual_lb(q, s0(q, y))","s0(q, y) > Real.from_rat(y)","not s0(q, y) > Real.from_rat(y)"]}
{"goal":"Real.from_rat(y) < lb","proof":["lb <= Real.from_rat(y) = Real.from_rat(y) >= lb","Real.from_rat(y) < lb or Real.from_rat(y) >= lb","Real.from_rat(y) >= lb","not lb <= Real.from_rat(y) or not lb > Real.from_rat(y)","lb <= Real.from_rat(y)","not lb <= Real.from_rat(y)"]}
{"goal":"Real.from_rat(x) < lb","proof":["not Real.from_rat(y) < lb or not Real.from_rat(x) <= Real.from_rat(y) or Real.from_rat(x) < lb","not x < y or Real.from_rat(x) < Real.from_rat(y)","not Real.from_rat(x) < Real.from_rat(y) or Real.from_rat(x) <= Real.from_rat(y)","not Real.from_rat(x) <= Real.from_rat(y) or not Real.from_rat(y) < lb","not Real.from_rat(x) <= Real.from_rat(y)","Real.from_rat(x) < Real.from_rat(y)","not Real.from_rat(x) < Real.from_rat(y)"]}
{"goal":"cauchy_gt_rat(q, x)","proof":["not lb > Real.from_rat(x) or not eventual_lb(q, lb) or cauchy_gt_rat(q, x)","not lb <= Real.from_rat(x) or not Real.from_rat(x) <= lb or Real.from_rat(x) = lb","lb <= Real.from_rat(x) or lb > Real.from_rat(x)","not Real.from_rat(x) < lb or Real.from_rat(x) <= lb","not Real.from_rat(x) < lb or Real.from_rat(x) != lb","not lb > Real.from_rat(x) or not eventual_lb(q, lb)","not lb > Real.from_rat(x)","Real.from_rat(x) != lb","Real.from_rat(x) <= lb","lb <= Real.from_rat(x)","not lb <= Real.from_rat(x)"]}
{"goal":"cauchy_gt_is_lower","proof":["let (s0: Rat -> Bool -> Rat, s1: Rat -> Bool -> Rat) satisfy { forall(x0: Rat, x1: Rat, x2: Rat -> Bool) { not x0 < x1 or not is_lower(x2) or not x2(x1) or x2(x0) } and forall(x3: Rat -> Bool) { is_lower(x3) or x3(s1(x3)) } and forall(x4: Rat -> Bool) { s0(x4) < s1(x4) or is_lower(x4) } and forall(x5: Rat -> Bool) { not x5(s0(x5)) or is_lower(x5) } }","not cauchy_gt_rat(q, s1(cauchy_gt_rat(q))) or not s0(cauchy_gt_rat(q)) < s1(cauchy_gt_rat(q)) or cauchy_gt_rat(q, s0(cauchy_gt_rat(q)))","s0(cauchy_gt_rat(q)) < s1(cauchy_gt_rat(q)) or is_lower(cauchy_gt_rat(q))","not cauchy_gt_rat(q, s0(cauchy_gt_rat(q))) or is_lower(cauchy_gt_rat(q))","not cauchy_gt_rat(q, s0(cauchy_gt_rat(q)))","is_lower(cauchy_gt_rat(q)) or cauchy_gt_rat(q, s1(cauchy_gt_rat(q)))","cauchy_gt_rat(q, s1(cauchy_gt_rat(q)))","s0(cauchy_gt_rat(q)) < s1(cauchy_gt_rat(q))"]}
{"goal":"exists(k0: Rat) { is_greatest(cauchy_gt_rat(q), k0) }","proof":["let s0: Rat -> Bool -> Rat satisfy { forall(x0: Rat -> Bool) { not has_greatest(x0) or is_greatest(x0, s0(x0)) } and forall(x1: Rat -> Bool, x2: Rat) { not is_greatest(x1, x2) or has_greatest(x1) } }","not is_greatest(cauchy_gt_rat(q), s0(cauchy_gt_rat(q)))","not has_greatest(cauchy_gt_rat(q)) or is_greatest(cauchy_gt_rat(q), s0(cauchy_gt_rat(q)))"]}
{"goal":"cauchy_gt_rat(q, r)","proof":["not is_greatest(cauchy_gt_rat(q), r) or cauchy_gt_rat(q, r)"]}
{"goal":"exists(k0: Real) { Real.from_rat(r) < k0 and eventual_lb(q, k0) }","proof":["let s0: (Nat -> Real, Rat) -> Real satisfy { forall(x0: Nat -> Real, x1: Rat) { not cauchy_gt_rat(x0, x1) or s0(x0, x1) > Real.from_rat(x1) } and forall(x2: Nat -> Real, x3: Rat) { not cauchy_gt_rat(x2, x3) or eventual_lb(x2, s0(x2, x3)) } and forall(x4: Real, x5: Rat, x6: Nat -> Real) { not x4 > Real.from_rat(x5) or not eventual_lb(x6, x4) or cauchy_gt_rat(x6, x5) } }","not Real.from_rat(r) < s0(q, r) or not eventual_lb(q, s0(q, r))","not --s0(q, r) > Real.from_rat(r) or -s0(q, r) < Real.from_rat(-r)","not cauchy_gt_rat(q, r) or s0(q, r) > Real.from_rat(r)","not cauchy_gt_rat(q, r) or eventual_lb(q, s0(q, r))","not -s0(q, r) < -Real.from_rat(r) or Real.from_rat(r) < s0(q, r)","-Real.from_rat(r) = Real.from_rat(-r)","--s0(q, r) = s0(q, r)","eventual_lb(q, s0(q, r))","s0(q, r) > Real.from_rat(r)","not Real.from_rat(r) < s0(q, r)","--s0(q, r) > Real.from_rat(r)","not -s0(q, r) < -Real.from_rat(r)","-s0(q, r) < Real.from_rat(-r)","not -s0(q, r) < Real.from_rat(-r)"]}
{"goal":"exists(k0: Rat) { r < k0 and Real.from_rat(k0) < lb }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or s0(x0, x1).is_positive } and forall(x2: Real, x3: Real) { not x2 < x3 or x2 + Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(r + s0(Real.from_rat(r), lb)) < lb or not r < r + s0(Real.from_rat(r), lb)","not Real.from_rat(r) < lb or Real.from_rat(r) + Real.from_rat(s0(Real.from_rat(r), lb)) < lb","Real.from_rat(r) + Real.from_rat(s0(Real.from_rat(r), lb)) = Real.from_rat(r + s0(Real.from_rat(r), lb))","not Real.from_rat(r) < lb or s0(Real.from_rat(r), lb).is_positive","not s0(Real.from_rat(r), lb).is_positive or r < r + s0(Real.from_rat(r), lb)","s0(Real.from_rat(r), lb).is_positive","Real.from_rat(r) + Real.from_rat(s0(Real.from_rat(r), lb)) < lb","Real.from_rat(r + s0(Real.from_rat(r), lb)) < lb","not r < r + s0(Real.from_rat(r), lb)"]}
{"goal":"lb > Real.from_rat(b)","proof":["not Real.from_rat(b) >= lb or not Real.from_rat(b) < lb","lb <= Real.from_rat(b) or lb > Real.from_rat(b)","lb <= Real.from_rat(b)","Real.from_rat(b) >= lb = lb <= Real.from_rat(b)","not Real.from_rat(b) >= lb","Real.from_rat(b) >= lb"]}
{"goal":"b > r","proof":["r < b = b > r"]}
{"goal":"cauchy_gt_rat(q, b)","proof":["not lb > Real.from_rat(b) or not eventual_lb(q, lb) or cauchy_gt_rat(q, b)","not lb > Real.from_rat(b) or not eventual_lb(q, lb)"]}
{"goal":"false","proof":["not b <= r or not r < b or r < r","not is_greatest(cauchy_gt_rat(q), r) or not cauchy_gt_rat(q, b) or b <= r","r < b = b > r","not r < r","r < b","not cauchy_gt_rat(q, b) or b <= r","b <= r","not b <= r or r < r"]}
{"goal":"cauchy_gt_has_no_greatest","proof":[]}
{"goal":"cauchy_gt_is_dedekind_cut","proof":["not is_lower(cauchy_gt_rat(q)) or not is_cut(cauchy_gt_rat(q)) or has_greatest(cauchy_gt_rat(q)) or is_dedekind_cut(cauchy_gt_rat(q))","not has_greatest(cauchy_gt_rat(q)) or not converges(q)","not converges(q) or is_lower(cauchy_gt_rat(q))","not converges(q) or is_cut(cauchy_gt_rat(q))","is_cut(cauchy_gt_rat(q))","is_lower(cauchy_gt_rat(q))","not has_greatest(cauchy_gt_rat(q))","has_greatest(cauchy_gt_rat(q))"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies lb1 <= q(x0) } }","proof":["let (s1: (Nat -> Real, Real) -> Nat, s2: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Nat) { not s1(x2, x3) <= x4 or not eventual_lb(x2, x3) or x3 <= x2(x4) } and forall(x5: Nat, x6: Nat -> Real, x7: Real) { x5 <= s2(x6, x7, x5) or eventual_lb(x6, x7) } and forall(x8: Real, x9: Nat -> Real, x10: Nat) { not x8 <= x9(s2(x9, x8, x10)) or eventual_lb(x9, x8) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not lb1 <= q(s0(x1)) } }","not lb1 <= q(s0(s1(q, lb1)))","s1(q, lb1) <= s0(s1(q, lb1))","not s1(q, lb1) <= s0(s1(q, lb1)) or not eventual_lb(q, lb1) or lb1 <= q(s0(s1(q, lb1)))","not s1(q, lb1) <= s0(s1(q, lb1))"]}
{"goal":"lb1 <= q(i)","proof":["not n <= i or lb1 <= q(i)"]}
{"goal":"lb2 < lb1","proof":[]}
{"goal":"lb2 <= q(i)","proof":["not lb2 <= lb1 or not lb1 <= q(i) or lb2 <= q(i)","not lb2 < lb1 or lb2 <= lb1","not lb1 <= q(i) or not lb2 <= lb1","lb2 <= lb1","not lb2 <= lb1"]}
{"goal":"eventual_lb_extends","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not s0(x0, x1) <= x2 or not eventual_lb(x0, x1) or x1 <= x0(x2) } and forall(x3: Nat, x4: Nat -> Real, x5: Real) { x3 <= s1(x4, x5, x3) or eventual_lb(x4, x5) } and forall(x6: Real, x7: Nat -> Real, x8: Nat) { not x6 <= x7(s1(x7, x6, x8)) or eventual_lb(x7, x6) } }","not n <= s1(q, lb2, n) or lb2 <= q(s1(q, lb2, n))","not lb2 <= q(s1(q, lb2, n)) or eventual_lb(q, lb2)","n <= s1(q, lb2, n) or eventual_lb(q, lb2)","n <= s1(q, lb2, n)","not lb2 <= q(s1(q, lb2, n))"]}
{"goal":"exists(k0: Rat) { lb < Real.from_rat(k0) and Real.from_rat(k0) < limit(q) }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(s0(lb, limit(q))) < limit(q) or not lb < Real.from_rat(s0(lb, limit(q)))","not lb < limit(q) or Real.from_rat(s0(lb, limit(q))) < limit(q)","not lb < limit(q) or lb < Real.from_rat(s0(lb, limit(q)))","lb < Real.from_rat(s0(lb, limit(q)))","Real.from_rat(s0(lb, limit(q))) < limit(q)","not Real.from_rat(s0(lb, limit(q))) < limit(q)"]}
{"goal":"limit(q).gt_rat(r)","proof":["not limit(q) <= Real.from_rat(r) or not Real.from_rat(r) <= limit(q) or limit(q) = Real.from_rat(r)","not limit(q) > Real.from_rat(r) or limit(q).gt_rat(r)","not limit(q) > Real.from_rat(r)","limit(q) <= Real.from_rat(r) or limit(q) > Real.from_rat(r)","not Real.from_rat(r) < limit(q) or Real.from_rat(r) <= limit(q)","not Real.from_rat(r) < limit(q) or limit(q) != Real.from_rat(r)","limit(q) != Real.from_rat(r)","Real.from_rat(r) <= limit(q)","limit(q) <= Real.from_rat(r)","not limit(q) <= Real.from_rat(r)"]}
{"goal":"cauchy_gt_rat(q, r)","proof":["not Real.new(cauchy_gt_rat(q)).gt_rat(r) or not is_dedekind_cut(cauchy_gt_rat(q)) or cauchy_gt_rat(q, r)","Real.new(cauchy_gt_rat(q)) = limit(q)","not converges(q) or is_dedekind_cut(cauchy_gt_rat(q))","is_dedekind_cut(cauchy_gt_rat(q))","Real.new(cauchy_gt_rat(q)).gt_rat(r)"]}
{"goal":"exists(k0: Real) { k0 > Real.from_rat(r) and eventual_lb(q, k0) }","proof":["let s0: (Nat -> Real, Rat) -> Real satisfy { forall(x0: Nat -> Real, x1: Rat) { not cauchy_gt_rat(x0, x1) or s0(x0, x1) > Real.from_rat(x1) } and forall(x2: Nat -> Real, x3: Rat) { not cauchy_gt_rat(x2, x3) or eventual_lb(x2, s0(x2, x3)) } and forall(x4: Real, x5: Rat, x6: Nat -> Real) { not x4 > Real.from_rat(x5) or not eventual_lb(x6, x4) or cauchy_gt_rat(x6, x5) } }","not s0(q, r) > Real.from_rat(r) or not eventual_lb(q, s0(q, r))","not cauchy_gt_rat(q, r) or s0(q, r) > Real.from_rat(r)","not cauchy_gt_rat(q, r) or eventual_lb(q, s0(q, r))","eventual_lb(q, s0(q, r))","s0(q, r) > Real.from_rat(r)","not s0(q, r) > Real.from_rat(r)"]}
{"goal":"lb < lb2","proof":["not lb < Real.from_rat(r) or not Real.from_rat(r) <= lb2 or lb < lb2","not lb2 <= Real.from_rat(r) or not lb2 > Real.from_rat(r)","lb2 <= Real.from_rat(r) or Real.from_rat(r) <= lb2","not Real.from_rat(r) <= lb2 or not lb < Real.from_rat(r)","not Real.from_rat(r) <= lb2","not lb2 <= Real.from_rat(r)","lb2 <= Real.from_rat(r)"]}
{"goal":"lt_limit_imp_lb","proof":["not eventual_lb(q, lb2) or not lb < lb2 or eventual_lb(q, lb)","not eventual_lb(q, lb2) or not lb < lb2"]}
{"goal":"lb_lte_limit","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real, x2: Rat) { not x0 <= x1 or not x0.gt_rat(x2) or x1.gt_rat(x2) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not lb > Real.from_rat(s0(lb, limit(q))) or not eventual_lb(q, lb) or cauchy_gt_rat(q, s0(lb, limit(q)))","not limit(q).gt_rat(s0(lb, limit(q))) or lb <= limit(q)","lb.gt_rat(s0(lb, limit(q))) or lb <= limit(q)","not is_dedekind_cut(cauchy_gt_rat(q)) or not cauchy_gt_rat(q, s0(lb, limit(q))) or Real.new(cauchy_gt_rat(q)).gt_rat(s0(lb, limit(q)))","not lb.gt_rat(s0(lb, limit(q))) or lb > Real.from_rat(s0(lb, limit(q)))","lb.gt_rat(s0(lb, limit(q)))","Real.new(cauchy_gt_rat(q)) = limit(q)","not converges(q) or is_dedekind_cut(cauchy_gt_rat(q))","not limit(q).gt_rat(s0(lb, limit(q)))","is_dedekind_cut(cauchy_gt_rat(q))","not lb > Real.from_rat(s0(lb, limit(q))) or cauchy_gt_rat(q, s0(lb, limit(q)))","lb > Real.from_rat(s0(lb, limit(q)))","not Real.new(cauchy_gt_rat(q)).gt_rat(s0(lb, limit(q)))","cauchy_gt_rat(q, s0(lb, limit(q)))","not cauchy_gt_rat(q, s0(lb, limit(q)))"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies q(x0) <= ub1 } }","proof":["let (s1: (Nat -> Real, Real) -> Nat, s2: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Nat) { not s1(x2, x3) <= x4 or not eventual_ub(x2, x3) or x2(x4) <= x3 } and forall(x5: Nat, x6: Nat -> Real, x7: Real) { x5 <= s2(x6, x7, x5) or eventual_ub(x6, x7) } and forall(x8: Nat -> Real, x9: Real, x10: Nat) { not x8(s2(x8, x9, x10)) <= x9 or eventual_ub(x8, x9) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not q(s0(x1)) <= ub1 } }","not q(s0(s1(q, ub1))) <= ub1","s1(q, ub1) <= s0(s1(q, ub1))","not s1(q, ub1) <= s0(s1(q, ub1)) or not eventual_ub(q, ub1) or q(s0(s1(q, ub1))) <= ub1","not s1(q, ub1) <= s0(s1(q, ub1))"]}
{"goal":"q(i) <= ub1","proof":["not n <= i or q(i) <= ub1"]}
{"goal":"q(i) <= ub2","proof":["not q(i) <= ub1 or not ub1 <= ub2 or q(i) <= ub2","not ub1 < ub2 or ub1 <= ub2","not q(i) <= ub1 or not ub1 <= ub2","ub1 <= ub2","not ub1 <= ub2"]}
{"goal":"eventual_ub_extends","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not s0(x0, x1) <= x2 or not eventual_ub(x0, x1) or x0(x2) <= x1 } and forall(x3: Nat, x4: Nat -> Real, x5: Real) { x3 <= s1(x4, x5, x3) or eventual_ub(x4, x5) } and forall(x6: Nat -> Real, x7: Real, x8: Nat) { not x6(s1(x6, x7, x8)) <= x7 or eventual_ub(x6, x7) } }","not n <= s1(q, ub2, n) or q(s1(q, ub2, n)) <= ub2","not q(s1(q, ub2, n)) <= ub2 or eventual_ub(q, ub2)","n <= s1(q, ub2, n) or eventual_ub(q, ub2)","n <= s1(q, ub2, n)","not q(s1(q, ub2, n)) <= ub2"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies q(x0) = a } }","proof":["let (s1: (Nat -> Real, Real) -> Nat, s2: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Nat) { not s1(x2, x3) <= x4 or not eventual_eq(x2, x3) or x3 = x2(x4) } and forall(x5: Nat, x6: Nat -> Real, x7: Real) { x5 <= s2(x6, x7, x5) or eventual_eq(x6, x7) } and forall(x8: Nat -> Real, x9: Real, x10: Nat) { x8(s2(x8, x9, x10)) != x9 or eventual_eq(x8, x9) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { q(s0(x1)) != a } }","q(s0(s1(q, a))) != a","s1(q, a) <= s0(s1(q, a))","not s1(q, a) <= s0(s1(q, a)) or not eventual_eq(q, a) or q(s0(s1(q, a))) = a","not s1(q, a) <= s0(s1(q, a))"]}
{"goal":"q(i) = a","proof":["not n <= i or q(i) = a"]}
{"goal":"a <= q(i)","proof":["not a <= a","let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real, x2: Rat) { not x0 <= x1 or not x0.gt_rat(x2) or x1.gt_rat(x2) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not a.gt_rat(s0(a, a)) or a <= a","a.gt_rat(s0(a, a)) or a <= a","not a.gt_rat(s0(a, a))","a.gt_rat(s0(a, a))"]}
{"goal":"eventual_eq_imp_ub","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not s0(x0, x1) <= x2 or not eventual_lb(x0, x1) or x1 <= x0(x2) } and forall(x3: Nat, x4: Nat -> Real, x5: Real) { x3 <= s1(x4, x5, x3) or eventual_lb(x4, x5) } and forall(x6: Real, x7: Nat -> Real, x8: Nat) { not x6 <= x7(s1(x7, x6, x8)) or eventual_lb(x7, x6) } }","not n <= s1(q, a, n) or a <= q(s1(q, a, n))","not a <= q(s1(q, a, n)) or eventual_lb(q, a)","n <= s1(q, a, n) or eventual_lb(q, a)","n <= s1(q, a, n)","not a <= q(s1(q, a, n))"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies q(x0) = a } }","proof":["let (s1: (Nat -> Real, Real) -> Nat, s2: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Nat) { not s1(x2, x3) <= x4 or not eventual_eq(x2, x3) or x3 = x2(x4) } and forall(x5: Nat, x6: Nat -> Real, x7: Real) { x5 <= s2(x6, x7, x5) or eventual_eq(x6, x7) } and forall(x8: Nat -> Real, x9: Real, x10: Nat) { x8(s2(x8, x9, x10)) != x9 or eventual_eq(x8, x9) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { q(s0(x1)) != a } }","q(s0(s1(q, a))) != a","s1(q, a) <= s0(s1(q, a))","not s1(q, a) <= s0(s1(q, a)) or not eventual_eq(q, a) or q(s0(s1(q, a))) = a","not s1(q, a) <= s0(s1(q, a))"]}
{"goal":"q(i) = a","proof":["not n <= i or q(i) = a"]}
{"goal":"a <= q(i)","proof":["not a <= a","let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real, x2: Rat) { not x0 <= x1 or not x0.gt_rat(x2) or x1.gt_rat(x2) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not a.gt_rat(s0(a, a)) or a <= a","a.gt_rat(s0(a, a)) or a <= a","not a.gt_rat(s0(a, a))","a.gt_rat(s0(a, a))"]}
{"goal":"eventual_eq_imp_lb","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not s0(x0, x1) <= x2 or not eventual_ub(x0, x1) or x0(x2) <= x1 } and forall(x3: Nat, x4: Nat -> Real, x5: Real) { x3 <= s1(x4, x5, x3) or eventual_ub(x4, x5) } and forall(x6: Nat -> Real, x7: Real, x8: Nat) { not x6(s1(x6, x7, x8)) <= x7 or eventual_ub(x6, x7) } }","not n <= s1(q, a, n) or q(s1(q, a, n)) = a","let s2: Nat satisfy { forall(x9: Nat) { not s2 <= x9 or a = q(x9) } }","not s2 <= s1(q, a, s2) or q(s1(q, a, s2)) = a","not n <= s1(q, a, n) or a <= q(s1(q, a, n))","not q(s1(q, a, s2)) <= a or eventual_ub(q, a)","n <= s1(q, a, n) or eventual_ub(q, a)","s2 <= s1(q, a, s2) or eventual_ub(q, a)","n <= s1(q, a, n)","s2 <= s1(q, a, s2)","not q(s1(q, a, s2)) <= a","q(s1(q, a, s2)) = a","q(s1(q, a, n)) = a","a <= q(s1(q, a, n))","a <= a"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies q(x0) = a } }","proof":["let (s1: (Nat -> Real, Real) -> Nat, s2: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Nat) { not s1(x2, x3) <= x4 or not eventual_eq(x2, x3) or x3 = x2(x4) } and forall(x5: Nat, x6: Nat -> Real, x7: Real) { x5 <= s2(x6, x7, x5) or eventual_eq(x6, x7) } and forall(x8: Nat -> Real, x9: Real, x10: Nat) { x8(s2(x8, x9, x10)) != x9 or eventual_eq(x8, x9) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { q(s0(x1)) != a } }","q(s0(s1(q, a))) != a","s1(q, a) <= s0(s1(q, a))","not s1(q, a) <= s0(s1(q, a)) or not eventual_eq(q, a) or q(s0(s1(q, a))) = a","not s1(q, a) <= s0(s1(q, a))"]}
{"goal":"q(i) = a","proof":["not n <= i or q(i) = a"]}
{"goal":"q(j) = a","proof":["not n <= j or q(j) = a"]}
{"goal":"q(i).is_close(q(j), eps)","proof":["not q(i).is_close(a, eps)","not a.is_close(a, eps)","not eps.is_positive or a.is_close(a, eps)"]}
{"goal":"cauchy_bound(q, n, eps)","proof":["let (s0: (Nat -> Real, Nat, Real) -> Nat, s1: (Nat -> Real, Nat, Real) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Nat, x2: Real, x3: Nat, x4: Nat) { not cauchy_bound(x0, x1, x2) or not x1 <= x3 or not x1 <= x4 or x0(x3).is_close(x0(x4), x2) } and forall(x5: Nat, x6: Nat -> Real, x7: Real) { x5 <= s0(x6, x5, x7) or cauchy_bound(x6, x5, x7) } and forall(x8: Nat, x9: Nat -> Real, x10: Real) { x8 <= s1(x9, x8, x10) or cauchy_bound(x9, x8, x10) } and forall(x11: Nat -> Real, x12: Nat, x13: Real) { not x11(s0(x11, x12, x13)).is_close(x11(s1(x11, x12, x13)), x13) or cauchy_bound(x11, x12, x13) } }","not n <= s0(q, n, eps) or not n <= s1(q, n, eps) or q(s0(q, n, eps)).is_close(q(s1(q, n, eps)), eps)","not q(s0(q, n, eps)).is_close(q(s1(q, n, eps)), eps) or cauchy_bound(q, n, eps)","n <= s1(q, n, eps) or cauchy_bound(q, n, eps)","n <= s0(q, n, eps) or cauchy_bound(q, n, eps)","n <= s0(q, n, eps)","n <= s1(q, n, eps)","not q(s0(q, n, eps)).is_close(q(s1(q, n, eps)), eps)"]}
{"goal":"eq_converges","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: Nat -> Real -> Real) satisfy { forall(x0: Nat -> Real, x1: Real) { not converges(x0) or not x1.is_positive or cauchy_bound(x0, s0(x0, x1), x1) } and forall(x2: Nat -> Real) { s1(x2).is_positive or converges(x2) } and forall(x3: Nat -> Real, x4: Nat) { not cauchy_bound(x3, x4, s1(x3)) or converges(x3) } }","not s1(q).is_positive or cauchy_bound(q, n, s1(q))","not cauchy_bound(q, n, s1(q)) or converges(q)","not cauchy_bound(q, n, s1(q))","s1(q).is_positive or converges(q)","not s1(q).is_positive","s1(q).is_positive"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies q(x0) <= a } }","proof":["let (s1: (Nat -> Real, Real) -> Nat, s2: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Nat) { not s1(x2, x3) <= x4 or not eventual_ub(x2, x3) or x2(x4) <= x3 } and forall(x5: Nat, x6: Nat -> Real, x7: Real) { x5 <= s2(x6, x7, x5) or eventual_ub(x6, x7) } and forall(x8: Nat -> Real, x9: Real, x10: Nat) { not x8(s2(x8, x9, x10)) <= x9 or eventual_ub(x8, x9) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not q(s0(x1)) <= a } }","not q(s0(s1(q, a))) <= a","s1(q, a) <= s0(s1(q, a))","not s1(q, a) <= s0(s1(q, a)) or not eventual_ub(q, a) or q(s0(s1(q, a))) <= a","not s1(q, a) <= s0(s1(q, a))"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies q(x0) >= a } }","proof":["let (s1: (Nat -> Real, Real) -> Nat, s2: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Nat) { not s1(x2, x3) <= x4 or not eventual_lb(x2, x3) or x3 <= x2(x4) } and forall(x5: Nat, x6: Nat -> Real, x7: Real) { x5 <= s2(x6, x7, x5) or eventual_lb(x6, x7) } and forall(x8: Real, x9: Nat -> Real, x10: Nat) { not x8 <= x9(s2(x9, x8, x10)) or eventual_lb(x9, x8) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not q(s0(x1)) >= a } }","not q(s0(s1(q, a))) >= a","s1(q, a) <= s0(s1(q, a))","not s1(q, a) <= s0(s1(q, a)) or not eventual_lb(q, a) or a <= q(s0(s1(q, a)))","q(s0(s1(q, a))) >= a = a <= q(s0(s1(q, a)))","not eventual_lb(q, a) or a <= q(s0(s1(q, a)))","a <= q(s0(s1(q, a)))"]}
{"goal":"exists(k0: Nat) { n1 <= k0 and n2 <= k0 }","proof":["let s0: Nat satisfy { true }","let s1: (Nat, Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat, x2: Nat) { x0 <= s1(x0, x1, x2) } and forall(x3: Nat, x4: Nat, x5: Nat) { x3 <= s1(x4, x3, x5) } and forall(x6: Nat, x7: Nat, x8: Nat) { x6 <= s1(x7, x8, x6) } }","not n2 <= s1(n2, s0, n1) or not n1 <= s1(n2, s0, n1)","n1 <= s1(n2, s0, n1)","n2 <= s1(n2, s0, n1)","not n1 <= s1(n2, s0, n1)"]}
{"goal":"q(i) <= a","proof":["not n1 <= i or q(i) <= a","not n1 <= i","not n1 <= n or not n <= i or n1 <= i","not n1 <= n or n1 <= i"]}
{"goal":"q(i) >= a","proof":["not n2 <= i or q(i) >= a","not n2 <= i","not n2 <= n or not n <= i or n2 <= i","not n2 <= n or n2 <= i"]}
{"goal":"q(i) = a","proof":["not q(i) <= a or q(i) < a or q(i) = a","q(i) < a","not q(i) >= a or not q(i) < a"]}
{"goal":"lb_ub_imp_eq","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not s0(x0, x1) <= x2 or not eventual_eq(x0, x1) or x1 = x0(x2) } and forall(x3: Nat, x4: Nat -> Real, x5: Real) { x3 <= s1(x4, x5, x3) or eventual_eq(x4, x5) } and forall(x6: Nat -> Real, x7: Real, x8: Nat) { x6(s1(x6, x7, x8)) != x7 or eventual_eq(x6, x7) } }","not n <= s1(q, a, n) or q(s1(q, a, n)) = a","q(s1(q, a, n)) != a or eventual_eq(q, a)","n <= s1(q, a, n) or eventual_eq(q, a)","n <= s1(q, a, n)","q(s1(q, a, n)) != a"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies lb <= q(x0) } }","proof":["let (s1: (Nat -> Real, Real) -> Nat, s2: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Nat) { not s1(x2, x3) <= x4 or not eventual_lb(x2, x3) or x3 <= x2(x4) } and forall(x5: Nat, x6: Nat -> Real, x7: Real) { x5 <= s2(x6, x7, x5) or eventual_lb(x6, x7) } and forall(x8: Real, x9: Nat -> Real, x10: Nat) { not x8 <= x9(s2(x9, x8, x10)) or eventual_lb(x9, x8) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not lb <= q(s0(x1)) } }","not lb <= q(s0(s1(q, lb)))","s1(q, lb) <= s0(s1(q, lb))","not s1(q, lb) <= s0(s1(q, lb)) or not eventual_lb(q, lb) or lb <= q(s0(s1(q, lb)))","not s1(q, lb) <= s0(s1(q, lb))"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies q(x0) <= ub } }","proof":["let (s1: (Nat -> Real, Real) -> Nat, s2: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Nat) { not s1(x2, x3) <= x4 or not eventual_ub(x2, x3) or x2(x4) <= x3 } and forall(x5: Nat, x6: Nat -> Real, x7: Real) { x5 <= s2(x6, x7, x5) or eventual_ub(x6, x7) } and forall(x8: Nat -> Real, x9: Real, x10: Nat) { not x8(s2(x8, x9, x10)) <= x9 or eventual_ub(x8, x9) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not q(s0(x1)) <= ub } }","not q(s0(s1(q, ub))) <= ub","s1(q, ub) <= s0(s1(q, ub))","not s1(q, ub) <= s0(s1(q, ub)) or not eventual_ub(q, ub) or q(s0(s1(q, ub))) <= ub","not s1(q, ub) <= s0(s1(q, ub))"]}
{"goal":"exists(k0: Nat) { n1 <= k0 and n2 <= k0 }","proof":["let s0: Nat satisfy { true }","let s1: (Nat, Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat, x2: Nat) { x0 <= s1(x0, x1, x2) } and forall(x3: Nat, x4: Nat, x5: Nat) { x3 <= s1(x4, x3, x5) } and forall(x6: Nat, x7: Nat, x8: Nat) { x6 <= s1(x7, x8, x6) } }","not n2 <= s1(n2, s0, n1) or not n1 <= s1(n2, s0, n1)","n1 <= s1(n2, s0, n1)","n2 <= s1(n2, s0, n1)","not n1 <= s1(n2, s0, n1)"]}
{"goal":"lb <= q(n)","proof":["not n1 <= n or lb <= q(n)"]}
{"goal":"q(n) <= ub","proof":["not n2 <= n or q(n) <= ub"]}
{"goal":"lb_lte_ub","proof":["not lb <= q(n) or not q(n) <= ub or lb <= ub","not q(n) <= ub or not lb <= q(n)"]}
{"goal":"exists(k0: Rat) { limit(q) > Real.from_rat(k0) and Real.from_rat(k0) > ub }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 > x1 or x0 > Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 > x3 or Real.from_rat(s0(x2, x3)) > x3 } }","not limit(q) > Real.from_rat(s0(limit(q), ub)) or not Real.from_rat(s0(limit(q), ub)) > ub","not limit(q) > ub or Real.from_rat(s0(limit(q), ub)) > ub","not limit(q) > ub or limit(q) > Real.from_rat(s0(limit(q), ub))","Real.from_rat(s0(limit(q), ub)) > ub","limit(q) > Real.from_rat(s0(limit(q), ub))","not limit(q) > Real.from_rat(s0(limit(q), ub))"]}
{"goal":"limit(q).gt_rat(r)","proof":["not limit(q) > Real.from_rat(r) or limit(q).gt_rat(r)","not limit(q) > Real.from_rat(r)","limit(q) > Real.from_rat(r) = Real.from_rat(r) < limit(q)"]}
{"goal":"exists(k0: Real) { k0 > Real.from_rat(r) and eventual_lb(q, k0) }","proof":["let s0: Rat satisfy { limit(q) > Real.from_rat(s0) and Real.from_rat(s0) > ub }","not eventual_ub(q, ub) or not eventual_lb(q, Real.from_rat(s0)) or Real.from_rat(s0) <= ub","not Real.from_rat(s0) < limit(q) or not converges(q) or eventual_lb(q, Real.from_rat(s0))","not Real.from_rat(s0) <= limit(q) or Real.from_rat(s0) < limit(q) or Real.from_rat(s0) = limit(q)","lib(order).PartialOrder.lt<Real>(Real.from_rat(s0), limit(q)) = limit(q) > Real.from_rat(s0)","not lib(order).PartialOrder.lt<Real>(Real.from_rat(s0), limit(q)) or Real.from_rat(s0) <= limit(q)","not Real.from_rat(s0) <= ub or not Real.from_rat(s0) > ub","not lib(order).PartialOrder.lt<Real>(Real.from_rat(s0), limit(q)) or Real.from_rat(s0) != limit(q)","not Real.from_rat(s0) <= ub","lib(order).PartialOrder.lt<Real>(Real.from_rat(s0), limit(q))","not eventual_lb(q, Real.from_rat(s0)) or Real.from_rat(s0) <= ub","Real.from_rat(s0) != limit(q)","Real.from_rat(s0) <= limit(q)","not eventual_lb(q, Real.from_rat(s0))","Real.from_rat(s0) < limit(q)","not Real.from_rat(s0) < limit(q)"]}
{"goal":"lb > ub","proof":["not lb > Real.from_rat(r).max(ub) or lb > ub","not lb > Real.from_rat(r).max(ub)","not Real.from_rat(r) > ub or Real.from_rat(r).max(ub) = Real.from_rat(r)","Real.from_rat(r).max(ub) = Real.from_rat(r)"]}
{"goal":"lb <= ub","proof":["not eventual_ub(q, ub) or not eventual_lb(q, lb) or lb <= ub","not eventual_lb(q, lb) or not eventual_ub(q, ub)"]}
{"goal":"false","proof":["not lb > ub or not lb <= ub"]}
{"goal":"ub_imp_limit_lte","proof":["limit(q) > ub or limit(q) <= ub"]}
{"goal":"q(i).is_close(q(n), eps)","proof":["not cauchy_bound(q, n, eps) or not n <= i or not n <= n or q(i).is_close(q(n), eps)","n <= n","not cauchy_bound(q, n, eps) or not n <= i or not n <= n"]}
{"goal":"q(n) - eps <= q(i)","proof":["not q(i).is_close(q(n), eps) or q(i) > q(n) - eps","not q(i) <= q(n) - eps or not q(i) > q(n) - eps","q(i) <= q(n) - eps or q(n) - eps <= q(i)","q(i) <= q(n) - eps","q(i) > q(n) - eps","not q(i) > q(n) - eps"]}
{"goal":"cauchy_imp_lb","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not s0(x0, x1) <= x2 or not eventual_lb(x0, x1) or x1 <= x0(x2) } and forall(x3: Nat, x4: Nat -> Real, x5: Real) { x3 <= s1(x4, x5, x3) or eventual_lb(x4, x5) } and forall(x6: Real, x7: Nat -> Real, x8: Nat) { not x6 <= x7(s1(x7, x6, x8)) or eventual_lb(x7, x6) } }","not n <= s1(q, q(n) - eps, n) or q(n) - eps <= q(s1(q, q(n) - eps, n))","not q(n) - eps <= q(s1(q, q(n) - eps, n)) or eventual_lb(q, q(n) - eps)","n <= s1(q, q(n) - eps, n) or eventual_lb(q, q(n) - eps)","n <= s1(q, q(n) - eps, n)","not q(n) - eps <= q(s1(q, q(n) - eps, n))"]}
{"goal":"q(i).is_close(q(n), eps)","proof":["not cauchy_bound(q, n, eps) or not n <= i or not n <= n or q(i).is_close(q(n), eps)","n <= n","not cauchy_bound(q, n, eps) or not n <= i or not n <= n"]}
{"goal":"q(i) <= q(n) + eps","proof":["not q(i).is_close(q(n), eps) or q(i) < q(n) + eps","not q(n) + eps <= q(i) or not q(i) < q(n) + eps or q(i) < q(i)","not q(i) < q(i) or not q(i) >= q(i)","q(n) + eps <= q(i) or q(i) <= q(n) + eps","q(i) >= q(i)","q(n) + eps <= q(i)","q(i) < q(n) + eps","not q(i) < q(n) + eps or q(i) < q(i)","q(i) < q(i)"]}
{"goal":"cauch_imp_ub","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not s0(x0, x1) <= x2 or not eventual_ub(x0, x1) or x0(x2) <= x1 } and forall(x3: Nat, x4: Nat -> Real, x5: Real) { x3 <= s1(x4, x5, x3) or eventual_ub(x4, x5) } and forall(x6: Nat -> Real, x7: Real, x8: Nat) { not x6(s1(x6, x7, x8)) <= x7 or eventual_ub(x6, x7) } }","not n <= s1(q, q(n) + eps, n) or q(s1(q, q(n) + eps, n)) <= q(n) + eps","not q(s1(q, q(n) + eps, n)) <= q(n) + eps or eventual_ub(q, q(n) + eps)","n <= s1(q, q(n) + eps, n) or eventual_ub(q, q(n) + eps)","n <= s1(q, q(n) + eps, n)","not q(s1(q, q(n) + eps, n)) <= q(n) + eps"]}
{"goal":"a + x0 < b + x0","proof":["not a < b or a + x0 < b + x0"]}
{"goal":"(a + -b).is_negative","proof":["a + -b < b + -b","not a + -b < b + -b or not b + -b <= Real.0 or a + -b < Real.0","b + -b <= Real.0","not a + -b < Real.0 or (a + -b).is_negative","not a + -b < Real.0","not b + -b <= Real.0 or a + -b < Real.0"]}
{"goal":"(-(b + -a)).is_negative","proof":["--a + -b = -(-a + b)","b + -a = -a + b","--a = a"]}
{"goal":"(-(b - a)).is_negative","proof":["b + -a = b - a"]}
{"goal":"lt_imp_minus_pos","proof":["b + -a = b - a","not (b + -a).is_positive","not (-(b + -a)).is_negative or (b + -a).is_positive"]}
{"goal":"from_rat_pos","proof":["let s0: Real satisfy { true }","let s1: (Real, Rat) -> Rat satisfy { forall(x0: Rat, x1: Real) { not x0.is_positive or x1.is_close(Real.from_rat(s1(x1, x0)), Real.from_rat(x0)) } }","not r.is_positive or s0.is_close(Real.from_rat(s1(s0, r)), Real.from_rat(r))","not s0.is_close(Real.from_rat(s1(s0, r)), Real.from_rat(r)) or Real.from_rat(r).is_positive","not s0.is_close(Real.from_rat(s1(s0, r)), Real.from_rat(r))"]}
{"goal":"a - c + c <= b + c","proof":["not a - c <= b or a - c + c <= b + c"]}
{"goal":"a <= b + c","proof":["a + c - c = a - c + c","a + c - c = a","not a + c - c <= b + c"]}
{"goal":"sub_lte","proof":[]}
{"goal":"Real.0 < ub - limit(q)","proof":["not limit(q) < ub or (ub - limit(q)).is_positive","not (ub - limit(q)).is_positive or Real.0 < Real.0 + (ub - limit(q))","Real.0 + (ub - limit(q)) = ub - limit(q)","not Real.0 < Real.0 + (ub - limit(q))","(ub - limit(q)).is_positive","not (ub - limit(q)).is_positive"]}
{"goal":"exists(k0: Rat) { k0.is_positive and Real.from_rat(k0) < ub - limit(q) }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or s0(x0, x1).is_positive } and forall(x2: Real, x3: Real) { not x2 < x3 or x2 + Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(s0(Real.0, ub - limit(q))) < ub - limit(q) or not s0(Real.0, ub - limit(q)).is_positive","not Real.0 < ub - limit(q) or Real.0 + Real.from_rat(s0(Real.0, ub - limit(q))) < ub - limit(q)","not Real.0 < ub - limit(q) or s0(Real.0, ub - limit(q)).is_positive","Real.0 + Real.from_rat(s0(Real.0, ub - limit(q))) = Real.from_rat(s0(Real.0, ub - limit(q)))","s0(Real.0, ub - limit(q)).is_positive","Real.0 + Real.from_rat(s0(Real.0, ub - limit(q))) < ub - limit(q)","not Real.from_rat(s0(Real.0, ub - limit(q))) < ub - limit(q)","Real.from_rat(s0(Real.0, ub - limit(q))) < ub - limit(q)"]}
{"goal":"(eps2 / Rat.2).is_positive","proof":["not eps2.is_positive or not Rat.2.reciprocal.is_positive or (eps2 * Rat.2.reciprocal).is_positive","eps2 * Rat.2.reciprocal = eps2 / Rat.2","not (eps2 * Rat.2.reciprocal).is_positive","not Rat.2.reciprocal.is_positive"]}
{"goal":"eps.is_positive","proof":["not Real.from_rat(eps2 / Rat.2).is_positive","not (eps2 / Rat.2).is_positive or Real.from_rat(eps2 / Rat.2).is_positive"]}
{"goal":"eps + eps = Real.from_rat(eps2)","proof":["Real.from_rat(eps2 / Rat.2) + Real.from_rat(eps2 / Rat.2) = Real.from_rat(eps2 / Rat.2 + eps2 / Rat.2)","eps2 / Rat.2 + eps2 / Rat.2 = eps2"]}
{"goal":"eps + eps < ub - limit(q)","proof":["not Real.from_rat(eps2) < ub - limit(q)"]}
{"goal":"eps + eps + limit(q) < ub - limit(q) + limit(q)","proof":["not eps + eps < ub - limit(q) or eps + eps + limit(q) < ub - limit(q) + limit(q)"]}
{"goal":"eps + eps + limit(q) < ub - limit(q) - -limit(q)","proof":["ub - limit(q) + --limit(q) = ub - limit(q) - -limit(q)","--limit(q) = limit(q)"]}
{"goal":"eps + eps + limit(q) < ub","proof":["ub + limit(q) - limit(q) = ub - limit(q) + limit(q)","ub + limit(q) - limit(q) = ub","not eps + eps + limit(q) < ub + limit(q) - limit(q)"]}
{"goal":"limit(q) + eps + eps < ub","proof":["limit(q) + (eps + eps) = limit(q) + eps + eps","limit(q) + (eps + eps) = eps + eps + limit(q)"]}
{"goal":"exists(k0: Nat) { cauchy_bound(q, k0, eps) }","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: Nat -> Real -> Real) satisfy { forall(x0: Nat -> Real, x1: Real) { not converges(x0) or not x1.is_positive or cauchy_bound(x0, s0(x0, x1), x1) } and forall(x2: Nat -> Real) { s1(x2).is_positive or converges(x2) } and forall(x3: Nat -> Real, x4: Nat) { not cauchy_bound(x3, x4, s1(x3)) or converges(x3) } }","not cauchy_bound(q, s0(q, eps), eps)","not converges(q) or not eps.is_positive or cauchy_bound(q, s0(q, eps), eps)"]}
{"goal":"eventual_ub(q, q(n) + eps)","proof":["not cauchy_bound(q, n, eps) or eventual_ub(q, q(n) + eps)"]}
{"goal":"eventual_lb(q, q(n) - eps)","proof":["not cauchy_bound(q, n, eps) or eventual_lb(q, q(n) - eps)"]}
{"goal":"q(n) - eps <= limit(q)","proof":["not eventual_lb(q, q(n) - eps) or not converges(q) or q(n) - eps <= limit(q)"]}
{"goal":"q(n) <= limit(q) + eps","proof":["not q(n) - eps <= limit(q) or q(n) <= limit(q) + eps"]}
{"goal":"q(n) + eps <= limit(q) + eps + eps","proof":["not q(n) <= limit(q) + eps or q(n) + eps <= limit(q) + eps + eps"]}
{"goal":"eventual_ub(q, ub)","proof":["not eventual_ub(q, q(n) + eps) or not q(n) + eps < ub or eventual_ub(q, ub)","q(n) + eps < ub","not eventual_ub(q, q(n) + eps) or not q(n) + eps < ub"]}
{"goal":"q(n) + eps < limit(q) + eps + eps","proof":["not q(n) + eps <= limit(q) + eps + eps or q(n) + eps < limit(q) + eps + eps or limit(q) + eps + eps = q(n) + eps"]}
{"goal":"q(n) + eps < ub","proof":["not q(n) + eps < limit(q) + eps + eps or not limit(q) + eps + eps <= ub or q(n) + eps < ub","not limit(q) + eps + eps < ub or limit(q) + eps + eps <= ub","not q(n) + eps < limit(q) + eps + eps or not limit(q) + eps + eps <= ub","limit(q) + eps + eps <= ub","not limit(q) + eps + eps <= ub"]}
{"goal":"eventual_ub(q, ub)","proof":["not eventual_ub(q, q(n) + eps) or not q(n) + eps < ub or eventual_ub(q, ub)","not eventual_ub(q, q(n) + eps) or not q(n) + eps < ub"]}
{"goal":"limit_lt_imp_ub","proof":[]}
{"goal":"converges(q)","proof":["not eventual_eq(q, a) or converges(q)"]}
{"goal":"eventual_ub(q, a)","proof":["not eventual_eq(q, a) or eventual_ub(q, a)"]}
{"goal":"eventual_lb(q, a)","proof":["not eventual_eq(q, a) or eventual_lb(q, a)"]}
{"goal":"exists(k0: Real) { limit(q) < k0 and k0 < a }","proof":["not eventual_lb(q, a) or not converges(q) or a <= limit(q)","not a <= limit(q) or not limit(q) <= a or limit(q) = a","not limit(q) < a or limit(q) <= a","not limit(q) < a or limit(q) != a","limit(q) != a","limit(q) <= a","a <= limit(q)","not a <= limit(q)"]}
{"goal":"eventual_ub(q, ub)","proof":["not limit(q) < ub or not converges(q) or eventual_ub(q, ub)"]}
{"goal":"a < ub","proof":["not eventual_lb(q, a) or not converges(q) or a <= limit(q)","not limit(q) < ub or not a <= limit(q) or a < ub","not limit(q) < ub or not a <= limit(q)","a <= limit(q)","not a <= limit(q)"]}
{"goal":"false","proof":["not a <= ub or not ub <= a or ub = a","not a < ub or a <= ub","not ub < a or ub <= a","not ub < a or ub != a","ub != a","ub <= a","a <= ub","not a <= ub"]}
{"goal":"exists(k0: Real) { a < k0 and k0 < limit(q) }","proof":["not eventual_ub(q, a) or not converges(q) or limit(q) <= a","not limit(q) > a or not limit(q) <= a","limit(q) <= a","not limit(q) <= a"]}
{"goal":"eventual_lb(q, lb)","proof":["not lb < limit(q) or not converges(q) or eventual_lb(q, lb)"]}
{"goal":"a > lb","proof":["not eventual_ub(q, a) or not converges(q) or limit(q) <= a","not limit(q) > a or not limit(q) <= a","limit(q) <= a","not limit(q) <= a"]}
{"goal":"false","proof":["not eventual_ub(q, a) or not converges(q) or limit(q) <= a","not limit(q) > a or not limit(q) <= a","limit(q) <= a","not limit(q) <= a"]}
{"goal":"eq_imp_limit","proof":["not eventual_ub(q, a) or not converges(q) or limit(q) <= a","not limit(q) <= a or limit(q) < a or limit(q) = a","limit(q) <= a","not limit(q) <= a"]}
{"goal":"eps.is_positive","proof":["not (b - a).is_positive","not a < b or (b - a).is_positive"]}
{"goal":"eps + a = b","proof":["b + a - a = b - a + a","b + a - a = b","b - a + a != b"]}
{"goal":"a = b - eps","proof":["a + eps != b or b - eps = a","a + eps != b","eps + a = a + eps"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies q(x0).is_close(b, eps) } }","proof":["let (s1: (Nat -> Real, Real, Real) -> Nat, s2: (Nat -> Real, Real) -> Real) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Real) { not converges_to(x2, x3) or not x4.is_positive or tail_bound(x2, x3, s1(x2, x3, x4), x4) } and forall(x5: Nat -> Real, x6: Real) { s2(x5, x6).is_positive or converges_to(x5, x6) } and forall(x7: Nat -> Real, x8: Real, x9: Nat) { not tail_bound(x7, x8, x9, s2(x7, x8)) or converges_to(x7, x8) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not q(s0(x1)).is_close(b, eps) } }","not q(s0(s1(q, b, eps))).is_close(b, eps)","s1(q, b, eps) <= s0(s1(q, b, eps))","not converges_to(q, b) or not eps.is_positive or tail_bound(q, b, s1(q, b, eps), eps)","not tail_bound(q, b, s1(q, b, eps), eps) or not s1(q, b, eps) <= s0(s1(q, b, eps)) or q(s0(s1(q, b, eps))).is_close(b, eps)","not tail_bound(q, b, s1(q, b, eps), eps) or not s1(q, b, eps) <= s0(s1(q, b, eps))","not tail_bound(q, b, s1(q, b, eps), eps)"]}
{"goal":"q(i).is_close(b, eps)","proof":["not n <= i or q(i).is_close(b, eps)"]}
{"goal":"q(i) >= b - eps","proof":["not q(i).is_close(b, eps) or b - eps < q(i)","q(i) >= b - eps = b - eps <= q(i)","not b - eps <= q(i)","not b - eps < q(i) or b - eps <= q(i)","b - eps < q(i)","not b - eps < q(i)"]}
{"goal":"q(i) >= a","proof":["not q(i) >= b - eps"]}
{"goal":"lt_converges_to_imp_lb","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not s0(x0, x1) <= x2 or not eventual_lb(x0, x1) or x1 <= x0(x2) } and forall(x3: Nat, x4: Nat -> Real, x5: Real) { x3 <= s1(x4, x5, x3) or eventual_lb(x4, x5) } and forall(x6: Real, x7: Nat -> Real, x8: Nat) { not x6 <= x7(s1(x7, x6, x8)) or eventual_lb(x7, x6) } }","not n <= s1(q, a, n) or q(s1(q, a, n)) >= a","not a <= q(s1(q, a, n)) or eventual_lb(q, a)","n <= s1(q, a, n) or eventual_lb(q, a)","q(s1(q, a, n)) >= a = a <= q(s1(q, a, n))","n <= s1(q, a, n)","not a <= q(s1(q, a, n))","q(s1(q, a, n)) >= a"]}
{"goal":"eps.is_positive","proof":["not (a - b).is_positive","not b < a or (a - b).is_positive","b >= a or b < a","not a <= b or not a > b","b >= a = a <= b","not a <= b","not b < a","not b >= a","b >= a"]}
{"goal":"a = b + eps","proof":["a + -b != eps or eps - -b = a","a + -b = a - b","eps + --b = eps - -b","eps + --b = --b + eps","--b = b","--b + eps != a","a + -b = eps","eps + --b != a","eps - -b = a","eps - -b != a"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies q(x0).is_close(b, eps) } }","proof":["let (s1: (Nat -> Real, Real, Real) -> Nat, s2: (Nat -> Real, Real) -> Real) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Real) { not converges_to(x2, x3) or not x4.is_positive or tail_bound(x2, x3, s1(x2, x3, x4), x4) } and forall(x5: Nat -> Real, x6: Real) { s2(x5, x6).is_positive or converges_to(x5, x6) } and forall(x7: Nat -> Real, x8: Real, x9: Nat) { not tail_bound(x7, x8, x9, s2(x7, x8)) or converges_to(x7, x8) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not q(s0(x1)).is_close(b, eps) } }","not q(s0(s1(q, b, eps))).is_close(b, eps)","s1(q, b, eps) <= s0(s1(q, b, eps))","not converges_to(q, b) or not eps.is_positive or tail_bound(q, b, s1(q, b, eps), eps)","not tail_bound(q, b, s1(q, b, eps), eps) or not s1(q, b, eps) <= s0(s1(q, b, eps)) or q(s0(s1(q, b, eps))).is_close(b, eps)","not tail_bound(q, b, s1(q, b, eps), eps) or not s1(q, b, eps) <= s0(s1(q, b, eps))","not tail_bound(q, b, s1(q, b, eps), eps)"]}
{"goal":"q(i).is_close(b, eps)","proof":["not n <= i or q(i).is_close(b, eps)"]}
{"goal":"q(i) <= b + eps","proof":["not q(i).is_close(b, eps) or q(i) < b + eps","not q(i) < b + eps or q(i) <= b + eps","q(i) < b + eps","not q(i) < b + eps"]}
{"goal":"q(i) <= a","proof":["not q(i) <= b + eps"]}
{"goal":"gt_converges_to_imp_ub","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not s0(x0, x1) <= x2 or not eventual_ub(x0, x1) or x0(x2) <= x1 } and forall(x3: Nat, x4: Nat -> Real, x5: Real) { x3 <= s1(x4, x5, x3) or eventual_ub(x4, x5) } and forall(x6: Nat -> Real, x7: Real, x8: Nat) { not x6(s1(x6, x7, x8)) <= x7 or eventual_ub(x6, x7) } }","not n <= s1(q, a, n) or q(s1(q, a, n)) <= a","not q(s1(q, a, n)) <= a or eventual_ub(q, a)","n <= s1(q, a, n) or eventual_ub(q, a)","n <= s1(q, a, n)","not q(s1(q, a, n)) <= a"]}
{"goal":"Real.0 < a","proof":["not a.is_positive or Real.0 < Real.0 + a","Real.0 + a = a","not Real.0 < Real.0 + a"]}
{"goal":"exists(k0: Rat) { Real.0 < Real.from_rat(k0) and Real.from_rat(k0) < a }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not Real.0 < Real.from_rat(s0(Real.0, a)) or not Real.from_rat(s0(Real.0, a)) < a","not Real.0 < a or Real.from_rat(s0(Real.0, a)) < a","not Real.0 < a or Real.0 < Real.from_rat(s0(Real.0, a))","Real.0 < Real.from_rat(s0(Real.0, a))","Real.from_rat(s0(Real.0, a)) < a","not Real.from_rat(s0(Real.0, a)) < a"]}
{"goal":"b + b = c","proof":["c / Rat.2 + c / Rat.2 = c"]}
{"goal":"(Real.from_rat(c) - Real.0).is_positive","proof":["not Real.0 < Real.from_rat(c) or (Real.from_rat(c) - Real.0).is_positive"]}
{"goal":"Real.from_rat(c).gt_rat(Rat.0)","proof":["Real.from_rat(c) + -Real.0 = Real.from_rat(c) - Real.0","Real.from_rat(c) + Real.0 = Real.from_rat(c)","(Real.from_rat(c) - Real.0).gt_rat(Rat.0) = (Real.from_rat(c) - Real.0).is_positive"]}
{"goal":"Rat.0 < c","proof":["not Real.from_rat(c).gt_rat(Rat.0) or c > Rat.0","Rat.0 < c = c > Rat.0","c > Rat.0","not c > Rat.0"]}
{"goal":"c.is_positive","proof":["not Rat.0 < c or c.is_positive"]}
{"goal":"b.is_positive","proof":["not (c / Rat.2).is_positive","not c.is_positive or (c / Rat.2).is_positive"]}
{"goal":"Real.from_rat(b).is_positive","proof":["let s0: Real satisfy { true }","let s1: (Real, Rat) -> Rat satisfy { forall(x0: Rat, x1: Real) { not x0.is_positive or x1.is_close(Real.from_rat(s1(x1, x0)), Real.from_rat(x0)) } }","not b.is_positive or s0.is_close(Real.from_rat(s1(s0, b)), Real.from_rat(b))","not s0.is_close(Real.from_rat(s1(s0, b)), Real.from_rat(b)) or Real.from_rat(b).is_positive","not s0.is_close(Real.from_rat(s1(s0, b)), Real.from_rat(b))"]}
{"goal":"Real.from_rat(b) + Real.from_rat(b) = Real.from_rat(c)","proof":["Real.from_rat(b) + Real.from_rat(b) = Real.from_rat(b + b)"]}
{"goal":"eps_lt_half","proof":["not Real.from_rat(b) + Real.from_rat(b) < a or not Real.from_rat(b).is_positive","not Real.from_rat(b) + Real.from_rat(b) < a","Real.from_rat(b) + Real.from_rat(b) < a"]}
{"goal":"a + b > c","proof":[]}
{"goal":"c < a + b","proof":["c >= a + b or c < a + b","c >= a + b","not a + b <= c or not a + b > c","c >= a + b = a + b <= c","not a + b <= c","a + b <= c"]}
{"goal":"c + -b < a + b + -b","proof":["not c < a + b or c + -b < a + b + -b"]}
{"goal":"a + b + -b > c + -b","proof":["a + b + -b = a + b - b","not a + b - b > c + -b","a + b - b = a","not a > c + -b","not c + -b >= a or not c + -b < a","a <= c + -b or a > c + -b","c + -b >= a = a <= c + -b","c + -b < a + b - b","c + -b < a","a <= c + -b","not c + -b >= a","c + -b >= a"]}
{"goal":"a > c - b","proof":["a + b + -b = a + b - b","c + -b = c - b","a + b - b = a","not a > c + -b","a + b - b > c + -b"]}
{"goal":"add_gt_imp_gt_sub","proof":[]}
{"goal":"sub_either_order","proof":["a + -c - b = a - b + -c","a + -c = a - c","a - b + -c = a - b - c","a - b + -c != a - c - b"]}
{"goal":"sub_both_eq_sub_add","proof":["-b + a - c = -b - c + a","-b + -c = -(b + c)","-b + -c = -b - c","a + -(b + c) = a - (b + c)","a + -b = a - b","a + -(b + c) = -(b + c) + a","a + -b = -b + a"]}
{"goal":"a > c - ace","proof":["not a.is_close(c, ace) or a > c - ace"]}
{"goal":"a + ace > c","proof":["not a.is_close(c, ace) or c < a + ace","not c >= a + ace or not c < a + ace","a + ace <= c or a + ace > c","a + ace <= c","c >= a + ace = a + ace <= c","c < a + ace","c >= a + ace","not c >= a + ace"]}
{"goal":"c > b - bce","proof":["not c.is_close(b, bce) or c > b - bce","not c.is_close(b, bce)","not b.is_close(c, bce) or c.is_close(b, bce)"]}
{"goal":"a + ace > b - bce","proof":["not a + ace > c.max(b - bce) or a + ace > b - bce","not c > b - bce or c.max(b - bce) = c","not a + ace > c.max(b - bce)","c.max(b - bce) = c"]}
{"goal":"a > b - bce - ace","proof":["not a + ace > b - bce or a > b - bce - ace"]}
{"goal":"a > b - ace - bce","proof":["b - bce - ace = b - ace - bce"]}
{"goal":"a > b - (ace + bce)","proof":["b - (ace + bce) = b - ace - bce"]}
{"goal":"a < c + ace","proof":["not a.is_close(c, ace) or a < c + ace"]}
{"goal":"c < b + bce","proof":["not b.is_close(c, bce) or c < b + bce"]}
{"goal":"c + ace < b + bce + ace","proof":["not c < b + bce or c + ace < b + bce + ace"]}
{"goal":"a < b + ace + bce","proof":["b + (ace + bce) = b + ace + bce","b + (bce + ace) = b + bce + ace","not a < c + ace or not c + ace < b + ace + bce or a < b + ace + bce","bce + ace = ace + bce","not c + ace < b + ace + bce or not a < c + ace","not c + ace < b + ace + bce"]}
{"goal":"a.is_close(b, ace + bce)","proof":["not a < b + (ace + bce) or not b - (ace + bce) < a or a.is_close(b, ace + bce)","b + (ace + bce) = b + ace + bce","b - (ace + bce) >= a or b - (ace + bce) < a","not a <= b - (ace + bce) or not a > b - (ace + bce)","b - (ace + bce) >= a = a <= b - (ace + bce)","not a < b + (ace + bce) or not b - (ace + bce) < a","not a <= b - (ace + bce)","a < b + (ace + bce)","not b - (ace + bce) < a","not b - (ace + bce) >= a","b - (ace + bce) >= a"]}
{"goal":"is_close_triangle","proof":[]}
{"goal":"exists(k0: Real) { k0.is_positive and k0 + k0 < eps }","proof":["let s0: Real -> Real satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or s0(x1) + s0(x1) < x1 } }","not s0(eps) + s0(eps) < eps or not s0(eps).is_positive","not eps.is_positive or s0(eps) + s0(eps) < eps","not eps.is_positive or s0(eps).is_positive","s0(eps).is_positive","s0(eps) + s0(eps) < eps","not s0(eps) + s0(eps) < eps"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies q(x0).is_close(a, eps2) } }","proof":["let (s1: (Nat -> Real, Real, Real) -> Nat, s2: (Nat -> Real, Real) -> Real) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Real) { not converges_to(x2, x3) or not x4.is_positive or tail_bound(x2, x3, s1(x2, x3, x4), x4) } and forall(x5: Nat -> Real, x6: Real) { s2(x5, x6).is_positive or converges_to(x5, x6) } and forall(x7: Nat -> Real, x8: Real, x9: Nat) { not tail_bound(x7, x8, x9, s2(x7, x8)) or converges_to(x7, x8) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not q(s0(x1)).is_close(a, eps2) } }","not q(s0(s1(q, a, eps2))).is_close(a, eps2)","s1(q, a, eps2) <= s0(s1(q, a, eps2))","not converges_to(q, a) or not eps2.is_positive or tail_bound(q, a, s1(q, a, eps2), eps2)","not tail_bound(q, a, s1(q, a, eps2), eps2) or not s1(q, a, eps2) <= s0(s1(q, a, eps2)) or q(s0(s1(q, a, eps2))).is_close(a, eps2)","not tail_bound(q, a, s1(q, a, eps2), eps2) or not s1(q, a, eps2) <= s0(s1(q, a, eps2))","not tail_bound(q, a, s1(q, a, eps2), eps2)"]}
{"goal":"q(i).is_close(a, eps2)","proof":["not n <= i or q(i).is_close(a, eps2)"]}
{"goal":"q(j).is_close(a, eps2)","proof":["not n <= j or q(j).is_close(a, eps2)"]}
{"goal":"q(i).is_close(q(j), eps2 + eps2)","proof":["not q(i).is_close(a, eps2) or not q(j).is_close(a, eps2) or q(i).is_close(q(j), eps2 + eps2)","not q(j).is_close(a, eps2) or not q(i).is_close(a, eps2)"]}
{"goal":"q(i).is_close(q(j), eps)","proof":["(q(i) - q(j)).abs < eps = q(i).is_close(q(j), eps)","(q(i) - q(j)).abs < eps2 + eps2 = q(i).is_close(q(j), eps2 + eps2)","not (q(i) - q(j)).abs < eps2 + eps2 or not eps2 + eps2 < eps or (q(i) - q(j)).abs < eps","not (q(i) - q(j)).abs < eps","not (q(i) - q(j)).abs < eps2 + eps2 or (q(i) - q(j)).abs < eps","(q(i) - q(j)).abs < eps2 + eps2","not (q(i) - q(j)).abs < eps2 + eps2"]}
{"goal":"cauchy_bound(q, n, eps)","proof":["let (s0: (Nat -> Real, Nat, Real) -> Nat, s1: (Nat -> Real, Nat, Real) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Nat, x2: Real, x3: Nat, x4: Nat) { not cauchy_bound(x0, x1, x2) or not x1 <= x3 or not x1 <= x4 or x0(x3).is_close(x0(x4), x2) } and forall(x5: Nat, x6: Nat -> Real, x7: Real) { x5 <= s0(x6, x5, x7) or cauchy_bound(x6, x5, x7) } and forall(x8: Nat, x9: Nat -> Real, x10: Real) { x8 <= s1(x9, x8, x10) or cauchy_bound(x9, x8, x10) } and forall(x11: Nat -> Real, x12: Nat, x13: Real) { not x11(s0(x11, x12, x13)).is_close(x11(s1(x11, x12, x13)), x13) or cauchy_bound(x11, x12, x13) } }","not n <= s0(q, n, eps) or not n <= s1(q, n, eps) or q(s0(q, n, eps)).is_close(q(s1(q, n, eps)), eps)","not q(s0(q, n, eps)).is_close(q(s1(q, n, eps)), eps) or cauchy_bound(q, n, eps)","n <= s1(q, n, eps) or cauchy_bound(q, n, eps)","n <= s0(q, n, eps) or cauchy_bound(q, n, eps)","n <= s0(q, n, eps)","n <= s1(q, n, eps)","not q(s0(q, n, eps)).is_close(q(s1(q, n, eps)), eps)"]}
{"goal":"converges_to_imp_converges","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: Nat -> Real -> Real) satisfy { forall(x0: Real, x1: Nat -> Real) { not x0.is_positive or not converges(x1) or cauchy_bound(x1, s0(x1, x0), x0) } and forall(x2: Nat -> Real) { s1(x2).is_positive or converges(x2) } and forall(x3: Nat -> Real, x4: Nat) { not cauchy_bound(x3, x4, s1(x3)) or converges(x3) } }","let s2: Real -> Nat satisfy { forall(x5: Real) { not x5.is_positive or cauchy_bound(q, s2(x5), x5) } }","not s1(q).is_positive or cauchy_bound(q, s2(s1(q)), s1(q))","not cauchy_bound(q, s2(s1(q)), s1(q)) or converges(q)","not cauchy_bound(q, s2(s1(q)), s1(q))","s1(q).is_positive or converges(q)","not s1(q).is_positive","s1(q).is_positive"]}
{"goal":"-c < -b","proof":["not b < c or -c < -b"]}
{"goal":"a + -c < a + -b","proof":["not -c < -b or a + -c < a + -b"]}
{"goal":"a + -b > a - c","proof":["a + -c = a - c","not a - c >= a + -b or not a - c < a + -b","a + -b <= a - c or a + -b > a - c","a - c >= a + -b = a + -b <= a - c","a - c < a + -b","a + -b <= a - c","not a - c >= a + -b","a - c >= a + -b"]}
{"goal":"sub_lt_is_gt","proof":["a + -b = a - b"]}
{"goal":"a > Real.0","proof":["not (-a).is_negative or a > a + -a","a + -a = Real.0","not a > a + -a","not a.is_positive or (-a).is_negative","not (-a).is_negative","(-a).is_negative"]}
{"goal":"smaller_pos","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 > x1 or x0 > Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 > x3 or Real.from_rat(s0(x2, x3)) > x3 } }","not Real.from_rat(s0(a, Real.0)) < a or not Real.from_rat(s0(a, Real.0)).is_positive","not a > Real.0 or Real.from_rat(s0(a, Real.0)) > Real.0","not a > Real.0 or a > Real.from_rat(s0(a, Real.0))","Real.from_rat(s0(a, Real.0)) >= a or Real.from_rat(s0(a, Real.0)) < a","not a <= Real.from_rat(s0(a, Real.0)) or not a > Real.from_rat(s0(a, Real.0))","Real.from_rat(s0(a, Real.0)) >= a = a <= Real.from_rat(s0(a, Real.0))","not Real.from_rat(s0(a, Real.0)) > Real.0 or Real.from_rat(s0(a, Real.0)).is_positive","a > Real.from_rat(s0(a, Real.0))","Real.from_rat(s0(a, Real.0)) > Real.0","Real.from_rat(s0(a, Real.0)).is_positive","not a <= Real.from_rat(s0(a, Real.0))","not Real.from_rat(s0(a, Real.0)) < a","not Real.from_rat(s0(a, Real.0)) >= a","Real.from_rat(s0(a, Real.0)) >= a"]}
{"goal":"exists(k0: Real) { k0.is_positive and k0 < eps }","proof":["let s0: Real -> Real satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or s0(x1) < x1 } }","not s0(eps) < eps or not s0(eps).is_positive","not eps.is_positive or s0(eps) < eps","not eps.is_positive or s0(eps).is_positive","s0(eps).is_positive","s0(eps) < eps","not s0(eps) < eps"]}
{"goal":"lb < limit(q)","proof":["not limit(q).is_close(limit(q), eps2) or limit(q) - eps2 < limit(q)","not eps2.is_positive or limit(q).is_close(limit(q), eps2)","not limit(q) - eps2 < limit(q)","limit(q).is_close(limit(q), eps2)"]}
{"goal":"limit(q) - eps2 > limit(q) - eps","proof":["not eps2 < eps or limit(q) - eps2 > limit(q) - eps"]}
{"goal":"lb > limit(q) - eps","proof":["not limit(q) - eps2 > limit(q) - eps"]}
{"goal":"eventual_lb(q, lb)","proof":["not lb < limit(q) or not converges(q) or eventual_lb(q, lb)"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies q(x0) >= lb } }","proof":["let (s1: (Nat -> Real, Real) -> Nat, s2: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Nat) { not s1(x2, x3) <= x4 or not eventual_lb(x2, x3) or x3 <= x2(x4) } and forall(x5: Nat, x6: Nat -> Real, x7: Real) { x5 <= s2(x6, x7, x5) or eventual_lb(x6, x7) } and forall(x8: Real, x9: Nat -> Real, x10: Nat) { not x8 <= x9(s2(x9, x8, x10)) or eventual_lb(x9, x8) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not q(s0(x1)) >= lb } }","not q(s0(s1(q, lb))) >= lb","s1(q, lb) <= s0(s1(q, lb))","not s1(q, lb) <= s0(s1(q, lb)) or not eventual_lb(q, lb) or lb <= q(s0(s1(q, lb)))","q(s0(s1(q, lb))) >= lb = lb <= q(s0(s1(q, lb)))","not eventual_lb(q, lb) or lb <= q(s0(s1(q, lb)))","lb <= q(s0(s1(q, lb)))"]}
{"goal":"ub > limit(q)","proof":["not ub.is_close(ub, eps2) or ub > ub - eps2","limit(q) + eps2 != ub or ub - eps2 = limit(q)","not eps2.is_positive or ub.is_close(ub, eps2)","ub.is_close(ub, eps2)","ub - eps2 = limit(q)","not ub > ub - eps2"]}
{"goal":"limit(q) + eps2 < limit(q) + eps","proof":["not eps2 < eps or limit(q) + eps2 < limit(q) + eps"]}
{"goal":"ub < limit(q) + eps","proof":["not limit(q) + eps2 < limit(q) + eps"]}
{"goal":"eventual_ub(q, ub)","proof":["not limit(q) < limit(q) + eps2 or not converges(q) or eventual_ub(q, limit(q) + eps2)","not limit(q).is_close(limit(q), eps2) or limit(q) < limit(q) + eps2","not eps2.is_positive or limit(q).is_close(limit(q), eps2)","not eventual_ub(q, limit(q) + eps2)","limit(q).is_close(limit(q), eps2)","not limit(q) < limit(q) + eps2"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies q(x0) <= ub } }","proof":["let (s1: (Nat -> Real, Real) -> Nat, s2: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Nat) { not s1(x2, x3) <= x4 or not eventual_ub(x2, x3) or x2(x4) <= x3 } and forall(x5: Nat, x6: Nat -> Real, x7: Real) { x5 <= s2(x6, x7, x5) or eventual_ub(x6, x7) } and forall(x8: Nat -> Real, x9: Real, x10: Nat) { not x8(s2(x8, x9, x10)) <= x9 or eventual_ub(x8, x9) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not q(s0(x1)) <= ub } }","not q(s0(s1(q, ub))) <= ub","s1(q, ub) <= s0(s1(q, ub))","not s1(q, ub) <= s0(s1(q, ub)) or not eventual_ub(q, ub) or q(s0(s1(q, ub))) <= ub","not s1(q, ub) <= s0(s1(q, ub))"]}
{"goal":"exists(k0: Nat) { n1 <= k0 and n2 <= k0 }","proof":["let s0: Nat satisfy { true }","let s1: (Nat, Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat, x2: Nat) { x0 <= s1(x0, x1, x2) } and forall(x3: Nat, x4: Nat, x5: Nat) { x3 <= s1(x4, x3, x5) } and forall(x6: Nat, x7: Nat, x8: Nat) { x6 <= s1(x7, x8, x6) } }","not n2 <= s1(n2, s0, n1) or not n1 <= s1(n2, s0, n1)","n1 <= s1(n2, s0, n1)","n2 <= s1(n2, s0, n1)","not n1 <= s1(n2, s0, n1)"]}
{"goal":"q(i) >= lb","proof":["not n1 <= i or q(i) >= lb","not n1 <= i","not n1 <= n or not n <= i or n1 <= i","not n1 <= n or n1 <= i"]}
{"goal":"q(i) > limit(q) - eps","proof":["not util.is_transitive[Real](Real.lte) or not lb <= q(i) or not q(i) <= limit(q) - eps or lb <= limit(q) - eps","q(i) <= limit(q) - eps or q(i) > limit(q) - eps","not lb <= limit(q) - eps or not lb > limit(q) - eps","q(i) >= lb = lb <= q(i)","lb <= q(i)","q(i) <= limit(q) - eps","not lb <= limit(q) - eps","not q(i) <= limit(q) - eps or lb <= limit(q) - eps"]}
{"goal":"q(i) <= ub","proof":["not n2 <= i or q(i) <= ub","not n2 <= i","not n2 <= n or not n <= i or n2 <= i","not n2 <= n or n2 <= i"]}
{"goal":"q(i) < limit(q) + eps","proof":["not ub < limit(q) + eps or not q(i) <= ub or q(i) < limit(q) + eps","not ub < limit(q) + eps or not q(i) <= ub"]}
{"goal":"q(i).is_close(limit(q), eps)","proof":["not q(i) < limit(q) + eps or not limit(q) - eps < q(i) or q(i).is_close(limit(q), eps)","limit(q) - eps >= q(i) or limit(q) - eps < q(i)","not q(i) <= limit(q) - eps or not q(i) > limit(q) - eps","limit(q) - eps >= q(i) = q(i) <= limit(q) - eps","not limit(q) - eps < q(i)","not q(i) <= limit(q) - eps","limit(q) - eps >= q(i)","not limit(q) - eps >= q(i)"]}
{"goal":"converges_imp_converges_to","proof":["let (s1: (Nat -> Real, Real, Real) -> Nat, s2: (Nat -> Real, Real) -> Real) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Real) { not converges_to(x2, x3) or not x4.is_positive or tail_bound(x2, x3, s1(x2, x3, x4), x4) } and forall(x5: Nat -> Real, x6: Real) { s2(x5, x6).is_positive or converges_to(x5, x6) } and forall(x7: Nat -> Real, x8: Real, x9: Nat) { not tail_bound(x7, x8, x9, s2(x7, x8)) or converges_to(x7, x8) } }","let s0: Real -> Nat satisfy { forall(x0: Real, x1: Nat) { not s0(x0) <= x1 or not x0.is_positive or q(x1).is_close(limit(q), x0) } }","let s3: (Nat -> Real, Real, Nat, Real) -> Nat satisfy { forall(x10: Nat -> Real, x11: Real, x12: Nat, x13: Real, x14: Nat) { not tail_bound(x10, x11, x12, x13) or not x12 <= x14 or x10(x14).is_close(x11, x13) } and forall(x15: Nat, x16: Nat -> Real, x17: Real, x18: Real) { x15 <= s3(x16, x17, x15, x18) or tail_bound(x16, x17, x15, x18) } and forall(x19: Nat -> Real, x20: Real, x21: Nat, x22: Real) { not x19(s3(x19, x20, x21, x22)).is_close(x20, x22) or tail_bound(x19, x20, x21, x22) } }","not s0(s2(q, limit(q))) <= s3(q, limit(q), s0(s2(q, limit(q))), s2(q, limit(q))) or not s2(q, limit(q)).is_positive or q(s3(q, limit(q), s0(s2(q, limit(q))), s2(q, limit(q)))).is_close(limit(q), s2(q, limit(q)))","not q(s3(q, limit(q), s0(s2(q, limit(q))), s2(q, limit(q)))).is_close(limit(q), s2(q, limit(q))) or tail_bound(q, limit(q), s0(s2(q, limit(q))), s2(q, limit(q)))","s0(s2(q, limit(q))) <= s3(q, limit(q), s0(s2(q, limit(q))), s2(q, limit(q))) or tail_bound(q, limit(q), s0(s2(q, limit(q))), s2(q, limit(q)))","not tail_bound(q, limit(q), s0(s2(q, limit(q))), s2(q, limit(q))) or converges_to(q, limit(q))","s2(q, limit(q)).is_positive or converges_to(q, limit(q))","s2(q, limit(q)).is_positive","not tail_bound(q, limit(q), s0(s2(q, limit(q))), s2(q, limit(q)))","s0(s2(q, limit(q))) <= s3(q, limit(q), s0(s2(q, limit(q))), s2(q, limit(q)))","not s0(s2(q, limit(q))) <= s3(q, limit(q), s0(s2(q, limit(q))), s2(q, limit(q))) or q(s3(q, limit(q), s0(s2(q, limit(q))), s2(q, limit(q)))).is_close(limit(q), s2(q, limit(q)))","not q(s3(q, limit(q), s0(s2(q, limit(q))), s2(q, limit(q)))).is_close(limit(q), s2(q, limit(q)))"]}
{"goal":"converges(q)","proof":["not converges_to(q, a) or converges(q)"]}
{"goal":"exists(k0: Real) { a < k0 and k0 < b }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(s0(a, b)) < b or not a < Real.from_rat(s0(a, b))","not a < b or Real.from_rat(s0(a, b)) < b","not a < b or a < Real.from_rat(s0(a, b))","a < Real.from_rat(s0(a, b))","Real.from_rat(s0(a, b)) < b","not Real.from_rat(s0(a, b)) < b"]}
{"goal":"exists(k0: Real) { r1 < k0 and k0 < b }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not r1 < Real.from_rat(s0(r1, b)) or not Real.from_rat(s0(r1, b)) < b","not r1 < b or Real.from_rat(s0(r1, b)) < b","not r1 < b or r1 < Real.from_rat(s0(r1, b))","r1 < Real.from_rat(s0(r1, b))","Real.from_rat(s0(r1, b)) < b","not Real.from_rat(s0(r1, b)) < b"]}
{"goal":"eventual_ub(q, r1)","proof":["not converges_to(q, a) or not r1 > a or eventual_ub(q, r1)","not r1 <= a or not a <= r1 or r1 = a","r1 <= a or r1 > a","not a < r1 or a <= r1","not converges_to(q, a) or not r1 > a","not r1 > a","not a < r1 or r1 != a","r1 != a","a <= r1","r1 <= a","not r1 <= a"]}
{"goal":"limit(q) <= r1","proof":["not eventual_ub(q, r1) or not converges(q) or limit(q) <= r1"]}
{"goal":"eventual_lb(q, r2)","proof":["not converges_to(q, b) or not r2 < b or eventual_lb(q, r2)","not converges_to(q, b) or not r2 < b"]}
{"goal":"limit(q) >= r2","proof":["not eventual_lb(q, r2) or not converges(q) or r2 <= limit(q)","limit(q) >= r2 = r2 <= limit(q)","r2 <= limit(q)","not r2 <= limit(q)"]}
{"goal":"r2 <= r1","proof":["not r2 <= limit(q) or not limit(q) <= r1 or r2 <= r1","limit(q) >= r2 = r2 <= limit(q)","r2 <= limit(q)","not r2 <= limit(q) or not limit(q) <= r1"]}
{"goal":"false","proof":["not r1 >= r2 or not r1 < r2","r1 >= r2 = r2 <= r1","not r1 >= r2","r1 >= r2"]}
{"goal":"converges_to_unique_one_way","proof":[]}
{"goal":"false","proof":["not converges_to(q, a) or not converges_to(q, b) or not a < b","not converges_to(q, b) or not converges_to(q, a)"]}
{"goal":"false","proof":["not converges_to(q, b) or not converges_to(q, a) or not b < a","not converges_to(q, b) or not converges_to(q, a)"]}
{"goal":"converges_to_unique","proof":["not a <= b or a < b or b = a","not b <= a or b < a or b = a","not b <= a","not a <= b","a <= b or b <= a"]}
{"goal":"lift_seq(q)(n) = compose[Nat, Rat, Real](Real.from_rat, q)(n)","proof":["compose[Nat, Rat, Real](Real.from_rat, q, n) = lift_seq(q, n)"]}
{"goal":"lift_seq(q)(n) = Real.from_rat(q(n))","proof":["compose[Nat, Rat, Real](Real.from_rat, q, n) = Real.from_rat(q(n))"]}
{"goal":"lift_seq_elt","proof":[]}
{"goal":"exists(k0: Rat) { eps.is_positive implies x.is_close(Real.from_rat(k0), Real.from_rat(eps)) }","proof":["let s0: (Real, Rat) -> Rat satisfy { forall(x0: Rat, x1: Real) { not x0.is_positive or x1.is_close(Real.from_rat(s0(x1, x0)), Real.from_rat(x0)) } }","not x.is_close(Real.from_rat(s0(x, eps)), Real.from_rat(eps))","not eps.is_positive or x.is_close(Real.from_rat(s0(x, eps)), Real.from_rat(eps))"]}
{"goal":"rat_seq_is_close","proof":["not rat.iop(n).is_positive or x.is_close(Real.from_rat(rat_approx(x, rat.iop(n))), Real.from_rat(rat.iop(n)))","rat_approx(x, rat.iop(n)) = rat_seq(x, n)","rat.iop(n).is_positive","not x.is_close(Real.from_rat(rat_approx(x, rat.iop(n))), Real.from_rat(rat.iop(n)))"]}
{"goal":"x.abs = -x","proof":["not x.is_negative or x.abs = -x"]}
{"goal":"-x < eps","proof":["not x.abs < eps"]}
{"goal":"x > -eps","proof":["not -x < eps or -eps < x","not -eps >= x or not -eps < x","x <= -eps or x > -eps","x <= -eps","-eps >= x = x <= -eps","-eps < x","-eps >= x","not -eps >= x"]}
{"goal":"x.is_close(Real.0, eps)","proof":["(x + Real.0 - Real.0).abs < eps = (x + Real.0).is_close(Real.0, eps)","x + Real.0 - Real.0 = x","x + Real.0 = x","not (x + Real.0).is_close(Real.0, eps)","(x + Real.0 - Real.0).abs < eps"]}
{"goal":"x.abs = x","proof":["x.is_negative or x.abs = x"]}
{"goal":"x < eps","proof":["not x.abs < eps"]}
{"goal":"x.is_close(Real.0, eps)","proof":["(x + Real.0 - Real.0).abs < eps = (x + Real.0).is_close(Real.0, eps)","x + Real.0 - Real.0 = x","x + Real.0 = x","not (x + Real.0).is_close(Real.0, eps)","(x + Real.0 - Real.0).abs < eps"]}
{"goal":"abs_lt_imp_close_to_zero","proof":[]}
{"goal":"Real.0 < eps","proof":["not eps.is_positive or Real.0 < Real.0 + eps","Real.0 + eps = eps","not Real.0 < Real.0 + eps"]}
{"goal":"exists(k0: Rat) { k0.is_positive and Real.from_rat(k0) < eps }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or s0(x0, x1).is_positive } and forall(x2: Real, x3: Real) { not x2 < x3 or x2 + Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(s0(Real.0, eps)) < eps or not s0(Real.0, eps).is_positive","not Real.0 < eps or Real.0 + Real.from_rat(s0(Real.0, eps)) < eps","not Real.0 < eps or s0(Real.0, eps).is_positive","Real.0 + Real.from_rat(s0(Real.0, eps)) = Real.from_rat(s0(Real.0, eps))","s0(Real.0, eps).is_positive","Real.0 + Real.from_rat(s0(Real.0, eps)) < eps","not Real.from_rat(s0(Real.0, eps)) < eps","Real.from_rat(s0(Real.0, eps)) < eps"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies iop(x0) < reps } }","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not iop(s0(x1)) < reps } }","let s1: Rat -> Nat satisfy { forall(x2: Rat, x3: Nat) { not s1(x2) <= x3 or not x2.is_positive or iop(x3) < x2 } }","not iop(s0(s1(reps))) < reps","s1(reps) <= s0(s1(reps))","not s1(reps) <= s0(s1(reps)) or not reps.is_positive or iop(s0(s1(reps))) < reps","not s1(reps) <= s0(s1(reps))"]}
{"goal":"iop(i) < reps","proof":["not n <= i or iop(i) < reps"]}
{"goal":"iop(i).is_positive","proof":["Nat.0 + i = i","not iop(Nat.0 + i).is_positive","iop(Nat.0 + i).is_positive"]}
{"goal":"Real.from_rat(iop(i)).is_positive","proof":["let s0: Real satisfy { true }","not iop(i).is_positive or s0.is_close(Real.from_rat(rat_approx(s0, iop(i))), Real.from_rat(iop(i)))","not s0.is_close(Real.from_rat(rat_approx(s0, iop(i))), Real.from_rat(iop(i))) or Real.from_rat(iop(i)).is_positive","not s0.is_close(Real.from_rat(rat_approx(s0, iop(i))), Real.from_rat(iop(i)))"]}
{"goal":"Real.from_rat(iop(i)).abs = Real.from_rat(iop(i))","proof":["not Real.from_rat(iop(i)).is_positive or Real.from_rat(iop(i)).abs = Real.from_rat(iop(i))"]}
{"goal":"Real.from_rat(iop(i)) < eps","proof":["not Real.from_rat(iop(i)) <= Real.from_rat(reps) or not Real.from_rat(reps) < eps or Real.from_rat(iop(i)) < eps","not iop(i) < reps or Real.from_rat(iop(i)) < Real.from_rat(reps)","not Real.from_rat(iop(i)) < Real.from_rat(reps) or Real.from_rat(iop(i)) <= Real.from_rat(reps)","not Real.from_rat(iop(i)) <= Real.from_rat(reps) or not Real.from_rat(reps) < eps","not Real.from_rat(iop(i)) <= Real.from_rat(reps)","Real.from_rat(iop(i)) < Real.from_rat(reps)","not Real.from_rat(iop(i)) < Real.from_rat(reps)"]}
{"goal":"Real.from_rat(iop(i)).abs < eps","proof":[]}
{"goal":"lift_seq(iop)(i) = Real.from_rat(iop(i))","proof":["lift_seq(iop, i) = Real.from_rat(iop(i))"]}
{"goal":"lift_seq(iop)(i).abs < eps","proof":["not Real.from_rat(iop(i)).abs < eps"]}
{"goal":"lift_seq(iop)(i).is_close(Real.0, eps)","proof":["not Real.from_rat(iop(i)).is_close(Real.0, eps)","not Real.from_rat(iop(i)).abs < eps or Real.from_rat(iop(i)).is_close(Real.0, eps)"]}
{"goal":"iop_limit","proof":["let (s1: (Nat -> Real, Real, Real) -> Nat, s2: (Nat -> Real, Real) -> Real) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Real) { not converges_to(x2, x3) or not x4.is_positive or tail_bound(x2, x3, s1(x2, x3, x4), x4) } and forall(x5: Nat -> Real, x6: Real) { s2(x5, x6).is_positive or converges_to(x5, x6) } and forall(x7: Nat -> Real, x8: Real, x9: Nat) { not tail_bound(x7, x8, x9, s2(x7, x8)) or converges_to(x7, x8) } }","let s0: Real -> Nat satisfy { forall(x0: Real, x1: Nat) { not s0(x0) <= x1 or not x0.is_positive or lift_seq(rat.iop, x1).is_close(Real.0, x0) } }","let s3: (Nat -> Real, Real, Nat, Real) -> Nat satisfy { forall(x10: Nat -> Real, x11: Real, x12: Nat, x13: Real, x14: Nat) { not tail_bound(x10, x11, x12, x13) or not x12 <= x14 or x10(x14).is_close(x11, x13) } and forall(x15: Nat, x16: Nat -> Real, x17: Real, x18: Real) { x15 <= s3(x16, x17, x15, x18) or tail_bound(x16, x17, x15, x18) } and forall(x19: Nat -> Real, x20: Real, x21: Nat, x22: Real) { not x19(s3(x19, x20, x21, x22)).is_close(x20, x22) or tail_bound(x19, x20, x21, x22) } }","not s0(s2(lift_seq(rat.iop), Real.0)) <= s3(lift_seq(rat.iop), Real.0, s0(s2(lift_seq(rat.iop), Real.0)), s2(lift_seq(rat.iop), Real.0)) or not s2(lift_seq(rat.iop), Real.0).is_positive or lift_seq(rat.iop, s3(lift_seq(rat.iop), Real.0, s0(s2(lift_seq(rat.iop), Real.0)), s2(lift_seq(rat.iop), Real.0))).is_close(Real.0, s2(lift_seq(rat.iop), Real.0))","not lift_seq(rat.iop, s3(lift_seq(rat.iop), Real.0, s0(s2(lift_seq(rat.iop), Real.0)), s2(lift_seq(rat.iop), Real.0))).is_close(Real.0, s2(lift_seq(rat.iop), Real.0)) or tail_bound(lift_seq(rat.iop), Real.0, s0(s2(lift_seq(rat.iop), Real.0)), s2(lift_seq(rat.iop), Real.0))","s0(s2(lift_seq(rat.iop), Real.0)) <= s3(lift_seq(rat.iop), Real.0, s0(s2(lift_seq(rat.iop), Real.0)), s2(lift_seq(rat.iop), Real.0)) or tail_bound(lift_seq(rat.iop), Real.0, s0(s2(lift_seq(rat.iop), Real.0)), s2(lift_seq(rat.iop), Real.0))","not tail_bound(lift_seq(rat.iop), Real.0, s0(s2(lift_seq(rat.iop), Real.0)), s2(lift_seq(rat.iop), Real.0)) or converges_to(lift_seq(rat.iop), Real.0)","s2(lift_seq(rat.iop), Real.0).is_positive or converges_to(lift_seq(rat.iop), Real.0)","s2(lift_seq(rat.iop), Real.0).is_positive","not tail_bound(lift_seq(rat.iop), Real.0, s0(s2(lift_seq(rat.iop), Real.0)), s2(lift_seq(rat.iop), Real.0))","s0(s2(lift_seq(rat.iop), Real.0)) <= s3(lift_seq(rat.iop), Real.0, s0(s2(lift_seq(rat.iop), Real.0)), s2(lift_seq(rat.iop), Real.0))","not s0(s2(lift_seq(rat.iop), Real.0)) <= s3(lift_seq(rat.iop), Real.0, s0(s2(lift_seq(rat.iop), Real.0)), s2(lift_seq(rat.iop), Real.0)) or lift_seq(rat.iop, s3(lift_seq(rat.iop), Real.0, s0(s2(lift_seq(rat.iop), Real.0)), s2(lift_seq(rat.iop), Real.0))).is_close(Real.0, s2(lift_seq(rat.iop), Real.0))","not lift_seq(rat.iop, s3(lift_seq(rat.iop), Real.0, s0(s2(lift_seq(rat.iop), Real.0)), s2(lift_seq(rat.iop), Real.0))).is_close(Real.0, s2(lift_seq(rat.iop), Real.0))"]}
{"goal":"half_pos_is_pos","proof":["not Real.0 < Real.0 + b or not a <= Real.0 or a < Real.0 + b","a + a != b or b - a = a","not a < b or (b - a).is_positive","not b.is_positive or Real.0 < Real.0 + b","a <= Real.0 or a > Real.0","not a > Real.0 or a.is_positive","not a > Real.0","Real.0 + b = b","b - a = a","Real.0 < Real.0 + b","a <= Real.0","not (b - a).is_positive","not a < b","not Real.0 < Real.0 + b or a < Real.0 + b","not a < Real.0 + b","a < Real.0 + b"]}
{"goal":"a1 < a2 + a_eps","proof":["not a1.is_close(a2, a_eps) or a1 < a2 + a_eps"]}
{"goal":"b2 < b2 + b_eps","proof":["not b_eps.is_positive or b2 < b2 + b_eps","not b_eps.is_positive","not b1.is_close(b2, b_eps) or b_eps.is_positive"]}
{"goal":"a1 + b1 < a2 + a_eps + b2 + b_eps","proof":["not a1 < a2 + a_eps or not b1 < b2 + b_eps or a1 + b1 < a2 + a_eps + (b2 + b_eps)","a2 + a_eps + (b2 + b_eps) = a2 + a_eps + b2 + b_eps","not b1.is_close(b2, b_eps) or b1 < b2 + b_eps","b1 < b2 + b_eps","not a1 + b1 < a2 + a_eps + (b2 + b_eps)"]}
{"goal":"a1 + b1 < a2 + b2 + (a_eps + b_eps)","proof":["a2 + (a_eps + b2) = a2 + a_eps + b2","a2 + (b2 + a_eps) = a2 + b2 + a_eps","a2 + b2 + (a_eps + b_eps) = a2 + b2 + a_eps + b_eps","b2 + a_eps = a_eps + b2","b_eps + (a2 + a_eps + b2) = a2 + a_eps + b2 + b_eps","b_eps + (a2 + b2 + a_eps) = a2 + b2 + a_eps + b_eps","a2 + a_eps + b2 + b_eps > a1 + b1 = a1 + b1 < a2 + a_eps + b2 + b_eps","a2 + b2 + (a_eps + b_eps) > a1 + b1 = a1 + b1 < a2 + b2 + (a_eps + b_eps)"]}
{"goal":"a1 > a2 - a_eps","proof":["not a1.is_close(a2, a_eps) or a1 > a2 - a_eps"]}
{"goal":"b2 > b2 - b_eps","proof":["not b2 < b2 + b_eps or not b2 < b2 + b_eps or b2.is_close(b2, b_eps)","not b2.is_close(b2, b_eps) or b2 > b2 - b_eps","b2.is_close(b2, b_eps)","not b2.is_close(b2, b_eps)"]}
{"goal":"b2 - b_eps < b2","proof":["not b2 < b2 + b_eps or not b2 < b2 + b_eps or b2.is_close(b2, b_eps)","not b2.is_close(b2, b_eps) or b2 - b_eps < b2","b2.is_close(b2, b_eps)","not b2.is_close(b2, b_eps)"]}
{"goal":"a2 - a_eps + (b2 - b_eps) < a1 + b1","proof":["not a2 - a_eps < a1 or not b2 - b_eps < b1 or a2 - a_eps + (b2 - b_eps) < a1 + b1","not a1.is_close(a2, a_eps) or a2 - a_eps < a1","not b1.is_close(b2, b_eps) or b2 - b_eps < b1","b2 - b_eps < b1","a2 - a_eps < a1","not a2 - a_eps < a1"]}
{"goal":"a1 + b1 > a2 - a_eps + (b2 - b_eps)","proof":["not a2 - a_eps + (b2 - b_eps) >= a1 + b1 or not a2 - a_eps + (b2 - b_eps) < a1 + b1","a1 + b1 <= a2 - a_eps + (b2 - b_eps) or a1 + b1 > a2 - a_eps + (b2 - b_eps)","a2 - a_eps + (b2 - b_eps) >= a1 + b1 = a1 + b1 <= a2 - a_eps + (b2 - b_eps)","a1 + b1 <= a2 - a_eps + (b2 - b_eps)","not a2 - a_eps + (b2 - b_eps) >= a1 + b1","a2 - a_eps + (b2 - b_eps) >= a1 + b1"]}
{"goal":"a2 - a_eps + (b2 - b_eps) != a1 + b1","proof":["a1 + b1 > a1 + b1","let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x1.gt_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2.gt_rat(s0(x2, x3)) or not x2 < x3 } }","not (a1 + b1).gt_rat(s0(a1 + b1, a1 + b1)) or not a1 + b1 < a1 + b1","not a1 + b1 < a1 + b1 or (a1 + b1).gt_rat(s0(a1 + b1, a1 + b1))","a1 + b1 > a1 + b1 = a1 + b1 < a1 + b1","a1 + b1 < a1 + b1","not (a1 + b1).gt_rat(s0(a1 + b1, a1 + b1))","(a1 + b1).gt_rat(s0(a1 + b1, a1 + b1))"]}
{"goal":"(a1 + b1).max(a2 - a_eps + (b2 - b_eps)) = a1 + b1","proof":["not a2 - a_eps + (b2 - b_eps) <= a1 + b1 or (a1 + b1).max(a2 - a_eps + (b2 - b_eps)) = a1 + b1","a1 + b1 > a2 - a_eps + (b2 - b_eps) = a2 - a_eps + (b2 - b_eps) < a1 + b1","not a2 - a_eps + (b2 - b_eps) < a1 + b1 or a2 - a_eps + (b2 - b_eps) <= a1 + b1","a2 - a_eps + (b2 - b_eps) < a1 + b1","not a2 - a_eps + (b2 - b_eps) <= a1 + b1","a2 - a_eps + (b2 - b_eps) <= a1 + b1"]}
{"goal":"(a1 + b1).max(a2 + b2 - (a_eps + b_eps)) != a2 + b2 - (a_eps + b_eps)","proof":["a2 + b2 - (a_eps + b_eps) = a2 + b2 - a_eps - b_eps","a2 + b2 - a_eps = a2 - a_eps + b2","b2 + (a2 - a_eps) - b_eps = b2 - b_eps + (a2 - a_eps)","a2 - a_eps + b2 = b2 + (a2 - a_eps)","b2 - b_eps + (a2 - a_eps) = a2 - a_eps + (b2 - b_eps)"]}
{"goal":"a1 + b1 > a2 + b2 - (a_eps + b_eps)","proof":["a2 + b2 - (a_eps + b_eps) = a2 + b2 - a_eps - b_eps","a2 + b2 - (a_eps + b_eps) = a2 - (a_eps + b_eps) + b2","a2 + b2 - a_eps = a2 - a_eps + b2","b2 + (a2 - a_eps) - b_eps = b2 - b_eps + (a2 - a_eps)","a2 - a_eps + b2 = b2 + (a2 - a_eps)","b2 - b_eps + (a2 - a_eps) = a2 - a_eps + (b2 - b_eps)","a1 + b1 > a2 - (a_eps + b_eps) + b2 = a2 - (a_eps + b_eps) + b2 < a1 + b1","a1 + b1 > a2 - a_eps + (b2 - b_eps) = a2 - a_eps + (b2 - b_eps) < a1 + b1"]}
{"goal":"add_close","proof":["not a1 + b1 < a2 + b2 + (a_eps + b_eps) or not a2 + b2 - (a_eps + b_eps) < a1 + b1 or (a1 + b1).is_close(a2 + b2, a_eps + b_eps)","a2 + b2 - (a_eps + b_eps) = a2 + b2 - a_eps - b_eps","a2 + b2 - a_eps = a2 - a_eps + b2","b2 + (a2 - a_eps) - b_eps = b2 - b_eps + (a2 - a_eps)","a2 - a_eps + b2 = b2 + (a2 - a_eps)","b2 - b_eps + (a2 - a_eps) = a2 - a_eps + (b2 - b_eps)","not a2 + b2 - (a_eps + b_eps) < a1 + b1"]}
{"goal":"exists(k0: Real) { k0.is_positive and k0 + k0 < eps }","proof":["let s0: Real -> Real satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or s0(x1) + s0(x1) < x1 } }","not s0(eps) + s0(eps) < eps or not s0(eps).is_positive","not eps.is_positive or s0(eps) + s0(eps) < eps","not eps.is_positive or s0(eps).is_positive","s0(eps).is_positive","s0(eps) + s0(eps) < eps","not s0(eps) + s0(eps) < eps"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies a(x0).is_close(limit(a), eps2) } }","proof":["let (s1: (Nat -> Real, Real, Real) -> Nat, s2: (Nat -> Real, Real) -> Real) satisfy { forall(x2: Real, x3: Nat -> Real, x4: Real) { not x2.is_positive or not converges_to(x3, x4) or tail_bound(x3, x4, s1(x3, x4, x2), x2) } and forall(x5: Nat -> Real, x6: Real) { s2(x5, x6).is_positive or converges_to(x5, x6) } and forall(x7: Nat -> Real, x8: Real, x9: Nat) { not tail_bound(x7, x8, x9, s2(x7, x8)) or converges_to(x7, x8) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not a(s0(x1)).is_close(limit(a), eps2) } }","not a(s0(s1(a, limit(a), eps2))).is_close(limit(a), eps2)","s1(a, limit(a), eps2) <= s0(s1(a, limit(a), eps2))","not eps2.is_positive or not converges_to(a, limit(a)) or tail_bound(a, limit(a), s1(a, limit(a), eps2), eps2)","not tail_bound(a, limit(a), s1(a, limit(a), eps2), eps2) or not s1(a, limit(a), eps2) <= s0(s1(a, limit(a), eps2)) or a(s0(s1(a, limit(a), eps2))).is_close(limit(a), eps2)","not converges(a) or converges_to(a, limit(a))","converges_to(a, limit(a))","not tail_bound(a, limit(a), s1(a, limit(a), eps2), eps2) or not s1(a, limit(a), eps2) <= s0(s1(a, limit(a), eps2))","not tail_bound(a, limit(a), s1(a, limit(a), eps2), eps2)"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies b(x0).is_close(limit(b), eps2) } }","proof":["let (s1: (Nat -> Real, Real, Real) -> Nat, s2: (Nat -> Real, Real) -> Real) satisfy { forall(x2: Real, x3: Nat -> Real, x4: Real) { not x2.is_positive or not converges_to(x3, x4) or tail_bound(x3, x4, s1(x3, x4, x2), x2) } and forall(x5: Nat -> Real, x6: Real) { s2(x5, x6).is_positive or converges_to(x5, x6) } and forall(x7: Nat -> Real, x8: Real, x9: Nat) { not tail_bound(x7, x8, x9, s2(x7, x8)) or converges_to(x7, x8) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not b(s0(x1)).is_close(limit(b), eps2) } }","not b(s0(s1(b, limit(b), eps2))).is_close(limit(b), eps2)","s1(b, limit(b), eps2) <= s0(s1(b, limit(b), eps2))","not eps2.is_positive or not converges_to(b, limit(b)) or tail_bound(b, limit(b), s1(b, limit(b), eps2), eps2)","not tail_bound(b, limit(b), s1(b, limit(b), eps2), eps2) or not s1(b, limit(b), eps2) <= s0(s1(b, limit(b), eps2)) or b(s0(s1(b, limit(b), eps2))).is_close(limit(b), eps2)","not converges(b) or converges_to(b, limit(b))","converges_to(b, limit(b))","not tail_bound(b, limit(b), s1(b, limit(b), eps2), eps2) or not s1(b, limit(b), eps2) <= s0(s1(b, limit(b), eps2))","not tail_bound(b, limit(b), s1(b, limit(b), eps2), eps2)"]}
{"goal":"exists(k0: Nat) { n1 <= k0 and n2 <= k0 }","proof":["let s0: Nat satisfy { true }","let s1: (Nat, Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat, x2: Nat) { x0 <= s1(x0, x1, x2) } and forall(x3: Nat, x4: Nat, x5: Nat) { x3 <= s1(x4, x3, x5) } and forall(x6: Nat, x7: Nat, x8: Nat) { x6 <= s1(x7, x8, x6) } }","not n2 <= s1(n2, s0, n1) or not n1 <= s1(n2, s0, n1)","n1 <= s1(n2, s0, n1)","n2 <= s1(n2, s0, n1)","not n1 <= s1(n2, s0, n1)"]}
{"goal":"a(i).is_close(limit(a), eps2)","proof":["not n1 <= i or a(i).is_close(limit(a), eps2)","not n1 <= i","not n1 <= n or not n <= i or n1 <= i","not n1 <= n or n1 <= i"]}
{"goal":"b(i).is_close(limit(b), eps2)","proof":["not n2 <= i or b(i).is_close(limit(b), eps2)","not n2 <= i","not n2 <= n or not n <= i or n2 <= i","not n2 <= n or n2 <= i"]}
{"goal":"(a(i) + b(i)).is_close(limit(a) + limit(b), eps2 + eps2)","proof":["not a(i).is_close(limit(a), eps2) or not b(i).is_close(limit(b), eps2) or (a(i) + b(i)).is_close(limit(a) + limit(b), eps2 + eps2)"]}
{"goal":"(q(i) - ql).abs < eps","proof":["add_seq(a, b, i) = q(i)","(a(i) + b(i) - (limit(a) + limit(b))).abs < eps2 + eps2 = (a(i) + b(i)).is_close(limit(a) + limit(b), eps2 + eps2)","a(i) + b(i) = add_seq(a, b, i)","not (q(i) - ql).abs < eps2 + eps2 or not eps2 + eps2 < eps or (q(i) - ql).abs < eps","not (q(i) - ql).abs < eps2 + eps2 or not eps2 + eps2 < eps","not (q(i) - ql).abs < eps2 + eps2"]}
{"goal":"q(i).is_close(ql, eps)","proof":["(q(i) - ql).abs < eps = q(i).is_close(ql, eps)"]}
{"goal":"converges_to(q, ql)","proof":["let (s1: (Nat -> Real, Real, Real) -> Nat, s2: (Nat -> Real, Real) -> Real) satisfy { forall(x2: Real, x3: Nat -> Real, x4: Real) { not x2.is_positive or not converges_to(x3, x4) or tail_bound(x3, x4, s1(x3, x4, x2), x2) } and forall(x5: Nat -> Real, x6: Real) { s2(x5, x6).is_positive or converges_to(x5, x6) } and forall(x7: Nat -> Real, x8: Real, x9: Nat) { not tail_bound(x7, x8, x9, s2(x7, x8)) or converges_to(x7, x8) } }","let s0: Real -> Nat satisfy { forall(x0: Real, x1: Nat) { not s0(x0) <= x1 or not x0.is_positive or q(x1).is_close(ql, x0) } }","let s3: (Nat -> Real, Real, Nat, Real) -> Nat satisfy { forall(x10: Nat -> Real, x11: Real, x12: Nat, x13: Real, x14: Nat) { not tail_bound(x10, x11, x12, x13) or not x12 <= x14 or x10(x14).is_close(x11, x13) } and forall(x15: Nat, x16: Nat -> Real, x17: Real, x18: Real) { x15 <= s3(x16, x17, x15, x18) or tail_bound(x16, x17, x15, x18) } and forall(x19: Nat -> Real, x20: Real, x21: Nat, x22: Real) { not x19(s3(x19, x20, x21, x22)).is_close(x20, x22) or tail_bound(x19, x20, x21, x22) } }","not s0(s2(q, ql)) <= s3(q, ql, s0(s2(q, ql)), s2(q, ql)) or not s2(q, ql).is_positive or q(s3(q, ql, s0(s2(q, ql)), s2(q, ql))).is_close(ql, s2(q, ql))","not q(s3(q, ql, s0(s2(q, ql)), s2(q, ql))).is_close(ql, s2(q, ql)) or tail_bound(q, ql, s0(s2(q, ql)), s2(q, ql))","s0(s2(q, ql)) <= s3(q, ql, s0(s2(q, ql)), s2(q, ql)) or tail_bound(q, ql, s0(s2(q, ql)), s2(q, ql))","not tail_bound(q, ql, s0(s2(q, ql)), s2(q, ql)) or converges_to(q, ql)","s2(q, ql).is_positive or converges_to(q, ql)","s2(q, ql).is_positive","not tail_bound(q, ql, s0(s2(q, ql)), s2(q, ql))","s0(s2(q, ql)) <= s3(q, ql, s0(s2(q, ql)), s2(q, ql))","not q(s3(q, ql, s0(s2(q, ql)), s2(q, ql))).is_close(ql, s2(q, ql))","not s0(s2(q, ql)) <= s3(q, ql, s0(s2(q, ql)), s2(q, ql)) or q(s3(q, ql, s0(s2(q, ql)), s2(q, ql))).is_close(ql, s2(q, ql))"]}
{"goal":"limit_add_seq","proof":[]}
{"goal":"lift_rat_seq_close","proof":["x.is_close(Real.from_rat(rat_seq(x, n)), Real.from_rat(rat.iop(n)))","not x.is_close(Real.from_rat(rat_seq(x, n)), Real.from_rat(rat.iop(n))) or Real.from_rat(rat_seq(x, n)).is_close(x, Real.from_rat(rat.iop(n)))","Real.from_rat(rat_seq(x, n)) = lift_seq(rat_seq(x), n)","not Real.from_rat(rat_seq(x, n)).is_close(x, Real.from_rat(rat.iop(n)))"]}
{"goal":"Real.0 < eps","proof":["not eps.is_positive or Real.0 < Real.0 + eps","Real.0 + eps = eps","not Real.0 < Real.0 + eps"]}
{"goal":"exists(k0: Rat) { Real.from_rat(k0) < eps and k0.is_positive }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or s0(x0, x1).is_positive } and forall(x2: Real, x3: Real) { not x2 < x3 or x2 + Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(s0(Real.0, eps)) < eps or not s0(Real.0, eps).is_positive","not Real.0 < eps or Real.0 + Real.from_rat(s0(Real.0, eps)) < eps","not Real.0 < eps or s0(Real.0, eps).is_positive","Real.0 + Real.from_rat(s0(Real.0, eps)) = Real.from_rat(s0(Real.0, eps))","s0(Real.0, eps).is_positive","Real.0 + Real.from_rat(s0(Real.0, eps)) < eps","not Real.from_rat(s0(Real.0, eps)) < eps","Real.from_rat(s0(Real.0, eps)) < eps"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies iop(x0) < reps } }","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not iop(s0(x1)) < reps } }","let s1: Rat -> Nat satisfy { forall(x2: Rat, x3: Nat) { not s1(x2) <= x3 or not x2.is_positive or iop(x3) < x2 } }","not iop(s0(s1(reps))) < reps","s1(reps) <= s0(s1(reps))","not s1(reps) <= s0(s1(reps)) or not reps.is_positive or iop(s0(s1(reps))) < reps","not s1(reps) <= s0(s1(reps))"]}
{"goal":"lift_seq(rat_seq(x))(i).is_close(x, Real.from_rat(iop(i)))","proof":["lift_seq(rat_seq(x), i).is_close(x, Real.from_rat(iop(i)))"]}
{"goal":"Real.from_rat(iop(i)) < eps","proof":["not n <= i or iop(i) < reps","not Real.from_rat(iop(i)) < Real.from_rat(reps) or not Real.from_rat(reps) < eps or Real.from_rat(iop(i)) < eps","not iop(i) < reps or Real.from_rat(iop(i)) < Real.from_rat(reps)","not Real.from_rat(iop(i)) < Real.from_rat(reps) or not Real.from_rat(reps) < eps","not Real.from_rat(iop(i)) < Real.from_rat(reps)","iop(i) < reps","not iop(i) < reps"]}
{"goal":"(Real.from_rat(rat_seq(x, i)) - x).abs < eps","proof":["(Real.from_rat(rat_seq(x, i)) - x).abs < Real.from_rat(rat.iop(i)) = Real.from_rat(rat_seq(x, i)).is_close(x, Real.from_rat(rat.iop(i)))","not (Real.from_rat(rat_seq(x, i)) - x).abs < Real.from_rat(rat.iop(i)) or not Real.from_rat(rat.iop(i)) <= eps or (Real.from_rat(rat_seq(x, i)) - x).abs < eps","lift_seq(rat_seq(x), i) = Real.from_rat(rat_seq(x, i))","not Real.from_rat(rat.iop(i)) < eps or Real.from_rat(rat.iop(i)) <= eps","Real.from_rat(rat_seq(x, i)).is_close(x, Real.from_rat(rat.iop(i)))","Real.from_rat(rat.iop(i)) <= eps","not (Real.from_rat(rat_seq(x, i)) - x).abs < Real.from_rat(rat.iop(i)) or not Real.from_rat(rat.iop(i)) <= eps","(Real.from_rat(rat_seq(x, i)) - x).abs < Real.from_rat(rat.iop(i))","not (Real.from_rat(rat_seq(x, i)) - x).abs < Real.from_rat(rat.iop(i))"]}
{"goal":"lift_seq(rat_seq(x))(i).is_close(x, eps)","proof":["(Real.from_rat(rat_seq(x, i)) - x).abs < eps = Real.from_rat(rat_seq(x, i)).is_close(x, eps)","lift_seq(rat_seq(x), i) = Real.from_rat(rat_seq(x, i))"]}
{"goal":"tail_bound(lift_seq(rat_seq(x)), x, n, eps)","proof":["let s0: (Nat -> Real, Real, Nat, Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat, x3: Real, x4: Nat) { not tail_bound(x0, x1, x2, x3) or not x2 <= x4 or x0(x4).is_close(x1, x3) } and forall(x5: Nat, x6: Nat -> Real, x7: Real, x8: Real) { x5 <= s0(x6, x7, x5, x8) or tail_bound(x6, x7, x5, x8) } and forall(x9: Nat -> Real, x10: Real, x11: Nat, x12: Real) { not x9(s0(x9, x10, x11, x12)).is_close(x10, x12) or tail_bound(x9, x10, x11, x12) } }","not n <= s0(lift_seq(rat_seq(x)), x, n, eps) or lift_seq(rat_seq(x), s0(lift_seq(rat_seq(x)), x, n, eps)).is_close(x, eps)","not lift_seq(rat_seq(x), s0(lift_seq(rat_seq(x)), x, n, eps)).is_close(x, eps) or tail_bound(lift_seq(rat_seq(x)), x, n, eps)","n <= s0(lift_seq(rat_seq(x)), x, n, eps) or tail_bound(lift_seq(rat_seq(x)), x, n, eps)","n <= s0(lift_seq(rat_seq(x)), x, n, eps)","not lift_seq(rat_seq(x), s0(lift_seq(rat_seq(x)), x, n, eps)).is_close(x, eps)","lift_seq(rat_seq(x), s0(lift_seq(rat_seq(x)), x, n, eps)).is_close(x, eps)"]}
{"goal":"rat_seq_converges_to","proof":["let (s0: (Nat -> Real, Real, Real) -> Nat, s1: (Nat -> Real, Real) -> Real) satisfy { forall(x0: Nat -> Real, x1: Real, x2: Real) { not converges_to(x0, x1) or not x2.is_positive or tail_bound(x0, x1, s0(x0, x1, x2), x2) } and forall(x3: Nat -> Real, x4: Real) { s1(x3, x4).is_positive or converges_to(x3, x4) } and forall(x5: Nat -> Real, x6: Real, x7: Nat) { not tail_bound(x5, x6, x7, s1(x5, x6)) or converges_to(x5, x6) } }","let s2: Real -> Nat satisfy { forall(x8: Real) { not x8.is_positive or tail_bound(lift_seq(rat_seq(x)), x, s2(x8), x8) } }","not s1(lift_seq(rat_seq(x)), x).is_positive or tail_bound(lift_seq(rat_seq(x)), x, s2(s1(lift_seq(rat_seq(x)), x)), s1(lift_seq(rat_seq(x)), x))","not tail_bound(lift_seq(rat_seq(x)), x, s2(s1(lift_seq(rat_seq(x)), x)), s1(lift_seq(rat_seq(x)), x)) or converges_to(lift_seq(rat_seq(x)), x)","s1(lift_seq(rat_seq(x)), x).is_positive or converges_to(lift_seq(rat_seq(x)), x)","s1(lift_seq(rat_seq(x)), x).is_positive","not tail_bound(lift_seq(rat_seq(x)), x, s2(s1(lift_seq(rat_seq(x)), x)), s1(lift_seq(rat_seq(x)), x))"]}
{"goal":"exists(k0: Rat) { x < Real.from_rat(k0) and Real.from_rat(k0) < y }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(s0(x, y)) < y or not x < Real.from_rat(s0(x, y))","not x < y or Real.from_rat(s0(x, y)) < y","not x < y or x < Real.from_rat(s0(x, y))","x < Real.from_rat(s0(x, y))","Real.from_rat(s0(x, y)) < y","not Real.from_rat(s0(x, y)) < y"]}
{"goal":"Real.from_rat(r) < x + eps","proof":["not x.is_close(y, eps) or y < x + eps","not Real.from_rat(r) < y or not y <= x + eps or Real.from_rat(r) < x + eps","not y < x + eps or y <= x + eps","not y <= x + eps or not Real.from_rat(r) < y","not y <= x + eps","y < x + eps","not y < x + eps"]}
{"goal":"y < Real.from_rat(r) + eps","proof":["not x < Real.from_rat(r) or x + eps < Real.from_rat(r) + eps","not x.is_close(y, eps) or y < x + eps","not y < x + eps or not x + eps < Real.from_rat(r) + eps or y < Real.from_rat(r) + eps","not x + eps < Real.from_rat(r) + eps or not y < x + eps","y < x + eps","x + eps < Real.from_rat(r) + eps"]}
{"goal":"x.is_close(Real.from_rat(r), eps)","proof":["not x < Real.from_rat(r) + eps or not Real.from_rat(r) < x + eps or x.is_close(Real.from_rat(r), eps)","not x < y or not y <= Real.from_rat(r) + eps or x < Real.from_rat(r) + eps","not y < Real.from_rat(r) + eps or y <= Real.from_rat(r) + eps","not x < Real.from_rat(r) + eps","y <= Real.from_rat(r) + eps","not y <= Real.from_rat(r) + eps or x < Real.from_rat(r) + eps"]}
{"goal":"rat_close_to_both_lt","proof":["not y.is_close(Real.from_rat(r), eps) or not x.is_close(Real.from_rat(r), eps)","not y < Real.from_rat(r) + eps or not Real.from_rat(r) - eps < y or y.is_close(Real.from_rat(r), eps)","not y.is_close(Real.from_rat(r), eps)","not x.is_close(Real.from_rat(r), eps) or Real.from_rat(r) - eps < x","not Real.from_rat(r) - eps < x or not x < y or Real.from_rat(r) - eps < y","not Real.from_rat(r) - eps < y","not Real.from_rat(r) - eps < x or Real.from_rat(r) - eps < y","Real.from_rat(r) - eps < x","not Real.from_rat(r) - eps < x"]}
{"goal":"y.is_close(x, eps)","proof":["not x.is_close(y, eps) or y.is_close(x, eps)"]}
{"goal":"exists(k0: Rat) { x.is_close(Real.from_rat(k0), eps) and y.is_close(Real.from_rat(k0), eps) }","proof":["let s0: (Real, Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real, x2: Real) { not x0.is_close(x1, x2) or not x0 < x1 or x0.is_close(Real.from_rat(s0(x0, x1, x2)), x2) } and forall(x3: Real, x4: Real, x5: Real) { not x3.is_close(x4, x5) or not x3 < x4 or x4.is_close(Real.from_rat(s0(x3, x4, x5)), x5) } }","not y.is_close(Real.from_rat(s0(x, y, eps)), eps) or not x.is_close(Real.from_rat(s0(x, y, eps)), eps)","not x.is_close(y, eps) or not x < y or y.is_close(Real.from_rat(s0(x, y, eps)), eps)","not x.is_close(y, eps) or not x < y or x.is_close(Real.from_rat(s0(x, y, eps)), eps)","x.is_close(Real.from_rat(s0(x, y, eps)), eps)","y.is_close(Real.from_rat(s0(x, y, eps)), eps)","not y.is_close(Real.from_rat(s0(x, y, eps)), eps)"]}
{"goal":"exists(k0: Rat) { x.is_close(Real.from_rat(k0), eps) and y.is_close(Real.from_rat(k0), eps) }","proof":["let s0: (Real, Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real, x2: Real) { not x0.is_close(x1, x2) or not x0 < x1 or x0.is_close(Real.from_rat(s0(x0, x1, x2)), x2) } and forall(x3: Real, x4: Real, x5: Real) { not x3.is_close(x4, x5) or not x3 < x4 or x4.is_close(Real.from_rat(s0(x3, x4, x5)), x5) } }","not y.is_close(Real.from_rat(s0(y, x, eps)), eps) or not x.is_close(Real.from_rat(s0(y, x, eps)), eps)","not y.is_close(x, eps) or not y < x or x.is_close(Real.from_rat(s0(y, x, eps)), eps)","not y.is_close(x, eps) or not y < x or y.is_close(Real.from_rat(s0(y, x, eps)), eps)","y.is_close(Real.from_rat(s0(y, x, eps)), eps)","x.is_close(Real.from_rat(s0(y, x, eps)), eps)","not x.is_close(Real.from_rat(s0(y, x, eps)), eps)"]}
{"goal":"x = y","proof":["not x <= y or x < y or y = x","not y <= x or y < x or y = x","not y <= x","not x <= y","x <= y or y <= x"]}
{"goal":"exists(k0: Rat) { x.is_close(Real.from_rat(k0), eps) }","proof":["let s0: (Real, Real, Real, Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real, x2: Real, x3: Real, x4: Real) { not x0.is_close(x1, x2) or not x0.is_close(x3, x4) or Real.from_rat(s0(x0, x1, x2, x3, x4)).is_close(x1, x2) } and forall(x5: Real, x6: Real, x7: Real, x8: Real, x9: Real) { not x5.is_close(x6, x7) or not x5.is_close(x8, x9) or Real.from_rat(s0(x5, x6, x7, x8, x9)).is_close(x8, x9) } }","not x.is_close(Real.from_rat(s0(y, x, eps, x, eps)), eps)","not y.is_close(x, eps) or not y.is_close(x, eps) or Real.from_rat(s0(y, x, eps, x, eps)).is_close(x, eps)","not Real.from_rat(s0(y, x, eps, x, eps)).is_close(x, eps) or x.is_close(Real.from_rat(s0(y, x, eps, x, eps)), eps)","not Real.from_rat(s0(y, x, eps, x, eps)).is_close(x, eps)","not y.is_close(x, eps)"]}
{"goal":"exists(k0: Rat) { x.is_close(Real.from_rat(k0), eps) and y.is_close(Real.from_rat(k0), eps) }","proof":["not y.is_close(Real.from_rat(r1), eps) or not x.is_close(Real.from_rat(r1), eps)","not y.is_close(Real.from_rat(r1), eps)","y.is_close(Real.from_rat(r1), eps)"]}
{"goal":"rat_close","proof":["let s0: Rat satisfy { x.is_close(Real.from_rat(s0), eps) and y.is_close(Real.from_rat(s0), eps) }","not y.is_close(Real.from_rat(s0), eps) or not x.is_close(Real.from_rat(s0), eps)","not x.is_close(Real.from_rat(s0), eps)"]}
{"goal":"lift_rat_seq_converges","proof":["converges_to(lift_seq(rat_seq(x)), x)","not converges_to(lift_seq(rat_seq(x)), x) or converges(lift_seq(rat_seq(x)))","not converges_to(lift_seq(rat_seq(x)), x)"]}
{"goal":"exists(k0: Real) { k0.is_positive and k0 + k0 < eps }","proof":["let s0: Real -> Real satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or s0(x1) + s0(x1) < x1 } }","not s0(eps) + s0(eps) < eps or not s0(eps).is_positive","not eps.is_positive or s0(eps) + s0(eps) < eps","not eps.is_positive or s0(eps).is_positive","s0(eps).is_positive","s0(eps) + s0(eps) < eps","not s0(eps) + s0(eps) < eps"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies a(x0).is_close(limit(a), eps2) } }","proof":["let (s1: (Nat -> Real, Real, Real) -> Nat, s2: (Nat -> Real, Real) -> Real) satisfy { forall(x2: Real, x3: Nat -> Real, x4: Real) { not x2.is_positive or not converges_to(x3, x4) or tail_bound(x3, x4, s1(x3, x4, x2), x2) } and forall(x5: Nat -> Real, x6: Real) { s2(x5, x6).is_positive or converges_to(x5, x6) } and forall(x7: Nat -> Real, x8: Real, x9: Nat) { not tail_bound(x7, x8, x9, s2(x7, x8)) or converges_to(x7, x8) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not a(s0(x1)).is_close(limit(a), eps2) } }","not a(s0(s1(a, limit(a), eps2))).is_close(limit(a), eps2)","s1(a, limit(a), eps2) <= s0(s1(a, limit(a), eps2))","not eps2.is_positive or not converges_to(a, limit(a)) or tail_bound(a, limit(a), s1(a, limit(a), eps2), eps2)","not tail_bound(a, limit(a), s1(a, limit(a), eps2), eps2) or not s1(a, limit(a), eps2) <= s0(s1(a, limit(a), eps2)) or a(s0(s1(a, limit(a), eps2))).is_close(limit(a), eps2)","not converges(a) or converges_to(a, limit(a))","converges_to(a, limit(a))","not tail_bound(a, limit(a), s1(a, limit(a), eps2), eps2) or not s1(a, limit(a), eps2) <= s0(s1(a, limit(a), eps2))","not tail_bound(a, limit(a), s1(a, limit(a), eps2), eps2)"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies b(x0).is_close(limit(b), eps2) } }","proof":["let (s1: (Nat -> Real, Real, Real) -> Nat, s2: (Nat -> Real, Real) -> Real) satisfy { forall(x2: Real, x3: Nat -> Real, x4: Real) { not x2.is_positive or not converges_to(x3, x4) or tail_bound(x3, x4, s1(x3, x4, x2), x2) } and forall(x5: Nat -> Real, x6: Real) { s2(x5, x6).is_positive or converges_to(x5, x6) } and forall(x7: Nat -> Real, x8: Real, x9: Nat) { not tail_bound(x7, x8, x9, s2(x7, x8)) or converges_to(x7, x8) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not b(s0(x1)).is_close(limit(b), eps2) } }","not b(s0(s1(b, limit(b), eps2))).is_close(limit(b), eps2)","s1(b, limit(b), eps2) <= s0(s1(b, limit(b), eps2))","not eps2.is_positive or not converges_to(b, limit(b)) or tail_bound(b, limit(b), s1(b, limit(b), eps2), eps2)","not tail_bound(b, limit(b), s1(b, limit(b), eps2), eps2) or not s1(b, limit(b), eps2) <= s0(s1(b, limit(b), eps2)) or b(s0(s1(b, limit(b), eps2))).is_close(limit(b), eps2)","not converges(b) or converges_to(b, limit(b))","converges_to(b, limit(b))","not tail_bound(b, limit(b), s1(b, limit(b), eps2), eps2) or not s1(b, limit(b), eps2) <= s0(s1(b, limit(b), eps2))","not tail_bound(b, limit(b), s1(b, limit(b), eps2), eps2)"]}
{"goal":"exists(k0: Nat) { n1 <= k0 and n2 <= k0 }","proof":["let s0: Nat satisfy { true }","let s1: (Nat, Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat, x2: Nat) { x0 <= s1(x0, x1, x2) } and forall(x3: Nat, x4: Nat, x5: Nat) { x3 <= s1(x4, x3, x5) } and forall(x6: Nat, x7: Nat, x8: Nat) { x6 <= s1(x7, x8, x6) } }","not n2 <= s1(n2, s0, n1) or not n1 <= s1(n2, s0, n1)","n1 <= s1(n2, s0, n1)","n2 <= s1(n2, s0, n1)","not n1 <= s1(n2, s0, n1)"]}
{"goal":"a(i).is_close(limit(a), eps2)","proof":["not n1 <= i or a(i).is_close(limit(a), eps2)","not n1 <= i","not n1 <= n or not n <= i or n1 <= i","not n1 <= n or n1 <= i"]}
{"goal":"b(i).is_close(limit(b), eps2)","proof":["not n2 <= i or b(i).is_close(limit(b), eps2)","not n2 <= i","not n2 <= n or not n <= i or n2 <= i","not n2 <= n or n2 <= i"]}
{"goal":"a(i).is_close(b(i), eps2 + eps2)","proof":["not a(i).is_close(limit(a), eps2) or not b(i).is_close(limit(a), eps2) or a(i).is_close(b(i), eps2 + eps2)","b(i).is_close(limit(a), eps2)","not b(i).is_close(limit(a), eps2) or not a(i).is_close(limit(a), eps2)"]}
{"goal":"(a(i) - b(i)).abs < eps","proof":["(a(i) - b(i)).abs < eps2 + eps2 = a(i).is_close(b(i), eps2 + eps2)","not (a(i) - b(i)).abs < eps2 + eps2 or not eps2 + eps2 <= eps or (a(i) - b(i)).abs < eps","not eps2 + eps2 < eps or eps2 + eps2 <= eps","eps2 + eps2 <= eps","not (a(i) - b(i)).abs < eps2 + eps2 or not eps2 + eps2 <= eps","(a(i) - b(i)).abs < eps2 + eps2","not (a(i) - b(i)).abs < eps2 + eps2"]}
{"goal":"a(i).is_close(b(i), eps)","proof":["(a(i) - b(i)).abs < eps = a(i).is_close(b(i), eps)"]}
{"goal":"convergent_seqs_get_close","proof":["let (s0: (Nat -> Real, Nat -> Real, Real) -> Nat, s1: (Nat -> Real, Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Nat -> Real, x2: Real, x3: Nat) { not s0(x0, x1, x2) <= x3 or not seq_close(x0, x1, x2) or x0(x3).is_close(x1(x3), x2) } and forall(x4: Nat, x5: Nat -> Real, x6: Nat -> Real, x7: Real) { x4 <= s1(x5, x6, x7, x4) or seq_close(x5, x6, x7) } and forall(x8: Nat -> Real, x9: Nat -> Real, x10: Real, x11: Nat) { not x8(s1(x8, x9, x10, x11)).is_close(x9(s1(x8, x9, x10, x11)), x10) or seq_close(x8, x9, x10) } }","not n <= s1(a, b, eps, n) or a(s1(a, b, eps, n)).is_close(b(s1(a, b, eps, n)), eps)","not a(s1(a, b, eps, n)).is_close(b(s1(a, b, eps, n)), eps) or seq_close(a, b, eps)","n <= s1(a, b, eps, n) or seq_close(a, b, eps)","n <= s1(a, b, eps, n)","not a(s1(a, b, eps, n)).is_close(b(s1(a, b, eps, n)), eps)"]}
{"goal":"only_abs_zero_eq_zero","proof":["x.abs != x","not x.is_negative or x.abs = -x","x.is_negative or x.abs = x","--x = x","-Real.0 != x","x.is_negative","--x != -Real.0","-x != Real.0","x.abs = -x","x.abs != -x"]}
{"goal":"seq_close(a, b, eps)","proof":["limit(b) != limit(a) or not converges(a) or not converges(b) or not eps.is_positive or seq_close(a, b, eps)","not eps.is_positive","limit(a).is_close(limit(a), eps)","not limit(a).is_close(limit(a), eps) or eps.is_positive"]}
{"goal":"limit(a) != limit(b)","proof":[]}
{"goal":"Real.0 - -limit(b) != limit(a)","proof":["Real.0 + --limit(b) = Real.0 - -limit(b)","--limit(b) = limit(b)","Real.0 + limit(b) = limit(b)"]}
{"goal":"limit(a) + -limit(b) != Real.0","proof":["limit(a) + -limit(b) != Real.0 or Real.0 - -limit(b) = limit(a)"]}
{"goal":"limit(a) - limit(b) != Real.0","proof":["limit(a) + -limit(b) = limit(a) - limit(b)"]}
{"goal":"diff != Real.0","proof":["(limit(a) - limit(b)).abs != Real.0 or limit(a) - limit(b) = Real.0","(limit(a) - limit(b)).abs = Real.0","(limit(a) - limit(b)).abs != Real.0"]}
{"goal":"diff.is_positive","proof":["diff.is_positive or Real.0 = diff or diff.is_negative","diff.is_negative","not (limit(a) - limit(b)).abs.is_negative"]}
{"goal":"diff < eps","proof":["(limit(a) - limit(b)).abs < eps = limit(a).is_close(limit(b), eps)"]}
{"goal":"exists(k0: Real) { diff < k0 and k0 < eps }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not diff < Real.from_rat(s0(diff, eps)) or not Real.from_rat(s0(diff, eps)) < eps","not diff < eps or Real.from_rat(s0(diff, eps)) < eps","not diff < eps or diff < Real.from_rat(s0(diff, eps))","diff < Real.from_rat(s0(diff, eps))","Real.from_rat(s0(diff, eps)) < eps","not Real.from_rat(s0(diff, eps)) < eps"]}
{"goal":"limit(a).is_close(limit(b), eps2)","proof":["(limit(a) - limit(b)).abs < eps2 = limit(a).is_close(limit(b), eps2)"]}
{"goal":"exists(k0: Real) { k0.is_positive and eps2 + k0 < eps }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or s0(x0, x1).is_positive } and forall(x2: Real, x3: Real) { not x2 < x3 or x2 + Real.from_rat(s0(x2, x3)) < x3 } }","not eps2 + Real.from_rat(s0(eps2, eps)) < eps or not Real.from_rat(s0(eps2, eps)).is_positive","not eps2 < eps or eps2 + Real.from_rat(s0(eps2, eps)) < eps","not eps2 < eps or s0(eps2, eps).is_positive","not s0(eps2, eps).is_positive or Real.from_rat(s0(eps2, eps)).is_positive","s0(eps2, eps).is_positive","eps2 + Real.from_rat(s0(eps2, eps)) < eps","Real.from_rat(s0(eps2, eps)).is_positive","not Real.from_rat(s0(eps2, eps)).is_positive"]}
{"goal":"exists(k0: Real) { k0.is_positive and k0 + k0 < eps3 }","proof":["let s0: Real -> Real satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or s0(x1) + s0(x1) < x1 } }","not s0(eps3) + s0(eps3) < eps3 or not s0(eps3).is_positive","not eps3.is_positive or s0(eps3) + s0(eps3) < eps3","not eps3.is_positive or s0(eps3).is_positive","s0(eps3).is_positive","s0(eps3) + s0(eps3) < eps3","not s0(eps3) + s0(eps3) < eps3"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies a(x0).is_close(limit(a), eps4) } }","proof":["let (s1: (Nat -> Real, Real, Real) -> Nat, s2: (Nat -> Real, Real) -> Real) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Real) { not converges_to(x2, x3) or not x4.is_positive or tail_bound(x2, x3, s1(x2, x3, x4), x4) } and forall(x5: Nat -> Real, x6: Real) { s2(x5, x6).is_positive or converges_to(x5, x6) } and forall(x7: Nat -> Real, x8: Real, x9: Nat) { not tail_bound(x7, x8, x9, s2(x7, x8)) or converges_to(x7, x8) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not a(s0(x1)).is_close(limit(a), eps4) } }","not a(s0(s1(a, limit(a), eps4))).is_close(limit(a), eps4)","s1(a, limit(a), eps4) <= s0(s1(a, limit(a), eps4))","not converges_to(a, limit(a)) or not eps4.is_positive or tail_bound(a, limit(a), s1(a, limit(a), eps4), eps4)","not tail_bound(a, limit(a), s1(a, limit(a), eps4), eps4) or not s1(a, limit(a), eps4) <= s0(s1(a, limit(a), eps4)) or a(s0(s1(a, limit(a), eps4))).is_close(limit(a), eps4)","not converges(a) or converges_to(a, limit(a))","converges_to(a, limit(a))","not tail_bound(a, limit(a), s1(a, limit(a), eps4), eps4) or not s1(a, limit(a), eps4) <= s0(s1(a, limit(a), eps4))","not tail_bound(a, limit(a), s1(a, limit(a), eps4), eps4)"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies b(x0).is_close(limit(b), eps4) } }","proof":["let (s1: (Nat -> Real, Real, Real) -> Nat, s2: (Nat -> Real, Real) -> Real) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Real) { not converges_to(x2, x3) or not x4.is_positive or tail_bound(x2, x3, s1(x2, x3, x4), x4) } and forall(x5: Nat -> Real, x6: Real) { s2(x5, x6).is_positive or converges_to(x5, x6) } and forall(x7: Nat -> Real, x8: Real, x9: Nat) { not tail_bound(x7, x8, x9, s2(x7, x8)) or converges_to(x7, x8) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not b(s0(x1)).is_close(limit(b), eps4) } }","not b(s0(s1(b, limit(b), eps4))).is_close(limit(b), eps4)","s1(b, limit(b), eps4) <= s0(s1(b, limit(b), eps4))","not converges_to(b, limit(b)) or not eps4.is_positive or tail_bound(b, limit(b), s1(b, limit(b), eps4), eps4)","not tail_bound(b, limit(b), s1(b, limit(b), eps4), eps4) or not s1(b, limit(b), eps4) <= s0(s1(b, limit(b), eps4)) or b(s0(s1(b, limit(b), eps4))).is_close(limit(b), eps4)","not converges(b) or converges_to(b, limit(b))","converges_to(b, limit(b))","not tail_bound(b, limit(b), s1(b, limit(b), eps4), eps4) or not s1(b, limit(b), eps4) <= s0(s1(b, limit(b), eps4))","not tail_bound(b, limit(b), s1(b, limit(b), eps4), eps4)"]}
{"goal":"exists(k0: Nat) { n1 <= k0 and n2 <= k0 }","proof":["let s0: Nat satisfy { true }","let s1: (Nat, Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat, x2: Nat) { x0 <= s1(x0, x1, x2) } and forall(x3: Nat, x4: Nat, x5: Nat) { x3 <= s1(x4, x3, x5) } and forall(x6: Nat, x7: Nat, x8: Nat) { x6 <= s1(x7, x8, x6) } }","not n2 <= s1(n2, s0, n1) or not n1 <= s1(n2, s0, n1)","n1 <= s1(n2, s0, n1)","n2 <= s1(n2, s0, n1)","not n1 <= s1(n2, s0, n1)"]}
{"goal":"n1 <= i","proof":["not n1 <= n or not n <= i or n1 <= i","not n <= i or not n1 <= n"]}
{"goal":"n2 <= i","proof":["not n2 <= n or not n <= i or n2 <= i","not n <= i or not n2 <= n"]}
{"goal":"a(i).is_close(limit(a), eps4)","proof":["not n1 <= i or a(i).is_close(limit(a), eps4)"]}
{"goal":"b(i).is_close(limit(b), eps4)","proof":["not n2 <= i or b(i).is_close(limit(b), eps4)"]}
{"goal":"a(i).is_close(limit(b), eps4 + eps2)","proof":["not a(i).is_close(limit(a), eps4) or not limit(b).is_close(limit(a), eps2) or a(i).is_close(limit(b), eps4 + eps2)","not limit(a).is_close(limit(b), eps2) or limit(b).is_close(limit(a), eps2)","not limit(b).is_close(limit(a), eps2) or not a(i).is_close(limit(a), eps4)","limit(b).is_close(limit(a), eps2)","not limit(b).is_close(limit(a), eps2)"]}
{"goal":"a(i).is_close(b(i), eps4 + eps2 + eps4)","proof":["not a(i).is_close(limit(b), eps4 + eps2) or not b(i).is_close(limit(b), eps4) or a(i).is_close(b(i), eps4 + eps2 + eps4)","not a(i).is_close(limit(b), eps4 + eps2) or not b(i).is_close(limit(b), eps4)"]}
{"goal":"a(i).is_close(b(i), eps4 + eps4 + eps2)","proof":["eps4 + (eps4 + eps2) = eps4 + eps4 + eps2","(a(i) - b(i)).abs < eps4 + eps2 + eps4 = a(i).is_close(b(i), eps4 + eps2 + eps4)","(a(i) - b(i)).abs < eps4 + eps4 + eps2 = a(i).is_close(b(i), eps4 + eps4 + eps2)","eps4 + (eps4 + eps2) = eps4 + eps2 + eps4"]}
{"goal":"eps3 + eps2 < eps","proof":["eps3 + eps2 = eps2 + eps3"]}
{"goal":"eps4 + eps4 + eps2 < eps3 + eps2","proof":["not eps4 + eps4 < eps3 or eps4 + eps4 + eps2 < eps3 + eps2"]}
{"goal":"eps2 + eps3 <= eps","proof":["not eps2 + eps3 < eps or eps2 + eps3 <= eps"]}
{"goal":"eps4 + eps4 + eps2 < eps","proof":["not eps4 + eps4 + eps2 < eps2 + eps3 or not eps2 + eps3 <= eps or eps4 + eps4 + eps2 < eps","eps3 + eps2 = eps2 + eps3","eps4 + eps4 + eps2 < eps2 + eps3","not eps4 + eps4 + eps2 < eps2 + eps3 or not eps2 + eps3 <= eps"]}
{"goal":"(a(i) - b(i)).abs < eps","proof":["(a(i) - b(i)).abs < eps4 + eps4 + eps2 = a(i).is_close(b(i), eps4 + eps4 + eps2)","not (a(i) - b(i)).abs < eps4 + eps4 + eps2 or not eps4 + eps4 + eps2 < eps or (a(i) - b(i)).abs < eps","not (a(i) - b(i)).abs < eps4 + eps4 + eps2 or not eps4 + eps4 + eps2 < eps","(a(i) - b(i)).abs < eps4 + eps4 + eps2","not (a(i) - b(i)).abs < eps4 + eps4 + eps2"]}
{"goal":"a(i).is_close(b(i), eps)","proof":["(a(i) - b(i)).abs < eps = a(i).is_close(b(i), eps)"]}
{"goal":"seq_close(a, b, eps)","proof":["let (s0: (Nat -> Real, Nat -> Real, Real) -> Nat, s1: (Nat -> Real, Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Nat -> Real, x2: Real, x3: Nat) { not s0(x0, x1, x2) <= x3 or not seq_close(x0, x1, x2) or x0(x3).is_close(x1(x3), x2) } and forall(x4: Nat, x5: Nat -> Real, x6: Nat -> Real, x7: Real) { x4 <= s1(x5, x6, x7, x4) or seq_close(x5, x6, x7) } and forall(x8: Nat -> Real, x9: Nat -> Real, x10: Real, x11: Nat) { not x8(s1(x8, x9, x10, x11)).is_close(x9(s1(x8, x9, x10, x11)), x10) or seq_close(x8, x9, x10) } }","not n <= s1(a, b, eps, n) or a(s1(a, b, eps, n)).is_close(b(s1(a, b, eps, n)), eps)","not a(s1(a, b, eps, n)).is_close(b(s1(a, b, eps, n)), eps) or seq_close(a, b, eps)","n <= s1(a, b, eps, n) or seq_close(a, b, eps)","n <= s1(a, b, eps, n)","not a(s1(a, b, eps, n)).is_close(b(s1(a, b, eps, n)), eps)"]}
{"goal":"close_limit_imp_seqs_get_close","proof":[]}
{"goal":"close_and_lt_imp_close","proof":["(x - y).abs < eps1 = x.is_close(y, eps1)","(x - y).abs < eps2 = x.is_close(y, eps2)","not (x - y).abs < eps1 or not eps1 < eps2 or (x - y).abs < eps2","not (x - y).abs < eps2","not (x - y).abs < eps1 or (x - y).abs < eps2","(x - y).abs < eps1","not (x - y).abs < eps1"]}
{"goal":"Real.0 < x","proof":["not x.is_positive or Real.0 < Real.0 + x","Real.0 + x = x","not Real.0 < Real.0 + x"]}
{"goal":"exists(k0: Rat) { k0.is_positive and Real.from_rat(k0) < x }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or s0(x0, x1).is_positive } and forall(x2: Real, x3: Real) { not x2 < x3 or x2 + Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(s0(Real.0, x)) < x or not s0(Real.0, x).is_positive","not Real.0 < x or Real.0 + Real.from_rat(s0(Real.0, x)) < x","not Real.0 < x or s0(Real.0, x).is_positive","Real.0 + Real.from_rat(s0(Real.0, x)) = Real.from_rat(s0(Real.0, x))","s0(Real.0, x).is_positive","Real.0 + Real.from_rat(s0(Real.0, x)) < x","not Real.from_rat(s0(Real.0, x)) < x","Real.from_rat(s0(Real.0, x)) < x"]}
{"goal":"reps + reps + reps = r","proof":["r / Rat.3 + r / Rat.3 + r / Rat.3 = r"]}
{"goal":"Real.from_rat(reps) + Real.from_rat(reps) + Real.from_rat(reps) = Real.from_rat(r)","proof":["Real.from_rat(reps + reps) + Real.from_rat(reps) = Real.from_rat(reps + reps + reps)","Real.from_rat(reps) + Real.from_rat(reps) = Real.from_rat(reps + reps)","Real.from_rat(reps + reps) + Real.from_rat(reps) != Real.from_rat(r)"]}
{"goal":"Real.from_rat(reps) + Real.from_rat(reps) + Real.from_rat(reps) < x","proof":[]}
{"goal":"find_less_than_a_third","proof":["not Real.from_rat(reps) + Real.from_rat(reps) + Real.from_rat(reps) < x or not Real.from_rat(reps).is_positive","not Real.from_rat(reps).is_positive","reps + reps + reps = Rat.3 * reps","not (Rat.3 * reps).is_positive or not Rat.3.is_positive or reps.is_positive","not reps.is_positive or Real.from_rat(reps).is_positive","(reps + reps + reps).is_positive","(Rat.3 * reps).is_positive","not reps.is_positive","reps.is_positive"]}
{"goal":"x - y < Real.0","proof":["--y + -x = -(x + -y)","x + -y = x - y","y + -x = y - x","not x < y or (y - x).is_positive","not (-(x - y)).is_positive or x - y < x - y + -(x - y)","x - y + -(x - y) = Real.0","(-(x - y)).gt_rat(Rat.0) = (-(x - y)).is_positive","(y - x).gt_rat(Rat.0) = (y - x).is_positive","--y = y","not x - y < x - y + -(x - y)","(y - x).is_positive","not (-(x - y)).is_positive"]}
{"goal":"x - y != Real.0","proof":["Real.0 < Real.0","not converges_to(lift_seq(rat.iop), Real.0) or not converges_to(lift_seq(rat.iop), Real.0) or not Real.0 < Real.0","not converges_to(lift_seq(rat.iop), Real.0)"]}
{"goal":"(x - y).abs.is_positive","proof":["(x - y).abs.is_positive or (x - y).abs = Real.0 or (x - y).abs.is_negative","(x - y).abs != Real.0 or x - y = Real.0","not (x - y).abs.is_negative","(x - y).abs != Real.0","(x - y).abs = Real.0"]}
{"goal":"x >= y","proof":["x >= y or x < y"]}
{"goal":"x > y","proof":["not x <= y or x < y or y = x","x > y or x <= y","not x <= y","x <= y"]}
{"goal":"x - y > Real.0","proof":["not y <= x or y < x or y = x","not y < x or (x - y).is_positive","x >= y = y <= x","y <= x","not (x - y).is_positive or x - y > Real.0","not (x - y).is_positive","y < x","not y < x"]}
{"goal":"(x - y).abs.is_positive","proof":["not x - y <= Real.0 or not x - y > Real.0","(x - y).abs.is_negative or (x - y).abs.is_positive or (x - y).abs = Real.0","x - y <= (x - y).abs","not (x - y).abs.is_negative","(x - y).abs = Real.0","not x - y <= Real.0"]}
{"goal":"neq_imp_abs_diff_pos","proof":[]}
{"goal":"Real.0 < eps1.min(eps2)","proof":["not eps1.is_positive or not eps2.is_positive or eps1.min(eps2).is_positive","not eps1.min(eps2).is_positive or Real.0 < Real.0 + eps1.min(eps2)","Real.0 + eps1.min(eps2) = eps1.min(eps2)","not Real.0 < Real.0 + eps1.min(eps2)","not eps1.is_positive or eps1.min(eps2).is_positive","not eps1.min(eps2).is_positive","eps1.min(eps2).is_positive"]}
{"goal":"exists(k0: Real) { Real.0 < k0 and k0 < eps1.min(eps2) }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(s0(Real.0, eps1.min(eps2))) < eps1.min(eps2) or not Real.0 < Real.from_rat(s0(Real.0, eps1.min(eps2)))","not Real.0 < eps1.min(eps2) or Real.from_rat(s0(Real.0, eps1.min(eps2))) < eps1.min(eps2)","not Real.0 < eps1.min(eps2) or Real.0 < Real.from_rat(s0(Real.0, eps1.min(eps2)))","Real.0 < Real.from_rat(s0(Real.0, eps1.min(eps2)))","Real.from_rat(s0(Real.0, eps1.min(eps2))) < eps1.min(eps2)","not Real.from_rat(s0(Real.0, eps1.min(eps2))) < eps1.min(eps2)"]}
{"goal":"eps3.is_positive and eps3 < eps1 and eps3 < eps2","proof":["not eps3 < eps1.min(eps2) or eps3 < eps2","not eps3 < eps1.min(eps2) or eps3 < eps1","not Real.0 >= eps3 or not Real.0 < eps3","eps3 <= Real.0 or eps3 > Real.0","Real.0 >= eps3 = eps3 <= Real.0","not eps3 > Real.0 or eps3.is_positive","not Real.0 >= eps3","eps3 < eps1","eps3 < eps2","not eps3.is_positive","not eps3 <= Real.0","not eps3 > Real.0","eps3 > Real.0"]}
{"goal":"eps_smaller_than_both","proof":["not eps3 < eps2 or not eps3 < eps1 or not eps3.is_positive","not eps3.is_positive"]}
{"goal":"converges_to(lift_seq(b), limit_rat(a))","proof":["not eq_seq(a, b) or converges_to(lift_seq(b), limit_rat(a))"]}
{"goal":"converges_to(lift_seq(b), limit_rat(b))","proof":["not converges(lift_seq(b)) or converges_to(lift_seq(b), limit(lift_seq(b)))","limit(lift_seq(b)) = limit_rat(b)","not converges_to(lift_seq(b), limit(lift_seq(b)))","not converges_to(lift_seq(b), limit_rat(a)) or converges(lift_seq(b))","not converges(lift_seq(b))","converges(lift_seq(b))"]}
{"goal":"limit_rat(b) = limit_rat(a)","proof":["not converges_to(lift_seq(b), limit_rat(b)) or not converges_to(lift_seq(b), limit_rat(a)) or limit_rat(b) = limit_rat(a)","not converges_to(lift_seq(b), limit_rat(b)) or not converges_to(lift_seq(b), limit_rat(a))"]}
{"goal":"converges(lift_seq(a))","proof":["not eq_seq(a, b) or converges(lift_seq(a))"]}
{"goal":"converges_to(lift_seq(a), limit_rat(a))","proof":["not converges(lift_seq(a)) or converges_to(lift_seq(a), limit(lift_seq(a)))","limit(lift_seq(a)) = limit_rat(a)","converges_to(lift_seq(a), limit(lift_seq(a)))","not converges_to(lift_seq(a), limit(lift_seq(a)))"]}
{"goal":"converges_to(lift_seq(a), limit_rat(b))","proof":["not converges_to(lift_seq(a), limit_rat(a))"]}
{"goal":"eq_seq_symm","proof":["not converges_to(lift_seq(a), limit_rat(b)) or not converges(lift_seq(b)) or eq_seq(b, a)","not converges(lift_seq(b))","not converges_to(lift_seq(b), limit_rat(a)) or converges(lift_seq(b))"]}
{"goal":"exists(k0: Real) { k0.is_positive and k0 + k0 < eps }","proof":["let s0: Real -> Real satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or s0(x1) + s0(x1) < x1 } }","not s0(eps) + s0(eps) < eps or not s0(eps).is_positive","not eps.is_positive or s0(eps) + s0(eps) < eps","not eps.is_positive or s0(eps).is_positive","s0(eps).is_positive","s0(eps) + s0(eps) < eps","not s0(eps) + s0(eps) < eps"]}
{"goal":"exists(k0: Nat) { tail_bound(lift_seq(a), limit_rat(a), k0, delta) }","proof":["let (s0: (Nat -> Real, Real, Real) -> Nat, s1: (Nat -> Real, Real) -> Real) satisfy { forall(x0: Real, x1: Nat -> Real, x2: Real) { not x0.is_positive or not converges_to(x1, x2) or tail_bound(x1, x2, s0(x1, x2, x0), x0) } and forall(x3: Nat -> Real, x4: Real) { s1(x3, x4).is_positive or converges_to(x3, x4) } and forall(x5: Nat -> Real, x6: Real, x7: Nat) { not tail_bound(x5, x6, x7, s1(x5, x6)) or converges_to(x5, x6) } }","not tail_bound(lift_seq(a), limit_rat(a), s0(lift_seq(a), limit_rat(a), delta), delta)","not delta.is_positive or not converges_to(lift_seq(a), limit_rat(a)) or tail_bound(lift_seq(a), limit_rat(a), s0(lift_seq(a), limit_rat(a), delta), delta)","not converges_to(lift_seq(a), limit_rat(a))","not converges(lift_seq(a)) or converges_to(lift_seq(a), limit(lift_seq(a)))","limit(lift_seq(a)) = limit_rat(a)","converges_to(lift_seq(a), limit(lift_seq(a)))","not converges_to(lift_seq(a), limit(lift_seq(a)))"]}
{"goal":"exists(k0: Nat) { tail_bound(lift_seq(b), limit_rat(b), k0, delta) }","proof":["let (s0: (Nat -> Real, Real, Real) -> Nat, s1: (Nat -> Real, Real) -> Real) satisfy { forall(x0: Real, x1: Nat -> Real, x2: Real) { not x0.is_positive or not converges_to(x1, x2) or tail_bound(x1, x2, s0(x1, x2, x0), x0) } and forall(x3: Nat -> Real, x4: Real) { s1(x3, x4).is_positive or converges_to(x3, x4) } and forall(x5: Nat -> Real, x6: Real, x7: Nat) { not tail_bound(x5, x6, x7, s1(x5, x6)) or converges_to(x5, x6) } }","not tail_bound(lift_seq(b), limit_rat(b), s0(lift_seq(b), limit_rat(b), delta), delta)","not delta.is_positive or not converges_to(lift_seq(b), limit_rat(b)) or tail_bound(lift_seq(b), limit_rat(b), s0(lift_seq(b), limit_rat(b), delta), delta)","not converges_to(lift_seq(b), limit_rat(b))","not converges(lift_seq(b)) or converges_to(lift_seq(b), limit(lift_seq(b)))","limit(lift_seq(b)) = limit_rat(b)","converges_to(lift_seq(b), limit(lift_seq(b)))","not converges_to(lift_seq(b), limit(lift_seq(b)))"]}
{"goal":"exists(k0: Nat) { n1 <= k0 and n2 <= k0 }","proof":["let s0: Nat satisfy { true }","let s1: (Nat, Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat, x2: Nat) { x0 <= s1(x0, x1, x2) } and forall(x3: Nat, x4: Nat, x5: Nat) { x3 <= s1(x4, x3, x5) } and forall(x6: Nat, x7: Nat, x8: Nat) { x6 <= s1(x7, x8, x6) } }","not n2 <= s1(n2, s0, n1) or not n1 <= s1(n2, s0, n1)","n1 <= s1(n2, s0, n1)","n2 <= s1(n2, s0, n1)","not n1 <= s1(n2, s0, n1)"]}
{"goal":"n1 <= i","proof":["not n1 <= n or not n <= i or n1 <= i","not n <= i or not n1 <= n"]}
{"goal":"tail_bound(lift_seq(a), Real.new(limit_rat(a).gt_rat), n1, delta)","proof":["Real.new(limit_rat(a).gt_rat) = limit_rat(a)"]}
{"goal":"lift_seq(a, i).is_close(Real.new(limit_rat(a).gt_rat), delta)","proof":["not tail_bound(lift_seq(a), Real.new(limit_rat(a).gt_rat), n1, delta) or not n1 <= i or lift_seq(a, i).is_close(Real.new(limit_rat(a).gt_rat), delta)","not tail_bound(lift_seq(a), Real.new(limit_rat(a).gt_rat), n1, delta) or lift_seq(a, i).is_close(Real.new(limit_rat(a).gt_rat), delta)"]}
{"goal":"lift_seq(a)(i).is_close(limit_rat(a), delta)","proof":["Real.new(limit_rat(a).gt_rat) = limit_rat(a)"]}
{"goal":"n2 <= i","proof":["not n2 <= n or not n <= i or n2 <= i","not n <= i or not n2 <= n"]}
{"goal":"tail_bound(lift_seq(b), Real.new(limit_rat(b).gt_rat), n2, delta)","proof":["Real.new(limit_rat(b).gt_rat) = limit_rat(b)"]}
{"goal":"lift_seq(b, i).is_close(Real.new(limit_rat(b).gt_rat), delta)","proof":["not tail_bound(lift_seq(b), Real.new(limit_rat(b).gt_rat), n2, delta) or not n2 <= i or lift_seq(b, i).is_close(Real.new(limit_rat(b).gt_rat), delta)","not tail_bound(lift_seq(b), Real.new(limit_rat(b).gt_rat), n2, delta) or lift_seq(b, i).is_close(Real.new(limit_rat(b).gt_rat), delta)"]}
{"goal":"lift_seq(b)(i).is_close(limit_rat(b), delta)","proof":["Real.new(limit_rat(b).gt_rat) = limit_rat(b)"]}
{"goal":"(lift_seq(a, i) + lift_seq(b, i)).is_close(limit_rat(a) + limit_rat(b), delta + delta)","proof":["not lift_seq(a, i).is_close(limit_rat(a), delta) or not lift_seq(b, i).is_close(limit_rat(b), delta) or (lift_seq(a, i) + lift_seq(b, i)).is_close(limit_rat(a) + limit_rat(b), delta + delta)"]}
{"goal":"seq(i).is_close(target, delta + delta)","proof":["lift_seq(add_rat_seq(a, b), i) = seq(i)","(lift_seq(a, i) + lift_seq(b, i) - (limit_rat(a) + limit_rat(b))).abs < delta + delta = (lift_seq(a, i) + lift_seq(b, i)).is_close(limit_rat(a) + limit_rat(b), delta + delta)","(seq(i) - target).abs < delta + delta = seq(i).is_close(target, delta + delta)","a(i) + b(i) = add_rat_seq(a, b, i)","Real.from_rat(a(i)) + Real.from_rat(b(i)) = Real.from_rat(a(i) + b(i))","lift_seq(a, i) = Real.from_rat(a(i))","lift_seq(add_rat_seq(a, b), i) = Real.from_rat(add_rat_seq(a, b, i))","lift_seq(b, i) = Real.from_rat(b(i))"]}
{"goal":"seq(i).is_close(target, eps)","proof":["not delta + delta < eps or not seq(i).is_close(target, delta + delta) or seq(i).is_close(target, eps)","not seq(i).is_close(target, delta + delta) or not delta + delta < eps"]}
{"goal":"converges_to(seq, target)","proof":["let (s1: (Nat -> Real, Real, Real) -> Nat, s2: (Nat -> Real, Real) -> Real) satisfy { forall(x2: Real, x3: Nat -> Real, x4: Real) { not x2.is_positive or not converges_to(x3, x4) or tail_bound(x3, x4, s1(x3, x4, x2), x2) } and forall(x5: Nat -> Real, x6: Real) { s2(x5, x6).is_positive or converges_to(x5, x6) } and forall(x7: Nat -> Real, x8: Real, x9: Nat) { not tail_bound(x7, x8, x9, s2(x7, x8)) or converges_to(x7, x8) } }","let s0: Real -> Nat satisfy { forall(x0: Real, x1: Nat) { not s0(x0) <= x1 or not x0.is_positive or seq(x1).is_close(target, x0) } }","let s3: (Nat -> Real, Real, Nat, Real) -> Nat satisfy { forall(x10: Nat -> Real, x11: Real, x12: Nat, x13: Real, x14: Nat) { not tail_bound(x10, x11, x12, x13) or not x12 <= x14 or x10(x14).is_close(x11, x13) } and forall(x15: Nat, x16: Nat -> Real, x17: Real, x18: Real) { x15 <= s3(x16, x17, x15, x18) or tail_bound(x16, x17, x15, x18) } and forall(x19: Nat -> Real, x20: Real, x21: Nat, x22: Real) { not x19(s3(x19, x20, x21, x22)).is_close(x20, x22) or tail_bound(x19, x20, x21, x22) } }","not s0(s2(seq, target)) <= s3(seq, target, s0(s2(seq, target)), s2(seq, target)) or not s2(seq, target).is_positive or seq(s3(seq, target, s0(s2(seq, target)), s2(seq, target))).is_close(target, s2(seq, target))","not seq(s3(seq, target, s0(s2(seq, target)), s2(seq, target))).is_close(target, s2(seq, target)) or tail_bound(seq, target, s0(s2(seq, target)), s2(seq, target))","s0(s2(seq, target)) <= s3(seq, target, s0(s2(seq, target)), s2(seq, target)) or tail_bound(seq, target, s0(s2(seq, target)), s2(seq, target))","not tail_bound(seq, target, s0(s2(seq, target)), s2(seq, target)) or converges_to(seq, target)","s2(seq, target).is_positive or converges_to(seq, target)","s2(seq, target).is_positive","not tail_bound(seq, target, s0(s2(seq, target)), s2(seq, target))","s0(s2(seq, target)) <= s3(seq, target, s0(s2(seq, target)), s2(seq, target))","not seq(s3(seq, target, s0(s2(seq, target)), s2(seq, target))).is_close(target, s2(seq, target))","not s0(s2(seq, target)) <= s3(seq, target, s0(s2(seq, target)), s2(seq, target)) or seq(s3(seq, target, s0(s2(seq, target)), s2(seq, target))).is_close(target, s2(seq, target))"]}
{"goal":"add_rat_seq_is_add","proof":[]}
{"goal":"(x - y).abs < eps","proof":["(x - y).abs < eps = x.is_close(y, eps)"]}
{"goal":"(-x + y).abs < eps","proof":["(y - x).abs < eps = y.is_close(x, eps)","not x.is_close(y, eps) or y.is_close(x, eps)","y + -x = y - x","y + -x = -x + y","not (y + -x).abs < eps","not (y - x).abs < eps","y.is_close(x, eps)","not y.is_close(x, eps)"]}
{"goal":"neg_is_close","proof":["(-x - -y).abs < eps = (-x).is_close(-y, eps)","-x + --y = -x - -y","--y = y"]}
{"goal":"exists(k0: Real) { k0.is_positive and k0 < eps }","proof":["let s0: Real -> Real satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or s0(x1) < x1 } }","not s0(eps) < eps or not s0(eps).is_positive","not eps.is_positive or s0(eps) < eps","not eps.is_positive or s0(eps).is_positive","s0(eps).is_positive","s0(eps) < eps","not s0(eps) < eps"]}
{"goal":"exists(k0: Nat) { tail_bound(lift_seq(a), limit_rat(a), k0, delta) }","proof":["let (s0: (Nat -> Real, Real, Real) -> Nat, s1: (Nat -> Real, Real) -> Real) satisfy { forall(x0: Nat -> Real, x1: Real, x2: Real) { not converges_to(x0, x1) or not x2.is_positive or tail_bound(x0, x1, s0(x0, x1, x2), x2) } and forall(x3: Nat -> Real, x4: Real) { s1(x3, x4).is_positive or converges_to(x3, x4) } and forall(x5: Nat -> Real, x6: Real, x7: Nat) { not tail_bound(x5, x6, x7, s1(x5, x6)) or converges_to(x5, x6) } }","not tail_bound(lift_seq(a), limit_rat(a), s0(lift_seq(a), limit_rat(a), delta), delta)","not converges_to(lift_seq(a), limit_rat(a)) or not delta.is_positive or tail_bound(lift_seq(a), limit_rat(a), s0(lift_seq(a), limit_rat(a), delta), delta)","not converges_to(lift_seq(a), limit_rat(a))","not converges(lift_seq(a)) or converges_to(lift_seq(a), limit(lift_seq(a)))","limit(lift_seq(a)) = limit_rat(a)","converges_to(lift_seq(a), limit(lift_seq(a)))","not converges_to(lift_seq(a), limit(lift_seq(a)))"]}
{"goal":"tail_bound(lift_seq(a), Real.new(limit_rat(a).gt_rat), n1, delta)","proof":["Real.new(limit_rat(a).gt_rat) = limit_rat(a)"]}
{"goal":"lift_seq(a, i).is_close(Real.new(limit_rat(a).gt_rat), delta)","proof":["not tail_bound(lift_seq(a), Real.new(limit_rat(a).gt_rat), n1, delta) or not n1 <= i or lift_seq(a, i).is_close(Real.new(limit_rat(a).gt_rat), delta)","not tail_bound(lift_seq(a), Real.new(limit_rat(a).gt_rat), n1, delta) or lift_seq(a, i).is_close(Real.new(limit_rat(a).gt_rat), delta)"]}
{"goal":"lift_seq(a)(i).is_close(limit_rat(a), delta)","proof":["Real.new(limit_rat(a).gt_rat) = limit_rat(a)"]}
{"goal":"exists(k0: Nat) { n1 <= k0 }","proof":["let (s3: (Nat -> Real, Real, Real) -> Nat, s4: (Nat -> Real, Real) -> Real) satisfy { forall(x13: Nat -> Real, x14: Real, x15: Real) { not converges_to(x13, x14) or not x15.is_positive or tail_bound(x13, x14, s3(x13, x14, x15), x15) } and forall(x16: Nat -> Real, x17: Real) { s4(x16, x17).is_positive or converges_to(x16, x17) } and forall(x18: Nat -> Real, x19: Real, x20: Nat) { not tail_bound(x18, x19, x20, s4(x18, x19)) or converges_to(x18, x19) } }","let s0: Nat -> Real satisfy { true }","let s1: Real satisfy { true }","let s2: (Nat -> Real, Real, Nat, Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat, x3: Real, x4: Nat) { not tail_bound(x0, x1, x2, x3) or not x2 <= x4 or x0(x4).is_close(x1, x3) } and forall(x5: Nat, x6: Nat -> Real, x7: Real, x8: Real) { x5 <= s2(x6, x7, x5, x8) or tail_bound(x6, x7, x5, x8) } and forall(x9: Nat -> Real, x10: Real, x11: Nat, x12: Real) { not x9(s2(x9, x10, x11, x12)).is_close(x10, x12) or tail_bound(x9, x10, x11, x12) } }","not n1 <= s2(s0, -s1, n1, s4(s0, -s1))","not n1 <= s2(s0, Real.0, n1, s4(s0, Real.0))","not n1 <= s2(s0, eps, n1, s4(s0, eps))","not n1 <= s2(s0, s1, n1, s4(s0, s1))","n1 <= s2(s0, -s1, n1, s4(s0, -s1)) or tail_bound(s0, -s1, n1, s4(s0, -s1))","n1 <= s2(s0, Real.0, n1, s4(s0, Real.0)) or tail_bound(s0, Real.0, n1, s4(s0, Real.0))","n1 <= s2(s0, eps, n1, s4(s0, eps)) or tail_bound(s0, eps, n1, s4(s0, eps))","n1 <= s2(s0, s1, n1, s4(s0, s1)) or tail_bound(s0, s1, n1, s4(s0, s1))","not tail_bound(s0, -s1, n1, s4(s0, -s1)) or converges_to(s0, -s1)","not tail_bound(s0, Real.0, n1, s4(s0, Real.0)) or converges_to(s0, Real.0)","not tail_bound(s0, eps, n1, s4(s0, eps)) or converges_to(s0, eps)","not tail_bound(s0, s1, n1, s4(s0, s1)) or converges_to(s0, s1)","tail_bound(s0, -s1, n1, s4(s0, -s1))","tail_bound(s0, Real.0, n1, s4(s0, Real.0))","tail_bound(s0, eps, n1, s4(s0, eps))","tail_bound(s0, s1, n1, s4(s0, s1))","converges_to(s0, -s1)","converges_to(s0, Real.0)","converges_to(s0, eps)","converges_to(s0, s1)","not converges_to(s0, Real.0) or not converges_to(s0, -s1) or -s1 = Real.0","not converges_to(s0, eps) or not converges_to(s0, s1) or eps = s1","-s1 = Real.0","eps = s1","-s1 != Real.0 or not (-s1).is_negative","not (-s1).is_negative","s1.is_positive","not s1.is_positive or (-s1).is_negative","not s1.is_positive"]}
{"goal":"lift_seq(a)(i).is_close(limit_rat(a), delta)","proof":["not n1 <= i or lift_seq(a, i).is_close(limit_rat(a), delta)","not n1 <= i","not n1 <= n or not n <= i or n1 <= i","not n1 <= n or n1 <= i"]}
{"goal":"(-lift_seq(a, i)).is_close(-limit_rat(a), delta)","proof":["not lift_seq(a, i).is_close(limit_rat(a), delta) or (-lift_seq(a, i)).is_close(-limit_rat(a), delta)"]}
{"goal":"seq(i).is_close(target, delta)","proof":["lift_seq(neg_rat_seq(a), i) = seq(i)","(-lift_seq(a, i) - -limit_rat(a)).abs < delta = (-lift_seq(a, i)).is_close(-limit_rat(a), delta)","(seq(i) - target).abs < delta = seq(i).is_close(target, delta)","neg_rat_seq(a, i) = -a(i)","lift_seq(a, i) = Real.from_rat(a(i))","lift_seq(neg_rat_seq(a), i) = Real.from_rat(neg_rat_seq(a, i))","-Real.from_rat(a(i)) = Real.from_rat(-a(i))"]}
{"goal":"seq(i).is_close(target, eps)","proof":["not delta < eps or not seq(i).is_close(target, delta) or seq(i).is_close(target, eps)","not seq(i).is_close(target, delta) or not delta < eps"]}
{"goal":"converges_to(seq, target)","proof":["let (s1: (Nat -> Real, Real, Real) -> Nat, s2: (Nat -> Real, Real) -> Real) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Real) { not converges_to(x2, x3) or not x4.is_positive or tail_bound(x2, x3, s1(x2, x3, x4), x4) } and forall(x5: Nat -> Real, x6: Real) { s2(x5, x6).is_positive or converges_to(x5, x6) } and forall(x7: Nat -> Real, x8: Real, x9: Nat) { not tail_bound(x7, x8, x9, s2(x7, x8)) or converges_to(x7, x8) } }","let s0: Real -> Nat satisfy { forall(x0: Real, x1: Nat) { not s0(x0) <= x1 or not x0.is_positive or seq(x1).is_close(target, x0) } }","let s3: (Nat -> Real, Real, Nat, Real) -> Nat satisfy { forall(x10: Nat -> Real, x11: Real, x12: Nat, x13: Real, x14: Nat) { not tail_bound(x10, x11, x12, x13) or not x12 <= x14 or x10(x14).is_close(x11, x13) } and forall(x15: Nat, x16: Nat -> Real, x17: Real, x18: Real) { x15 <= s3(x16, x17, x15, x18) or tail_bound(x16, x17, x15, x18) } and forall(x19: Nat -> Real, x20: Real, x21: Nat, x22: Real) { not x19(s3(x19, x20, x21, x22)).is_close(x20, x22) or tail_bound(x19, x20, x21, x22) } }","not s0(s2(seq, target)) <= s3(seq, target, s0(s2(seq, target)), s2(seq, target)) or not s2(seq, target).is_positive or seq(s3(seq, target, s0(s2(seq, target)), s2(seq, target))).is_close(target, s2(seq, target))","not seq(s3(seq, target, s0(s2(seq, target)), s2(seq, target))).is_close(target, s2(seq, target)) or tail_bound(seq, target, s0(s2(seq, target)), s2(seq, target))","s0(s2(seq, target)) <= s3(seq, target, s0(s2(seq, target)), s2(seq, target)) or tail_bound(seq, target, s0(s2(seq, target)), s2(seq, target))","not tail_bound(seq, target, s0(s2(seq, target)), s2(seq, target)) or converges_to(seq, target)","s2(seq, target).is_positive or converges_to(seq, target)","s2(seq, target).is_positive","not tail_bound(seq, target, s0(s2(seq, target)), s2(seq, target))","s0(s2(seq, target)) <= s3(seq, target, s0(s2(seq, target)), s2(seq, target))","not seq(s3(seq, target, s0(s2(seq, target)), s2(seq, target))).is_close(target, s2(seq, target))","not s0(s2(seq, target)) <= s3(seq, target, s0(s2(seq, target)), s2(seq, target)) or seq(s3(seq, target, s0(s2(seq, target)), s2(seq, target))).is_close(target, s2(seq, target))"]}
{"goal":"neg_seq_converges","proof":[]}
{"goal":"exists(k0: Real) { eventual_ub(lift_seq(a), k0) }","proof":["let (s1: (Nat -> Real, Real) -> Nat, s2: Nat -> Real -> Real) satisfy { forall(x0: Real, x1: Nat -> Real) { not x0.is_positive or not converges(x1) or cauchy_bound(x1, s1(x1, x0), x0) } and forall(x2: Nat -> Real) { s2(x2).is_positive or converges(x2) } and forall(x3: Nat -> Real, x4: Nat) { not cauchy_bound(x3, x4, s2(x3)) or converges(x3) } }","let s0: Nat satisfy { true }","not eventual_ub(lift_seq(a), lift_seq(a, s1(lift_seq(a), Real.from_rat(rat.iop(s0)))) + Real.from_rat(rat.iop(s0)))","not cauchy_bound(lift_seq(a), s1(lift_seq(a), Real.from_rat(rat.iop(s0))), Real.from_rat(rat.iop(s0))) or eventual_ub(lift_seq(a), lift_seq(a, s1(lift_seq(a), Real.from_rat(rat.iop(s0)))) + Real.from_rat(rat.iop(s0)))","not Real.from_rat(rat.iop(s0)).is_positive or not converges(lift_seq(a)) or cauchy_bound(lift_seq(a), s1(lift_seq(a), Real.from_rat(rat.iop(s0))), Real.from_rat(rat.iop(s0)))","not cauchy_bound(lift_seq(a), s1(lift_seq(a), Real.from_rat(rat.iop(s0))), Real.from_rat(rat.iop(s0)))","not Real.from_rat(rat.iop(s0)).is_positive","not rat.iop(s0).is_positive or Real.from_rat(rat.iop(s0)).is_positive","not rat.iop(s0).is_positive","rat.iop(s0).is_positive"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies lift_seq(a)(x0) <= eventual } }","proof":["let (s1: (Nat -> Real, Real) -> Nat, s2: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Nat) { not s1(x2, x3) <= x4 or not eventual_ub(x2, x3) or x2(x4) <= x3 } and forall(x5: Nat, x6: Nat -> Real, x7: Real) { x5 <= s2(x6, x7, x5) or eventual_ub(x6, x7) } and forall(x8: Nat -> Real, x9: Real, x10: Nat) { not x8(s2(x8, x9, x10)) <= x9 or eventual_ub(x8, x9) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not lift_seq(a, s0(x1)) <= eventual } }","not lift_seq(a, s0(s1(lift_seq(a), eventual))) <= eventual","s1(lift_seq(a), eventual) <= s0(s1(lift_seq(a), eventual))","not s1(lift_seq(a), eventual) <= s0(s1(lift_seq(a), eventual)) or not eventual_ub(lift_seq(a), eventual) or lift_seq(a, s0(s1(lift_seq(a), eventual))) <= eventual","not eventual_ub(lift_seq(a), eventual) or lift_seq(a, s0(s1(lift_seq(a), eventual))) <= eventual"]}
{"goal":"exists(k0: Rat) { forall(x0: Nat) { x0 <= n implies a(x0) < k0 } }","proof":["let s0: Rat -> Nat satisfy { forall(x0: Rat) { s0(x0) <= n } and forall(x1: Rat) { not a(s0(x1)) < x1 } }","let s1: (Nat -> Rat, Nat) -> Rat satisfy { forall(x2: Nat, x3: Nat, x4: Nat -> Rat) { not x2 <= x3 or x4(x2).abs < s1(x4, x3) } }","not a(s0(s1(a, n))) < s1(a, n)","s0(s1(a, n)) <= n","not s0(s1(a, n)) <= n or a(s0(s1(a, n))).abs < s1(a, n)","not a(s0(s1(a, n))) <= a(s0(s1(a, n))).abs or not a(s0(s1(a, n))).abs < s1(a, n) or a(s0(s1(a, n))) < s1(a, n)","a(s0(s1(a, n))) <= a(s0(s1(a, n))).abs","not a(s0(s1(a, n))) <= a(s0(s1(a, n))).abs or not a(s0(s1(a, n))).abs < s1(a, n)","not a(s0(s1(a, n))).abs < s1(a, n)","a(s0(s1(a, n))).abs < s1(a, n)"]}
{"goal":"exists(k0: Rat) { eventual < Real.from_rat(k0) and finite < k0 }","proof":["let s0: Real -> Rat satisfy { forall(x0: Real) { x0 < Real.from_rat(s0(x0)) } }","let s1: Rat -> Rat satisfy { forall(x1: Rat) { x1 < s1(x1) } }","not eventual < Real.from_rat(s0(eventual)) or not finite < s0(eventual)","not eventual < Real.from_rat(s1(finite)) or not finite < s1(finite)","not eventual < Real.from_rat(s0(eventual)) or not Real.from_rat(s0(eventual)) <= Real.from_rat(s1(finite)) or eventual < Real.from_rat(s1(finite))","not s1(finite) <= s0(eventual) or not finite < s1(finite) or finite < s0(eventual)","not s0(eventual) <= s1(finite) or Real.from_rat(s0(eventual)) <= Real.from_rat(s1(finite))","s1(finite) <= s0(eventual) or s0(eventual) <= s1(finite)","eventual < Real.from_rat(s0(eventual))","not finite < s0(eventual)","finite < s1(finite)","not eventual < Real.from_rat(s1(finite))","not s1(finite) <= s0(eventual) or not finite < s1(finite)","not s1(finite) <= s0(eventual)","not Real.from_rat(s0(eventual)) <= Real.from_rat(s1(finite)) or not eventual < Real.from_rat(s0(eventual))","not Real.from_rat(s0(eventual)) <= Real.from_rat(s1(finite))","s0(eventual) <= s1(finite)","not s0(eventual) <= s1(finite)"]}
{"goal":"Real.from_rat(a(i)) <= eventual","proof":["not n <= i or lift_seq(a, i) <= eventual","lift_seq(a, i) = Real.from_rat(a(i))","lift_seq(a, i) <= eventual","not lift_seq(a, i) <= eventual"]}
{"goal":"Real.from_rat(bound) > Real.from_rat(a(i))","proof":["not eventual < Real.from_rat(bound) or not Real.from_rat(bound) <= Real.from_rat(a(i)) or eventual < Real.from_rat(a(i))","not eventual >= Real.from_rat(a(i)) or not eventual < Real.from_rat(a(i))","Real.from_rat(bound) <= Real.from_rat(a(i)) or Real.from_rat(bound) > Real.from_rat(a(i))","eventual >= Real.from_rat(a(i)) = Real.from_rat(a(i)) <= eventual","Real.from_rat(bound) <= Real.from_rat(a(i))","eventual >= Real.from_rat(a(i))","not Real.from_rat(bound) <= Real.from_rat(a(i)) or eventual < Real.from_rat(a(i))","not eventual < Real.from_rat(a(i))","eventual < Real.from_rat(a(i))"]}
{"goal":"Real.from_rat(bound).gt_rat(a(i))","proof":["not Real.from_rat(bound) > Real.from_rat(a(i)) or Real.from_rat(bound).gt_rat(a(i))"]}
{"goal":"a(i) < bound","proof":["not Real.from_rat(bound).gt_rat(a(i)) or bound > a(i)","a(i) < bound = bound > a(i)","bound > a(i)","not bound > a(i)"]}
{"goal":"i <= n","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or x0 + s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat) { Nat.0 != s0(x2, x3) or not x2 < x3 } }","not i < n or i + s0(i, n) = n","i + s0(i, n) != n or i <= n","i + s0(i, n) != n","i < n or n <= i","not i < n","i < n"]}
{"goal":"a(i) < bound","proof":["not i <= n or a(i) < finite","not a(i) < finite or not finite < bound or a(i) < bound","not a(i) < finite or not finite < bound","a(i) < finite","not a(i) < finite"]}
{"goal":"converges_imp_bounded","proof":["let s0: Rat -> Nat satisfy { forall(x0: Rat) { not a(s0(x0)) < x0 } }","not a(s0(bound)) < bound","a(s0(bound)) < bound"]}
{"goal":"exists(k0: Rat) { forall(x0: Nat) { a(x0) < k0 } }","proof":["let s0: Rat -> Nat satisfy { forall(x0: Rat) { not a(s0(x0)) < x0 } }","let s1: Nat -> Rat -> Rat satisfy { forall(x1: Nat -> Rat, x2: Nat) { not converges(lift_seq(x1)) or x1(x2) < s1(x1) } }","not a(s0(s1(a))) < s1(a)","not converges(lift_seq(a)) or a(s0(s1(a))) < s1(a)"]}
{"goal":"converges(lift_seq(neg_rat_seq(a)))","proof":["not converges(lift_seq(a)) or converges_to(lift_seq(neg_rat_seq(a)), -limit_rat(a))","not converges_to(lift_seq(neg_rat_seq(a)), -limit_rat(a)) or converges(lift_seq(neg_rat_seq(a)))","not converges_to(lift_seq(neg_rat_seq(a)), -limit_rat(a))"]}
{"goal":"exists(k0: Rat) { forall(x0: Nat) { neg_rat_seq(a)(x0) < k0 } }","proof":["let s0: Rat -> Nat satisfy { forall(x0: Rat) { not neg_rat_seq(a, s0(x0)) < x0 } }","let s1: Nat -> Rat -> Rat satisfy { forall(x1: Nat -> Rat, x2: Nat) { not converges(lift_seq(x1)) or x1(x2) < s1(x1) } }","not neg_rat_seq(a, s0(s1(neg_rat_seq(a)))) < s1(neg_rat_seq(a))","not converges(lift_seq(neg_rat_seq(a))) or neg_rat_seq(a, s0(s1(neg_rat_seq(a)))) < s1(neg_rat_seq(a))","neg_rat_seq(a, s0(s1(neg_rat_seq(a)))) < s1(neg_rat_seq(a))"]}
{"goal":"exists(k0: Rat) { pos_bound < k0 and neg_bound < k0 }","proof":["let s0: (Rat, Rat) -> Rat satisfy { forall(x0: Rat, x1: Rat) { x0 < s0(x0, x1) } and forall(x2: Rat, x3: Rat) { x2 < s0(x3, x2) } }","not neg_bound < s0(pos_bound, neg_bound) or not pos_bound < s0(pos_bound, neg_bound)","neg_bound < s0(pos_bound, neg_bound)","not pos_bound < s0(pos_bound, neg_bound)","pos_bound < s0(pos_bound, neg_bound)"]}
{"goal":"a(i).abs < bound","proof":["neg_rat_seq(a, i) < neg_bound","not a(i).abs < neg_bound or not neg_bound < bound or a(i).abs < bound","neg_rat_seq(a, i) = -a(i)","not a(i).is_negative or a(i).abs = -a(i)","not a(i).abs < neg_bound or not neg_bound < bound","not a(i).abs < neg_bound","a(i).abs = -a(i)","not -a(i) < neg_bound"]}
{"goal":"a(i).abs < bound","proof":["a(i) < pos_bound","not a(i).abs < pos_bound or not pos_bound < bound or a(i).abs < bound","a(i).is_negative or a(i).abs = a(i)","a(i).abs = a(i)","not a(i).abs < pos_bound or not pos_bound < bound","not a(i).abs < pos_bound"]}
{"goal":"converges_imp_abs_bounded","proof":["let s0: Rat -> Nat satisfy { forall(x0: Rat) { not a(s0(x0)).abs < x0 } }","not a(s0(bound)).abs < bound","a(s0(bound)).abs < bound"]}
{"goal":"(b + -a).is_positive","proof":["b + -a = b - a"]}
{"goal":"b + -a > Real.0","proof":["b + -a = -a + b","not -a + b > Real.0","(-a + b).is_positive","not (-a + b).is_positive or -a + b > Real.0"]}
{"goal":"Real.0 - -a < b","proof":["not b + -a > Real.0 or b > Real.0 - -a","Real.0 - -a >= b or Real.0 - -a < b","not b <= Real.0 - -a or not b > Real.0 - -a","Real.0 - -a >= b = b <= Real.0 - -a","Real.0 - -a >= b","b <= Real.0 - -a","b > Real.0 - -a","not b > Real.0 - -a"]}
{"goal":"Real.0 + a < b","proof":["Real.0 + --a = Real.0 - -a","--a = a"]}
{"goal":"diff_pos_imp_lt","proof":["a + Real.0 = Real.0 + a","--a = a","--a + Real.0 = --a"]}
{"goal":"Real.0 < eps","proof":["not eps.is_positive or Real.0 < Real.0 + eps","Real.0 + eps = eps","not Real.0 < Real.0 + eps"]}
{"goal":"smaller_rat_eps","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or s0(x0, x1).is_positive } and forall(x2: Real, x3: Real) { not x2 < x3 or x2 + Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(s0(Real.0, eps)) < eps or not s0(Real.0, eps).is_positive","not Real.0 < eps or Real.0 + Real.from_rat(s0(Real.0, eps)) < eps","not Real.0 < eps or s0(Real.0, eps).is_positive","Real.0 + Real.from_rat(s0(Real.0, eps)) = Real.from_rat(s0(Real.0, eps))","s0(Real.0, eps).is_positive","Real.0 + Real.from_rat(s0(Real.0, eps)) < eps","not Real.from_rat(s0(Real.0, eps)) < eps","Real.from_rat(s0(Real.0, eps)) < eps"]}
{"goal":"exists(k0: Rat) { forall(x0: Nat) { a(x0).abs < k0 } }","proof":["let s0: Rat -> Nat satisfy { forall(x0: Rat) { not a(s0(x0)).abs < x0 } }","let s1: Nat -> Rat -> Rat satisfy { forall(x1: Nat -> Rat, x2: Nat) { not converges(lift_seq(x1)) or x1(x2).abs < s1(x1) } }","not a(s0(s1(a))).abs < s1(a)","not converges(lift_seq(a)) or a(s0(s1(a))).abs < s1(a)"]}
{"goal":"exists(k0: Rat) { forall(x0: Nat) { b(x0).abs < k0 } }","proof":["let s0: Rat -> Nat satisfy { forall(x0: Rat) { not b(s0(x0)).abs < x0 } }","let s1: Nat -> Rat -> Rat satisfy { forall(x1: Nat -> Rat, x2: Nat) { not converges(lift_seq(x1)) or x1(x2).abs < s1(x1) } }","not b(s0(s1(b))).abs < s1(b)","not converges(lift_seq(b)) or b(s0(s1(b))).abs < s1(b)"]}
{"goal":"exists(k0: Rat) { a_ub < k0 and b_ub < k0 }","proof":["let s0: (Rat, Rat) -> Rat satisfy { forall(x0: Rat, x1: Rat) { x0 < s0(x0, x1) } and forall(x2: Rat, x3: Rat) { x2 < s0(x3, x2) } }","not b_ub < s0(a_ub, b_ub) or not a_ub < s0(a_ub, b_ub)","b_ub < s0(a_ub, b_ub)","not a_ub < s0(a_ub, b_ub)","a_ub < s0(a_ub, b_ub)"]}
{"goal":"ub.is_positive","proof":["let s0: Nat satisfy { true }","b(s0).abs < b_ub","not b(s0).abs < b_ub or b(s0).abs.is_negative or b_ub.is_positive","not b_ub < ub or b_ub.is_negative or ub.is_positive","b_ub.is_negative","not b_ub.is_negative or not b_ub.is_positive","not b(s0).abs.is_negative","not b_ub.is_positive","b_ub.is_positive"]}
{"goal":"exists(k0: Rat) { k0.is_positive and Real.from_rat(k0) < eps }","proof":["let s0: Real -> Rat satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or Real.from_rat(s0(x1)) < x1 } }","not Real.from_rat(s0(eps)) < eps or not s0(eps).is_positive","not eps.is_positive or Real.from_rat(s0(eps)) < eps","not eps.is_positive or s0(eps).is_positive","s0(eps).is_positive","Real.from_rat(s0(eps)) < eps","not Real.from_rat(s0(eps)) < eps"]}
{"goal":"(ub + ub).is_positive","proof":["not ub.is_positive or not ub.is_positive or (ub + ub).is_positive"]}
{"goal":"reps2.is_positive","proof":["not reps.is_positive or not (ub + ub).reciprocal.is_positive or (reps * (ub + ub).reciprocal).is_positive","reps * (ub + ub).reciprocal = reps / (ub + ub)","not (reps / (ub + ub)).is_positive","not (ub + ub).is_positive or (ub + ub).reciprocal.is_positive","(ub + ub).reciprocal.is_positive","not (ub + ub).reciprocal.is_positive or (reps * (ub + ub).reciprocal).is_positive","not (reps * (ub + ub).reciprocal).is_positive","(reps * (ub + ub).reciprocal).is_positive"]}
{"goal":"eps2.is_positive","proof":["not Real.from_rat(reps2).is_positive","not reps2.is_positive or Real.from_rat(reps2).is_positive"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat, x1: Nat) { k0 <= x0 and k0 <= x1 implies lift_seq(a)(x0).is_close(lift_seq(a)(x1), eps2) } }","proof":["let (s0: Nat -> Nat, s1: Nat -> Nat) satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { x1 <= s1(x1) } and forall(x2: Nat) { not lift_seq(a, s0(x2)).is_close(lift_seq(a, s1(x2)), eps2) } }","let (s2: (Nat -> Real, Real) -> Nat, s3: Nat -> Real -> Real) satisfy { forall(x3: Real, x4: Nat -> Real) { not x3.is_positive or not converges(x4) or cauchy_bound(x4, s2(x4, x3), x3) } and forall(x5: Nat -> Real) { s3(x5).is_positive or converges(x5) } and forall(x6: Nat -> Real, x7: Nat) { not cauchy_bound(x6, x7, s3(x6)) or converges(x6) } }","not lift_seq(a, s0(s2(lift_seq(a), eps2))).is_close(lift_seq(a, s1(s2(lift_seq(a), eps2))), eps2)","s2(lift_seq(a), eps2) <= s1(s2(lift_seq(a), eps2))","s2(lift_seq(a), eps2) <= s0(s2(lift_seq(a), eps2))","not cauchy_bound(lift_seq(a), s2(lift_seq(a), eps2), eps2) or not s2(lift_seq(a), eps2) <= s0(s2(lift_seq(a), eps2)) or not s2(lift_seq(a), eps2) <= s1(s2(lift_seq(a), eps2)) or lift_seq(a, s0(s2(lift_seq(a), eps2))).is_close(lift_seq(a, s1(s2(lift_seq(a), eps2))), eps2)","not eps2.is_positive or not converges(lift_seq(a)) or cauchy_bound(lift_seq(a), s2(lift_seq(a), eps2), eps2)","not cauchy_bound(lift_seq(a), s2(lift_seq(a), eps2), eps2) or not s2(lift_seq(a), eps2) <= s1(s2(lift_seq(a), eps2)) or lift_seq(a, s0(s2(lift_seq(a), eps2))).is_close(lift_seq(a, s1(s2(lift_seq(a), eps2))), eps2)","not cauchy_bound(lift_seq(a), s2(lift_seq(a), eps2), eps2) or lift_seq(a, s0(s2(lift_seq(a), eps2))).is_close(lift_seq(a, s1(s2(lift_seq(a), eps2))), eps2)","not eps2.is_positive or cauchy_bound(lift_seq(a), s2(lift_seq(a), eps2), eps2)","cauchy_bound(lift_seq(a), s2(lift_seq(a), eps2), eps2)"]}
{"goal":"exists(k0: Nat) { cauchy_bound(lsb, k0, eps2) }","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: Nat -> Real -> Real) satisfy { forall(x0: Real, x1: Nat -> Real) { not x0.is_positive or not converges(x1) or cauchy_bound(x1, s0(x1, x0), x0) } and forall(x2: Nat -> Real) { s1(x2).is_positive or converges(x2) } and forall(x3: Nat -> Real, x4: Nat) { not cauchy_bound(x3, x4, s1(x3)) or converges(x3) } }","not cauchy_bound(lsb, s0(lsb, eps2), eps2)","converges(lsb)","not eps2.is_positive or not converges(lsb) or cauchy_bound(lsb, s0(lsb, eps2), eps2)"]}
{"goal":"exists(k0: Nat) { n_a <= k0 and n_b <= k0 }","proof":["let s0: Nat satisfy { true }","let s1: (Nat, Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat, x2: Nat) { x0 <= s1(x0, x1, x2) } and forall(x3: Nat, x4: Nat, x5: Nat) { x3 <= s1(x4, x3, x5) } and forall(x6: Nat, x7: Nat, x8: Nat) { x6 <= s1(x7, x8, x6) } }","not n_b <= s1(n_b, s0, n_a) or not n_a <= s1(n_b, s0, n_a)","n_a <= s1(n_b, s0, n_a)","n_b <= s1(n_b, s0, n_a)","not n_a <= s1(n_b, s0, n_a)"]}
{"goal":"n_a <= i","proof":["not n_a <= n or not n <= i or n_a <= i","not n <= i or not n_a <= n"]}
{"goal":"n_a <= j","proof":["not n_a <= n or not n <= j or n_a <= j","not n <= j or not n_a <= n"]}
{"goal":"lift_seq(a)(i).is_close(lift_seq(a)(j), eps2)","proof":["not n_a <= i or not n_a <= j or lift_seq(a, i).is_close(lift_seq(a, j), eps2)"]}
{"goal":"a(i).is_close(a(j), reps2)","proof":["not Real.from_rat(a(i)).is_close(Real.from_rat(a(j)), Real.from_rat(reps2)) or a(i).is_close(a(j), reps2)","lift_seq(a, i) = Real.from_rat(a(i))","lift_seq(a, j) = Real.from_rat(a(j))","not Real.from_rat(a(i)).is_close(Real.from_rat(a(j)), Real.from_rat(reps2))"]}
{"goal":"n_b <= i","proof":["not n_b <= n or not n <= i or n_b <= i","not n <= i or not n_b <= n"]}
{"goal":"n_b <= j","proof":["not n_b <= n or not n <= j or n_b <= j","not n <= j or not n_b <= n"]}
{"goal":"lsb(i).is_close(lsb(j), eps2)","proof":["not cauchy_bound(lsb, n_b, eps2) or not n_b <= i or not n_b <= j or lsb(i).is_close(lsb(j), eps2)","not cauchy_bound(lsb, n_b, eps2) or not n_b <= j or not n_b <= i"]}
{"goal":"lift_seq(b)(i).is_close(lift_seq(b)(j), eps2)","proof":["lift_seq(b, i) = lsb(i)","lift_seq(b, j) = lsb(j)"]}
{"goal":"b(i).is_close(b(j), reps2)","proof":["lift_seq(b, i) = lsb(i)","lift_seq(b, j) = lsb(j)","not Real.from_rat(b(i)).is_close(Real.from_rat(b(j)), Real.from_rat(reps2)) or b(i).is_close(b(j), reps2)","lift_seq(b, i) = Real.from_rat(b(i))","lift_seq(b, j) = Real.from_rat(b(j))","not Real.from_rat(b(i)).is_close(Real.from_rat(b(j)), Real.from_rat(reps2))"]}
{"goal":"(a(i) * b(i) - a(j) * b(j)).abs <= a(i).abs * (b(i) - b(j)).abs + b(j).abs * (a(i) - a(j)).abs","proof":["(a(i) * b(i) - a(j) * b(j)).abs <= a(i).abs * (b(i) - b(j)).abs + b(j).abs * (a(i) - a(j)).abs"]}
{"goal":"a(i).abs < ub","proof":["a(i).abs < a_ub","not a(i).abs < a_ub or not a_ub < ub or a(i).abs < ub","not a(i).abs < a_ub or not a_ub < ub"]}
{"goal":"(b(i) - b(j)).abs < reps2","proof":["(b(i) - b(j)).abs < reps2 = b(i).is_close(b(j), reps2)"]}
{"goal":"not a(i).abs.is_negative","proof":["not a(i).abs.is_negative"]}
{"goal":"not (b(i) - b(j)).abs.is_negative","proof":["not (b(i) - b(j)).abs.is_negative"]}
{"goal":"a(i).abs * (b(i) - b(j)).abs < ub * reps2","proof":["not a(i).abs < ub or not (b(i) - b(j)).abs < reps2 or a(i).abs * (b(i) - b(j)).abs < ub * reps2 or a(i).abs.is_negative or (b(i) - b(j)).abs.is_negative"]}
{"goal":"b(j).abs < ub","proof":["b(j).abs < b_ub","not b(j).abs < b_ub or not b_ub < ub or b(j).abs < ub","not b(j).abs < b_ub or not b_ub < ub"]}
{"goal":"(a(i) - a(j)).abs < reps2","proof":["(a(i) - a(j)).abs < reps2 = a(i).is_close(a(j), reps2)"]}
{"goal":"not b(j).abs.is_negative","proof":["not b(j).abs.is_negative"]}
{"goal":"not (a(i) - a(j)).abs.is_negative","proof":["not (a(i) - a(j)).abs.is_negative"]}
{"goal":"b(j).abs * (a(i) - a(j)).abs < ub * reps2","proof":["not b(j).abs < ub or not (a(i) - a(j)).abs < reps2 or b(j).abs * (a(i) - a(j)).abs < ub * reps2 or b(j).abs.is_negative or (a(i) - a(j)).abs.is_negative"]}
{"goal":"a(i).abs * (b(i) - b(j)).abs + b(j).abs * (a(i) - a(j)).abs < ub * reps2 + ub * reps2","proof":["not a(i).abs * (b(i) - b(j)).abs < ub * reps2 or not b(j).abs * (a(i) - a(j)).abs < ub * reps2 or a(i).abs * (b(i) - b(j)).abs + b(j).abs * (a(i) - a(j)).abs < ub * reps2 + ub * reps2"]}
{"goal":"left <= middle","proof":[]}
{"goal":"middle < right","proof":[]}
{"goal":"left < right","proof":["not middle < right or not left <= middle or left < right","not middle < right or not left <= middle"]}
{"goal":"(a(i) * b(i) - a(j) * b(j)).abs < ub * reps2 + ub * reps2","proof":[]}
{"goal":"ub + ub != Rat.0","proof":["Rat.0.is_positive","let s0: Rat -> Rat satisfy { forall(x0: Rat) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Rat) { not x1.is_positive or s0(x1) < x1 } }","not Rat.0.is_positive or s0(Rat.0) < Rat.0","s0(Rat.0) < Rat.0","not s0(Rat.0) < Rat.0 or not Rat.0 < s0(Rat.0)","not Rat.0.is_positive or s0(Rat.0).is_positive","s0(Rat.0).is_positive","not s0(Rat.0).is_positive or Rat.0 < s0(Rat.0)","not Rat.0 < s0(Rat.0)","Rat.0 < s0(Rat.0)"]}
{"goal":"(ub + ub) * (reps / (ub + ub)) = reps","proof":["(ub + ub) * (reps / (ub + ub)) = reps or ub + ub = Rat.0"]}
{"goal":"ub * reps2 + ub * reps2 = reps","proof":["ub * reps2 + ub * reps2 = (ub + ub) * reps2"]}
{"goal":"(a(i) * b(i) - a(j) * b(j)).abs < reps","proof":["not (a(i) * b(i) - a(j) * b(j)).abs < ub * reps2 + ub * reps2"]}
{"goal":"(a(i) * b(i)).is_close(a(j) * b(j), reps)","proof":["(a(i) * b(i) - a(j) * b(j)).abs < reps = (a(i) * b(i)).is_close(a(j) * b(j), reps)"]}
{"goal":"lift_seq(mul_rat_seq(a, b))(i).is_close(lift_seq(mul_rat_seq(a, b))(j), Real.from_rat(reps))","proof":["not mul_rat_seq(a, b, i).is_close(mul_rat_seq(a, b, j), reps) or Real.from_rat(mul_rat_seq(a, b, i)).is_close(Real.from_rat(mul_rat_seq(a, b, j)), Real.from_rat(reps))","a(i) * b(i) = mul_rat_seq(a, b, i)","a(j) * b(j) = mul_rat_seq(a, b, j)","lift_seq(mul_rat_seq(a, b), i) = Real.from_rat(mul_rat_seq(a, b, i))","lift_seq(mul_rat_seq(a, b), j) = Real.from_rat(mul_rat_seq(a, b, j))","not Real.from_rat(mul_rat_seq(a, b, i)).is_close(lift_seq(mul_rat_seq(a, b), j), Real.from_rat(reps))","not Real.from_rat(mul_rat_seq(a, b, i)).is_close(Real.from_rat(mul_rat_seq(a, b, j)), Real.from_rat(reps))","(a(i) * b(i)).is_close(mul_rat_seq(a, b, j), reps)","not mul_rat_seq(a, b, i).is_close(mul_rat_seq(a, b, j), reps)","mul_rat_seq(a, b, i).is_close(mul_rat_seq(a, b, j), reps)"]}
{"goal":"seq(i).is_close(seq(j), eps)","proof":["lift_seq(mul_rat_seq(a, b), i) = seq(i)","lift_seq(mul_rat_seq(a, b), j) = seq(j)","not Real.from_rat(reps) < eps or not seq(i).is_close(seq(j), Real.from_rat(reps)) or seq(i).is_close(seq(j), eps)","lift_seq(mul_rat_seq(a, b), i).is_close(seq(j), Real.from_rat(reps))","not seq(i).is_close(seq(j), Real.from_rat(reps)) or not Real.from_rat(reps) < eps","seq(i).is_close(seq(j), Real.from_rat(reps))","not seq(i).is_close(seq(j), Real.from_rat(reps))"]}
{"goal":"cauchy_bound(seq, n, eps)","proof":["let (s0: (Nat -> Real, Nat, Real) -> Nat, s1: (Nat -> Real, Nat, Real) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Nat, x2: Real, x3: Nat, x4: Nat) { not cauchy_bound(x0, x1, x2) or not x1 <= x3 or not x1 <= x4 or x0(x3).is_close(x0(x4), x2) } and forall(x5: Nat, x6: Nat -> Real, x7: Real) { x5 <= s0(x6, x5, x7) or cauchy_bound(x6, x5, x7) } and forall(x8: Nat, x9: Nat -> Real, x10: Real) { x8 <= s1(x9, x8, x10) or cauchy_bound(x9, x8, x10) } and forall(x11: Nat -> Real, x12: Nat, x13: Real) { not x11(s0(x11, x12, x13)).is_close(x11(s1(x11, x12, x13)), x13) or cauchy_bound(x11, x12, x13) } }","not n <= s0(seq, n, eps) or not n <= s1(seq, n, eps) or seq(s0(seq, n, eps)).is_close(seq(s1(seq, n, eps)), eps)","not seq(s0(seq, n, eps)).is_close(seq(s1(seq, n, eps)), eps) or cauchy_bound(seq, n, eps)","n <= s1(seq, n, eps) or cauchy_bound(seq, n, eps)","n <= s0(seq, n, eps) or cauchy_bound(seq, n, eps)","n <= s0(seq, n, eps)","n <= s1(seq, n, eps)","not seq(s0(seq, n, eps)).is_close(seq(s1(seq, n, eps)), eps)"]}
{"goal":"cauchy_bound(lift_seq(mul_rat_seq(a, b)), n, eps)","proof":[]}
{"goal":"mul_rat_seq_converges","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: Nat -> Real -> Real) satisfy { forall(x0: Real, x1: Nat -> Real) { not x0.is_positive or not converges(x1) or cauchy_bound(x1, s0(x1, x0), x0) } and forall(x2: Nat -> Real) { s1(x2).is_positive or converges(x2) } and forall(x3: Nat -> Real, x4: Nat) { not cauchy_bound(x3, x4, s1(x3)) or converges(x3) } }","let s2: Real -> Nat satisfy { forall(x5: Real) { not x5.is_positive or cauchy_bound(lift_seq(mul_rat_seq(a, b)), s2(x5), x5) } }","not s1(lift_seq(mul_rat_seq(a, b))).is_positive or cauchy_bound(lift_seq(mul_rat_seq(a, b)), s2(s1(lift_seq(mul_rat_seq(a, b)))), s1(lift_seq(mul_rat_seq(a, b))))","not cauchy_bound(lift_seq(mul_rat_seq(a, b)), s2(s1(lift_seq(mul_rat_seq(a, b)))), s1(lift_seq(mul_rat_seq(a, b)))) or converges(lift_seq(mul_rat_seq(a, b)))","s1(lift_seq(mul_rat_seq(a, b))).is_positive or converges(lift_seq(mul_rat_seq(a, b)))","s1(lift_seq(mul_rat_seq(a, b))).is_positive","not cauchy_bound(lift_seq(mul_rat_seq(a, b)), s2(s1(lift_seq(mul_rat_seq(a, b)))), s1(lift_seq(mul_rat_seq(a, b))))"]}
{"goal":"add_rat_seq(a, neg_rat_seq(b), n) = a(n) + -b(n)","proof":["a(n) + neg_rat_seq(b, n) = add_rat_seq(a, neg_rat_seq(b), n)","neg_rat_seq(b, n) = -b(n)"]}
{"goal":"sub_rat_seq(a, b, n) = a(n) - b(n)","proof":["a(n) - b(n) = sub_rat_seq(a, b, n)"]}
{"goal":"a(n) + -b(n) = a(n) - b(n)","proof":["a(n) + -b(n) = a(n) - b(n)"]}
{"goal":"add_rat_seq(a, neg_rat_seq(b), n) = sub_rat_seq(a, b, n)","proof":[]}
{"goal":"add_neg_is_sub","proof":["let s0: Nat satisfy { add_rat_seq(a, neg_rat_seq(b), s0) != sub_rat_seq(a, b, s0) }","add_rat_seq(a, neg_rat_seq(b), s0) = sub_rat_seq(a, b, s0)"]}
{"goal":"lsa(i).is_close(Real.from_rat(a), eps)","proof":["lift_seq(const_rat_seq(a), i) = lsa(i)","Real.from_rat(const_rat_seq(a, i)) = lift_seq(const_rat_seq(a), i)","not eps.is_positive or Real.from_rat(a).is_close(Real.from_rat(a), eps)","const_rat_seq(a, i) = a","not lift_seq(const_rat_seq(a), i).is_close(Real.from_rat(a), eps)","Real.from_rat(a).is_close(Real.from_rat(a), eps)","not Real.from_rat(const_rat_seq(a, i)).is_close(Real.from_rat(a), eps)"]}
{"goal":"converges_to(lsa, Real.from_rat(a))","proof":["let (s1: (Nat -> Real, Real, Real) -> Nat, s2: (Nat -> Real, Real) -> Real) satisfy { forall(x0: Nat -> Real, x1: Real, x2: Real) { not converges_to(x0, x1) or not x2.is_positive or tail_bound(x0, x1, s1(x0, x1, x2), x2) } and forall(x3: Nat -> Real, x4: Real) { s2(x3, x4).is_positive or converges_to(x3, x4) } and forall(x5: Nat -> Real, x6: Real, x7: Nat) { not tail_bound(x5, x6, x7, s2(x5, x6)) or converges_to(x5, x6) } }","let s0: Nat satisfy { true }","let s3: (Nat -> Real, Real, Nat, Real) -> Nat satisfy { forall(x8: Nat -> Real, x9: Real, x10: Nat, x11: Real, x12: Nat) { not tail_bound(x8, x9, x10, x11) or not x10 <= x12 or x8(x12).is_close(x9, x11) } and forall(x13: Nat, x14: Nat -> Real, x15: Real, x16: Real) { x13 <= s3(x14, x15, x13, x16) or tail_bound(x14, x15, x13, x16) } and forall(x17: Nat -> Real, x18: Real, x19: Nat, x20: Real) { not x17(s3(x17, x18, x19, x20)).is_close(x18, x20) or tail_bound(x17, x18, x19, x20) } }","not s2(lsa, Real.from_rat(a)).is_positive or lsa(s3(lsa, Real.from_rat(a), s0, s2(lsa, Real.from_rat(a)))).is_close(Real.from_rat(a), s2(lsa, Real.from_rat(a)))","not lsa(s3(lsa, Real.from_rat(a), s0, s2(lsa, Real.from_rat(a)))).is_close(Real.from_rat(a), s2(lsa, Real.from_rat(a))) or tail_bound(lsa, Real.from_rat(a), s0, s2(lsa, Real.from_rat(a)))","not tail_bound(lsa, Real.from_rat(a), s0, s2(lsa, Real.from_rat(a))) or converges_to(lsa, Real.from_rat(a))","s2(lsa, Real.from_rat(a)).is_positive or converges_to(lsa, Real.from_rat(a))","s2(lsa, Real.from_rat(a)).is_positive","not tail_bound(lsa, Real.from_rat(a), s0, s2(lsa, Real.from_rat(a)))","lsa(s3(lsa, Real.from_rat(a), s0, s2(lsa, Real.from_rat(a)))).is_close(Real.from_rat(a), s2(lsa, Real.from_rat(a)))"]}
{"goal":"const_rat_converges_to_rat","proof":[]}
{"goal":"zero_rat_seq_is_zero","proof":["converges_to(lift_seq(const_rat_seq(Rat.0)), Real.from_rat(Rat.0))","not converges_to(lift_seq(const_rat_seq(Rat.0)), Real.0)"]}
{"goal":"neg_is_zero_sub","proof":["let s0: Nat satisfy { sub_rat_seq(zero_rat_seq, a, s0) != neg_rat_seq(a, s0) }","add_rat_seq(zero_rat_seq, neg_rat_seq(a), s0) = sub_rat_seq(zero_rat_seq, a, s0)","zero_rat_seq(s0) + neg_rat_seq(a, s0) = add_rat_seq(zero_rat_seq, neg_rat_seq(a), s0)","neg_rat_seq(a, s0) = -a(s0)","zero_rat_seq(s0) + neg_rat_seq(a, s0) = neg_rat_seq(a, s0) + zero_rat_seq(s0)","const_rat_seq(Rat.0, s0) = zero_rat_seq(s0)","const_rat_seq(Rat.0, s0) = Rat.0","-a(s0) + Rat.0 = -a(s0)"]}
{"goal":"converges_to(lift_seq(neg_rat_seq(a)), -limit_rat(a))","proof":["not converges(lift_seq(a)) or converges_to(lift_seq(neg_rat_seq(a)), -limit_rat(a))","not converges(lift_seq(a))","not eq_seq(a, b) or converges(lift_seq(a))"]}
{"goal":"converges_to(lift_seq(neg_rat_seq(b)), -limit_rat(b))","proof":["not converges(lift_seq(b)) or converges_to(lift_seq(neg_rat_seq(b)), -limit_rat(b))","not converges(lift_seq(b))","not eq_seq(a, b) or eq_seq(b, a)","not eq_seq(b, a) or converges(lift_seq(b))","eq_seq(b, a)"]}
{"goal":"limit_rat(a) = limit_rat(b)","proof":["not eq_seq(a, b) or converges_to(lift_seq(b), limit_rat(a))","not converges_to(lift_seq(b), limit_rat(a)) or not converges_to(lift_seq(b), limit_rat(b)) or limit_rat(b) = limit_rat(a)","not converges(lift_seq(b)) or converges_to(lift_seq(b), limit(lift_seq(b)))","limit(lift_seq(b)) = limit_rat(b)","not converges_to(lift_seq(b), limit_rat(a)) or converges(lift_seq(b))","not converges_to(lift_seq(b), limit_rat(b)) or not converges_to(lift_seq(b), limit_rat(a))","converges_to(lift_seq(b), limit_rat(a))","not converges_to(lift_seq(b), limit_rat(b))","converges(lift_seq(b))","not converges_to(lift_seq(b), limit(lift_seq(b)))","converges_to(lift_seq(b), limit(lift_seq(b)))"]}
{"goal":"converges(lift_seq(neg_rat_seq(a)))","proof":["not converges_to(lift_seq(neg_rat_seq(a)), -limit_rat(a)) or converges(lift_seq(neg_rat_seq(a)))"]}
{"goal":"converges_to(lift_seq(neg_rat_seq(a)), -limit_rat(b))","proof":["not converges_to(lift_seq(neg_rat_seq(a)), -limit_rat(a))"]}
{"goal":"converges_to(lift_seq(neg_rat_seq(a)), limit(lift_seq(neg_rat_seq(a))))","proof":["not converges(lift_seq(neg_rat_seq(a))) or converges_to(lift_seq(neg_rat_seq(a)), limit(lift_seq(neg_rat_seq(a))))"]}
{"goal":"limit(lift_seq(neg_rat_seq(a))) = -limit_rat(b)","proof":["not converges_to(lift_seq(neg_rat_seq(a)), limit(lift_seq(neg_rat_seq(a)))) or not converges_to(lift_seq(neg_rat_seq(a)), -limit_rat(b)) or limit(lift_seq(neg_rat_seq(a))) = -limit_rat(b)","not converges_to(lift_seq(neg_rat_seq(a)), limit(lift_seq(neg_rat_seq(a)))) or not converges_to(lift_seq(neg_rat_seq(a)), -limit_rat(b))"]}
{"goal":"converges_to(lift_seq(neg_rat_seq(b)), limit(lift_seq(neg_rat_seq(a))))","proof":["not converges_to(lift_seq(neg_rat_seq(b)), -limit_rat(b))"]}
{"goal":"converges_to(lift_seq(neg_rat_seq(b)), limit_rat(neg_rat_seq(a)))","proof":["limit(lift_seq(neg_rat_seq(a))) = limit_rat(neg_rat_seq(a))"]}
{"goal":"neg_rat_seq_well_def","proof":["not converges_to(lift_seq(neg_rat_seq(b)), limit_rat(neg_rat_seq(a))) or not converges(lift_seq(neg_rat_seq(a))) or eq_seq(neg_rat_seq(a), neg_rat_seq(b))"]}
{"goal":"converges_to(lift_seq(add_rat_seq(a, b)), limit_rat(a) + limit_rat(b))","proof":["not converges(lift_seq(a)) or not converges(lift_seq(b)) or converges_to(lift_seq(add_rat_seq(a, b)), limit_rat(a) + limit_rat(b))","not eq_seq(a, c) or converges(lift_seq(a))","not eq_seq(b, d) or converges(lift_seq(b))","not converges(lift_seq(b)) or not converges(lift_seq(a))","converges(lift_seq(b))","converges(lift_seq(a))","not converges(lift_seq(a))"]}
{"goal":"converges_to(lift_seq(add_rat_seq(c, d)), limit_rat(c) + limit_rat(d))","proof":["not converges(lift_seq(c)) or not converges(lift_seq(d)) or converges_to(lift_seq(add_rat_seq(c, d)), limit_rat(c) + limit_rat(d))","not eq_seq(a, c) or converges_to(lift_seq(c), limit_rat(a))","not eq_seq(b, d) or eq_seq(d, b)","not eq_seq(d, b) or converges(lift_seq(d))","not converges(lift_seq(d)) or not converges(lift_seq(c))","not converges_to(lift_seq(c), limit_rat(a)) or converges(lift_seq(c))","eq_seq(d, b)","converges_to(lift_seq(c), limit_rat(a))","converges(lift_seq(c))","converges(lift_seq(d))","not converges(lift_seq(d))"]}
{"goal":"limit_rat(a) = limit_rat(c)","proof":["not eq_seq(a, c) or converges_to(lift_seq(c), limit_rat(a))","not converges_to(lift_seq(c), limit_rat(a)) or not converges_to(lift_seq(c), limit_rat(c)) or limit_rat(c) = limit_rat(a)","not converges(lift_seq(c)) or converges_to(lift_seq(c), limit(lift_seq(c)))","limit(lift_seq(c)) = limit_rat(c)","not converges_to(lift_seq(c), limit_rat(a)) or converges(lift_seq(c))","not converges_to(lift_seq(c), limit_rat(c)) or not converges_to(lift_seq(c), limit_rat(a))","converges_to(lift_seq(c), limit_rat(a))","not converges_to(lift_seq(c), limit_rat(c))","converges(lift_seq(c))","not converges_to(lift_seq(c), limit(lift_seq(c)))","converges_to(lift_seq(c), limit(lift_seq(c)))"]}
{"goal":"limit_rat(b) = limit_rat(d)","proof":["not eq_seq(b, d) or converges_to(lift_seq(d), limit_rat(b))","not converges_to(lift_seq(d), limit_rat(b)) or not converges_to(lift_seq(d), limit_rat(d)) or limit_rat(d) = limit_rat(b)","not converges(lift_seq(d)) or converges_to(lift_seq(d), limit(lift_seq(d)))","limit(lift_seq(d)) = limit_rat(d)","not converges_to(lift_seq(d), limit_rat(b)) or converges(lift_seq(d))","not converges_to(lift_seq(d), limit_rat(d)) or not converges_to(lift_seq(d), limit_rat(b))","converges_to(lift_seq(d), limit_rat(b))","not converges_to(lift_seq(d), limit_rat(d))","converges(lift_seq(d))","not converges_to(lift_seq(d), limit(lift_seq(d)))","converges_to(lift_seq(d), limit(lift_seq(d)))"]}
{"goal":"limit_rat(a) + limit_rat(b) = limit_rat(c) + limit_rat(d)","proof":[]}
{"goal":"limit_rat(add_rat_seq(a, b)) = limit_rat(a) + limit_rat(b)","proof":["not converges_to(lift_seq(add_rat_seq(a, b)), limit_rat(a) + limit_rat(b)) or not converges_to(lift_seq(add_rat_seq(a, b)), limit_rat(add_rat_seq(a, b))) or limit_rat(a) + limit_rat(b) = limit_rat(add_rat_seq(a, b))","not converges(lift_seq(add_rat_seq(a, b))) or converges_to(lift_seq(add_rat_seq(a, b)), limit(lift_seq(add_rat_seq(a, b))))","limit(lift_seq(add_rat_seq(a, b))) = limit_rat(add_rat_seq(a, b))","not converges_to(lift_seq(add_rat_seq(a, b)), limit_rat(a) + limit_rat(b)) or converges(lift_seq(add_rat_seq(a, b)))","converges(lift_seq(add_rat_seq(a, b)))","not converges_to(lift_seq(add_rat_seq(a, b)), limit_rat(a) + limit_rat(b)) or not converges_to(lift_seq(add_rat_seq(a, b)), limit_rat(add_rat_seq(a, b)))","not converges_to(lift_seq(add_rat_seq(a, b)), limit_rat(add_rat_seq(a, b)))","converges_to(lift_seq(add_rat_seq(a, b)), limit(lift_seq(add_rat_seq(a, b))))","not converges_to(lift_seq(add_rat_seq(a, b)), limit(lift_seq(add_rat_seq(a, b))))"]}
{"goal":"limit_rat(add_rat_seq(c, d)) = limit_rat(c) + limit_rat(d)","proof":["not converges_to(lift_seq(add_rat_seq(c, d)), limit_rat(c) + limit_rat(d)) or not converges_to(lift_seq(add_rat_seq(c, d)), limit_rat(add_rat_seq(c, d))) or limit_rat(c) + limit_rat(d) = limit_rat(add_rat_seq(c, d))","not converges(lift_seq(add_rat_seq(c, d))) or converges_to(lift_seq(add_rat_seq(c, d)), limit(lift_seq(add_rat_seq(c, d))))","limit(lift_seq(add_rat_seq(c, d))) = limit_rat(add_rat_seq(c, d))","not converges_to(lift_seq(add_rat_seq(c, d)), limit_rat(c) + limit_rat(d)) or converges(lift_seq(add_rat_seq(c, d)))","converges(lift_seq(add_rat_seq(c, d)))","not converges_to(lift_seq(add_rat_seq(c, d)), limit_rat(c) + limit_rat(d)) or not converges_to(lift_seq(add_rat_seq(c, d)), limit_rat(add_rat_seq(c, d)))","not converges_to(lift_seq(add_rat_seq(c, d)), limit_rat(add_rat_seq(c, d)))","converges_to(lift_seq(add_rat_seq(c, d)), limit(lift_seq(add_rat_seq(c, d))))","not converges_to(lift_seq(add_rat_seq(c, d)), limit(lift_seq(add_rat_seq(c, d))))"]}
{"goal":"add_rat_seq_well_def","proof":["not converges_to(lift_seq(add_rat_seq(c, d)), limit_rat(add_rat_seq(a, b))) or not converges(lift_seq(add_rat_seq(a, b))) or eq_seq(add_rat_seq(a, b), add_rat_seq(c, d))","not converges_to(lift_seq(add_rat_seq(a, b)), limit_rat(a) + limit_rat(b)) or converges(lift_seq(add_rat_seq(a, b)))","converges_to(lift_seq(add_rat_seq(c, d)), limit_rat(a) + limit_rat(b))","converges(lift_seq(add_rat_seq(a, b)))","converges_to(lift_seq(add_rat_seq(c, d)), limit_rat(add_rat_seq(a, b)))","not converges_to(lift_seq(add_rat_seq(c, d)), limit_rat(add_rat_seq(a, b)))"]}
{"goal":"converges_to(lift_seq(neg_rat_seq(b)), -limit_rat(b))","proof":["not converges(lift_seq(b)) or converges_to(lift_seq(neg_rat_seq(b)), -limit_rat(b))"]}
{"goal":"converges(lift_seq(neg_rat_seq(b)))","proof":["not converges_to(lift_seq(neg_rat_seq(b)), -limit_rat(b)) or converges(lift_seq(neg_rat_seq(b)))"]}
{"goal":"converges_to(lift_seq(neg_rat_seq(b)), limit(lift_seq(neg_rat_seq(b))))","proof":["not converges(lift_seq(neg_rat_seq(b))) or converges_to(lift_seq(neg_rat_seq(b)), limit(lift_seq(neg_rat_seq(b))))"]}
{"goal":"limit(lift_seq(neg_rat_seq(b))) = -limit_rat(b)","proof":["not converges_to(lift_seq(neg_rat_seq(b)), limit(lift_seq(neg_rat_seq(b)))) or not converges_to(lift_seq(neg_rat_seq(b)), -limit_rat(b)) or limit(lift_seq(neg_rat_seq(b))) = -limit_rat(b)","not converges_to(lift_seq(neg_rat_seq(b)), limit(lift_seq(neg_rat_seq(b)))) or not converges_to(lift_seq(neg_rat_seq(b)), -limit_rat(b))"]}
{"goal":"converges_to(lift_seq(add_rat_seq(a, neg_rat_seq(b))), limit_rat(a) + limit_rat(neg_rat_seq(b)))","proof":["not converges(lift_seq(a)) or not converges(lift_seq(neg_rat_seq(b))) or converges_to(lift_seq(add_rat_seq(a, neg_rat_seq(b))), limit_rat(a) + limit_rat(neg_rat_seq(b)))"]}
{"goal":"converges_to(lift_seq(add_rat_seq(a, neg_rat_seq(b))), limit_rat(a) + -limit_rat(b))","proof":["limit_rat(a) + -limit_rat(b) = -limit_rat(b) + limit_rat(a)","limit_rat(a) + limit_rat(neg_rat_seq(b)) = limit_rat(neg_rat_seq(b)) + limit_rat(a)","limit(lift_seq(neg_rat_seq(b))) = limit_rat(neg_rat_seq(b))"]}
{"goal":"converges_to(lift_seq(add_rat_seq(a, neg_rat_seq(b))), limit_rat(a) - limit_rat(b))","proof":["limit_rat(a) + -limit_rat(b) = limit_rat(a) - limit_rat(b)"]}
{"goal":"add_rat_seq(a, neg_rat_seq(b)) = sub_rat_seq(a, b)","proof":["let s0: Nat satisfy { add_rat_seq(a, neg_rat_seq(b), s0) != sub_rat_seq(a, b, s0) }","add_rat_seq(a, neg_rat_seq(b), s0) = sub_rat_seq(a, b, s0)"]}
{"goal":"sub_rat_seq_is_sub","proof":["not converges_to(lift_seq(add_rat_seq(a, neg_rat_seq(b))), limit_rat(a) - limit_rat(b))"]}
{"goal":"converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(a) - limit_rat(b))","proof":["not converges(lift_seq(a)) or not converges(lift_seq(b)) or converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(a) - limit_rat(b))","not eq_seq(a, c) or converges(lift_seq(a))","not eq_seq(b, d) or converges(lift_seq(b))","not converges(lift_seq(b)) or not converges(lift_seq(a))","converges(lift_seq(b))","converges(lift_seq(a))","not converges(lift_seq(a))"]}
{"goal":"converges_to(lift_seq(sub_rat_seq(c, d)), limit_rat(c) - limit_rat(d))","proof":["not converges(lift_seq(c)) or not converges(lift_seq(d)) or converges_to(lift_seq(sub_rat_seq(c, d)), limit_rat(c) - limit_rat(d))","not eq_seq(a, c) or converges_to(lift_seq(c), limit_rat(a))","not eq_seq(b, d) or eq_seq(d, b)","not eq_seq(d, b) or converges(lift_seq(d))","not converges(lift_seq(d)) or not converges(lift_seq(c))","not converges_to(lift_seq(c), limit_rat(a)) or converges(lift_seq(c))","eq_seq(d, b)","converges_to(lift_seq(c), limit_rat(a))","converges(lift_seq(c))","converges(lift_seq(d))","not converges(lift_seq(d))"]}
{"goal":"limit_rat(a) = limit_rat(c)","proof":["not eq_seq(a, c) or converges_to(lift_seq(c), limit_rat(a))","not converges_to(lift_seq(c), limit_rat(a)) or not converges_to(lift_seq(c), limit_rat(c)) or limit_rat(c) = limit_rat(a)","not converges(lift_seq(c)) or converges_to(lift_seq(c), limit(lift_seq(c)))","limit(lift_seq(c)) = limit_rat(c)","not converges_to(lift_seq(c), limit_rat(a)) or converges(lift_seq(c))","not converges_to(lift_seq(c), limit_rat(c)) or not converges_to(lift_seq(c), limit_rat(a))","converges_to(lift_seq(c), limit_rat(a))","not converges_to(lift_seq(c), limit_rat(c))","converges(lift_seq(c))","not converges_to(lift_seq(c), limit(lift_seq(c)))","converges_to(lift_seq(c), limit(lift_seq(c)))"]}
{"goal":"limit_rat(b) = limit_rat(d)","proof":["not eq_seq(b, d) or converges_to(lift_seq(d), limit_rat(b))","not converges_to(lift_seq(d), limit_rat(b)) or not converges_to(lift_seq(d), limit_rat(d)) or limit_rat(d) = limit_rat(b)","not converges(lift_seq(d)) or converges_to(lift_seq(d), limit(lift_seq(d)))","limit(lift_seq(d)) = limit_rat(d)","not converges_to(lift_seq(d), limit_rat(b)) or converges(lift_seq(d))","not converges_to(lift_seq(d), limit_rat(d)) or not converges_to(lift_seq(d), limit_rat(b))","converges_to(lift_seq(d), limit_rat(b))","not converges_to(lift_seq(d), limit_rat(d))","converges(lift_seq(d))","not converges_to(lift_seq(d), limit(lift_seq(d)))","converges_to(lift_seq(d), limit(lift_seq(d)))"]}
{"goal":"limit_rat(a) - limit_rat(b) = limit_rat(c) - limit_rat(d)","proof":[]}
{"goal":"limit_rat(sub_rat_seq(a, b)) = limit_rat(a) - limit_rat(b)","proof":["not converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(sub_rat_seq(a, b))) or not converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(a) - limit_rat(b)) or limit_rat(a) - limit_rat(b) = limit_rat(sub_rat_seq(a, b))","not converges(lift_seq(sub_rat_seq(a, b))) or converges_to(lift_seq(sub_rat_seq(a, b)), limit(lift_seq(sub_rat_seq(a, b))))","limit(lift_seq(sub_rat_seq(a, b))) = limit_rat(sub_rat_seq(a, b))","not converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(a) - limit_rat(b)) or converges(lift_seq(sub_rat_seq(a, b)))","converges(lift_seq(sub_rat_seq(a, b)))","not converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(a) - limit_rat(b)) or not converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(sub_rat_seq(a, b)))","not converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(sub_rat_seq(a, b)))","converges_to(lift_seq(sub_rat_seq(a, b)), limit(lift_seq(sub_rat_seq(a, b))))","not converges_to(lift_seq(sub_rat_seq(a, b)), limit(lift_seq(sub_rat_seq(a, b))))"]}
{"goal":"limit_rat(sub_rat_seq(c, d)) = limit_rat(c) - limit_rat(d)","proof":["not converges_to(lift_seq(sub_rat_seq(c, d)), limit_rat(sub_rat_seq(c, d))) or not converges_to(lift_seq(sub_rat_seq(c, d)), limit_rat(c) - limit_rat(d)) or limit_rat(c) - limit_rat(d) = limit_rat(sub_rat_seq(c, d))","not converges(lift_seq(sub_rat_seq(c, d))) or converges_to(lift_seq(sub_rat_seq(c, d)), limit(lift_seq(sub_rat_seq(c, d))))","limit(lift_seq(sub_rat_seq(c, d))) = limit_rat(sub_rat_seq(c, d))","not converges_to(lift_seq(sub_rat_seq(c, d)), limit_rat(c) - limit_rat(d)) or converges(lift_seq(sub_rat_seq(c, d)))","converges(lift_seq(sub_rat_seq(c, d)))","not converges_to(lift_seq(sub_rat_seq(c, d)), limit_rat(c) - limit_rat(d)) or not converges_to(lift_seq(sub_rat_seq(c, d)), limit_rat(sub_rat_seq(c, d)))","not converges_to(lift_seq(sub_rat_seq(c, d)), limit_rat(sub_rat_seq(c, d)))","converges_to(lift_seq(sub_rat_seq(c, d)), limit(lift_seq(sub_rat_seq(c, d))))","not converges_to(lift_seq(sub_rat_seq(c, d)), limit(lift_seq(sub_rat_seq(c, d))))"]}
{"goal":"sub_rat_seq_well_def","proof":["not converges_to(lift_seq(sub_rat_seq(c, d)), limit_rat(sub_rat_seq(a, b))) or not converges(lift_seq(sub_rat_seq(a, b))) or eq_seq(sub_rat_seq(a, b), sub_rat_seq(c, d))","not converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(a) - limit_rat(b)) or converges(lift_seq(sub_rat_seq(a, b)))","converges_to(lift_seq(sub_rat_seq(c, d)), limit_rat(a) - limit_rat(b))","converges(lift_seq(sub_rat_seq(a, b)))","converges_to(lift_seq(sub_rat_seq(c, d)), limit_rat(sub_rat_seq(a, b)))","not converges_to(lift_seq(sub_rat_seq(c, d)), limit_rat(sub_rat_seq(a, b)))"]}
{"goal":"sub_zero_imp_eq","proof":["x + -y != Real.0 or Real.0 - -y = x","Real.0 + --y = Real.0 - -y","x + -y = x - y","--y = y","Real.0 + y = y","Real.0 + y != x","x + -y = Real.0","Real.0 + --y != x","Real.0 - -y = x","Real.0 - -y != x"]}
{"goal":"limit_rat(sub_rat_seq(a, b)) = limit_rat(zero_rat_seq)","proof":["not eq_seq(sub_rat_seq(a, b), zero_rat_seq) or converges_to(lift_seq(zero_rat_seq), limit_rat(sub_rat_seq(a, b)))","not converges_to(lift_seq(zero_rat_seq), limit_rat(zero_rat_seq)) or not converges_to(lift_seq(zero_rat_seq), limit_rat(sub_rat_seq(a, b))) or limit_rat(sub_rat_seq(a, b)) = limit_rat(zero_rat_seq)","not converges(lift_seq(zero_rat_seq)) or converges_to(lift_seq(zero_rat_seq), limit(lift_seq(zero_rat_seq)))","limit(lift_seq(zero_rat_seq)) = limit_rat(zero_rat_seq)","not converges_to(lift_seq(zero_rat_seq), limit_rat(sub_rat_seq(a, b))) or converges(lift_seq(zero_rat_seq))","not converges_to(lift_seq(zero_rat_seq), limit_rat(sub_rat_seq(a, b))) or not converges_to(lift_seq(zero_rat_seq), limit_rat(zero_rat_seq))","converges_to(lift_seq(zero_rat_seq), limit_rat(sub_rat_seq(a, b)))","not converges_to(lift_seq(zero_rat_seq), limit_rat(zero_rat_seq))","converges(lift_seq(zero_rat_seq))","not converges_to(lift_seq(zero_rat_seq), limit(lift_seq(zero_rat_seq)))","converges_to(lift_seq(zero_rat_seq), limit(lift_seq(zero_rat_seq)))"]}
{"goal":"limit_rat(sub_rat_seq(a, b)) = limit_rat(a) - limit_rat(b)","proof":["limit_rat(a) - limit_rat(b) != limit_rat(zero_rat_seq)","not converges(lift_seq(a)) or not converges(lift_seq(b)) or converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(a) - limit_rat(b))","not eq_seq(zero_rat_seq, sub_rat_seq(a, b)) or converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(zero_rat_seq))","not converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(zero_rat_seq)) or not converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(a) - limit_rat(b)) or limit_rat(a) - limit_rat(b) = limit_rat(zero_rat_seq)","not eq_seq(sub_rat_seq(a, b), zero_rat_seq) or eq_seq(zero_rat_seq, sub_rat_seq(a, b))","eq_seq(zero_rat_seq, sub_rat_seq(a, b))","not converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(a) - limit_rat(b)) or not converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(zero_rat_seq))","not converges(lift_seq(b)) or converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(a) - limit_rat(b))","converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(a) - limit_rat(b))","converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(zero_rat_seq))","not converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(zero_rat_seq))"]}
{"goal":"limit_rat(a) - limit_rat(b) = limit_rat(zero_rat_seq)","proof":["limit_rat(a) - limit_rat(b) != limit_rat(sub_rat_seq(a, b))"]}
{"goal":"limit_rat(a) - limit_rat(b) = Real.0","proof":["limit_rat(zero_rat_seq) != Real.0","not eq_seq(sub_rat_seq(a, b), zero_rat_seq) or converges_to(lift_seq(zero_rat_seq), limit_rat(sub_rat_seq(a, b)))","not converges_to(lift_seq(zero_rat_seq), limit_rat(zero_rat_seq)) or not converges_to(lift_seq(zero_rat_seq), Real.0) or limit_rat(zero_rat_seq) = Real.0","not converges_to(lift_seq(zero_rat_seq), limit_rat(zero_rat_seq)) or not converges_to(lift_seq(zero_rat_seq), Real.0)","not converges_to(lift_seq(zero_rat_seq), limit_rat(zero_rat_seq))","converges_to(lift_seq(zero_rat_seq), limit_rat(sub_rat_seq(a, b)))","not converges_to(lift_seq(zero_rat_seq), limit_rat(sub_rat_seq(a, b)))"]}
{"goal":"limit_rat(a) = limit_rat(b)","proof":["limit_rat(a) - limit_rat(b) != Real.0 or limit_rat(b) = limit_rat(a)"]}
{"goal":"sub_eq_zero_imp_eq","proof":["not converges_to(lift_seq(b), limit_rat(a)) or not converges(lift_seq(a)) or eq_seq(a, b)","not converges_to(lift_seq(b), limit_rat(a))","not converges(lift_seq(b)) or converges_to(lift_seq(b), limit(lift_seq(b)))","limit(lift_seq(b)) = limit_rat(b)","converges_to(lift_seq(b), limit(lift_seq(b)))"]}
{"goal":"converges_to(lift_seq(a), limit_rat(a))","proof":["not converges(lift_seq(a)) or converges_to(lift_seq(a), limit(lift_seq(a)))","limit(lift_seq(a)) = limit_rat(a)","converges_to(lift_seq(a), limit(lift_seq(a)))","not converges_to(lift_seq(a), limit(lift_seq(a)))"]}
{"goal":"converges_to(lift_seq(a), limit(lift_seq(a)))","proof":["not converges(lift_seq(a)) or converges_to(lift_seq(a), limit(lift_seq(a)))"]}
{"goal":"limit(lift_seq(a)) = limit_rat(a)","proof":["limit(lift_seq(a)) = limit_rat(a)"]}
{"goal":"self_eq","proof":["not converges_to(lift_seq(a), limit_rat(a)) or not converges(lift_seq(a)) or eq_seq(a, a)"]}
{"goal":"add_rat_seq_comm","proof":["let s0: Nat satisfy { add_rat_seq(b, a, s0) != add_rat_seq(a, b, s0) }","a(s0) + b(s0) = add_rat_seq(a, b, s0)","b(s0) + a(s0) = add_rat_seq(b, a, s0)","b(s0) + a(s0) = a(s0) + b(s0)","b(s0) + a(s0) != add_rat_seq(a, b, s0)"]}
{"goal":"mul_rat_seq_comm","proof":["let s0: Nat satisfy { mul_rat_seq(b, a, s0) != mul_rat_seq(a, b, s0) }","a(s0) * b(s0) = mul_rat_seq(a, b, s0)","b(s0) * a(s0) = mul_rat_seq(b, a, s0)","b(s0) * a(s0) = a(s0) * b(s0)","b(s0) * a(s0) != mul_rat_seq(a, b, s0)"]}
{"goal":"add_rat_seq_distributes_right","proof":["let s0: Nat satisfy { add_rat_seq(mul_rat_seq(a, b), mul_rat_seq(a, c), s0) != mul_rat_seq(a, add_rat_seq(b, c), s0) }","a(s0) * b(s0) + a(s0) * c(s0) = a(s0) * (b(s0) + c(s0))","a(s0) * add_rat_seq(b, c, s0) = mul_rat_seq(a, add_rat_seq(b, c), s0)","a(s0) * b(s0) = mul_rat_seq(a, b, s0)","a(s0) * c(s0) = mul_rat_seq(a, c, s0)","b(s0) + c(s0) = add_rat_seq(b, c, s0)","mul_rat_seq(a, b, s0) + mul_rat_seq(a, c, s0) = add_rat_seq(mul_rat_seq(a, b), mul_rat_seq(a, c), s0)"]}
{"goal":"add_rat_seq_distributes_left","proof":["let s0: Nat satisfy { add_rat_seq(mul_rat_seq(b, a), mul_rat_seq(c, a), s0) != mul_rat_seq(add_rat_seq(b, c), a, s0) }","b(s0) * a(s0) + c(s0) * a(s0) = (b(s0) + c(s0)) * a(s0)","add_rat_seq(b, c, s0) * a(s0) = mul_rat_seq(add_rat_seq(b, c), a, s0)","b(s0) * a(s0) = mul_rat_seq(b, a, s0)","c(s0) * a(s0) = mul_rat_seq(c, a, s0)","b(s0) + c(s0) = add_rat_seq(b, c, s0)","mul_rat_seq(b, a, s0) + mul_rat_seq(c, a, s0) = add_rat_seq(mul_rat_seq(b, a), mul_rat_seq(c, a), s0)"]}
{"goal":"sub_rat_seq_distributes_right","proof":["let s0: Nat satisfy { sub_rat_seq(mul_rat_seq(a, b), mul_rat_seq(a, c), s0) != mul_rat_seq(a, sub_rat_seq(b, c), s0) }","a(s0) * b(s0) - a(s0) * c(s0) = a(s0) * (b(s0) - c(s0))","b(s0) - c(s0) = sub_rat_seq(b, c, s0)","mul_rat_seq(a, b, s0) - mul_rat_seq(a, c, s0) = sub_rat_seq(mul_rat_seq(a, b), mul_rat_seq(a, c), s0)","a(s0) * b(s0) = mul_rat_seq(a, b, s0)","a(s0) * c(s0) = mul_rat_seq(a, c, s0)","a(s0) * sub_rat_seq(b, c, s0) = mul_rat_seq(a, sub_rat_seq(b, c), s0)"]}
{"goal":"sub_rat_seq_distributes_left","proof":["let s0: Nat satisfy { sub_rat_seq(mul_rat_seq(b, a), mul_rat_seq(c, a), s0) != mul_rat_seq(sub_rat_seq(b, c), a, s0) }","sub_rat_seq(mul_rat_seq(a, b), mul_rat_seq(a, c), s0) = mul_rat_seq(a, sub_rat_seq(b, c), s0)","mul_rat_seq(a, b, s0) - mul_rat_seq(a, c, s0) = sub_rat_seq(mul_rat_seq(a, b), mul_rat_seq(a, c), s0)","mul_rat_seq(b, a, s0) - mul_rat_seq(c, a, s0) = sub_rat_seq(mul_rat_seq(b, a), mul_rat_seq(c, a), s0)","mul_rat_seq(a, b, s0) = mul_rat_seq(b, a, s0)","mul_rat_seq(a, c, s0) = mul_rat_seq(c, a, s0)","mul_rat_seq(a, sub_rat_seq(b, c), s0) = mul_rat_seq(sub_rat_seq(b, c), a, s0)"]}
{"goal":"converges(lift_seq(a))","proof":["not converges_to(lift_seq(a), Real.0) or converges(lift_seq(a))"]}
{"goal":"converges_to(lift_seq(a), limit(lift_seq(a)))","proof":["not converges(lift_seq(a)) or converges_to(lift_seq(a), limit(lift_seq(a)))"]}
{"goal":"limit(lift_seq(a)) = Real.0","proof":["not converges_to(lift_seq(a), limit(lift_seq(a))) or not converges_to(lift_seq(a), Real.0) or limit(lift_seq(a)) = Real.0","not converges_to(lift_seq(a), limit(lift_seq(a))) or not converges_to(lift_seq(a), Real.0)"]}
{"goal":"converges_to(lift_seq(zero_rat_seq), Real.0)","proof":[]}
{"goal":"limit(lift_seq(zero_rat_seq)) = Real.0","proof":["not converges_to(lift_seq(zero_rat_seq), limit(lift_seq(zero_rat_seq))) or not converges_to(lift_seq(zero_rat_seq), Real.0) or limit(lift_seq(zero_rat_seq)) = Real.0","not converges(lift_seq(zero_rat_seq)) or converges_to(lift_seq(zero_rat_seq), limit(lift_seq(zero_rat_seq)))","not converges_to(lift_seq(zero_rat_seq), Real.0) or converges(lift_seq(zero_rat_seq))","converges(lift_seq(zero_rat_seq))","not converges_to(lift_seq(zero_rat_seq), limit(lift_seq(zero_rat_seq))) or not converges_to(lift_seq(zero_rat_seq), Real.0)","converges_to(lift_seq(zero_rat_seq), limit(lift_seq(zero_rat_seq)))","not converges_to(lift_seq(zero_rat_seq), limit(lift_seq(zero_rat_seq)))"]}
{"goal":"eq_seq(a, zero_rat_seq)","proof":["not converges_to(lift_seq(zero_rat_seq), limit_rat(a)) or not converges(lift_seq(a)) or eq_seq(a, zero_rat_seq)","not converges_to(lift_seq(zero_rat_seq), limit_rat(a))","limit(lift_seq(a)) = limit_rat(a)"]}
{"goal":"converges_to_zero_imp_eq_seq_zero","proof":[]}
{"goal":"converges(lift_seq(a))","proof":["not eq_seq(a, zero_rat_seq) or converges(lift_seq(a))"]}
{"goal":"converges_to(lift_seq(a), limit(lift_seq(a)))","proof":["not converges(lift_seq(a)) or converges_to(lift_seq(a), limit(lift_seq(a)))"]}
{"goal":"limit(lift_seq(a)) = Real.0","proof":["not eq_seq(a, zero_rat_seq) or converges_to(lift_seq(zero_rat_seq), limit_rat(a))","not converges_to(lift_seq(zero_rat_seq), limit(lift_seq(a))) or not converges_to(lift_seq(zero_rat_seq), Real.0) or limit(lift_seq(a)) = Real.0","limit(lift_seq(a)) = limit_rat(a)","not converges_to(lift_seq(zero_rat_seq), limit(lift_seq(a))) or not converges_to(lift_seq(zero_rat_seq), Real.0)","not converges_to(lift_seq(zero_rat_seq), limit(lift_seq(a)))","converges_to(lift_seq(zero_rat_seq), limit_rat(a))","not converges_to(lift_seq(zero_rat_seq), limit_rat(a))"]}
{"goal":"converges_to(lift_seq(zero_rat_seq), Real.0)","proof":[]}
{"goal":"limit(lift_seq(zero_rat_seq)) = Real.0","proof":["not converges_to(lift_seq(zero_rat_seq), limit(lift_seq(zero_rat_seq))) or not converges_to(lift_seq(zero_rat_seq), Real.0) or limit(lift_seq(zero_rat_seq)) = Real.0","not converges(lift_seq(zero_rat_seq)) or converges_to(lift_seq(zero_rat_seq), limit(lift_seq(zero_rat_seq)))","not converges_to(lift_seq(zero_rat_seq), Real.0) or converges(lift_seq(zero_rat_seq))","converges(lift_seq(zero_rat_seq))","not converges_to(lift_seq(zero_rat_seq), limit(lift_seq(zero_rat_seq))) or not converges_to(lift_seq(zero_rat_seq), Real.0)","converges_to(lift_seq(zero_rat_seq), limit(lift_seq(zero_rat_seq)))","not converges_to(lift_seq(zero_rat_seq), limit(lift_seq(zero_rat_seq)))"]}
{"goal":"eq_seq_zero_imp_converges_to_zero","proof":["not converges_to(lift_seq(a), limit(lift_seq(a)))"]}
{"goal":"exists(k0: Rat) { forall(x0: Nat) { a(x0).abs < k0 } }","proof":["let s0: Rat -> Nat satisfy { forall(x0: Rat) { not a(s0(x0)).abs < x0 } }","let s1: Nat -> Rat -> Rat satisfy { forall(x1: Nat -> Rat, x2: Nat) { not converges(lift_seq(x1)) or x1(x2).abs < s1(x1) } }","not a(s0(s1(a))).abs < s1(a)","not converges(lift_seq(a)) or a(s0(s1(a))).abs < s1(a)"]}
{"goal":"exists(k0: Rat) { k0.is_positive and Real.from_rat(k0) < eps }","proof":["let s0: Real -> Rat satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or Real.from_rat(s0(x1)) < x1 } }","not Real.from_rat(s0(eps)) < eps or not s0(eps).is_positive","not eps.is_positive or Real.from_rat(s0(eps)) < eps","not eps.is_positive or s0(eps).is_positive","s0(eps).is_positive","Real.from_rat(s0(eps)) < eps","not Real.from_rat(s0(eps)) < eps"]}
{"goal":"ub.is_positive","proof":["let s0: Nat satisfy { true }","a(s0).abs < ub","not a(s0).abs < ub or a(s0).abs.is_negative or ub.is_positive","a(s0).abs.is_negative","not a(s0).abs.is_negative"]}
{"goal":"reps2.is_positive","proof":["not (reps / ub).is_positive","not reps.is_positive or not ub.reciprocal.is_positive or (reps * ub.reciprocal).is_positive","reps * ub.reciprocal = reps / ub","not ub.is_positive or ub.reciprocal.is_positive","ub.reciprocal.is_positive","not ub.reciprocal.is_positive or (reps * ub.reciprocal).is_positive","not (reps * ub.reciprocal).is_positive","(reps * ub.reciprocal).is_positive"]}
{"goal":"eps2.is_positive","proof":["not Real.from_rat(reps2).is_positive","not reps2.is_positive or Real.from_rat(reps2).is_positive"]}
{"goal":"converges_to(lift_seq(z), Real.0)","proof":["not eq_seq(z, zero_rat_seq) or converges_to(lift_seq(z), Real.0)"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies lift_seq(z)(x0).is_close(Real.0, eps2) } }","proof":["let (s1: (Nat -> Real, Real, Real) -> Nat, s2: (Nat -> Real, Real) -> Real) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Real) { not converges_to(x2, x3) or not x4.is_positive or tail_bound(x2, x3, s1(x2, x3, x4), x4) } and forall(x5: Nat -> Real, x6: Real) { s2(x5, x6).is_positive or converges_to(x5, x6) } and forall(x7: Nat -> Real, x8: Real, x9: Nat) { not tail_bound(x7, x8, x9, s2(x7, x8)) or converges_to(x7, x8) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not lift_seq(z, s0(x1)).is_close(Real.0, eps2) } }","not lift_seq(z, s0(s1(lift_seq(z), Real.0, eps2))).is_close(Real.0, eps2)","s1(lift_seq(z), Real.0, eps2) <= s0(s1(lift_seq(z), Real.0, eps2))","not converges_to(lift_seq(z), Real.0) or not eps2.is_positive or tail_bound(lift_seq(z), Real.0, s1(lift_seq(z), Real.0, eps2), eps2)","not tail_bound(lift_seq(z), Real.0, s1(lift_seq(z), Real.0, eps2), eps2) or not s1(lift_seq(z), Real.0, eps2) <= s0(s1(lift_seq(z), Real.0, eps2)) or lift_seq(z, s0(s1(lift_seq(z), Real.0, eps2))).is_close(Real.0, eps2)","not tail_bound(lift_seq(z), Real.0, s1(lift_seq(z), Real.0, eps2), eps2) or lift_seq(z, s0(s1(lift_seq(z), Real.0, eps2))).is_close(Real.0, eps2)","not eps2.is_positive or tail_bound(lift_seq(z), Real.0, s1(lift_seq(z), Real.0, eps2), eps2)","tail_bound(lift_seq(z), Real.0, s1(lift_seq(z), Real.0, eps2), eps2)"]}
{"goal":"a(i).abs < ub","proof":["a(i).abs < ub"]}
{"goal":"lift_seq(z)(i).is_close(Real.0, eps2)","proof":["not n <= i or lift_seq(z, i).is_close(Real.0, eps2)"]}
{"goal":"(lift_seq(z, i) + Real.0).is_close(Real.0, eps2)","proof":["lift_seq(z, i) = Real.from_rat(z(i))","not (Real.from_rat(z(i)) + Real.0).is_close(Real.0, eps2)","Real.from_rat(z(i)).is_close(Real.0, eps2)","Real.from_rat(z(i)) + Real.0 = Real.from_rat(z(i))"]}
{"goal":"lift_seq(z, i).abs < eps2","proof":["(lift_seq(z, i) + Real.0 - Real.0).abs < eps2 = (lift_seq(z, i) + Real.0).is_close(Real.0, eps2)","lift_seq(z, i) + Real.0 - Real.0 = lift_seq(z, i)","not (lift_seq(z, i) + Real.0 - Real.0).abs < eps2"]}
{"goal":"Real.from_rat(z(i).abs) < Real.from_rat(reps2)","proof":["not Real.from_rat(z(i).abs) < eps2","lift_seq(z, i) = Real.from_rat(z(i))","Real.from_rat(z(i)).abs < eps2","Real.from_rat(z(i)).abs = Real.from_rat(z(i).abs)"]}
{"goal":"Real.from_rat(reps2) > Real.from_rat(z(i).abs)","proof":["not Real.from_rat(z(i).abs) >= Real.from_rat(reps2) or not Real.from_rat(z(i).abs) < Real.from_rat(reps2)","Real.from_rat(reps2) <= Real.from_rat(z(i).abs) or Real.from_rat(reps2) > Real.from_rat(z(i).abs)","Real.from_rat(z(i).abs) >= Real.from_rat(reps2) = Real.from_rat(reps2) <= Real.from_rat(z(i).abs)","Real.from_rat(reps2) <= Real.from_rat(z(i).abs)","not Real.from_rat(z(i).abs) >= Real.from_rat(reps2)","Real.from_rat(z(i).abs) >= Real.from_rat(reps2)"]}
{"goal":"reps2 > z(i).abs","proof":["not Real.from_rat(reps2) > Real.from_rat(z(i).abs) or Real.from_rat(reps2).gt_rat(z(i).abs)","not Real.from_rat(reps2).gt_rat(z(i).abs) or reps2 > z(i).abs","Real.from_rat(reps2).gt_rat(z(i).abs)","not Real.from_rat(reps2).gt_rat(z(i).abs)"]}
{"goal":"z(i).abs < reps2","proof":["z(i).abs < reps2 = reps2 > z(i).abs"]}
{"goal":"(a(i) * z(i)).abs < ub * reps2","proof":["a(i).abs < ub","not a(i).abs < ub or not z(i).abs < reps2 or a(i).abs * z(i).abs < ub * reps2 or a(i).abs.is_negative or z(i).abs.is_negative","a(i).abs * z(i).abs = (a(i) * z(i)).abs","not a(i).abs.is_negative","not z(i).abs.is_negative","not a(i).abs * z(i).abs < ub * reps2"]}
{"goal":"ub * reps2 = reps","proof":["ub * (reps / ub) = reps or Rat.0 = ub","ub * (reps / ub) != reps","not ub.is_positive or Rat.0 != ub","Rat.0 = ub","Rat.0 != ub"]}
{"goal":"(a(i) * z(i)).abs < reps","proof":["not (a(i) * z(i)).abs < ub * reps2"]}
{"goal":"mul_rat_seq(a, z)(i).abs < reps","proof":["a(i) * z(i) = mul_rat_seq(a, z, i)"]}
{"goal":"Real.from_rat(mul_rat_seq(a, z)(i).abs) < Real.from_rat(reps)","proof":["not mul_rat_seq(a, z, i).abs < reps or Real.from_rat(mul_rat_seq(a, z, i).abs) < Real.from_rat(reps)"]}
{"goal":"lift_seq(mul_rat_seq(a, z))(i).abs < eps","proof":["lift_seq(mul_rat_seq(a, z), i) = mul_seq(i)","not mul_seq(i).abs < eps","not mul_seq(i).abs < Real.from_rat(reps) or not Real.from_rat(reps) < eps or mul_seq(i).abs < eps","lift_seq(mul_rat_seq(a, z), i) = Real.from_rat(mul_rat_seq(a, z, i))","Real.from_rat(mul_rat_seq(a, z, i)).abs = Real.from_rat(mul_rat_seq(a, z, i).abs)","not mul_seq(i).abs < Real.from_rat(reps) or not Real.from_rat(reps) < eps","not mul_seq(i).abs < Real.from_rat(reps)"]}
{"goal":"mul_seq(i).is_close(Real.0, eps)","proof":["lift_seq(mul_rat_seq(a, z), i) = mul_seq(i)","mul_seq(i).abs < eps","not mul_seq(i).abs < eps or mul_seq(i).is_close(Real.0, eps)"]}
{"goal":"tail_bound(mul_seq, Real.0, n, eps)","proof":["let s0: (Nat -> Real, Real, Nat, Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat, x3: Real, x4: Nat) { not tail_bound(x0, x1, x2, x3) or not x2 <= x4 or x0(x4).is_close(x1, x3) } and forall(x5: Nat, x6: Nat -> Real, x7: Real, x8: Real) { x5 <= s0(x6, x7, x5, x8) or tail_bound(x6, x7, x5, x8) } and forall(x9: Nat -> Real, x10: Real, x11: Nat, x12: Real) { not x9(s0(x9, x10, x11, x12)).is_close(x10, x12) or tail_bound(x9, x10, x11, x12) } }","not n <= s0(mul_seq, Real.0, n, eps) or mul_seq(s0(mul_seq, Real.0, n, eps)).is_close(Real.0, eps)","not mul_seq(s0(mul_seq, Real.0, n, eps)).is_close(Real.0, eps) or tail_bound(mul_seq, Real.0, n, eps)","n <= s0(mul_seq, Real.0, n, eps) or tail_bound(mul_seq, Real.0, n, eps)","n <= s0(mul_seq, Real.0, n, eps)","not mul_seq(s0(mul_seq, Real.0, n, eps)).is_close(Real.0, eps)","mul_seq(s0(mul_seq, Real.0, n, eps)).is_close(Real.0, eps)"]}
{"goal":"converges_to(mul_seq, Real.0)","proof":["let (s0: (Nat -> Real, Real, Real) -> Nat, s1: (Nat -> Real, Real) -> Real) satisfy { forall(x0: Nat -> Real, x1: Real, x2: Real) { not converges_to(x0, x1) or not x2.is_positive or tail_bound(x0, x1, s0(x0, x1, x2), x2) } and forall(x3: Nat -> Real, x4: Real) { s1(x3, x4).is_positive or converges_to(x3, x4) } and forall(x5: Nat -> Real, x6: Real, x7: Nat) { not tail_bound(x5, x6, x7, s1(x5, x6)) or converges_to(x5, x6) } }","let s2: Real -> Nat satisfy { forall(x8: Real) { not x8.is_positive or tail_bound(mul_seq, Real.0, s2(x8), x8) } }","not s1(mul_seq, Real.0).is_positive or tail_bound(mul_seq, Real.0, s2(s1(mul_seq, Real.0)), s1(mul_seq, Real.0))","not tail_bound(mul_seq, Real.0, s2(s1(mul_seq, Real.0)), s1(mul_seq, Real.0)) or converges_to(mul_seq, Real.0)","s1(mul_seq, Real.0).is_positive or converges_to(mul_seq, Real.0)","s1(mul_seq, Real.0).is_positive","not tail_bound(mul_seq, Real.0, s2(s1(mul_seq, Real.0)), s1(mul_seq, Real.0))"]}
{"goal":"converges_to(lift_seq(mul_rat_seq(a, z)), Real.0)","proof":[]}
{"goal":"mul_zero_rat_seq","proof":["not converges_to(lift_seq(mul_rat_seq(a, z)), Real.0) or eq_seq(mul_rat_seq(a, z), zero_rat_seq)"]}
{"goal":"converges(lift_seq(a))","proof":["not eq_seq(a, b) or converges(lift_seq(a))"]}
{"goal":"converges(lift_seq(b))","proof":["not eq_seq(a, b) or eq_seq(b, a)","not eq_seq(b, a) or converges(lift_seq(b))","not eq_seq(b, a)"]}
{"goal":"converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(a) - limit_rat(b))","proof":["not converges(lift_seq(a)) or not converges(lift_seq(b)) or converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(a) - limit_rat(b))"]}
{"goal":"converges_to(lift_seq(b), limit(lift_seq(b)))","proof":["not converges(lift_seq(b)) or converges_to(lift_seq(b), limit(lift_seq(b)))"]}
{"goal":"converges_to(lift_seq(b), limit_rat(a))","proof":["not eq_seq(a, b) or converges_to(lift_seq(b), limit_rat(a))"]}
{"goal":"limit(lift_seq(b)) = limit_rat(a)","proof":["not converges_to(lift_seq(b), limit_rat(a)) or not converges_to(lift_seq(b), limit(lift_seq(b))) or limit(lift_seq(b)) = limit_rat(a)","not converges_to(lift_seq(b), limit(lift_seq(b))) or not converges_to(lift_seq(b), limit_rat(a))"]}
{"goal":"converges_to(lift_seq(sub_rat_seq(a, b)), Real.0)","proof":["Real.0 + limit_rat(b) - limit_rat(b) = Real.0","limit(lift_seq(b)) = limit_rat(b)","Real.0 + limit_rat(b) = limit_rat(b)","not converges_to(lift_seq(sub_rat_seq(a, b)), Real.0 + limit_rat(b) - limit_rat(b))","converges_to(lift_seq(sub_rat_seq(a, b)), limit(lift_seq(b)) - limit_rat(b))","converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(b) - limit_rat(b))"]}
{"goal":"converges_to(lift_seq(zero_rat_seq), Real.0)","proof":[]}
{"goal":"limit(lift_seq(sub_rat_seq(a, b))) = Real.0","proof":["not converges_to(lift_seq(sub_rat_seq(a, b)), limit(lift_seq(sub_rat_seq(a, b)))) or not converges_to(lift_seq(sub_rat_seq(a, b)), Real.0) or limit(lift_seq(sub_rat_seq(a, b))) = Real.0","not converges(lift_seq(sub_rat_seq(a, b))) or converges_to(lift_seq(sub_rat_seq(a, b)), limit(lift_seq(sub_rat_seq(a, b))))","not converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(a) - limit_rat(b)) or converges(lift_seq(sub_rat_seq(a, b)))","converges(lift_seq(sub_rat_seq(a, b)))","not converges_to(lift_seq(sub_rat_seq(a, b)), limit(lift_seq(sub_rat_seq(a, b)))) or not converges_to(lift_seq(sub_rat_seq(a, b)), Real.0)","converges_to(lift_seq(sub_rat_seq(a, b)), limit(lift_seq(sub_rat_seq(a, b))))","not converges_to(lift_seq(sub_rat_seq(a, b)), limit(lift_seq(sub_rat_seq(a, b))))"]}
{"goal":"limit(lift_seq(zero_rat_seq)) = Real.0","proof":["not converges_to(lift_seq(zero_rat_seq), limit(lift_seq(zero_rat_seq))) or not converges_to(lift_seq(zero_rat_seq), Real.0) or limit(lift_seq(zero_rat_seq)) = Real.0","not converges(lift_seq(zero_rat_seq)) or converges_to(lift_seq(zero_rat_seq), limit(lift_seq(zero_rat_seq)))","not converges_to(lift_seq(zero_rat_seq), Real.0) or converges(lift_seq(zero_rat_seq))","converges(lift_seq(zero_rat_seq))","not converges_to(lift_seq(zero_rat_seq), limit(lift_seq(zero_rat_seq))) or not converges_to(lift_seq(zero_rat_seq), Real.0)","converges_to(lift_seq(zero_rat_seq), limit(lift_seq(zero_rat_seq)))","not converges_to(lift_seq(zero_rat_seq), limit(lift_seq(zero_rat_seq)))"]}
{"goal":"sub_rat_eq_imp_sub_zero","proof":["not converges_to(lift_seq(sub_rat_seq(a, b)), Real.0) or eq_seq(sub_rat_seq(a, b), zero_rat_seq)"]}
{"goal":"converges_to(lift_seq(sub_rat_seq(a, b)), Real.0)","proof":["not eq_seq(sub_rat_seq(a, b), zero_rat_seq) or converges_to(lift_seq(sub_rat_seq(a, b)), Real.0)"]}
{"goal":"converges_to(lift_seq(zero_rat_seq), Real.0)","proof":[]}
{"goal":"limit(lift_seq(sub_rat_seq(a, b))) = Real.0","proof":["not converges_to(lift_seq(sub_rat_seq(a, b)), limit(lift_seq(sub_rat_seq(a, b)))) or not converges_to(lift_seq(sub_rat_seq(a, b)), Real.0) or limit(lift_seq(sub_rat_seq(a, b))) = Real.0","not converges(lift_seq(sub_rat_seq(a, b))) or converges_to(lift_seq(sub_rat_seq(a, b)), limit(lift_seq(sub_rat_seq(a, b))))","not converges_to(lift_seq(sub_rat_seq(a, b)), Real.0) or converges(lift_seq(sub_rat_seq(a, b)))","converges(lift_seq(sub_rat_seq(a, b)))","not converges_to(lift_seq(sub_rat_seq(a, b)), limit(lift_seq(sub_rat_seq(a, b)))) or not converges_to(lift_seq(sub_rat_seq(a, b)), Real.0)","converges_to(lift_seq(sub_rat_seq(a, b)), limit(lift_seq(sub_rat_seq(a, b))))","not converges_to(lift_seq(sub_rat_seq(a, b)), limit(lift_seq(sub_rat_seq(a, b))))"]}
{"goal":"limit(lift_seq(zero_rat_seq)) = Real.0","proof":["not converges_to(lift_seq(zero_rat_seq), limit(lift_seq(zero_rat_seq))) or not converges_to(lift_seq(zero_rat_seq), Real.0) or limit(lift_seq(zero_rat_seq)) = Real.0","not converges(lift_seq(zero_rat_seq)) or converges_to(lift_seq(zero_rat_seq), limit(lift_seq(zero_rat_seq)))","not converges_to(lift_seq(zero_rat_seq), Real.0) or converges(lift_seq(zero_rat_seq))","converges(lift_seq(zero_rat_seq))","not converges_to(lift_seq(zero_rat_seq), limit(lift_seq(zero_rat_seq))) or not converges_to(lift_seq(zero_rat_seq), Real.0)","converges_to(lift_seq(zero_rat_seq), limit(lift_seq(zero_rat_seq)))","not converges_to(lift_seq(zero_rat_seq), limit(lift_seq(zero_rat_seq)))"]}
{"goal":"limit_rat(sub_rat_seq(a, b)) = Real.0","proof":["limit(lift_seq(sub_rat_seq(a, b))) = limit_rat(sub_rat_seq(a, b))"]}
{"goal":"limit_rat(a) - limit_rat(b) = Real.0","proof":["not converges(lift_seq(a)) or not converges(lift_seq(b)) or converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(a) - limit_rat(b))","not converges_to(lift_seq(sub_rat_seq(a, b)), Real.0) or not converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(a) - limit_rat(b)) or limit_rat(a) - limit_rat(b) = Real.0","not converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(a) - limit_rat(b)) or not converges_to(lift_seq(sub_rat_seq(a, b)), Real.0)","not converges_to(lift_seq(sub_rat_seq(a, b)), limit_rat(a) - limit_rat(b))"]}
{"goal":"limit_rat(a) = limit_rat(b)","proof":["limit_rat(a) - limit_rat(b) != Real.0 or limit_rat(b) = limit_rat(a)"]}
{"goal":"sub_rat_sub_zero_imp_eq","proof":["not eq_seq(sub_rat_seq(a, b), zero_rat_seq) or not converges(lift_seq(a)) or not converges(lift_seq(b)) or eq_seq(a, b)"]}
{"goal":"converges(lift_seq(diff))","proof":["not converges(lift_seq(mul_rat_seq(a, b))) or not converges(lift_seq(mul_rat_seq(a, c))) or converges_to(lift_seq(sub_rat_seq(mul_rat_seq(a, b), mul_rat_seq(a, c))), limit_rat(mul_rat_seq(a, b)) - limit_rat(mul_rat_seq(a, c)))","not converges(lift_seq(a)) or not converges(lift_seq(b)) or converges(lift_seq(mul_rat_seq(a, b)))","not converges(lift_seq(a)) or not converges(lift_seq(c)) or converges(lift_seq(mul_rat_seq(a, c)))","not eq_seq(b, c) or converges_to(lift_seq(c), limit_rat(b))","not eq_seq(b, c) or converges(lift_seq(b))","not converges_to(lift_seq(c), limit_rat(b)) or converges(lift_seq(c))","not converges_to(lift_seq(sub_rat_seq(mul_rat_seq(a, b), mul_rat_seq(a, c))), limit_rat(mul_rat_seq(a, b)) - limit_rat(mul_rat_seq(a, c))) or converges(lift_seq(sub_rat_seq(mul_rat_seq(a, b), mul_rat_seq(a, c))))","converges(lift_seq(b))","not converges(lift_seq(sub_rat_seq(mul_rat_seq(a, b), mul_rat_seq(a, c))))","converges_to(lift_seq(c), limit_rat(b))","not converges(lift_seq(b)) or converges(lift_seq(mul_rat_seq(a, b)))","not converges(lift_seq(c)) or converges(lift_seq(mul_rat_seq(a, c)))","converges(lift_seq(c))","not converges_to(lift_seq(sub_rat_seq(mul_rat_seq(a, b), mul_rat_seq(a, c))), limit_rat(mul_rat_seq(a, b)) - limit_rat(mul_rat_seq(a, c)))","converges(lift_seq(mul_rat_seq(a, b)))","converges(lift_seq(mul_rat_seq(a, c)))","not converges(lift_seq(mul_rat_seq(a, c)))"]}
{"goal":"diff = mul_rat_seq(a, sub_rat_seq(b, c))","proof":["let s0: Nat satisfy { mul_rat_seq(a, sub_rat_seq(b, c), s0) != diff(s0) }","sub_rat_seq(mul_rat_seq(a, b), mul_rat_seq(a, c), s0) = diff(s0)","sub_rat_seq(mul_rat_seq(a, b), mul_rat_seq(a, c), s0) = mul_rat_seq(a, sub_rat_seq(b, c), s0)"]}
{"goal":"eq_seq(diff, mul_rat_seq(a, sub_rat_seq(b, c)))","proof":["not eq_seq(diff, diff)","not converges(lift_seq(diff)) or eq_seq(diff, diff)"]}
{"goal":"eq_seq(sub_rat_seq(b, c), zero_rat_seq)","proof":["not eq_seq(b, c) or eq_seq(sub_rat_seq(b, c), zero_rat_seq)"]}
{"goal":"eq_seq(diff, zero_rat_seq)","proof":["not eq_seq(sub_rat_seq(b, c), zero_rat_seq) or not converges(lift_seq(a)) or eq_seq(mul_rat_seq(a, sub_rat_seq(b, c)), zero_rat_seq)","not eq_seq(mul_rat_seq(a, sub_rat_seq(b, c)), zero_rat_seq)"]}
{"goal":"eq_seq(sub_rat_seq(mul_rat_seq(a, b), mul_rat_seq(a, c)), zero_rat_seq)","proof":[]}
{"goal":"converges_to(lift_seq(c), limit_rat(b))","proof":["not eq_seq(b, c) or converges_to(lift_seq(c), limit_rat(b))"]}
{"goal":"converges(lift_seq(c))","proof":["not eq_seq(b, c) or eq_seq(c, b)","not eq_seq(c, b) or converges(lift_seq(c))","not eq_seq(c, b)"]}
{"goal":"converges(lift_seq(b))","proof":["not eq_seq(b, c) or converges(lift_seq(b))"]}
{"goal":"converges(lift_seq(mul_rat_seq(a, b)))","proof":["not converges(lift_seq(a)) or not converges(lift_seq(b)) or converges(lift_seq(mul_rat_seq(a, b)))"]}
{"goal":"mul_right_well_def","proof":["not eq_seq(sub_rat_seq(mul_rat_seq(a, b), mul_rat_seq(a, c)), zero_rat_seq) or not converges(lift_seq(mul_rat_seq(a, b))) or not converges(lift_seq(mul_rat_seq(a, c))) or eq_seq(mul_rat_seq(a, b), mul_rat_seq(a, c))","not converges(lift_seq(a)) or not converges(lift_seq(c)) or converges(lift_seq(mul_rat_seq(a, c)))","not converges(lift_seq(mul_rat_seq(a, c)))"]}
{"goal":"eq_seq(mul_rat_seq(c, a), mul_rat_seq(c, b))","proof":["not converges(lift_seq(c)) or not eq_seq(a, b) or eq_seq(mul_rat_seq(c, a), mul_rat_seq(c, b))"]}
{"goal":"mul_rat_seq(c, a) = mul_rat_seq(a, c)","proof":["let s0: Nat satisfy { mul_rat_seq(c, a, s0) != mul_rat_seq(a, c, s0) }","mul_rat_seq(c, a, s0) = mul_rat_seq(a, c, s0)"]}
{"goal":"mul_rat_seq(c, b) = mul_rat_seq(b, c)","proof":["let s0: Nat satisfy { mul_rat_seq(c, b, s0) != mul_rat_seq(b, c, s0) }","mul_rat_seq(c, b, s0) = mul_rat_seq(b, c, s0)"]}
{"goal":"mul_left_well_def","proof":[]}
{"goal":"converges(lift_seq(a))","proof":["not eq_seq(a, b) or converges(lift_seq(a))"]}
{"goal":"converges(lift_seq(b))","proof":["not eq_seq(b, c) or converges(lift_seq(b))"]}
{"goal":"converges(lift_seq(c))","proof":["not eq_seq(b, c) or eq_seq(c, b)","not eq_seq(c, b) or converges(lift_seq(c))","not eq_seq(c, b)"]}
{"goal":"converges_to(lift_seq(a), limit_rat(a))","proof":["not eq_seq(a, a) or converges_to(lift_seq(a), limit_rat(a))","not eq_seq(a, a)","not converges(lift_seq(a)) or eq_seq(a, a)"]}
{"goal":"converges_to(lift_seq(b), limit_rat(b))","proof":["not eq_seq(b, b) or converges_to(lift_seq(b), limit_rat(b))","not eq_seq(b, b)","not converges(lift_seq(b)) or eq_seq(b, b)"]}
{"goal":"converges_to(lift_seq(c), limit_rat(c))","proof":["not eq_seq(c, c) or converges_to(lift_seq(c), limit_rat(c))","not eq_seq(c, c)","not converges(lift_seq(c)) or eq_seq(c, c)"]}
{"goal":"limit_rat(a) = limit_rat(b)","proof":["not eq_seq(b, a) or converges_to(lift_seq(a), limit_rat(b))","not converges_to(lift_seq(a), limit_rat(b)) or not converges_to(lift_seq(a), limit_rat(a)) or limit_rat(b) = limit_rat(a)","not eq_seq(a, b) or eq_seq(b, a)","eq_seq(b, a)","not converges_to(lift_seq(a), limit_rat(b)) or not converges_to(lift_seq(a), limit_rat(a))","converges_to(lift_seq(a), limit_rat(b))","not converges_to(lift_seq(a), limit_rat(b))"]}
{"goal":"limit_rat(b) = limit_rat(c)","proof":["not eq_seq(c, b) or converges_to(lift_seq(b), limit_rat(c))","not converges_to(lift_seq(b), limit_rat(c)) or not converges_to(lift_seq(b), limit_rat(b)) or limit_rat(c) = limit_rat(b)","not eq_seq(b, c) or eq_seq(c, b)","eq_seq(c, b)","not converges_to(lift_seq(b), limit_rat(c)) or not converges_to(lift_seq(b), limit_rat(b))","converges_to(lift_seq(b), limit_rat(c))","not converges_to(lift_seq(b), limit_rat(c))"]}
{"goal":"limit_rat(a) = limit_rat(c)","proof":["limit_rat(b) != limit_rat(a)"]}
{"goal":"eq_seq_trans","proof":["not converges_to(lift_seq(c), limit_rat(a)) or not converges(lift_seq(a)) or eq_seq(a, c)","converges_to(lift_seq(c), limit_rat(a))","not converges_to(lift_seq(c), limit_rat(a))"]}
{"goal":"eq_seq(mul_rat_seq(a, b), mul_rat_seq(c, b))","proof":["not converges(lift_seq(b)) or not eq_seq(a, c) or eq_seq(mul_rat_seq(a, b), mul_rat_seq(c, b))","not converges(lift_seq(b))","not eq_seq(b, d) or converges(lift_seq(b))"]}
{"goal":"eq_seq(mul_rat_seq(c, b), mul_rat_seq(c, d))","proof":["not converges(lift_seq(c)) or not eq_seq(b, d) or eq_seq(mul_rat_seq(c, b), mul_rat_seq(c, d))","not converges(lift_seq(c))","not eq_seq(a, c) or eq_seq(c, a)","not eq_seq(c, a) or converges(lift_seq(c))","eq_seq(c, a)"]}
{"goal":"mul_rat_eq_seq","proof":["not eq_seq(mul_rat_seq(a, b), mul_rat_seq(c, b)) or not eq_seq(mul_rat_seq(c, b), mul_rat_seq(c, d)) or eq_seq(mul_rat_seq(a, b), mul_rat_seq(c, d))","not eq_seq(mul_rat_seq(c, b), mul_rat_seq(c, d)) or not eq_seq(mul_rat_seq(a, b), mul_rat_seq(c, b))"]}
