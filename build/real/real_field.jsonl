{"goal":"neg_recip_rat_seq","proof":["let s0: Nat satisfy { recip_rat_seq(neg_rat_seq(a), s0) != neg_rat_seq(recip_rat_seq(a), s0) }","-Rat.1 / -neg_rat_seq(a, s0) = Rat.1 / neg_rat_seq(a, s0)","-(Rat.0 - a(s0)) = a(s0) - Rat.0","-Rat.1 * a(s0).reciprocal = -Rat.1 / a(s0)","Rat.1 * neg_rat_seq(a, s0).reciprocal = Rat.1 / neg_rat_seq(a, s0)","recip_rat_seq(a, s0) = a(s0).reciprocal","recip_rat_seq(neg_rat_seq(a), s0) = neg_rat_seq(a, s0).reciprocal","neg_rat_seq(a, s0) = -a(s0)","neg_rat_seq(recip_rat_seq(a), s0) = -recip_rat_seq(a, s0)","-Rat.1 * a(s0).reciprocal = -a(s0).reciprocal","Rat.0 - a(s0) = -a(s0)","a(s0) - Rat.0 = a(s0)","Rat.1 * (-a(s0)).reciprocal = (-a(s0)).reciprocal"]}
{"goal":"exists(k0: Rat) { Rat.0 < k0 and Real.from_rat(k0) < b }","proof":["let s0: Real -> Rat satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or Real.from_rat(s0(x1)) < x1 } }","not Real.from_rat(s0(b)) < b or not Rat.0 < s0(b)","not b.is_positive or Real.from_rat(s0(b)) < b","not b.is_positive or s0(b).is_positive","not s0(b).is_positive or Rat.0 < s0(b)","s0(b).is_positive","Real.from_rat(s0(b)) < b","Rat.0 < s0(b)","not Rat.0 < s0(b)"]}
{"goal":"eventual_lb(lsa, Real.from_rat(b_lb))","proof":["converges_to(lsa, b)","not Real.from_rat(b_lb) < b or not converges_to(lsa, b) or eventual_lb(lsa, Real.from_rat(b_lb))","not Real.from_rat(b_lb) < b or not converges_to(lsa, b)"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 < x0 implies Real.from_rat(b_lb) <= lsa(x0) } }","proof":["let (s1: (Nat -> Real, Real) -> Nat, s2: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Nat) { not s1(x2, x3) <= x4 or not eventual_lb(x2, x3) or x3 <= x2(x4) } and forall(x5: Nat, x6: Nat -> Real, x7: Real) { x5 <= s2(x6, x7, x5) or eventual_lb(x6, x7) } and forall(x8: Real, x9: Nat -> Real, x10: Nat) { not x8 <= x9(s2(x9, x8, x10)) or eventual_lb(x9, x8) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 < s0(x0) } and forall(x1: Nat) { not Real.from_rat(b_lb) <= lsa(s0(x1)) } }","not Real.from_rat(b_lb) <= lsa(s0(s1(lsa, Real.from_rat(b_lb))))","s1(lsa, Real.from_rat(b_lb)) < s0(s1(lsa, Real.from_rat(b_lb)))","not s1(lsa, Real.from_rat(b_lb)) <= s0(s1(lsa, Real.from_rat(b_lb))) or not eventual_lb(lsa, Real.from_rat(b_lb)) or Real.from_rat(b_lb) <= lsa(s0(s1(lsa, Real.from_rat(b_lb))))","not s1(lsa, Real.from_rat(b_lb)) < s0(s1(lsa, Real.from_rat(b_lb))) or s1(lsa, Real.from_rat(b_lb)) <= s0(s1(lsa, Real.from_rat(b_lb)))","s1(lsa, Real.from_rat(b_lb)) <= s0(s1(lsa, Real.from_rat(b_lb)))","not s1(lsa, Real.from_rat(b_lb)) <= s0(s1(lsa, Real.from_rat(b_lb)))"]}
{"goal":"b_lb <= a(i)","proof":["lift_seq(a, i) = lsa(i)","not n1 < i or Real.from_rat(b_lb) <= lsa(i)","not Real.from_rat(b_lb) <= Real.from_rat(a(i)) or b_lb <= a(i)","lift_seq(a, i) = Real.from_rat(a(i))","not Real.from_rat(b_lb) <= Real.from_rat(a(i))","Real.from_rat(b_lb) <= lsa(i)"]}
{"goal":"exists(k0: Rat) { k0.is_positive and Real.from_rat(k0) < eps }","proof":["let s0: Real -> Rat satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or Real.from_rat(s0(x1)) < x1 } }","not Real.from_rat(s0(eps)) < eps or not s0(eps).is_positive","not eps.is_positive or Real.from_rat(s0(eps)) < eps","not eps.is_positive or s0(eps).is_positive","s0(eps).is_positive","Real.from_rat(s0(eps)) < eps","not Real.from_rat(s0(eps)) < eps"]}
{"goal":"(b_lb * b_lb).is_positive","proof":["not b_lb.is_positive or not b_lb.is_positive or (b_lb * b_lb).is_positive","not b_lb.is_positive","not Rat.0 < b_lb or b_lb.is_positive"]}
{"goal":"(reps * (b_lb * b_lb)).is_positive","proof":["not reps.is_positive or not (b_lb * b_lb).is_positive or (reps * (b_lb * b_lb)).is_positive"]}
{"goal":"exists(k0: Rat) { k0.is_positive and k0 < reps * (b_lb * b_lb) }","proof":["let s0: Nat satisfy { true }","let s1: Rat -> Nat satisfy { forall(x0: Rat, x1: Nat) { not s1(x0) <= x1 or not x0.is_positive or rat.iop(x1) < x0 } }","not rat.iop(s1(reps * (b_lb * b_lb)) + s0) < reps * (b_lb * b_lb) or not rat.iop(s1(reps * (b_lb * b_lb)) + s0).is_positive","not s1(reps * (b_lb * b_lb)) <= s1(reps * (b_lb * b_lb)) + s0 or not (reps * (b_lb * b_lb)).is_positive or rat.iop(s1(reps * (b_lb * b_lb)) + s0) < reps * (b_lb * b_lb)","s1(reps * (b_lb * b_lb)) + s0 != s1(reps * (b_lb * b_lb)) + s0 or s1(reps * (b_lb * b_lb)) <= s1(reps * (b_lb * b_lb)) + s0","rat.iop(s1(reps * (b_lb * b_lb)) + s0).is_positive","not rat.iop(s1(reps * (b_lb * b_lb)) + s0) < reps * (b_lb * b_lb)","s1(reps * (b_lb * b_lb)) <= s1(reps * (b_lb * b_lb)) + s0","not s1(reps * (b_lb * b_lb)) <= s1(reps * (b_lb * b_lb)) + s0"]}
{"goal":"eps2 / (b_lb * b_lb) < reps","proof":["not eps2 < reps * (b_lb * b_lb) or not (b_lb * b_lb).is_positive or eps2 / (b_lb * b_lb) < reps"]}
{"goal":"exists(k0: Rat) { k0 + k0 = eps2 }","proof":["eps2 / Rat.2 + eps2 / Rat.2 != eps2","eps2 / Rat.2 + eps2 / Rat.2 = eps2"]}
{"goal":"eps3.is_positive","proof":["not (eps3 * Rat.2).is_positive or not Rat.2.is_positive or eps3.is_positive","Rat.2 * eps3 = eps3 + eps3","eps3 * Rat.2 = Rat.2 * eps3","not (eps3 * Rat.2).is_positive or not Rat.2.is_positive","not (eps3 * Rat.2).is_positive"]}
{"goal":"exists(k0: Nat) { tail_bound(lift_seq(a), b, k0, Real.from_rat(eps3)) }","proof":["let (s0: (Nat -> Real, Real, Real) -> Nat, s1: (Nat -> Real, Real) -> Real) satisfy { forall(x0: Nat -> Real, x1: Real, x2: Real) { not converges_to(x0, x1) or not x2.is_positive or tail_bound(x0, x1, s0(x0, x1, x2), x2) } and forall(x3: Nat -> Real, x4: Real) { s1(x3, x4).is_positive or converges_to(x3, x4) } and forall(x5: Nat -> Real, x6: Real, x7: Nat) { not tail_bound(x5, x6, x7, s1(x5, x6)) or converges_to(x5, x6) } }","not tail_bound(lift_seq(a), b, s0(lift_seq(a), b, Real.from_rat(eps3)), Real.from_rat(eps3))","not converges_to(lift_seq(a), b) or not Real.from_rat(eps3).is_positive or tail_bound(lift_seq(a), b, s0(lift_seq(a), b, Real.from_rat(eps3)), Real.from_rat(eps3))","not Real.from_rat(eps3).is_positive","not eps3.is_positive or Real.from_rat(eps3).is_positive"]}
{"goal":"n2 <= Nat.0 + i","proof":["Nat.0 + i = i"]}
{"goal":"n2 <= Nat.0 + (i + Nat.0)","proof":["i + Nat.0 = Nat.0 + i","not n2 <= Nat.0 + (Nat.0 + i)","Nat.0 + (Nat.0 + i) = Nat.0 + i"]}
{"goal":"tail_bound(lift_seq(a), Real.new(b.gt_rat), n2, Real.from_rat(eps3))","proof":["Real.new(b.gt_rat) = b"]}
{"goal":"lift_seq(a)(i).is_close(b, Real.from_rat(eps3))","proof":["lift_seq(a, i) = lsa(i)","not lsa(i).is_close(b, Real.from_rat(eps3))","not tail_bound(lsa, b, n2, Real.from_rat(eps3)) or not n2 <= i or lsa(i).is_close(b, Real.from_rat(eps3))","tail_bound(lsa, b, n2, Real.from_rat(eps3))","not tail_bound(lsa, b, n2, Real.from_rat(eps3)) or not n2 <= i"]}
{"goal":"exists(k0: Nat) { n1 < k0 and n2 < k0 }","proof":["let s0: Nat satisfy { true }","let s1: (Nat, Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat, x2: Nat) { x0 < s1(x0, x1, x2) } and forall(x3: Nat, x4: Nat, x5: Nat) { x3 < s1(x4, x3, x5) } and forall(x6: Nat, x7: Nat, x8: Nat) { x6 < s1(x7, x8, x6) } }","not n2 < s1(n2, s0, n1) or not n1 < s1(n2, s0, n1)","n1 < s1(n2, s0, n1)","n2 < s1(n2, s0, n1)","not n1 < s1(n2, s0, n1)"]}
{"goal":"n2 <= i","proof":["not n2 <= n or not n <= i or n2 <= i","not n2 < n or n2 <= n","not n <= i or not n2 <= n","n2 <= n","not n2 <= n"]}
{"goal":"lift_seq(a)(i).is_close(b, Real.from_rat(eps3))","proof":["not n2 <= i or lift_seq(a, i).is_close(b, Real.from_rat(eps3))"]}
{"goal":"n2 <= j","proof":["not n2 <= n or not n <= j or n2 <= j","not n2 < n or n2 <= n","not n <= j or not n2 <= n","n2 <= n","not n2 <= n"]}
{"goal":"lift_seq(a)(j).is_close(b, Real.from_rat(eps3))","proof":["not n2 <= j or lift_seq(a, j).is_close(b, Real.from_rat(eps3))"]}
{"goal":"lift_seq(a, i).is_close(lift_seq(a, j), Real.from_rat(eps3) + Real.from_rat(eps3))","proof":["not lift_seq(a, i).is_close(b, Real.from_rat(eps3)) or not lift_seq(a, j).is_close(b, Real.from_rat(eps3)) or lift_seq(a, i).is_close(lift_seq(a, j), Real.from_rat(eps3) + Real.from_rat(eps3))","not lift_seq(a, j).is_close(b, Real.from_rat(eps3)) or not lift_seq(a, i).is_close(b, Real.from_rat(eps3))"]}
{"goal":"a(i).is_close(a(j), eps2)","proof":["not Real.from_rat(a(i)).is_close(Real.from_rat(a(j)), Real.from_rat(eps2)) or a(i).is_close(a(j), eps2)","Real.from_rat(eps3) + Real.from_rat(eps3) = Real.from_rat(eps3 + eps3)","lift_seq(a, i) = Real.from_rat(a(i))","lift_seq(a, j) = Real.from_rat(a(j))","not Real.from_rat(a(i)).is_close(Real.from_rat(a(j)), Real.from_rat(eps2))"]}
{"goal":"diff.abs < eps2","proof":["(a(j) - a(i)).abs < eps2 = a(j).is_close(a(i), eps2)","not a(i).is_close(a(j), eps2) or a(j).is_close(a(i), eps2)","not (a(j) - a(i)).abs < eps2","a(j).is_close(a(i), eps2)","not a(j).is_close(a(i), eps2)"]}
{"goal":"n1 <= i","proof":["not n1 <= n or not n <= i or n1 <= i","not n1 < n or n1 <= n","not n <= i or not n1 <= n","n1 <= n","not n1 <= n"]}
{"goal":"b_lb <= a(i)","proof":["not n1 < i or b_lb <= a(i)","not n1 < i","not n1 <= i or n1 < i or i = n1","i = n1","n <= n1","not n1 < n or not n <= n1"]}
{"goal":"a(i) != Rat.0","proof":["not b_lb <= a(i) or not b_lb.is_positive or a(i).is_positive","not Rat.0 < b_lb or b_lb.is_positive","b_lb.is_positive","not a(i).is_positive or a(i) != Rat.0","a(i).is_positive","not a(i).is_positive"]}
{"goal":"n1 <= j","proof":["not n1 <= n or not n <= j or n1 <= j","not n1 < n or n1 <= n","not n <= j or not n1 <= n","n1 <= n","not n1 <= n"]}
{"goal":"b_lb <= a(j)","proof":["not n1 < j or b_lb <= a(j)","not n1 < j","not n1 <= j or n1 < j or j = n1","j = n1","n <= n1","not n1 < n or not n <= n1"]}
{"goal":"a(j) != Rat.0","proof":["not b_lb <= a(j) or not b_lb.is_positive or a(j).is_positive","not Rat.0 < b_lb or b_lb.is_positive","b_lb.is_positive","not a(j).is_positive or a(j) != Rat.0","a(j).is_positive","not a(j).is_positive"]}
{"goal":"b_lb * b_lb <= prod","proof":["not b_lb <= a(i) or not b_lb <= a(j) or b_lb * b_lb <= a(i) * a(j) or b_lb.is_negative or b_lb.is_negative","not Rat.0 < b_lb or b_lb.is_positive","b_lb.is_positive","not b_lb.is_negative or not b_lb.is_positive","not b_lb * b_lb <= a(i) * a(j)","not b_lb.is_negative","b_lb.is_negative"]}
{"goal":"b_lb * b_lb <= prod.abs","proof":["not b_lb * b_lb <= prod or not prod <= prod.abs or b_lb * b_lb <= prod.abs","prod <= prod.abs","not b_lb * b_lb <= prod or not prod <= prod.abs"]}
{"goal":"(b_lb * b_lb).is_positive","proof":[]}
{"goal":"prod.abs.is_positive","proof":["not b_lb * b_lb <= prod.abs or not (b_lb * b_lb).is_positive or prod.abs.is_positive"]}
{"goal":"diff.abs * (b_lb * b_lb) < eps2 * prod.abs","proof":["not b_lb * b_lb <= prod.abs or not diff.abs < eps2 or not (b_lb * b_lb).is_positive or diff.abs * (b_lb * b_lb) < eps2 * prod.abs or diff.abs.is_negative","diff.abs.is_negative","not diff.abs.is_negative"]}
{"goal":"diff.abs < eps2 * prod.abs / (b_lb * b_lb)","proof":["not diff.abs * (b_lb * b_lb) < eps2 * prod.abs or not (b_lb * b_lb).is_positive or diff.abs < eps2 * prod.abs / (b_lb * b_lb)"]}
{"goal":"eps2 * prod.abs / (b_lb * b_lb) = eps2 / (b_lb * b_lb) * prod.abs","proof":["eps2 * prod.abs / (b_lb * b_lb) = eps2 / (b_lb * b_lb) * prod.abs"]}
{"goal":"diff.abs < eps2 / (b_lb * b_lb) * prod.abs","proof":[]}
{"goal":"diff.abs / prod.abs < eps2 / (b_lb * b_lb)","proof":["not diff.abs < eps2 / (b_lb * b_lb) * prod.abs or not prod.abs.is_positive or diff.abs / prod.abs < eps2 / (b_lb * b_lb)"]}
{"goal":"diff.abs / prod.abs = (diff / prod).abs","proof":["diff.abs / prod.abs = (diff / prod).abs"]}
{"goal":"(diff / prod).abs < eps2 / (b_lb * b_lb)","proof":["not diff.abs / prod.abs < eps2 / (b_lb * b_lb)"]}
{"goal":"(diff / prod).abs < reps","proof":["not (diff / prod).abs < eps2 / (b_lb * b_lb) or not eps2 / (b_lb * b_lb) < reps or (diff / prod).abs < reps","not (diff / prod).abs < eps2 / (b_lb * b_lb) or not eps2 / (b_lb * b_lb) < reps"]}
{"goal":"((a(j) - a(i)) / (a(i) * a(j))).abs < reps","proof":[]}
{"goal":"a(i).reciprocal - a(j).reciprocal = (a(j) - a(i)) / (a(i) * a(j))","proof":["(a(j) - a(i)) / (a(i) * a(j)) = a(i).reciprocal - a(j).reciprocal or a(i) = Rat.0 or a(j) = Rat.0"]}
{"goal":"(a(i).reciprocal - a(j).reciprocal).abs < reps","proof":[]}
{"goal":"a(i).reciprocal.is_close(a(j).reciprocal, reps)","proof":["(a(i).reciprocal - a(j).reciprocal).abs < reps = a(i).reciprocal.is_close(a(j).reciprocal, reps)"]}
{"goal":"recip_rat_seq(a)(i).is_close(recip_rat_seq(a)(j), reps)","proof":["(recip_rat_seq(a, i) - recip_rat_seq(a, j)).abs < reps = recip_rat_seq(a, i).is_close(recip_rat_seq(a, j), reps)","recip_rat_seq(a, i) = a(i).reciprocal","recip_rat_seq(a, j) = a(j).reciprocal"]}
{"goal":"lift_seq(recip_rat_seq(a))(i).is_close(lift_seq(recip_rat_seq(a))(j), Real.from_rat(reps))","proof":["not recip_rat_seq(a, i).is_close(recip_rat_seq(a, j), reps) or Real.from_rat(recip_rat_seq(a, i)).is_close(Real.from_rat(recip_rat_seq(a, j)), Real.from_rat(reps))","lift_seq(recip_rat_seq(a), i) = Real.from_rat(recip_rat_seq(a, i))","lift_seq(recip_rat_seq(a), j) = Real.from_rat(recip_rat_seq(a, j))","not lift_seq(recip_rat_seq(a), i).is_close(Real.from_rat(recip_rat_seq(a, j)), Real.from_rat(reps))","Real.from_rat(recip_rat_seq(a, i)).is_close(Real.from_rat(recip_rat_seq(a, j)), Real.from_rat(reps))","not Real.from_rat(recip_rat_seq(a, i)).is_close(Real.from_rat(recip_rat_seq(a, j)), Real.from_rat(reps))"]}
{"goal":"lift_seq(recip_rat_seq(a))(i).is_close(lift_seq(recip_rat_seq(a))(j), eps)","proof":["not Real.from_rat(reps) < eps or not lift_seq(recip_rat_seq(a), i).is_close(lift_seq(recip_rat_seq(a), j), Real.from_rat(reps)) or lift_seq(recip_rat_seq(a), i).is_close(lift_seq(recip_rat_seq(a), j), eps)","not lift_seq(recip_rat_seq(a), i).is_close(lift_seq(recip_rat_seq(a), j), Real.from_rat(reps)) or not Real.from_rat(reps) < eps"]}
{"goal":"cauchy_bound(lift_seq(recip_rat_seq(a)), n, eps)","proof":["let (s0: (Nat -> Real, Nat, Real) -> Nat, s1: (Nat -> Real, Nat, Real) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Nat, x2: Real, x3: Nat, x4: Nat) { not cauchy_bound(x0, x1, x2) or not x1 <= x3 or not x1 <= x4 or x0(x3).is_close(x0(x4), x2) } and forall(x5: Nat, x6: Nat -> Real, x7: Real) { x5 <= s0(x6, x5, x7) or cauchy_bound(x6, x5, x7) } and forall(x8: Nat, x9: Nat -> Real, x10: Real) { x8 <= s1(x9, x8, x10) or cauchy_bound(x9, x8, x10) } and forall(x11: Nat -> Real, x12: Nat, x13: Real) { not x11(s0(x11, x12, x13)).is_close(x11(s1(x11, x12, x13)), x13) or cauchy_bound(x11, x12, x13) } }","not n <= s0(lift_seq(recip_rat_seq(a)), n, eps) or not n <= s1(lift_seq(recip_rat_seq(a)), n, eps) or lift_seq(recip_rat_seq(a), s0(lift_seq(recip_rat_seq(a)), n, eps)).is_close(lift_seq(recip_rat_seq(a), s1(lift_seq(recip_rat_seq(a)), n, eps)), eps)","not lift_seq(recip_rat_seq(a), s0(lift_seq(recip_rat_seq(a)), n, eps)).is_close(lift_seq(recip_rat_seq(a), s1(lift_seq(recip_rat_seq(a)), n, eps)), eps) or cauchy_bound(lift_seq(recip_rat_seq(a)), n, eps)","n <= s1(lift_seq(recip_rat_seq(a)), n, eps) or cauchy_bound(lift_seq(recip_rat_seq(a)), n, eps)","n <= s0(lift_seq(recip_rat_seq(a)), n, eps) or cauchy_bound(lift_seq(recip_rat_seq(a)), n, eps)","n <= s0(lift_seq(recip_rat_seq(a)), n, eps)","n <= s1(lift_seq(recip_rat_seq(a)), n, eps)","not lift_seq(recip_rat_seq(a), s0(lift_seq(recip_rat_seq(a)), n, eps)).is_close(lift_seq(recip_rat_seq(a), s1(lift_seq(recip_rat_seq(a)), n, eps)), eps)"]}
{"goal":"converges(lift_seq(recip_rat_seq(a)))","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: Nat -> Real -> Real) satisfy { forall(x0: Real, x1: Nat -> Real) { not x0.is_positive or not converges(x1) or cauchy_bound(x1, s0(x1, x0), x0) } and forall(x2: Nat -> Real) { s1(x2).is_positive or converges(x2) } and forall(x3: Nat -> Real, x4: Nat) { not cauchy_bound(x3, x4, s1(x3)) or converges(x3) } }","let s2: Real -> Nat satisfy { forall(x5: Real) { not x5.is_positive or cauchy_bound(lift_seq(recip_rat_seq(a)), s2(x5), x5) } }","not s1(lift_seq(recip_rat_seq(a))).is_positive or cauchy_bound(lift_seq(recip_rat_seq(a)), s2(s1(lift_seq(recip_rat_seq(a)))), s1(lift_seq(recip_rat_seq(a))))","not cauchy_bound(lift_seq(recip_rat_seq(a)), s2(s1(lift_seq(recip_rat_seq(a)))), s1(lift_seq(recip_rat_seq(a)))) or converges(lift_seq(recip_rat_seq(a)))","s1(lift_seq(recip_rat_seq(a))).is_positive or converges(lift_seq(recip_rat_seq(a)))","s1(lift_seq(recip_rat_seq(a))).is_positive","not cauchy_bound(lift_seq(recip_rat_seq(a)), s2(s1(lift_seq(recip_rat_seq(a)))), s1(lift_seq(recip_rat_seq(a))))"]}
{"goal":"recip_rat_seq_pos_converges","proof":[]}
{"goal":"converges(lift_seq(recip_rat_seq(a)))","proof":["not converges_to(lift_seq(a), b) or not b.is_positive or converges(lift_seq(recip_rat_seq(a)))"]}
{"goal":"b.is_negative","proof":["b.is_positive or 0 = b or b.is_negative"]}
{"goal":"(-b).is_positive","proof":["not (--b).is_negative or (-b).is_positive","not (--b).is_negative","--b = b"]}
{"goal":"limit(lift_seq(a)) = b","proof":["not converges_to(lift_seq(a), b) or not converges_to(lift_seq(a), limit(lift_seq(a))) or limit(lift_seq(a)) = b","not converges(lift_seq(a)) or converges_to(lift_seq(a), limit(lift_seq(a)))","not converges_to(lift_seq(a), b) or converges(lift_seq(a))","converges(lift_seq(a))","not converges_to(lift_seq(a), limit(lift_seq(a))) or not converges_to(lift_seq(a), b)","converges_to(lift_seq(a), limit(lift_seq(a)))","not converges_to(lift_seq(a), limit(lift_seq(a)))"]}
{"goal":"converges_to(neg_seq(lift_seq(a)), -b)","proof":["not converges(lift_seq(a)) or converges_to(neg_seq(lift_seq(a)), -limit(lift_seq(a)))","not converges_to(lift_seq(a), b) or converges(lift_seq(a))","converges(lift_seq(a))","not converges_to(neg_seq(lift_seq(a)), -limit(lift_seq(a)))","converges_to(neg_seq(lift_seq(a)), -limit(lift_seq(a)))"]}
{"goal":"converges_to(lift_seq(neg_rat_seq(a)), -b)","proof":["not converges(lift_seq(a)) or converges_to(lift_seq(neg_rat_seq(a)), -limit_rat(a))","limit(lift_seq(a)) = limit_rat(a)","not converges_to(lift_seq(a), b) or converges(lift_seq(a))","converges(lift_seq(a))","not converges_to(lift_seq(neg_rat_seq(a)), -limit(lift_seq(a)))","converges_to(lift_seq(neg_rat_seq(a)), -limit_rat(a))","not converges_to(lift_seq(neg_rat_seq(a)), -limit_rat(a))"]}
{"goal":"converges(lift_seq(recip_rat_seq(neg_rat_seq(a))))","proof":["not converges_to(lift_seq(neg_rat_seq(a)), -b) or not (-b).is_positive or converges(lift_seq(recip_rat_seq(neg_rat_seq(a))))"]}
{"goal":"recip_rat_seq(neg_rat_seq(a)) = neg_rat_seq(recip_rat_seq(a))","proof":["let s0: Nat satisfy { recip_rat_seq(neg_rat_seq(a), s0) != neg_rat_seq(recip_rat_seq(a), s0) }","recip_rat_seq(neg_rat_seq(a), s0) = neg_rat_seq(recip_rat_seq(a), s0)"]}
{"goal":"converges(lift_seq(neg_rat_seq(recip_rat_seq(a))))","proof":[]}
{"goal":"lift_seq(neg_rat_seq(recip_rat_seq(a))) = neg_seq(lift_seq(recip_rat_seq(a)))","proof":["let s0: Nat satisfy { neg_seq(lift_seq(recip_rat_seq(a)), s0) != lift_seq(neg_rat_seq(recip_rat_seq(a)), s0) }","neg_seq(lift_seq(recip_rat_seq(a)), s0) = lift_seq(neg_rat_seq(recip_rat_seq(a)), s0)"]}
{"goal":"converges(neg_seq(lift_seq(recip_rat_seq(a))))","proof":[]}
{"goal":"converges(lift_seq(recip_rat_seq(a)))","proof":["not converges(neg_seq(lift_seq(recip_rat_seq(a)))) or converges(lift_seq(recip_rat_seq(a)))"]}
{"goal":"recip_rat_seq_converges","proof":[]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies a(x0).is_close(limit(a), limit(a)) } }","proof":["let (s1: (Nat -> Real, Real, Real) -> Nat, s2: (Nat -> Real, Real) -> Real) satisfy { forall(x2: Real, x3: Nat -> Real, x4: Real) { not x2.is_positive or not converges_to(x3, x4) or tail_bound(x3, x4, s1(x3, x4, x2), x2) } and forall(x5: Nat -> Real, x6: Real) { s2(x5, x6).is_positive or converges_to(x5, x6) } and forall(x7: Nat -> Real, x8: Real, x9: Nat) { not tail_bound(x7, x8, x9, s2(x7, x8)) or converges_to(x7, x8) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not a(s0(x1)).is_close(limit(a), limit(a)) } }","not a(s0(s1(a, limit(a), limit(a)))).is_close(limit(a), limit(a))","s1(a, limit(a), limit(a)) <= s0(s1(a, limit(a), limit(a)))","not limit(a).is_positive or not converges_to(a, limit(a)) or tail_bound(a, limit(a), s1(a, limit(a), limit(a)), limit(a))","not tail_bound(a, limit(a), s1(a, limit(a), limit(a)), limit(a)) or not s1(a, limit(a), limit(a)) <= s0(s1(a, limit(a), limit(a))) or a(s0(s1(a, limit(a), limit(a)))).is_close(limit(a), limit(a))","not converges(a) or converges_to(a, limit(a))","converges_to(a, limit(a))","not tail_bound(a, limit(a), s1(a, limit(a), limit(a)), limit(a)) or not s1(a, limit(a), limit(a)) <= s0(s1(a, limit(a), limit(a)))","not tail_bound(a, limit(a), s1(a, limit(a), limit(a)), limit(a))"]}
{"goal":"a(i).is_close(limit(a), limit(a))","proof":["not n <= i or a(i).is_close(limit(a), limit(a))"]}
{"goal":"a(i) != 0","proof":["0.is_close(limit(a), limit(a))","not 0.is_close(limit(a), limit(a)) or limit(a) < 0 + limit(a)","not limit(a) < limit(a) or not limit(a) >= limit(a)","0 + limit(a) = limit(a)","limit(a) >= limit(a)","limit(a) < 0 + limit(a)","limit(a) < limit(a)"]}
{"goal":"pos_imp_eventually_nonzero","proof":["let (s0: Nat -> Real -> Nat, s1: (Nat -> Real, Nat) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Nat) { not s0(x0) <= x1 or not eventually_nonzero(x0) or 0 != x0(x1) } and forall(x2: Nat, x3: Nat -> Real) { x2 <= s1(x3, x2) or eventually_nonzero(x3) } and forall(x4: Nat -> Real, x5: Nat) { eventually_nonzero(x4) or 0 = x4(s1(x4, x5)) } }","not n <= s1(a, n) or a(s1(a, n)) != 0","eventually_nonzero(a) or a(s1(a, n)) = 0","a(s1(a, n)) = 0","n <= s1(a, n) or eventually_nonzero(a)","n <= s1(a, n)"]}
{"goal":"eventually_nonzero(a)","proof":["not limit(a).is_positive or not converges(a) or eventually_nonzero(a)"]}
{"goal":"limit(a).is_negative","proof":["limit(a).is_positive or limit(a) = 0 or limit(a).is_negative"]}
{"goal":"limit(neg_seq(a)) = -limit(a)","proof":["not converges(a) or converges_to(neg_seq(a), -limit(a))","not converges_to(neg_seq(a), -limit(a)) or not converges_to(neg_seq(a), limit(neg_seq(a))) or limit(neg_seq(a)) = -limit(a)","not converges(neg_seq(a)) or converges_to(neg_seq(a), limit(neg_seq(a)))","not converges(a) or converges(neg_seq(a))","converges(neg_seq(a))","not converges_to(neg_seq(a), limit(neg_seq(a))) or not converges_to(neg_seq(a), -limit(a))","converges_to(neg_seq(a), -limit(a))","converges_to(neg_seq(a), limit(neg_seq(a)))","not converges_to(neg_seq(a), limit(neg_seq(a)))"]}
{"goal":"limit(neg_seq(a)).is_positive","proof":["lib(real.real_set).flip(lib(real.real_set).flip(Real.is_negative), -limit(neg_seq(a))) = (-limit(neg_seq(a))).is_negative","lib(real.real_set).flip(lib(real.real_set).flip(Real.is_negative), limit(a)) = limit(a).is_negative","not (-limit(neg_seq(a))).is_negative or limit(neg_seq(a)).is_positive","not (-limit(neg_seq(a))).is_negative","--limit(a) = limit(a)"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies neg_seq(a)(x0) != 0 } }","proof":["let (s1: Nat -> Real -> Nat, s2: (Nat -> Real, Nat) -> Nat) satisfy { forall(x2: Nat -> Real, x3: Nat) { not s1(x2) <= x3 or not eventually_nonzero(x2) or 0 != x2(x3) } and forall(x4: Nat, x5: Nat -> Real) { x4 <= s2(x5, x4) or eventually_nonzero(x5) } and forall(x6: Nat -> Real, x7: Nat) { eventually_nonzero(x6) or 0 = x6(s2(x6, x7)) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { neg_seq(a, s0(x1)) = 0 } }","neg_seq(a, s0(s1(neg_seq(a)))) = 0","s1(neg_seq(a)) <= s0(s1(neg_seq(a)))","not s1(neg_seq(a)) <= s0(s1(neg_seq(a))) or not eventually_nonzero(neg_seq(a)) or neg_seq(a, s0(s1(neg_seq(a)))) != 0","not limit(neg_seq(a)).is_positive or not converges(neg_seq(a)) or eventually_nonzero(neg_seq(a))","not converges(a) or converges(neg_seq(a))","converges(neg_seq(a))","not s1(neg_seq(a)) <= s0(s1(neg_seq(a))) or not eventually_nonzero(neg_seq(a))","eventually_nonzero(neg_seq(a))","not eventually_nonzero(neg_seq(a))"]}
{"goal":"neg_seq(a)(i) != 0","proof":["neg_seq(a, i) != 0 or not n <= i"]}
{"goal":"a(i) != 0","proof":["real_series.mul_seq(-1, a, i) = neg_seq(a, i)","real_series.mul_seq(-1, a, i) = -1 * a(i)","-1 * a(i) = -a(i)"]}
{"goal":"eventually_nonzero(a)","proof":["let (s0: Nat -> Real -> Nat, s1: (Nat -> Real, Nat) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Nat) { not s0(x0) <= x1 or not eventually_nonzero(x0) or 0 != x0(x1) } and forall(x2: Nat, x3: Nat -> Real) { x2 <= s1(x3, x2) or eventually_nonzero(x3) } and forall(x4: Nat -> Real, x5: Nat) { eventually_nonzero(x4) or 0 = x4(s1(x4, x5)) } }","not n <= s1(a, n) or a(s1(a, n)) != 0","eventually_nonzero(a) or a(s1(a, n)) = 0","a(s1(a, n)) = 0","n <= s1(a, n) or eventually_nonzero(a)","n <= s1(a, n)"]}
{"goal":"nonzero_imp_eventually_nonzero","proof":[]}
{"goal":"a = limit_rat(rat_seq(a))","proof":["limit_rat(rat_seq(a)) = a"]}
{"goal":"a.reciprocal = limit_rat(recip_rat_seq(rat_seq(a)))","proof":["limit_rat(recip_rat_seq(rat_seq(a))) = a.reciprocal or 0 = a"]}
{"goal":"a * a.reciprocal = limit_rat(rat_seq(a)) * limit_rat(recip_rat_seq(rat_seq(a)))","proof":[]}
{"goal":"limit(lift_seq(rat_seq(a))) = a","proof":["limit(lift_seq(rat_seq(a))) = limit_rat(rat_seq(a))"]}
{"goal":"limit(lift_seq(rat_seq(a))) != 0","proof":["limit(lift_seq(rat_seq(a))) != a"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies lift_seq(rat_seq(a))(x0) != 0 } }","proof":["let (s1: Nat -> Real -> Nat, s2: (Nat -> Real, Nat) -> Nat) satisfy { forall(x2: Nat -> Real, x3: Nat) { not s1(x2) <= x3 or not eventually_nonzero(x2) or 0 != x2(x3) } and forall(x4: Nat, x5: Nat -> Real) { x4 <= s2(x5, x4) or eventually_nonzero(x5) } and forall(x6: Nat -> Real, x7: Nat) { eventually_nonzero(x6) or 0 = x6(s2(x6, x7)) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { lift_seq(rat_seq(a), s0(x1)) = 0 } }","lift_seq(rat_seq(a), s0(s1(lift_seq(rat_seq(a))))) = 0","s1(lift_seq(rat_seq(a))) <= s0(s1(lift_seq(rat_seq(a))))","not s1(lift_seq(rat_seq(a))) <= s0(s1(lift_seq(rat_seq(a)))) or not eventually_nonzero(lift_seq(rat_seq(a))) or lift_seq(rat_seq(a), s0(s1(lift_seq(rat_seq(a))))) != 0","not converges(lift_seq(rat_seq(a))) or eventually_nonzero(lift_seq(rat_seq(a))) or limit(lift_seq(rat_seq(a))) = 0","converges(lift_seq(rat_seq(a)))","lift_seq(rat_seq(a), s0(s1(lift_seq(rat_seq(a))))) != 0 or not eventually_nonzero(lift_seq(rat_seq(a)))","eventually_nonzero(lift_seq(rat_seq(a)))"]}
{"goal":"rat_seq(a, i) != Rat.0","proof":["lift_seq(rat_seq(a), i) != 0 or not n <= i","lift_seq(rat_seq(a), i) = Real.from_rat(rat_seq(a, i))","Real.from_rat(rat_seq(a, i)) = 0","lift_seq(rat_seq(a), i) != 0"]}
{"goal":"rat_seq(a, i) * recip_rat_seq(rat_seq(a), i) = Rat.1","proof":["rat_seq(a, i) * rat_seq(a, i).reciprocal = Rat.1 or rat_seq(a, i) = Rat.0","recip_rat_seq(rat_seq(a), i) = rat_seq(a, i).reciprocal","rat_seq(a, i) * rat_seq(a, i).reciprocal = Rat.1","rat_seq(a, i) * rat_seq(a, i).reciprocal != Rat.1"]}
{"goal":"prod(i) = Rat.1","proof":["mul_rat_seq(rat_seq(a), recip_rat_seq(rat_seq(a)), i) = prod(i)","rat_seq(a, i) * recip_rat_seq(rat_seq(a), i) = mul_rat_seq(rat_seq(a), recip_rat_seq(rat_seq(a)), i)","mul_rat_seq(rat_seq(a), recip_rat_seq(rat_seq(a)), i) != Rat.1"]}
{"goal":"lift_seq(prod)(i) = 1","proof":["lift_seq(prod, i) = Real.from_rat(prod(i))","Real.from_rat(prod(i)) != 1","Real.from_rat(Rat.1) != 1"]}
{"goal":"eventual_eq(lift_seq(prod), 1)","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not s0(x0, x1) <= x2 or not eventual_eq(x0, x1) or x1 = x0(x2) } and forall(x3: Nat, x4: Nat -> Real, x5: Real) { x3 <= s1(x4, x5, x3) or eventual_eq(x4, x5) } and forall(x6: Nat -> Real, x7: Real, x8: Nat) { x6(s1(x6, x7, x8)) != x7 or eventual_eq(x6, x7) } }","not n <= s1(lift_seq(prod), 1, n) or lift_seq(prod, s1(lift_seq(prod), 1, n)) = 1","lift_seq(prod, s1(lift_seq(prod), 1, n)) != 1 or eventual_eq(lift_seq(prod), 1)","n <= s1(lift_seq(prod), 1, n) or eventual_eq(lift_seq(prod), 1)","n <= s1(lift_seq(prod), 1, n)","lift_seq(prod, s1(lift_seq(prod), 1, n)) != 1"]}
{"goal":"limit_rat(rat_seq(a)) * limit_rat(recip_rat_seq(rat_seq(a))) = limit_rat(mul_rat_seq(rat_seq(a), recip_rat_seq(rat_seq(a))))","proof":["not converges(lift_seq(rat_seq(a))) or not converges(lift_seq(recip_rat_seq(rat_seq(a)))) or limit_rat(rat_seq(a)) * limit_rat(recip_rat_seq(rat_seq(a))) = limit_rat(mul_rat_seq(rat_seq(a), recip_rat_seq(rat_seq(a))))","not converges_to(lift_seq(rat_seq(a)), a) or converges(lift_seq(recip_rat_seq(rat_seq(a)))) or 0 = a","converges_to(lift_seq(rat_seq(a)), a)","converges(lift_seq(rat_seq(a)))","not converges(lift_seq(recip_rat_seq(rat_seq(a))))","not converges_to(lift_seq(rat_seq(a)), a) or converges(lift_seq(recip_rat_seq(rat_seq(a))))"]}
{"goal":"a * a.reciprocal = limit_rat(mul_rat_seq(rat_seq(a), recip_rat_seq(rat_seq(a))))","proof":["limit_rat(rat_seq(a)) * limit_rat(recip_rat_seq(rat_seq(a))) != limit_rat(mul_rat_seq(rat_seq(a), recip_rat_seq(rat_seq(a))))"]}
{"goal":"a * a.reciprocal = limit_rat(prod)","proof":["limit_rat(mul_rat_seq(rat_seq(a), recip_rat_seq(rat_seq(a)))) != a * a.reciprocal"]}
{"goal":"mul_reciprocal","proof":["limit_rat(prod) != 1","not eventual_eq(lift_seq(prod), 1) or limit(lift_seq(prod)) = 1","limit(lift_seq(prod)) = limit_rat(prod)","limit(lift_seq(prod)) = 1","limit(lift_seq(prod)) != 1"]}
{"goal":"zero_reciprocal","proof":["0 != 0 or 0.reciprocal = 0"]}
{"goal":"forall(x0: Real) { x0 != lib(add_monoid).AddMonoid.0[Real] implies lib(semigroup).Semigroup.mul[Real](x0, x0.reciprocal) = monoid.Monoid.1[Real] } and lib(add_monoid).AddMonoid.0[Real].reciprocal = lib(add_monoid).AddMonoid.0[Real]","proof":["let s0: Real satisfy { 0.reciprocal != 0 or s0 != 0 and (s0 * s0.reciprocal != 1 or 0.reciprocal != 0) }","s0 * s0.reciprocal = 1 or s0 = 0","s0 != 0","s0 * s0.reciprocal != 1","s0 * s0.reciprocal = 1"]}
{"goal":"mul_left_cancel","proof":["b.reciprocal * (b * c) = b.reciprocal * b * c","a * b.reciprocal = a / b","b * b.reciprocal = 1 or 0 = b","a * b.reciprocal = b.reciprocal * a","b * b.reciprocal = b.reciprocal * b","limit(lib(util).constant[Nat, Real](c)) = c","1 * limit(lib(util).constant[Nat, Real](c)) = limit(lib(util).constant[Nat, Real](c))","b * b.reciprocal = 1"]}
{"goal":"1 + r * limit(partial[Real](r.pow)) = limit(partial[Real](r.pow))","proof":["not r.abs < 1 or 1 + r * limit(partial[Real](r.pow)) = limit(partial[Real](r.pow))"]}
{"goal":"1 = limit(partial[Real](r.pow)) - r * limit(partial[Real](r.pow))","proof":["1 + r * limit(partial[Real](r.pow)) != limit(partial[Real](r.pow)) or limit(partial[Real](r.pow)) - r * limit(partial[Real](r.pow)) = 1"]}
{"goal":"1 = (1 - r) * limit(partial[Real](r.pow))","proof":["limit(partial[Real](r.pow)) * 1 - limit(partial[Real](r.pow)) * r = limit(partial[Real](r.pow)) * (1 - r)","(1 - r) * limit(partial[Real](r.pow)) = limit(partial[Real](r.pow)) * (1 - r)","r * limit(partial[Real](r.pow)) = limit(partial[Real](r.pow)) * r","(1 + r * limit(partial[Real](r.pow))) * 1 = 1 + r * limit(partial[Real](r.pow))"]}
{"goal":"1 - r != 0","proof":["0 * limit(partial[Real](r.pow)) = 1","1 - r < 0 = 0 > 1 - r","r.abs < 1 = 1 > r.abs","not 1 - r < 0 or 1 - r != 0","not 1 - r < 0","0 * limit(partial[Real](r.pow)) = 0","1 = 0","1 != 0 or r.abs = 0","r.abs = 0"]}
{"goal":"limit(partial[Real](r.pow)) = 1 / (1 - r)","proof":["(1 - r) * limit(partial[Real](r.pow)) != 1 or 1 / (1 - r) = limit(partial[Real](r.pow)) or 1 - r = 0"]}
{"goal":"geom_series","proof":[]}
