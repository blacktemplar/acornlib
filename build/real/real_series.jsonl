{"goal":"partial[Real](a, n.suc) = sum[Real](map[Nat, Real](n.suc.range, a))","proof":["sum[Real](map[Nat, Real](n.suc.range, a)) = partial[Real](a, n.suc)"]}
{"goal":"n.suc.range = n.range + List.singleton(n)","proof":["n.suc != n.suc or n.range.append(n) = n.suc.range","n.range + List.singleton(n) = n.range.append(n)","n.range.append(n) != n.suc.range"]}
{"goal":"map[Nat, Real](n.suc.range, a) = map[Nat, Real](n.range, a) + map[Nat, Real](List.singleton(n), a)","proof":["map[Nat, Real](n.range, a) + map[Nat, Real](List.singleton(n), a) = map[Nat, Real](n.range + List.singleton(n), a)"]}
{"goal":"sum[Real](map[Nat, Real](n.suc.range, a)) = sum[Real](map[Nat, Real](n.range, a)) + sum[Real](map[Nat, Real](List.singleton(n), a))","proof":["sum[Real](map[Nat, Real](n.range, a)) + sum[Real](map[Nat, Real](List.singleton(n), a)) = sum[Real](map[Nat, Real](n.range, a) + map[Nat, Real](List.singleton(n), a))"]}
{"goal":"partial_suc","proof":["sum[Real](map[Nat, Real](n.range, a)) = partial[Real](a, n)","sum[Real](map[Nat, Real](n.range, a)) + a(n) = sum[Real](map[Nat, Real](n.range, a).append(a(n)))","map[Nat, Real](List.singleton(n), a) = List.singleton(a(n))","map[Nat, Real](n.range, a) + List.singleton(a(n)) = map[Nat, Real](n.range, a).append(a(n))"]}
{"goal":"partial[Real](a)(Nat.0) <= partial[Real](b)(Nat.0)","proof":["sum[Real](map[Nat, Real](Nat.0.range, a)) = partial[Real](a, Nat.0)","sum[Real](map[Nat, Real](Nat.0.range, b)) = partial[Real](b, Nat.0)","let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Rat, x2: Real) { not x0.gt_rat(x1) or not x0 <= x2 or x2.gt_rat(x1) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not partial[Real](b, Nat.0).gt_rat(s0(partial[Real](a, Nat.0), partial[Real](b, Nat.0))) or partial[Real](a, Nat.0) <= partial[Real](b, Nat.0)","partial[Real](a, Nat.0).gt_rat(s0(partial[Real](a, Nat.0), partial[Real](b, Nat.0))) or partial[Real](a, Nat.0) <= partial[Real](b, Nat.0)","List.nil<Nat> != List.nil<Nat> or map[Nat, Real](List.nil<Nat>, a) = List.nil[Real]","List.nil<Nat> != List.nil<Nat> or map[Nat, Real](List.nil<Nat>, b) = List.nil[Real]","Nat.0 != Nat.0 or Nat.0.range = List.nil<Nat>","Nat.0.range = List.nil<Nat>","map[Nat, Real](List.nil<Nat>, a) = List.nil[Real]","map[Nat, Real](List.nil<Nat>, b) = List.nil[Real]","partial[Real](a, Nat.0).gt_rat(s0(partial[Real](a, Nat.0), partial[Real](b, Nat.0)))","not partial[Real](b, Nat.0).gt_rat(s0(partial[Real](a, Nat.0), partial[Real](b, Nat.0)))"]}
{"goal":"p(Nat.0)","proof":["partial[Real](a, Nat.0) <= partial[Real](b, Nat.0) = p(Nat.0)"]}
{"goal":"partial[Real](a, n) <= partial[Real](b, n)","proof":["partial[Real](a, n) <= partial[Real](b, n) = p(n)"]}
{"goal":"a(n) <= b(n)","proof":["not seq_lte(a, b) or a(n) <= b(n)"]}
{"goal":"partial[Real](a, n) + a(n) <= partial[Real](b, n) + a(n)","proof":["not partial[Real](a, n) <= partial[Real](b, n) or partial[Real](a, n) + a(n) <= partial[Real](b, n) + a(n)"]}
{"goal":"partial[Real](a, n) + a(n) <= partial[Real](b, n) + b(n)","proof":["not a(n) <= b(n) or partial[Real](b, n) + a(n) <= partial[Real](b, n) + b(n)","not partial[Real](a, n) + a(n) <= partial[Real](b, n) + a(n) or not partial[Real](b, n) + a(n) <= partial[Real](b, n) + b(n) or partial[Real](a, n) + a(n) <= partial[Real](b, n) + b(n)","not partial[Real](b, n) + a(n) <= partial[Real](b, n) + b(n) or not partial[Real](a, n) + a(n) <= partial[Real](b, n) + a(n)","partial[Real](b, n) + a(n) <= partial[Real](b, n) + b(n)"]}
{"goal":"partial[Real](a)(n.suc) <= partial[Real](b)(n.suc)","proof":["partial[Real](a, n) + a(n) = partial[Real](a, n.suc)","partial[Real](b, n) + b(n) = partial[Real](b, n.suc)"]}
{"goal":"p(n.suc)","proof":["partial[Real](a, n.suc) <= partial[Real](b, n.suc) = p(n.suc)"]}
{"goal":"p(n)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(Nat.0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(Nat.0) or x2(x3) } }","not p(s0(p)) or p(s0(p).suc)","not p(s0(p).suc) or not p(Nat.0) or p(n)","not p(s0(p).suc)","not p(Nat.0) or p(s0(p)) or p(n)","not p(s0(p))","p(s0(p))"]}
{"goal":"partial_seq_lte","proof":["let s0: (Nat -> Real, Nat -> Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Nat -> Real, x2: Nat) { not seq_lte(x0, x1) or x0(x2) <= x1(x2) } and forall(x3: Nat -> Real, x4: Nat -> Real) { not x3(s0(x3, x4)) <= x4(s0(x3, x4)) or seq_lte(x3, x4) } }","p(s0(partial[Real](a), partial[Real](b)))","partial[Real](a, s0(partial[Real](a), partial[Real](b))) <= partial[Real](b, s0(partial[Real](a), partial[Real](b))) = p(s0(partial[Real](a), partial[Real](b)))","not partial[Real](a, s0(partial[Real](a), partial[Real](b))) <= partial[Real](b, s0(partial[Real](a), partial[Real](b))) or seq_lte(partial[Real](a), partial[Real](b))","not partial[Real](a, s0(partial[Real](a), partial[Real](b))) <= partial[Real](b, s0(partial[Real](a), partial[Real](b)))"]}
{"goal":"j <= n","proof":["j + Nat.0 = Nat.0 + j","Nat.0 + j <= n","Nat.0 + j = j"]}
{"goal":"j + Nat.0 = j","proof":["j + Nat.0 = Nat.0 + j","Nat.0 + j != j","Nat.0 + j = j"]}
{"goal":"a(j) <= a(j)","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Rat, x2: Real) { not x0.gt_rat(x1) or not x0 <= x2 or x2.gt_rat(x1) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not a(j).gt_rat(s0(a(j), a(j))) or a(j) <= a(j)","a(j).gt_rat(s0(a(j), a(j))) or a(j) <= a(j)","not a(j).gt_rat(s0(a(j), a(j)))","a(j).gt_rat(s0(a(j), a(j)))"]}
{"goal":"p(Nat.0)","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 + x1 <= n or not p(x1) or a(x0) <= a(x0 + x1) } and forall(x2: Nat) { s0(x2) + x2 <= n or p(x2) } and forall(x3: Nat) { not a(s0(x3)) <= a(s0(x3) + x3) or p(x3) } }","not a(s0(Nat.0)) <= a(s0(Nat.0) + Nat.0) or p(Nat.0)","s0(Nat.0) + Nat.0 = s0(Nat.0)","a(s0(Nat.0) + Nat.0) <= a(s0(Nat.0) + Nat.0)","not a(s0(Nat.0)) <= a(s0(Nat.0) + Nat.0)"]}
{"goal":"j + k <= n","proof":["j + k.suc = (j + k).suc","not n < j + k or n < (j + k).suc","(j + k).suc <= n","not n < (j + k).suc or not (j + k).suc <= n","n < j + k or j + k <= n","n < j + k","not n < (j + k).suc","n < (j + k).suc"]}
{"goal":"a(j) <= a(j + k)","proof":["not j + k <= n or not p(k) or a(j) <= a(j + k)"]}
{"goal":"a(j + k) <= a(j + k.suc)","proof":["not is_increasing(a) or a(j + k) <= a((j + k).suc)","j + k.suc = (j + k).suc","not a(j + k) <= a((j + k).suc)"]}
{"goal":"a(j) <= a(j + k.suc)","proof":["not a(j) <= a(j + k) or not a(j + k) <= a(j + k.suc) or a(j) <= a(j + k.suc)","not a(j + k) <= a(j + k.suc) or not a(j) <= a(j + k)"]}
{"goal":"p(k.suc)","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 + x1 <= n or not p(x1) or a(x0) <= a(x0 + x1) } and forall(x2: Nat) { s0(x2) + x2 <= n or p(x2) } and forall(x3: Nat) { not a(s0(x3)) <= a(s0(x3) + x3) or p(x3) } }","s0(k.suc) + k.suc <= n or p(k.suc)","not a(s0(k.suc)) <= a(s0(k.suc) + k.suc) or p(k.suc)","not s0(k.suc) + k.suc <= n or a(s0(k.suc)) <= a(s0(k.suc) + k.suc)","s0(k.suc) + k.suc <= n","not a(s0(k.suc)) <= a(s0(k.suc) + k.suc)","a(s0(k.suc)) <= a(s0(k.suc) + k.suc)"]}
{"goal":"exists(k0: Nat) { m + k0 = n }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 <= x1 or x0 + s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat, x4: Nat) { x2 + x3 != x4 or x2 <= x4 } }","m + s0(m, n) != n","not m <= n or m + s0(m, n) = n"]}
{"goal":"p(k)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(Nat.0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(Nat.0) or x2(x3) } }","not p(s0(p)) or p(s0(p).suc)","not p(s0(p).suc) or not p(Nat.0) or p(k)","not p(s0(p).suc)","not p(Nat.0) or p(s0(p)) or p(k)","not p(s0(p))","p(s0(p))"]}
{"goal":"m + k <= n","proof":["not n <= n","let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or x0 + s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat) { not x2 < x3 or s0(x2, x3) != Nat.0 } }","not n < n or n + s0(n, n) = n","n + s0(n, n) != n or n <= n","n + s0(n, n) != n","n < n or n <= n","not n < n","n < n"]}
{"goal":"a(m) <= a(m + k)","proof":["not m + k <= n or not p(k) or a(m) <= a(m + k)"]}
{"goal":"a(m) <= a(n)","proof":["not a(m) <= a(m + k)"]}
{"goal":"distant_increasing","proof":[]}
{"goal":"limit(a) < a(n)","proof":["limit(a) >= a(n) or limit(a) < a(n)","limit(a) >= a(n)","not a(n) <= limit(a) or not a(n) > limit(a)","limit(a) >= a(n) = a(n) <= limit(a)","not a(n) <= limit(a)","a(n) <= limit(a)"]}
{"goal":"exists(k0: Real) { limit(a) < k0 and k0 < a(n) }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not limit(a) < Real.from_rat(s0(limit(a), a(n))) or not Real.from_rat(s0(limit(a), a(n))) < a(n)","not limit(a) < a(n) or Real.from_rat(s0(limit(a), a(n))) < a(n)","not limit(a) < a(n) or limit(a) < Real.from_rat(s0(limit(a), a(n)))","limit(a) < Real.from_rat(s0(limit(a), a(n)))","Real.from_rat(s0(limit(a), a(n))) < a(n)","not Real.from_rat(s0(limit(a), a(n))) < a(n)"]}
{"goal":"eps.is_positive","proof":["not (ub - limit(a)).is_positive","not limit(a) < ub or (ub - limit(a)).is_positive"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies a(x0).is_close(limit(a), eps) } }","proof":["let (s1: (Nat -> Real, Real, Real) -> Nat, s2: (Nat -> Real, Real) -> Real) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Real) { not converges_to(x2, x3) or not x4.is_positive or tail_bound(x2, x3, s1(x2, x3, x4), x4) } and forall(x5: Nat -> Real, x6: Real) { s2(x5, x6).is_positive or converges_to(x5, x6) } and forall(x7: Nat -> Real, x8: Real, x9: Nat) { not tail_bound(x7, x8, x9, s2(x7, x8)) or converges_to(x7, x8) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not a(s0(x1)).is_close(limit(a), eps) } }","not a(s0(s1(a, limit(a), eps))).is_close(limit(a), eps)","s1(a, limit(a), eps) <= s0(s1(a, limit(a), eps))","not converges_to(a, limit(a)) or not eps.is_positive or tail_bound(a, limit(a), s1(a, limit(a), eps), eps)","not tail_bound(a, limit(a), s1(a, limit(a), eps), eps) or not s1(a, limit(a), eps) <= s0(s1(a, limit(a), eps)) or a(s0(s1(a, limit(a), eps))).is_close(limit(a), eps)","not converges(a) or converges_to(a, limit(a))","converges_to(a, limit(a))","not tail_bound(a, limit(a), s1(a, limit(a), eps), eps) or not s1(a, limit(a), eps) <= s0(s1(a, limit(a), eps))","not tail_bound(a, limit(a), s1(a, limit(a), eps), eps)"]}
{"goal":"a(n) <= a(big_n)","proof":["not is_increasing(a) or not n <= big_n or a(n) <= a(big_n)","not n <= big_n","n <= big_n or big_n < n","not big_n < n or not n < big_n","big_n < n","not big_n < n"]}
{"goal":"a(big_n).is_close(limit(a), eps)","proof":["not big_n <= big_n or a(big_n).is_close(limit(a), eps)","not big_n <= big_n","big_n <= big_n or big_n < big_n","not big_n < big_n or big_n <= big_n","big_n < big_n","not big_n < big_n"]}
{"goal":"(a(big_n) - limit(a)).abs < eps","proof":["(a(big_n) - limit(a)).abs < eps = a(big_n).is_close(limit(a), eps)"]}
{"goal":"a(big_n) < limit(a) + eps","proof":["not a(big_n).is_close(limit(a), eps) or a(big_n) < limit(a) + eps"]}
{"goal":"limit(a) + eps = ub","proof":["ub + limit(a) - limit(a) = ub - limit(a) + limit(a)","ub + limit(a) - limit(a) = ub","ub - limit(a) + limit(a) = limit(a) + (ub - limit(a))","limit(a) + (ub - limit(a)) != ub","ub - limit(a) + limit(a) != ub"]}
{"goal":"a(big_n) < ub","proof":["not a(big_n) < limit(a) + eps"]}
{"goal":"a(n) < ub","proof":["not a(big_n) < ub or not a(n) <= a(big_n) or a(n) < ub","not a(n) <= a(big_n) or not a(big_n) < ub"]}
{"goal":"false","proof":["not a(n) >= ub or not a(n) < ub","a(n) >= ub = ub <= a(n)","not ub < a(n) or ub <= a(n)","ub <= a(n)","not a(n) >= ub","a(n) >= ub"]}
{"goal":"a(n).is_close(limit(a), eps)","proof":["not big_n <= n or a(n).is_close(limit(a), eps)","not big_n <= n","big_n <= n or n < big_n"]}
{"goal":"(a(n) - limit(a)).abs < eps","proof":["(a(n) - limit(a)).abs < eps = a(n).is_close(limit(a), eps)"]}
{"goal":"a(n) < limit(a) + eps","proof":["not a(n).is_close(limit(a), eps) or a(n) < limit(a) + eps"]}
{"goal":"limit(a) + eps = ub","proof":["ub + limit(a) - limit(a) = ub - limit(a) + limit(a)","ub + limit(a) - limit(a) = ub","ub - limit(a) + limit(a) = limit(a) + (ub - limit(a))","limit(a) + (ub - limit(a)) != ub","ub - limit(a) + limit(a) != ub"]}
{"goal":"a(n) < ub","proof":["not a(n) < limit(a) + eps"]}
{"goal":"false","proof":["not a(n) >= ub or not a(n) < ub","a(n) >= ub = ub <= a(n)","not ub < a(n) or ub <= a(n)","ub <= a(n)","not a(n) >= ub","a(n) >= ub"]}
{"goal":"a(n) <= limit(a)","proof":["a(n) > limit(a) or a(n) <= limit(a)"]}
{"goal":"increasing_convergent_bounded_by_limit","proof":["let s0: (Nat -> Real, Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not is_upper_bound(x0, x1) or x0(x2) <= x1 } and forall(x3: Nat -> Real, x4: Real) { not x3(s0(x3, x4)) <= x4 or is_upper_bound(x3, x4) } }","a(s0(a, limit(a))) <= limit(a)","not a(s0(a, limit(a))) <= limit(a) or is_upper_bound(a, limit(a))"]}
{"goal":"ub_imp_image_ub","proof":["let s0: (Real, Real -> Bool) -> Real satisfy { forall(x0: Real, x1: Real -> Bool, x2: Real) { not x0.is_set_upper_bound(x1) or not x1(x2) or x2 <= x0 } and forall(x3: Real, x4: Real -> Bool) { x3.is_set_upper_bound(x4) or x4(s0(x3, x4)) } and forall(x5: Real, x6: Real -> Bool) { not s0(x5, x6) <= x5 or x5.is_set_upper_bound(x6) } }","let s1: (Nat -> Real, Real) -> Nat satisfy { forall(x7: Nat -> Real, x8: Real) { not image(x7, x8) or x7(s1(x7, x8)) = x8 } and forall(x9: Real, x10: Nat -> Real, x11: Nat) { x9 != x10(x11) or image(x10, x9) } }","not image(a, s0(b, image(a))) or a(s1(a, s0(b, image(a)))) = s0(b, image(a))","not s0(b, image(a)) <= b or b.is_set_upper_bound(image(a))","not is_upper_bound(a, b) or a(s1(a, s0(b, image(a)))) <= b","b.is_set_upper_bound(image(a)) or image(a, s0(b, image(a)))","image(a, s0(b, image(a)))","not s0(b, image(a)) <= b","a(s1(a, s0(b, image(a)))) <= b","a(s1(a, s0(b, image(a)))) = s0(b, image(a))"]}
{"goal":"b.is_set_upper_bound(image(a))","proof":["not is_upper_bound(a, b) or b.is_set_upper_bound(image(a))"]}
{"goal":"exists(k0: Real) { k0.is_set_least_upper_bound(image(a)) }","proof":["let s0: (Real -> Bool, Real) -> Real satisfy { forall(x0: Real -> Bool, x1: Real) { not real_set.is_nonempty(x0) or not x1.is_set_upper_bound(x0) or s0(x0, x1).is_set_least_upper_bound(x0) } }","not s0(image(a), b).is_set_least_upper_bound(image(a))","not real_set.is_nonempty(image(a)) or not b.is_set_upper_bound(image(a)) or s0(image(a), b).is_set_least_upper_bound(image(a))","not real_set.is_nonempty(image(a))","let s1: Nat satisfy { true }","a(s1) != a(s1) or image(a, a(s1))","not image(a, a(s1)) or real_set.is_nonempty(image(a))","image(a, a(s1))","not image(a, a(s1))"]}
{"goal":"is_upper_bound(a, c)","proof":["let s0: (Nat -> Real, Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not is_upper_bound(x0, x1) or x0(x2) <= x1 } and forall(x3: Nat -> Real, x4: Real) { not x3(s0(x3, x4)) <= x4 or is_upper_bound(x3, x4) } }","not a(s0(a, c)) <= c or is_upper_bound(a, c)","not c.is_set_upper_bound(image(a)) or not image(a, a(s0(a, c))) or a(s0(a, c)) <= c","a(s0(a, c)) != a(s0(a, c)) or image(a, a(s0(a, c)))","not c.is_set_least_upper_bound(image(a)) or c.is_set_upper_bound(image(a))","not a(s0(a, c)) <= c","image(a, a(s0(a, c)))","c.is_set_upper_bound(image(a))","not image(a, a(s0(a, c))) or not c.is_set_upper_bound(image(a))"]}
{"goal":"x.is_set_upper_bound(image(a))","proof":["not is_upper_bound(a, x) or x.is_set_upper_bound(image(a))"]}
{"goal":"false","proof":["not c.is_set_least_upper_bound(image(a)) or not x.is_set_upper_bound(image(a)) or c <= x","x < c = c > x","c > x","not c <= x or not c > x","not c <= x","not c.is_set_least_upper_bound(image(a)) or c <= x"]}
{"goal":"is_least_upper_bound(a, c)","proof":["let s0: (Nat -> Real, Real) -> Real satisfy { forall(x0: Nat -> Real, x1: Real) { not is_least_upper_bound(x0, x1) or is_upper_bound(x0, x1) } and forall(x2: Nat -> Real, x3: Real, x4: Real) { not is_least_upper_bound(x2, x3) or not is_upper_bound(x2, x4) or not x4 < x3 } and forall(x5: Nat -> Real, x6: Real) { not is_upper_bound(x5, x6) or s0(x5, x6) < x6 or is_least_upper_bound(x5, x6) } and forall(x7: Nat -> Real, x8: Real) { not is_upper_bound(x7, x8) or is_upper_bound(x7, s0(x7, x8)) or is_least_upper_bound(x7, x8) } }","not is_upper_bound(a, s0(a, c)) or not s0(a, c) < c","not is_upper_bound(a, c) or is_upper_bound(a, s0(a, c)) or is_least_upper_bound(a, c)","not is_upper_bound(a, c) or s0(a, c) < c or is_least_upper_bound(a, c)","s0(a, c) < c","is_upper_bound(a, s0(a, c))","not is_upper_bound(a, s0(a, c))"]}
{"goal":"ub_imp_lub","proof":["not is_least_upper_bound(a, c)"]}
{"goal":"exists(k0: Real) { is_least_upper_bound(a, k0) }","proof":["let s0: (Nat -> Real, Real) -> Real satisfy { forall(x0: Nat -> Real, x1: Real) { not is_upper_bound(x0, x1) or is_least_upper_bound(x0, s0(x0, x1)) } }","not is_least_upper_bound(a, s0(a, b))","not is_upper_bound(a, b) or is_least_upper_bound(a, s0(a, b))"]}
{"goal":"exists(k0: Real) { k0.is_positive and k0 + k0 < eps }","proof":["let s0: Real -> Real satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or s0(x1) + s0(x1) < x1 } }","not s0(eps) + s0(eps) < eps or not s0(eps).is_positive","not eps.is_positive or s0(eps) + s0(eps) < eps","not eps.is_positive or s0(eps).is_positive","s0(eps).is_positive","s0(eps) + s0(eps) < eps","not s0(eps) + s0(eps) < eps"]}
{"goal":"x < l","proof":["not l - eps2 < l","not l.is_close(l, eps2) or l - eps2 < l","not eps2.is_positive or l.is_close(l, eps2)","l.is_close(l, eps2)"]}
{"goal":"not is_upper_bound(a, x)","proof":["not is_least_upper_bound(a, l) or not is_upper_bound(a, x) or not x < l","not is_least_upper_bound(a, l) or not x < l"]}
{"goal":"exists(k0: Nat) { not a(k0) <= x }","proof":["let s0: (Nat -> Real, Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not is_upper_bound(x0, x1) or x0(x2) <= x1 } and forall(x3: Nat -> Real, x4: Real) { not x3(s0(x3, x4)) <= x4 or is_upper_bound(x3, x4) } }","a(s0(a, x)) <= x","not a(s0(a, x)) <= x or is_upper_bound(a, x)"]}
{"goal":"l - eps2 < a(n)","proof":["not x < a(n)","not x <= a(n) or x < a(n) or a(n) = x","x <= a(n) or a(n) <= x","x <= x","x <= a(n)","a(n) = x"]}
{"goal":"n <= i","proof":[]}
{"goal":"a(n) <= a(i)","proof":["not is_increasing(a) or not n <= i or a(n) <= a(i)"]}
{"goal":"n <= j","proof":[]}
{"goal":"a(n) <= a(j)","proof":["not is_increasing(a) or not n <= j or a(n) <= a(j)"]}
{"goal":"a(i) <= l","proof":["not is_upper_bound(a, l) or a(i) <= l","not is_upper_bound(a, l)","not is_least_upper_bound(a, l) or is_upper_bound(a, l)"]}
{"goal":"a(j) <= l","proof":["not is_upper_bound(a, l) or a(j) <= l","not is_upper_bound(a, l)","not is_least_upper_bound(a, l) or is_upper_bound(a, l)"]}
{"goal":"l - eps2 < a(n)","proof":["not x < a(n)","x >= a(n) or x < a(n)","x >= a(n)","x >= a(n) = a(n) <= x"]}
{"goal":"l - eps2 < a(i)","proof":["not x < a(i)","x < a(n)","not x < a(n) or not a(n) <= a(i) or x < a(i)","not a(n) <= a(i) or not x < a(n)"]}
{"goal":"l - eps2 < a(j)","proof":["not x < a(j)","x < a(n)","not x < a(n) or not a(n) <= a(j) or x < a(j)","not a(n) <= a(j) or not x < a(n)"]}
{"goal":"a(i) < l + eps2","proof":["not l.is_close(l, eps2) or l < l + eps2","not l < l + eps2 or not a(i) <= l or a(i) < l + eps2","not eps2.is_positive or l.is_close(l, eps2)","l.is_close(l, eps2)","not l < l + eps2 or not a(i) <= l","not l < l + eps2"]}
{"goal":"(l - a(i)).abs < eps2","proof":["not a(i) < l + eps2 or not l - eps2 < a(i) or a(i).is_close(l, eps2)","(l - a(i)).abs < eps2 = l.is_close(a(i), eps2)","not l.is_close(a(i), eps2)","not a(i).is_close(l, eps2) or l.is_close(a(i), eps2)","a(i).is_close(l, eps2)","not a(i).is_close(l, eps2)"]}
{"goal":"(a(i) - l).abs < eps2","proof":["not a(i) < l + eps2 or not l - eps2 < a(i) or a(i).is_close(l, eps2)","(a(i) - l).abs < eps2 = a(i).is_close(l, eps2)","a(i).is_close(l, eps2)","not a(i).is_close(l, eps2)"]}
{"goal":"l - eps2 < a(j)","proof":[]}
{"goal":"a(j) <= l","proof":[]}
{"goal":"a(j) < l + eps2","proof":["not l.is_close(l, eps2) or l < l + eps2","not l < l + eps2 or not a(j) <= l or a(j) < l + eps2","not eps2.is_positive or l.is_close(l, eps2)","l.is_close(l, eps2)","not l < l + eps2 or not a(j) <= l","not l < l + eps2"]}
{"goal":"(a(j) - l).abs < eps2","proof":["not a(j) < l + eps2 or not l - eps2 < a(j) or a(j).is_close(l, eps2)","(a(j) - l).abs < eps2 = a(j).is_close(l, eps2)","a(j).is_close(l, eps2)","not a(j).is_close(l, eps2)"]}
{"goal":"(a(i) - a(j)).abs < eps2 + eps2","proof":["not a(i).is_close(l, eps2) or not a(j).is_close(l, eps2) or a(i).is_close(a(j), eps2 + eps2)","(a(i) - a(j)).abs < eps2 + eps2 = a(i).is_close(a(j), eps2 + eps2)","(a(i) - l).abs < eps2 = a(i).is_close(l, eps2)","(a(j) - l).abs < eps2 = a(j).is_close(l, eps2)","not a(i).is_close(a(j), eps2 + eps2)","a(i).is_close(l, eps2)","a(j).is_close(l, eps2)","not a(j).is_close(l, eps2) or not a(i).is_close(l, eps2)"]}
{"goal":"eps2 + eps2 < eps","proof":[]}
{"goal":"(a(i) - a(j)).abs < eps","proof":["not (a(i) - a(j)).abs < eps2 + eps2 or not eps2 + eps2 <= eps or (a(i) - a(j)).abs < eps","not eps2 + eps2 < eps or eps2 + eps2 <= eps","eps2 + eps2 <= eps","not (a(i) - a(j)).abs < eps2 + eps2 or not eps2 + eps2 <= eps"]}
{"goal":"a(i).is_close(a(j), eps)","proof":["(a(i) - a(j)).abs < eps = a(i).is_close(a(j), eps)"]}
{"goal":"cauchy_bound(a, n, eps)","proof":["let (s0: (Nat -> Real, Nat, Real) -> Nat, s1: (Nat -> Real, Nat, Real) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Nat, x2: Real, x3: Nat, x4: Nat) { not cauchy_bound(x0, x1, x2) or not x1 <= x3 or not x1 <= x4 or x0(x3).is_close(x0(x4), x2) } and forall(x5: Nat, x6: Nat -> Real, x7: Real) { x5 <= s0(x6, x5, x7) or cauchy_bound(x6, x5, x7) } and forall(x8: Nat, x9: Nat -> Real, x10: Real) { x8 <= s1(x9, x8, x10) or cauchy_bound(x9, x8, x10) } and forall(x11: Nat -> Real, x12: Nat, x13: Real) { not x11(s0(x11, x12, x13)).is_close(x11(s1(x11, x12, x13)), x13) or cauchy_bound(x11, x12, x13) } }","not n <= s0(a, n, eps) or not n <= s1(a, n, eps) or a(s0(a, n, eps)).is_close(a(s1(a, n, eps)), eps)","not a(s0(a, n, eps)).is_close(a(s1(a, n, eps)), eps) or cauchy_bound(a, n, eps)","n <= s1(a, n, eps) or cauchy_bound(a, n, eps)","n <= s0(a, n, eps) or cauchy_bound(a, n, eps)","n <= s0(a, n, eps)","n <= s1(a, n, eps)","not a(s0(a, n, eps)).is_close(a(s1(a, n, eps)), eps)"]}
{"goal":"monotone_convergence_principle","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: Nat -> Real -> Real) satisfy { forall(x0: Nat -> Real, x1: Real) { not converges(x0) or not x1.is_positive or cauchy_bound(x0, s0(x0, x1), x1) } and forall(x2: Nat -> Real) { s1(x2).is_positive or converges(x2) } and forall(x3: Nat -> Real, x4: Nat) { not cauchy_bound(x3, x4, s1(x3)) or converges(x3) } }","let s2: Real -> Nat satisfy { forall(x5: Real) { not x5.is_positive or cauchy_bound(a, s2(x5), x5) } }","not s1(a).is_positive or cauchy_bound(a, s2(s1(a)), s1(a))","not cauchy_bound(a, s2(s1(a)), s1(a)) or converges(a)","not cauchy_bound(a, s2(s1(a)), s1(a))","s1(a).is_positive or converges(a)","not s1(a).is_positive","s1(a).is_positive"]}
{"goal":"nonneg_partial_increasing","proof":["let s0: Nat -> Real -> Nat satisfy { forall(x0: Nat -> Real, x1: Nat) { not is_increasing(x0) or x0(x1) <= x0(x1.suc) } and forall(x2: Nat -> Real) { not x2(s0(x2)) <= x2(s0(x2).suc) or is_increasing(x2) } }","not partial[Real](a, s0(partial[Real](a))) <= partial[Real](a, s0(partial[Real](a)).suc) or is_increasing(partial[Real](a))","partial[Real](a, s0(partial[Real](a))) + a(s0(partial[Real](a))) = partial[Real](a, s0(partial[Real](a)).suc)","not 0 <= a(s0(partial[Real](a))) or partial[Real](a, s0(partial[Real](a))) + 0 <= partial[Real](a, s0(partial[Real](a))) + a(s0(partial[Real](a)))","not is_lower_bound(a, 0) or 0 <= a(s0(partial[Real](a)))","partial[Real](a, s0(partial[Real](a))) + 0 = partial[Real](a, s0(partial[Real](a)))","0 <= a(s0(partial[Real](a)))","not partial[Real](a, s0(partial[Real](a))) <= partial[Real](a, s0(partial[Real](a)).suc)","partial[Real](a, s0(partial[Real](a))) + 0 <= partial[Real](a, s0(partial[Real](a))) + a(s0(partial[Real](a)))","not partial[Real](a, s0(partial[Real](a))) + 0 <= partial[Real](a, s0(partial[Real](a)).suc)"]}
{"goal":"is_increasing(partial[Real](a))","proof":["not is_lower_bound(a, 0) or is_increasing(partial[Real](a))"]}
{"goal":"nonneg_partial_bounded_above","proof":["not converges(partial[Real](a)) or not is_increasing(partial[Real](a)) or is_upper_bound(partial[Real](a), limit(partial[Real](a)))"]}
{"goal":"seq_lte_ub","proof":["let s0: (Nat -> Real, Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not is_upper_bound(x0, x1) or x0(x2) <= x1 } and forall(x3: Nat -> Real, x4: Real) { not x3(s0(x3, x4)) <= x4 or is_upper_bound(x3, x4) } }","not a(s0(a, ub)) <= ub or is_upper_bound(a, ub)","not a(s0(a, ub)) <= b(s0(a, ub)) or not b(s0(a, ub)) <= ub or a(s0(a, ub)) <= ub","not seq_lte(a, b) or a(s0(a, ub)) <= b(s0(a, ub))","not is_upper_bound(b, ub) or b(s0(a, ub)) <= ub","not a(s0(a, ub)) <= ub","b(s0(a, ub)) <= ub","a(s0(a, ub)) <= b(s0(a, ub))","not a(s0(a, ub)) <= b(s0(a, ub)) or not b(s0(a, ub)) <= ub"]}
{"goal":"is_lower_bound(b, 0)","proof":["let s0: (Nat -> Real, Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not is_lower_bound(x0, x1) or x1 <= x0(x2) } and forall(x3: Real, x4: Nat -> Real) { not x3 <= x4(s0(x4, x3)) or is_lower_bound(x4, x3) } }","not 0 <= b(s0(b, 0)) or is_lower_bound(b, 0)","not 0 <= a(s0(b, 0)) or not a(s0(b, 0)) <= b(s0(b, 0)) or 0 <= b(s0(b, 0))","not seq_lte(a, b) or a(s0(b, 0)) <= b(s0(b, 0))","not is_lower_bound(a, 0) or 0 <= a(s0(b, 0))","not 0 <= b(s0(b, 0))","0 <= a(s0(b, 0))","a(s0(b, 0)) <= b(s0(b, 0))","not a(s0(b, 0)) <= b(s0(b, 0)) or not 0 <= a(s0(b, 0))"]}
{"goal":"seq_lte(partial[Real](a), partial[Real](b))","proof":["not seq_lte(a, b) or seq_lte(partial[Real](a), partial[Real](b))"]}
{"goal":"is_upper_bound(partial[Real](b), limit(partial[Real](b)))","proof":["not is_lower_bound(b, 0) or not converges(partial[Real](b)) or is_upper_bound(partial[Real](b), limit(partial[Real](b)))"]}
{"goal":"is_upper_bound(partial[Real](a), limit(partial[Real](b)))","proof":["not is_upper_bound(partial[Real](b), limit(partial[Real](b))) or not seq_lte(partial[Real](a), partial[Real](b)) or is_upper_bound(partial[Real](a), limit(partial[Real](b)))","not is_upper_bound(partial[Real](b), limit(partial[Real](b))) or not seq_lte(partial[Real](a), partial[Real](b))"]}
{"goal":"comparison_test","proof":["not is_upper_bound(partial[Real](a), limit(partial[Real](b))) or not is_increasing(partial[Real](a)) or converges(partial[Real](a))","not is_increasing(partial[Real](a))","not is_lower_bound(a, 0) or is_increasing(partial[Real](a))"]}
{"goal":"const_converges","proof":["let (s1: (Nat -> Real, Real) -> Nat, s2: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not s1(x0, x1) <= x2 or not real_seq.eventual_eq(x0, x1) or x1 = x0(x2) } and forall(x3: Nat, x4: Nat -> Real, x5: Real) { x3 <= s2(x4, x5, x3) or real_seq.eventual_eq(x4, x5) } and forall(x6: Nat -> Real, x7: Real, x8: Nat) { x6(s2(x6, x7, x8)) != x7 or real_seq.eventual_eq(x6, x7) } }","let s0: Nat satisfy { true }","constant(a, s2(constant[Nat, Real](a), a, s0)) != a or real_seq.eventual_eq(constant[Nat, Real](a), a)","not real_seq.eventual_eq(constant[Nat, Real](a), a) or converges(constant[Nat, Real](a))","not real_seq.eventual_eq(constant[Nat, Real](a), a)","constant(a, s2(constant[Nat, Real](a), a, s0)) = a","constant(a, s2(constant[Nat, Real](a), a, s0)) != a"]}
{"goal":"const_limit","proof":["let (s1: (Nat -> Real, Real) -> Nat, s2: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not s1(x0, x1) <= x2 or not real_seq.eventual_eq(x0, x1) or x1 = x0(x2) } and forall(x3: Nat, x4: Nat -> Real, x5: Real) { x3 <= s2(x4, x5, x3) or real_seq.eventual_eq(x4, x5) } and forall(x6: Nat -> Real, x7: Real, x8: Nat) { x6(s2(x6, x7, x8)) != x7 or real_seq.eventual_eq(x6, x7) } }","let s0: Nat satisfy { true }","constant(a, s2(constant[Nat, Real](a), a, s0)) != a or real_seq.eventual_eq(constant[Nat, Real](a), a)","not real_seq.eventual_eq(constant[Nat, Real](a), a) or limit(constant[Nat, Real](a)) = a","not real_seq.eventual_eq(constant[Nat, Real](a), a)","constant(a, s2(constant[Nat, Real](a), a, s0)) = a"]}
{"goal":"const_converges_to","proof":["not converges(constant[Nat, Real](a)) or converges_to(constant[Nat, Real](a), limit(constant[Nat, Real](a)))","limit(constant[Nat, Real](a)) = a","not converges_to(constant[Nat, Real](a), limit(constant[Nat, Real](a)))","converges(constant[Nat, Real](a))"]}
{"goal":"mul_seq_zero","proof":["let s0: Nat satisfy { mul_seq(0, a, s0) != constant(0, s0) }","mul_seq(0, a, s0) = 0 * a(s0)","constant(0, s0) = 0","mul_seq(0, a, s0) != 0","0 * a(s0) != 0","0 * a(s0) = 0"]}
{"goal":"converges_to(b, limit(b))","proof":["not converges(b) or converges_to(b, limit(b))"]}
{"goal":"exists(k0: Real) { k0.is_positive and a.abs * k0 < eps }","proof":["let s0: (Real, Real) -> Real satisfy { forall(x0: Real, x1: Real) { not x0.is_positive or s0(x1, x0).is_positive } and forall(x2: Real, x3: Real) { not x2.is_positive or x3.abs * s0(x3, x2) < x2 } }","not a.abs * s0(a, eps) < eps or not s0(a, eps).is_positive","not eps.is_positive or a.abs * s0(a, eps) < eps","not eps.is_positive or s0(a, eps).is_positive","s0(a, eps).is_positive","a.abs * s0(a, eps) < eps"]}
{"goal":"exists(k0: Nat) { tail_bound(b, limit(b), k0, eps2) }","proof":["let (s0: (Nat -> Real, Real, Real) -> Nat, s1: (Nat -> Real, Real) -> Real) satisfy { forall(x0: Real, x1: Nat -> Real, x2: Real) { not x0.is_positive or not converges_to(x1, x2) or tail_bound(x1, x2, s0(x1, x2, x0), x0) } and forall(x3: Nat -> Real, x4: Real) { s1(x3, x4).is_positive or converges_to(x3, x4) } and forall(x5: Nat -> Real, x6: Real, x7: Nat) { not tail_bound(x5, x6, x7, s1(x5, x6)) or converges_to(x5, x6) } }","not tail_bound(b, limit(b), s0(b, limit(b), eps2), eps2)","not eps2.is_positive or not converges_to(b, limit(b)) or tail_bound(b, limit(b), s0(b, limit(b), eps2), eps2)"]}
{"goal":"b(i).is_close(limit(b), eps2)","proof":["not tail_bound(b, limit(b), n, eps2) or not n <= i or b(i).is_close(limit(b), eps2)","not tail_bound(b, limit(b), n, eps2) or not n <= i"]}
{"goal":"(b(i) - limit(b)).abs < eps2","proof":["(b(i) - limit(b)).abs < eps2 = b(i).is_close(limit(b), eps2)"]}
{"goal":"a.abs * (b(i) - limit(b)).abs <= a.abs * eps2","proof":["not (b(i) - limit(b)).abs <= eps2 or a.abs * (b(i) - limit(b)).abs <= a.abs * eps2 or a.abs.is_negative","not (b(i) - limit(b)).abs < eps2 or (b(i) - limit(b)).abs <= eps2","not a.abs.is_negative","(b(i) - limit(b)).abs <= eps2","not (b(i) - limit(b)).abs <= eps2"]}
{"goal":"(a * b(i) - a * limit(b)).abs <= a.abs * eps2","proof":["a * b(i) - a * limit(b) = a * (b(i) - limit(b))","not (a * (b(i) - limit(b))).abs <= a.abs * eps2","a.abs * (b(i) - limit(b)).abs = (a * (b(i) - limit(b))).abs"]}
{"goal":"(a * b(i) - a * limit(b)).abs < eps","proof":["not a.abs * eps2 < eps or not (a * b(i) - a * limit(b)).abs <= a.abs * eps2 or (a * b(i) - a * limit(b)).abs < eps","not (a * b(i) - a * limit(b)).abs <= a.abs * eps2 or not a.abs * eps2 < eps"]}
{"goal":"mul_seq(a, b)(i).is_close(a * limit(b), eps)","proof":["(a * b(i) - a * limit(b)).abs < eps = (a * b(i)).is_close(a * limit(b), eps)","mul_seq(a, b, i) = a * b(i)"]}
{"goal":"tail_bound(mul_seq(a, b), a * limit(b), n, eps)","proof":["let s0: (Nat -> Real, Real, Nat, Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat, x3: Real, x4: Nat) { not tail_bound(x0, x1, x2, x3) or not x2 <= x4 or x0(x4).is_close(x1, x3) } and forall(x5: Nat, x6: Nat -> Real, x7: Real, x8: Real) { x5 <= s0(x6, x7, x5, x8) or tail_bound(x6, x7, x5, x8) } and forall(x9: Nat -> Real, x10: Real, x11: Nat, x12: Real) { not x9(s0(x9, x10, x11, x12)).is_close(x10, x12) or tail_bound(x9, x10, x11, x12) } }","not n <= s0(mul_seq(a, b), a * limit(b), n, eps) or mul_seq(a, b, s0(mul_seq(a, b), a * limit(b), n, eps)).is_close(a * limit(b), eps)","not mul_seq(a, b, s0(mul_seq(a, b), a * limit(b), n, eps)).is_close(a * limit(b), eps) or tail_bound(mul_seq(a, b), a * limit(b), n, eps)","n <= s0(mul_seq(a, b), a * limit(b), n, eps) or tail_bound(mul_seq(a, b), a * limit(b), n, eps)","n <= s0(mul_seq(a, b), a * limit(b), n, eps)","not mul_seq(a, b, s0(mul_seq(a, b), a * limit(b), n, eps)).is_close(a * limit(b), eps)","mul_seq(a, b, s0(mul_seq(a, b), a * limit(b), n, eps)).is_close(a * limit(b), eps)"]}
{"goal":"mul_seq_converges_to","proof":["let (s0: (Nat -> Real, Real, Real) -> Nat, s1: (Nat -> Real, Real) -> Real) satisfy { forall(x0: Real, x1: Nat -> Real, x2: Real) { not x0.is_positive or not converges_to(x1, x2) or tail_bound(x1, x2, s0(x1, x2, x0), x0) } and forall(x3: Nat -> Real, x4: Real) { s1(x3, x4).is_positive or converges_to(x3, x4) } and forall(x5: Nat -> Real, x6: Real, x7: Nat) { not tail_bound(x5, x6, x7, s1(x5, x6)) or converges_to(x5, x6) } }","let s2: Real -> Nat satisfy { forall(x8: Real) { not x8.is_positive or tail_bound(mul_seq(a, b), a * limit(b), s2(x8), x8) } }","not s1(mul_seq(a, b), a * limit(b)).is_positive or tail_bound(mul_seq(a, b), a * limit(b), s2(s1(mul_seq(a, b), a * limit(b))), s1(mul_seq(a, b), a * limit(b)))","not tail_bound(mul_seq(a, b), a * limit(b), s2(s1(mul_seq(a, b), a * limit(b))), s1(mul_seq(a, b), a * limit(b))) or converges_to(mul_seq(a, b), a * limit(b))","s1(mul_seq(a, b), a * limit(b)).is_positive or converges_to(mul_seq(a, b), a * limit(b))","s1(mul_seq(a, b), a * limit(b)).is_positive","not tail_bound(mul_seq(a, b), a * limit(b), s2(s1(mul_seq(a, b), a * limit(b))), s1(mul_seq(a, b), a * limit(b)))"]}
{"goal":"mul_seq_one","proof":["let s0: Nat satisfy { mul_seq(1, a, s0) != a(s0) }","mul_seq(1, a, s0) = 1 * a(s0)","1 * a(s0) != a(s0)","1 * a(s0) = a(s0)"]}
{"goal":"converges(mul_seq(-1, mul_seq(-1, a)))","proof":["not converges(mul_seq(-1, a)) or converges_to(mul_seq(-1, mul_seq(-1, a)), -1 * limit(mul_seq(-1, a)))","not converges_to(mul_seq(-1, mul_seq(-1, a)), -1 * limit(mul_seq(-1, a))) or converges(mul_seq(-1, mul_seq(-1, a)))","not converges_to(mul_seq(-1, mul_seq(-1, a)), -1 * limit(mul_seq(-1, a)))"]}
{"goal":"mul_seq(-1, mul_seq(-1, a)) = mul_seq(-1 * -1, a)","proof":["let s0: Nat satisfy { mul_seq(-1, mul_seq(-1, a), s0) != mul_seq(-1 * -1, a, s0) }","-1 * -1 * a(s0) = -1 * (-1 * a(s0))","mul_seq(-1 * -1, a, s0) = -1 * -1 * a(s0)","mul_seq(-1, a, s0) = -1 * a(s0)","mul_seq(-1, mul_seq(-1, a), s0) = -1 * mul_seq(-1, a, s0)"]}
{"goal":"converges(mul_seq(-1 * -1, a))","proof":[]}
{"goal":"-1 * -1 = 1","proof":["-1 * -1 = --1","--1 != 1","--1 = 1"]}
{"goal":"converges(mul_seq(1, a))","proof":["not converges(mul_seq(-1 * -1, a))"]}
{"goal":"mul_seq(1, a) = a","proof":["let s0: Nat satisfy { mul_seq(1, a, s0) != a(s0) }","mul_seq(1, a, s0) = a(s0)"]}
{"goal":"mul_seq_neg_one_converges_converse","proof":["not converges(mul_seq(1, a))"]}
{"goal":"mul_seq_comm","proof":["let s0: Nat satisfy { mul_seq(b, mul_seq(a, c), s0) != mul_seq(a, mul_seq(b, c), s0) }","a * (b * c(s0)) = a * b * c(s0)","b * (a * c(s0)) = b * a * c(s0)","mul_seq(a, c, s0) = a * c(s0)","mul_seq(a, mul_seq(b, c), s0) = a * mul_seq(b, c, s0)","mul_seq(b, c, s0) = b * c(s0)","mul_seq(b, mul_seq(a, c), s0) = b * mul_seq(a, c, s0)","b * a = a * b"]}
{"goal":"mul_seq_combine","proof":["let s0: Nat satisfy { mul_seq(a, mul_seq(b, c), s0) != mul_seq(a * b, c, s0) }","a * (b * c(s0)) = a * b * c(s0)","mul_seq(a * b, c, s0) = a * b * c(s0)","mul_seq(a, mul_seq(b, c), s0) = a * mul_seq(b, c, s0)","mul_seq(b, c, s0) = b * c(s0)"]}
{"goal":"converges_mul_seq","proof":["not converges(b) or converges_to(mul_seq(a, b), a * limit(b))","not converges_to(mul_seq(a, b), a * limit(b)) or converges(mul_seq(a, b))","not converges_to(mul_seq(a, b), a * limit(b))"]}
{"goal":"partial_zero","proof":["sum[Real](map[Nat, Real](Nat.0.range, a)) = partial[Real](a, Nat.0)","List.nil<Nat> != List.nil<Nat> or map[Nat, Real](List.nil<Nat>, a) = List.nil[Real]","sum[Real](map[Nat, Real](Nat.0.range, a)) != 0","List.nil[Real] != List.nil[Real] or sum[Real](List.nil[Real]) = 0","Nat.0 != Nat.0 or Nat.0.range = List.nil<Nat>","Nat.0.range = List.nil<Nat>","sum[Real](List.nil[Real]) = 0","sum[Real](map[Nat, Real](List.nil<Nat>, a)) != 0","map[Nat, Real](List.nil<Nat>, a) = List.nil[Real]"]}
{"goal":"add_seq(partial[Real](a), partial[Real](b))(Nat.0) = 0 + 0","proof":["partial[Real](a, Nat.0) + partial[Real](b, Nat.0) = add_seq(partial[Real](a), partial[Real](b), Nat.0)","partial[Real](a, Nat.0) = 0","partial[Real](b, Nat.0) = 0"]}
{"goal":"add_seq(partial[Real](a), partial[Real](b))(Nat.0) = 0","proof":["add_seq(partial[Real](a), partial[Real](b), Nat.0) != 0 + 0 or add_seq(partial[Real](a), partial[Real](b), Nat.0) - 0 = 0","add_seq(partial[Real](a), partial[Real](b), Nat.0) - 0 != 0 or add_seq(partial[Real](a), partial[Real](b), Nat.0) = 0","add_seq(partial[Real](a), partial[Real](b), Nat.0) - 0 = 0","add_seq(partial[Real](a), partial[Real](b), Nat.0) - 0 != 0"]}
{"goal":"p(Nat.0)","proof":["add_seq(partial[Real](a), partial[Real](b), Nat.0) != partial[Real](add_seq(a, b), Nat.0) or p(Nat.0)","partial[Real](add_seq(a, b), Nat.0) = 0","add_seq(partial[Real](a), partial[Real](b), Nat.0) != partial[Real](add_seq(a, b), Nat.0)"]}
{"goal":"partial[Real](add_seq(a, b), n) = add_seq(partial[Real](a), partial[Real](b))(n)","proof":["not p(n) or add_seq(partial[Real](a), partial[Real](b), n) = partial[Real](add_seq(a, b), n)"]}
{"goal":"partial[Real](add_seq(a, b), n.suc) = partial[Real](add_seq(a, b), n) + add_seq(a, b)(n)","proof":["partial[Real](add_seq(a, b), n) + add_seq(a, b, n) = partial[Real](add_seq(a, b), n.suc)"]}
{"goal":"partial[Real](add_seq(a, b), n.suc) = add_seq(partial[Real](a), partial[Real](b))(n) + (a(n) + b(n))","proof":["partial[Real](add_seq(a, b), n) + (a(n) + b(n)) != partial[Real](add_seq(a, b), n.suc)","a(n) + b(n) = add_seq(a, b, n)"]}
{"goal":"partial[Real](a, n.suc) = partial[Real](a, n) + a(n)","proof":["partial[Real](a, n) + a(n) = partial[Real](a, n.suc)"]}
{"goal":"partial[Real](b, n.suc) = partial[Real](b, n) + b(n)","proof":["partial[Real](b, n) + b(n) = partial[Real](b, n.suc)"]}
{"goal":"add_seq(partial[Real](a), partial[Real](b))(n.suc) = partial[Real](a)(n.suc) + partial[Real](b)(n.suc)","proof":["partial[Real](a, n.suc) + partial[Real](b, n.suc) = add_seq(partial[Real](a), partial[Real](b), n.suc)"]}
{"goal":"add_seq(partial[Real](a), partial[Real](b))(n.suc) = partial[Real](a, n) + a(n) + (partial[Real](b, n) + b(n))","proof":[]}
{"goal":"partial[Real](a, n) + a(n) + (partial[Real](b, n) + b(n)) = partial[Real](a, n) + partial[Real](b, n) + (a(n) + b(n))","proof":["a(n) + (partial[Real](a, n) + partial[Real](b, n)) = a(n) + partial[Real](a, n) + partial[Real](b, n)","partial[Real](a, n) + a(n) + (partial[Real](b, n) + b(n)) = partial[Real](a, n) + a(n) + partial[Real](b, n) + b(n)","partial[Real](a, n) + partial[Real](b, n) + (a(n) + b(n)) = partial[Real](a, n) + partial[Real](b, n) + a(n) + b(n)","a(n) + (partial[Real](a, n) + partial[Real](b, n)) = partial[Real](a, n) + partial[Real](b, n) + a(n)","b(n) + (partial[Real](a, n) + a(n) + partial[Real](b, n)) = partial[Real](a, n) + a(n) + partial[Real](b, n) + b(n)","b(n) + (partial[Real](a, n) + partial[Real](b, n) + a(n)) = partial[Real](a, n) + partial[Real](b, n) + a(n) + b(n)","partial[Real](a, n) + a(n) = a(n) + partial[Real](a, n)"]}
{"goal":"partial[Real](a, n) + partial[Real](b, n) + (a(n) + b(n)) = add_seq(partial[Real](a), partial[Real](b))(n) + (a(n) + b(n))","proof":["partial[Real](a, n) + partial[Real](b, n) != add_seq(partial[Real](a), partial[Real](b), n)","partial[Real](a, n) + partial[Real](b, n) = add_seq(partial[Real](a), partial[Real](b), n)"]}
{"goal":"partial[Real](add_seq(a, b), n.suc) = add_seq(partial[Real](a), partial[Real](b))(n.suc)","proof":[]}
{"goal":"p(n.suc)","proof":["add_seq(partial[Real](a), partial[Real](b), n.suc) != partial[Real](add_seq(a, b), n.suc) or p(n.suc)"]}
{"goal":"partial_add_seq_comm","proof":["let s0: Nat satisfy { add_seq(partial[Real](a), partial[Real](b), s0) != partial[Real](add_seq(a, b), s0) }","let s1: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(Nat.0) or x0(s1(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s1(x2).suc) or not x2(Nat.0) or x2(x3) } }","not p(s1(p)) or p(s1(p).suc)","not p(s0) or add_seq(partial[Real](a), partial[Real](b), s0) = partial[Real](add_seq(a, b), s0)","not p(s0)","not p(s1(p).suc) or not p(Nat.0) or p(s0)","not p(Nat.0) or p(s1(p)) or p(s0)","p(s1(p)) or p(s0)","p(s1(p))","not p(s1(p).suc)","p(s1(p).suc)"]}
{"goal":"partial[Real](mul_seq(a, b), Nat.0) = 0","proof":["partial[Real](mul_seq(a, b), Nat.0) = 0"]}
{"goal":"mul_seq(a, partial[Real](b))(Nat.0) = a * partial[Real](b)(Nat.0)","proof":["mul_seq(a, partial[Real](b), Nat.0) = a * partial[Real](b, Nat.0)"]}
{"goal":"partial[Real](b, Nat.0) = 0","proof":["partial[Real](b, Nat.0) = 0"]}
{"goal":"a * 0 = 0","proof":["a * 0 = 0"]}
{"goal":"p(Nat.0)","proof":["partial[Real](mul_seq(a, b), Nat.0) != mul_seq(a, partial[Real](b), Nat.0) or p(Nat.0)","partial[Real](b, Nat.0) = 0","a * 0 = 0","mul_seq(a, partial[Real](b), Nat.0) = a * 0","mul_seq(a, partial[Real](b), Nat.0) = 0","partial[Real](mul_seq(a, b), Nat.0) != mul_seq(a, partial[Real](b), Nat.0)","partial[Real](mul_seq(a, b), Nat.0) = mul_seq(a, partial[Real](b), Nat.0)"]}
{"goal":"partial[Real](mul_seq(a, b), n) = mul_seq(a, partial[Real](b))(n)","proof":["not p(n) or partial[Real](mul_seq(a, b), n) = mul_seq(a, partial[Real](b), n)"]}
{"goal":"partial[Real](mul_seq(a, b), n.suc) = partial[Real](mul_seq(a, b), n) + mul_seq(a, b)(n)","proof":["partial[Real](mul_seq(a, b), n) + mul_seq(a, b, n) = partial[Real](mul_seq(a, b), n.suc)"]}
{"goal":"partial[Real](mul_seq(a, b), n.suc) = mul_seq(a, partial[Real](b))(n) + mul_seq(a, b)(n)","proof":["partial[Real](mul_seq(a, b), n) + mul_seq(a, b, n) != partial[Real](mul_seq(a, b), n.suc)"]}
{"goal":"mul_seq(a, partial[Real](b))(n) = a * partial[Real](b)(n)","proof":["mul_seq(a, partial[Real](b), n) = a * partial[Real](b, n)"]}
{"goal":"mul_seq(a, b)(n) = a * b(n)","proof":["mul_seq(a, b, n) = a * b(n)"]}
{"goal":"partial[Real](mul_seq(a, b), n.suc) = a * partial[Real](b)(n) + a * b(n)","proof":[]}
{"goal":"partial[Real](mul_seq(a, b), n.suc) = a * (partial[Real](b)(n) + b(n))","proof":["a * partial[Real](b, n) + a * b(n) = a * (partial[Real](b, n) + b(n))"]}
{"goal":"partial[Real](b, n.suc) = partial[Real](b, n) + b(n)","proof":["partial[Real](b, n) + b(n) = partial[Real](b, n.suc)"]}
{"goal":"a * (partial[Real](b)(n) + b(n)) = a * partial[Real](b)(n.suc)","proof":["partial[Real](b, n) + b(n) != partial[Real](b, n.suc)"]}
{"goal":"partial[Real](mul_seq(a, b), n.suc) = a * partial[Real](b)(n.suc)","proof":["a * (partial[Real](b, n) + b(n)) != partial[Real](mul_seq(a, b), n.suc)"]}
{"goal":"partial[Real](mul_seq(a, b), n.suc) = mul_seq(a, partial[Real](b))(n.suc)","proof":["mul_seq(a, partial[Real](b), n.suc) != a * partial[Real](b, n.suc)","mul_seq(a, partial[Real](b), n.suc) = a * partial[Real](b, n.suc)"]}
{"goal":"p(n.suc)","proof":["partial[Real](mul_seq(a, b), n.suc) != mul_seq(a, partial[Real](b), n.suc) or p(n.suc)"]}
{"goal":"partial_mul_seq_comm","proof":["let s0: Nat satisfy { partial[Real](mul_seq(a, b), s0) != mul_seq(a, partial[Real](b), s0) }","let s1: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(Nat.0) or x0(s1(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s1(x2).suc) or not x2(Nat.0) or x2(x3) } }","not p(s1(p)) or p(s1(p).suc)","not p(s0) or partial[Real](mul_seq(a, b), s0) = mul_seq(a, partial[Real](b), s0)","not p(s0)","not p(s1(p).suc) or not p(Nat.0) or p(s0)","not p(Nat.0) or p(s1(p)) or p(s0)","p(s1(p)) or p(s0)","p(s1(p))","not p(s1(p).suc)","p(s1(p).suc)"]}
{"goal":"tail_zero","proof":["let s0: Nat satisfy { tail<T>(a, Nat.0, s0) != a(s0) }","-lib(int.int_base).Int.from_nat(s0) != lib(int.int_base).sub_nat(Nat.0, s0) or Nat.0 + s0 = s0","a(Nat.0 + s0) = tail<T>(a, Nat.0, s0)","-lib(int.int_base).Int.from_nat(s0) = lib(int.int_base).sub_nat(Nat.0, s0)","a(Nat.0 + s0) != a(s0)","Nat.0 + s0 != s0"]}
{"goal":"partial[Real](a, m + Nat.0) = partial[Real](a, m)","proof":["m + Nat.0 != m","Nat.0 != Nat.0 or m + Nat.0 = m"]}
{"goal":"partial[Real](tail[Real](a, m), Nat.0) = 0","proof":["partial[Real](tail[Real](a, m), Nat.0) = 0"]}
{"goal":"partial[Real](a, m) + 0 = partial[Real](a, m)","proof":["partial[Real](a, m) + 0 = 0 + partial[Real](a, m)","0 + partial[Real](a, m) != partial[Real](a, m)","0 + partial[Real](a, m) - partial[Real](a, m) != 0 or 0 + partial[Real](a, m) = partial[Real](a, m)","0 + partial[Real](a, m) - partial[Real](a, m) = 0"]}
{"goal":"p(Nat.0)","proof":["partial[Real](a, m) + partial[Real](tail[Real](a, m), Nat.0) != partial[Real](a, m + Nat.0) or p(Nat.0)","partial[Real](a, m) + partial[Real](tail[Real](a, m), Nat.0) != partial[Real](a, m + Nat.0)"]}
{"goal":"partial[Real](a, m + k) = partial[Real](a, m) + partial[Real](tail[Real](a, m), k)","proof":["not p(k) or partial[Real](a, m) + partial[Real](tail[Real](a, m), k) = partial[Real](a, m + k)"]}
{"goal":"m + k.suc = (m + k).suc","proof":["k.suc != k.suc or m + k.suc = (m + k).suc"]}
{"goal":"partial[Real](a, m + k.suc) = partial[Real](a, (m + k).suc)","proof":["m + k.suc != (m + k).suc"]}
{"goal":"partial[Real](a, (m + k).suc) = partial[Real](a, m + k) + a(m + k)","proof":["partial[Real](a, m + k) + a(m + k) = partial[Real](a, (m + k).suc)"]}
{"goal":"partial[Real](a, m + k) + a(m + k) = partial[Real](a, m) + partial[Real](tail[Real](a, m), k) + a(m + k)","proof":["partial[Real](a, m) + partial[Real](tail[Real](a, m), k) != partial[Real](a, m + k)"]}
{"goal":"partial[Real](tail[Real](a, m), k.suc) = partial[Real](tail[Real](a, m), k) + tail[Real](a, m)(k)","proof":["partial[Real](tail[Real](a, m), k) + tail[Real](a, m, k) = partial[Real](tail[Real](a, m), k.suc)"]}
{"goal":"tail[Real](a, m)(k) = a(m + k)","proof":["tail[Real](a, m, k) = a(m + k)"]}
{"goal":"partial[Real](tail[Real](a, m), k.suc) = partial[Real](tail[Real](a, m), k) + a(m + k)","proof":["partial[Real](tail[Real](a, m), k) + tail[Real](a, m, k) != partial[Real](tail[Real](a, m), k.suc)"]}
{"goal":"partial[Real](a, m) + partial[Real](tail[Real](a, m), k.suc) = partial[Real](a, m) + (partial[Real](tail[Real](a, m), k) + a(m + k))","proof":["partial[Real](tail[Real](a, m), k) + a(m + k) != partial[Real](tail[Real](a, m), k.suc)"]}
{"goal":"partial[Real](a, m) + (partial[Real](tail[Real](a, m), k) + a(m + k)) = partial[Real](a, m) + partial[Real](tail[Real](a, m), k) + a(m + k)","proof":["partial[Real](a, m) + (partial[Real](tail[Real](a, m), k) + a(m + k)) = partial[Real](a, m) + partial[Real](tail[Real](a, m), k) + a(m + k)"]}
{"goal":"partial[Real](a, m + k.suc) = partial[Real](a, m) + partial[Real](tail[Real](a, m), k.suc)","proof":[]}
{"goal":"p(k.suc)","proof":["partial[Real](a, m) + partial[Real](tail[Real](a, m), k.suc) != partial[Real](a, m + k.suc) or p(k.suc)"]}
{"goal":"p(n)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(Nat.0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(Nat.0) or x2(x3) } }","not p(s0(p)) or p(s0(p).suc)","not p(s0(p).suc) or not p(Nat.0) or p(n)","not p(s0(p).suc)","not p(Nat.0) or p(s0(p)) or p(n)","not p(s0(p))","p(s0(p))"]}
{"goal":"partial_tail","proof":["not p(n) or partial[Real](a, m) + partial[Real](tail[Real](a, m), n) = partial[Real](a, m + n)"]}
{"goal":"partial_tail_sub","proof":["partial[Real](a, m) + partial[Real](tail[Real](a, m), n) = partial[Real](a, m + n)","partial[Real](tail[Real](a, m), n) + partial[Real](a, m) != partial[Real](a, m + n) or partial[Real](a, m + n) - partial[Real](a, m) = partial[Real](tail[Real](a, m), n)","partial[Real](tail[Real](a, m), n) + partial[Real](a, m) = partial[Real](a, m) + partial[Real](tail[Real](a, m), n)","partial[Real](tail[Real](a, m), n) + partial[Real](a, m) != partial[Real](a, m + n)"]}
{"goal":"const_seq(a) = constant[Nat, Real](a)","proof":["let s0: Nat satisfy { const_seq(a, s0) != constant(a, s0) }","const_seq(a, s0) = constant(a, s0)"]}
{"goal":"const_seq_n","proof":["const_seq(a, n) = constant(a, n)","constant(a, n) != a","constant(a, n) = a"]}
{"goal":"tail[Real](partial[Real](a), n)(i) = partial[Real](tail[Real](a, n))(i) + partial[Real](a, n)","proof":["partial[Real](a, n) + partial[Real](tail[Real](a, n), i) = partial[Real](a, n + i)","tail[Real](partial[Real](a), n, i) = partial[Real](a, n + i)","partial[Real](tail[Real](a, n), i) + partial[Real](a, n) != partial[Real](a, n + i)","partial[Real](tail[Real](a, n), i) + partial[Real](a, n) = partial[Real](a, n) + partial[Real](tail[Real](a, n), i)"]}
{"goal":"tail[Real](partial[Real](a), n)(i) = partial[Real](tail[Real](a, n))(i) + const_seq(partial[Real](a, n))(i)","proof":["const_seq(partial[Real](a, n), i) = partial[Real](a, n)"]}
{"goal":"tail[Real](partial[Real](a), n)(i) = add_seq(partial[Real](tail[Real](a, n)), const_seq(partial[Real](a, n)))(i)","proof":["partial[Real](tail[Real](a, n), i) + const_seq(partial[Real](a, n), i) = add_seq(partial[Real](tail[Real](a, n)), const_seq(partial[Real](a, n)), i)"]}
{"goal":"tail_partial","proof":["let s0: Nat satisfy { add_seq(partial[Real](tail[Real](a, n)), const_seq(partial[Real](a, n)), s0) != tail[Real](partial[Real](a), n, s0) }","add_seq(partial[Real](tail[Real](a, n)), const_seq(partial[Real](a, n)), s0) = tail[Real](partial[Real](a), n, s0)"]}
{"goal":"partial_tail_rewrite","proof":["let s0: Nat satisfy { add_seq(tail[Real](partial[Real](a), n), const_seq(-partial[Real](a, n)), s0) != partial[Real](tail[Real](a, n), s0) }","partial[Real](a, n + s0) - partial[Real](a, n) = partial[Real](tail[Real](a, n), s0)","tail[Real](partial[Real](a), n, s0) + const_seq(-partial[Real](a, n), s0) = add_seq(tail[Real](partial[Real](a), n), const_seq(-partial[Real](a, n)), s0)","tail[Real](partial[Real](a), n, s0) = partial[Real](a, n + s0)","partial[Real](a, n + s0) + -partial[Real](a, n) = partial[Real](a, n + s0) - partial[Real](a, n)","const_seq(-partial[Real](a, n), s0) = -partial[Real](a, n)"]}
{"goal":"converges_to(a, limit(a))","proof":["not converges(a) or converges_to(a, limit(a))"]}
{"goal":"exists(k0: Nat) { tail_bound(a, limit(a), k0, eps) }","proof":["let (s0: (Nat -> Real, Real, Real) -> Nat, s1: (Nat -> Real, Real) -> Real) satisfy { forall(x0: Real, x1: Nat -> Real, x2: Real) { not x0.is_positive or not converges_to(x1, x2) or tail_bound(x1, x2, s0(x1, x2, x0), x0) } and forall(x3: Nat -> Real, x4: Real) { s1(x3, x4).is_positive or converges_to(x3, x4) } and forall(x5: Nat -> Real, x6: Real, x7: Nat) { not tail_bound(x5, x6, x7, s1(x5, x6)) or converges_to(x5, x6) } }","not tail_bound(a, limit(a), s0(a, limit(a), eps), eps)","not eps.is_positive or not converges_to(a, limit(a)) or tail_bound(a, limit(a), s0(a, limit(a), eps), eps)"]}
{"goal":"exists(k0: Nat) { n <= k0 and n1 <= k0 }","proof":["let s0: Nat satisfy { true }","let s1: (Nat, Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat, x2: Nat) { x0 <= s1(x0, x1, x2) } and forall(x3: Nat, x4: Nat, x5: Nat) { x3 <= s1(x4, x3, x5) } and forall(x6: Nat, x7: Nat, x8: Nat) { x6 <= s1(x7, x8, x6) } }","not n <= s1(n, s0, n1) or not n1 <= s1(n, s0, n1)","n1 <= s1(n, s0, n1)","n <= s1(n, s0, n1)","not n1 <= s1(n, s0, n1)"]}
{"goal":"tail_bound(a, limit(a), n2, eps)","proof":["let s0: (Nat -> Real, Real, Nat, Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat, x3: Real, x4: Nat) { not tail_bound(x0, x1, x2, x3) or not x2 <= x4 or x0(x4).is_close(x1, x3) } and forall(x5: Nat, x6: Nat -> Real, x7: Real, x8: Real) { x5 <= s0(x6, x7, x5, x8) or tail_bound(x6, x7, x5, x8) } and forall(x9: Nat -> Real, x10: Real, x11: Nat, x12: Real) { not x9(s0(x9, x10, x11, x12)).is_close(x10, x12) or tail_bound(x9, x10, x11, x12) } }","not a(s0(a, limit(a), n2, eps)).is_close(limit(a), eps) or tail_bound(a, limit(a), n2, eps)","not tail_bound(a, limit(a), n1, eps) or not n1 <= s0(a, limit(a), n2, eps) or a(s0(a, limit(a), n2, eps)).is_close(limit(a), eps)","n2 <= s0(a, limit(a), n2, eps) or tail_bound(a, limit(a), n2, eps)","not n1 <= n2 or not n2 <= s0(a, limit(a), n2, eps) or n1 <= s0(a, limit(a), n2, eps)","n2 <= s0(a, limit(a), n2, eps)","not a(s0(a, limit(a), n2, eps)).is_close(limit(a), eps)","not n2 <= s0(a, limit(a), n2, eps) or n1 <= s0(a, limit(a), n2, eps)","not n1 <= s0(a, limit(a), n2, eps) or a(s0(a, limit(a), n2, eps)).is_close(limit(a), eps)","n1 <= s0(a, limit(a), n2, eps)","not n1 <= s0(a, limit(a), n2, eps)"]}
{"goal":"n2 <= n + i","proof":["not n2 <= i or not i <= n + i or n2 <= n + i","i + n != i + n or i <= i + n","i + n = n + i","not i <= n + i or not n2 <= i","not i <= n + i","i <= i + n"]}
{"goal":"a(n + i).is_close(limit(a), eps)","proof":["not tail_bound(a, limit(a), n2, eps) or not n2 <= n + i or a(n + i).is_close(limit(a), eps)","not tail_bound(a, limit(a), n2, eps) or not n2 <= n + i"]}
{"goal":"tail[Real](a, n)(i).is_close(limit(a), eps)","proof":["tail[Real](a, n, i) = a(n + i)"]}
{"goal":"tail_bound(tail[Real](a, n), limit(a), n2, eps)","proof":["let s0: (Nat -> Real, Real, Nat, Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat, x3: Real, x4: Nat) { not tail_bound(x0, x1, x2, x3) or not x2 <= x4 or x0(x4).is_close(x1, x3) } and forall(x5: Nat, x6: Nat -> Real, x7: Real, x8: Real) { x5 <= s0(x6, x7, x5, x8) or tail_bound(x6, x7, x5, x8) } and forall(x9: Nat -> Real, x10: Real, x11: Nat, x12: Real) { not x9(s0(x9, x10, x11, x12)).is_close(x10, x12) or tail_bound(x9, x10, x11, x12) } }","not n2 <= s0(tail[Real](a, n), limit(a), n2, eps) or tail[Real](a, n, s0(tail[Real](a, n), limit(a), n2, eps)).is_close(limit(a), eps)","not tail[Real](a, n, s0(tail[Real](a, n), limit(a), n2, eps)).is_close(limit(a), eps) or tail_bound(tail[Real](a, n), limit(a), n2, eps)","n2 <= s0(tail[Real](a, n), limit(a), n2, eps) or tail_bound(tail[Real](a, n), limit(a), n2, eps)","n2 <= s0(tail[Real](a, n), limit(a), n2, eps)","not tail[Real](a, n, s0(tail[Real](a, n), limit(a), n2, eps)).is_close(limit(a), eps)","tail[Real](a, n, s0(tail[Real](a, n), limit(a), n2, eps)).is_close(limit(a), eps)"]}
{"goal":"converges_to(tail[Real](a, n), limit(a))","proof":["let (s0: (Nat -> Real, Real, Real) -> Nat, s1: (Nat -> Real, Real) -> Real) satisfy { forall(x0: Real, x1: Nat -> Real, x2: Real) { not x0.is_positive or not converges_to(x1, x2) or tail_bound(x1, x2, s0(x1, x2, x0), x0) } and forall(x3: Nat -> Real, x4: Real) { s1(x3, x4).is_positive or converges_to(x3, x4) } and forall(x5: Nat -> Real, x6: Real, x7: Nat) { not tail_bound(x5, x6, x7, s1(x5, x6)) or converges_to(x5, x6) } }","let s2: Real -> Nat satisfy { forall(x8: Real) { not x8.is_positive or tail_bound(tail[Real](a, n), limit(a), s2(x8), x8) } }","not s1(tail[Real](a, n), limit(a)).is_positive or tail_bound(tail[Real](a, n), limit(a), s2(s1(tail[Real](a, n), limit(a))), s1(tail[Real](a, n), limit(a)))","not tail_bound(tail[Real](a, n), limit(a), s2(s1(tail[Real](a, n), limit(a))), s1(tail[Real](a, n), limit(a))) or converges_to(tail[Real](a, n), limit(a))","s1(tail[Real](a, n), limit(a)).is_positive or converges_to(tail[Real](a, n), limit(a))","s1(tail[Real](a, n), limit(a)).is_positive","not tail_bound(tail[Real](a, n), limit(a), s2(s1(tail[Real](a, n), limit(a))), s1(tail[Real](a, n), limit(a)))"]}
{"goal":"tail_converges_to","proof":[]}
{"goal":"converges_to(tail[Real](a, n), limit(tail[Real](a, n)))","proof":["not converges(tail[Real](a, n)) or converges_to(tail[Real](a, n), limit(tail[Real](a, n)))"]}
{"goal":"exists(k0: Nat) { tail_bound(tail[Real](a, n), limit(tail[Real](a, n)), k0, eps) }","proof":["let (s0: (Nat -> Real, Real, Real) -> Nat, s1: (Nat -> Real, Real) -> Real) satisfy { forall(x0: Real, x1: Nat -> Real, x2: Real) { not x0.is_positive or not converges_to(x1, x2) or tail_bound(x1, x2, s0(x1, x2, x0), x0) } and forall(x3: Nat -> Real, x4: Real) { s1(x3, x4).is_positive or converges_to(x3, x4) } and forall(x5: Nat -> Real, x6: Real, x7: Nat) { not tail_bound(x5, x6, x7, s1(x5, x6)) or converges_to(x5, x6) } }","not tail_bound(tail[Real](a, n), limit(tail[Real](a, n)), s0(tail[Real](a, n), limit(tail[Real](a, n)), eps), eps)","not eps.is_positive or not converges_to(tail[Real](a, n), limit(tail[Real](a, n))) or tail_bound(tail[Real](a, n), limit(tail[Real](a, n)), s0(tail[Real](a, n), limit(tail[Real](a, n)), eps), eps)"]}
{"goal":"exists(k0: Nat) { n + n1 + k0 = i }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 <= x1 or x0 + s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat, x4: Nat) { x2 + x3 != x4 or x2 <= x4 } }","n + n1 + s0(n + n1, i) != i","not n + n1 <= i or n + n1 + s0(n + n1, i) = i","n + n1 <= i","not n + n1 <= i"]}
{"goal":"tail[Real](a, n)(n1 + d) = a(i)","proof":["n + (n1 + d) = n + n1 + d","tail[Real](a, n, n1 + d) = a(n + (n1 + d))"]}
{"goal":"tail[Real](a, n)(n1 + d).is_close(limit(tail[Real](a, n)), eps)","proof":["not tail_bound(tail[Real](a, n), limit(tail[Real](a, n)), n1, eps) or not n1 <= n1 + d or tail[Real](a, n, n1 + d).is_close(limit(tail[Real](a, n)), eps)","n1 + d != n1 + d or n1 <= n1 + d","n1 <= n1 + d","not n1 <= n1 + d or tail[Real](a, n, n1 + d).is_close(limit(tail[Real](a, n)), eps)"]}
{"goal":"a(i).is_close(limit(tail[Real](a, n)), eps)","proof":["not tail[Real](a, n, n1 + d).is_close(limit(tail[Real](a, n)), eps)"]}
{"goal":"tail_bound(a, limit(tail[Real](a, n)), n2, eps)","proof":["let s0: (Nat -> Real, Real, Nat, Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat, x3: Real, x4: Nat) { not tail_bound(x0, x1, x2, x3) or not x2 <= x4 or x0(x4).is_close(x1, x3) } and forall(x5: Nat, x6: Nat -> Real, x7: Real, x8: Real) { x5 <= s0(x6, x7, x5, x8) or tail_bound(x6, x7, x5, x8) } and forall(x9: Nat -> Real, x10: Real, x11: Nat, x12: Real) { not x9(s0(x9, x10, x11, x12)).is_close(x10, x12) or tail_bound(x9, x10, x11, x12) } }","not n2 <= s0(a, limit(tail[Real](a, n)), n2, eps) or a(s0(a, limit(tail[Real](a, n)), n2, eps)).is_close(limit(tail[Real](a, n)), eps)","not a(s0(a, limit(tail[Real](a, n)), n2, eps)).is_close(limit(tail[Real](a, n)), eps) or tail_bound(a, limit(tail[Real](a, n)), n2, eps)","n2 <= s0(a, limit(tail[Real](a, n)), n2, eps) or tail_bound(a, limit(tail[Real](a, n)), n2, eps)","n2 <= s0(a, limit(tail[Real](a, n)), n2, eps)","not a(s0(a, limit(tail[Real](a, n)), n2, eps)).is_close(limit(tail[Real](a, n)), eps)","a(s0(a, limit(tail[Real](a, n)), n2, eps)).is_close(limit(tail[Real](a, n)), eps)"]}
{"goal":"tail_imp_converges_to","proof":["let (s0: (Nat -> Real, Real, Real) -> Nat, s1: (Nat -> Real, Real) -> Real) satisfy { forall(x0: Real, x1: Nat -> Real, x2: Real) { not x0.is_positive or not converges_to(x1, x2) or tail_bound(x1, x2, s0(x1, x2, x0), x0) } and forall(x3: Nat -> Real, x4: Real) { s1(x3, x4).is_positive or converges_to(x3, x4) } and forall(x5: Nat -> Real, x6: Real, x7: Nat) { not tail_bound(x5, x6, x7, s1(x5, x6)) or converges_to(x5, x6) } }","let s2: Real -> Nat satisfy { forall(x8: Real) { not x8.is_positive or tail_bound(a, limit(tail[Real](a, n)), s2(x8), x8) } }","not s1(a, limit(tail[Real](a, n))).is_positive or tail_bound(a, limit(tail[Real](a, n)), s2(s1(a, limit(tail[Real](a, n)))), s1(a, limit(tail[Real](a, n))))","not tail_bound(a, limit(tail[Real](a, n)), s2(s1(a, limit(tail[Real](a, n)))), s1(a, limit(tail[Real](a, n)))) or converges_to(a, limit(tail[Real](a, n)))","s1(a, limit(tail[Real](a, n))).is_positive or converges_to(a, limit(tail[Real](a, n)))","s1(a, limit(tail[Real](a, n))).is_positive","not tail_bound(a, limit(tail[Real](a, n)), s2(s1(a, limit(tail[Real](a, n)))), s1(a, limit(tail[Real](a, n))))"]}
{"goal":"exists(k0: Nat) { tail_bound(partial[Real](a), limit(partial[Real](a)), k0, eps) }","proof":["let (s0: (Nat -> Real, Real, Real) -> Nat, s1: (Nat -> Real, Real) -> Real) satisfy { forall(x0: Real, x1: Nat -> Real, x2: Real) { not x0.is_positive or not converges_to(x1, x2) or tail_bound(x1, x2, s0(x1, x2, x0), x0) } and forall(x3: Nat -> Real, x4: Real) { s1(x3, x4).is_positive or converges_to(x3, x4) } and forall(x5: Nat -> Real, x6: Real, x7: Nat) { not tail_bound(x5, x6, x7, s1(x5, x6)) or converges_to(x5, x6) } }","not tail_bound(partial[Real](a), limit(partial[Real](a)), s0(partial[Real](a), limit(partial[Real](a)), eps), eps)","not eps.is_positive or not converges_to(partial[Real](a), limit(partial[Real](a))) or tail_bound(partial[Real](a), limit(partial[Real](a)), s0(partial[Real](a), limit(partial[Real](a)), eps), eps)","not converges(partial[Real](a)) or converges_to(partial[Real](a), limit(partial[Real](a)))","not converges_to(partial[Real](a), limit(partial[Real](a)))","converges_to(partial[Real](a), limit(partial[Real](a)))"]}
{"goal":"partial[Real](a)(i).is_close(limit(partial[Real](a)), eps)","proof":["not tail_bound(partial[Real](a), Real.new(limit(partial[Real](a)).gt_rat), n, eps) or not n <= i or partial[Real](a, i).is_close(Real.new(limit(partial[Real](a)).gt_rat), eps)","Real.new(limit(partial[Real](a)).gt_rat) = limit(partial[Real](a))","not partial[Real](a, i).is_close(Real.new(limit(partial[Real](a)).gt_rat), eps)","tail_bound(partial[Real](a), Real.new(limit(partial[Real](a)).gt_rat), n, eps)","not tail_bound(partial[Real](a), Real.new(limit(partial[Real](a)).gt_rat), n, eps) or partial[Real](a, i).is_close(Real.new(limit(partial[Real](a)).gt_rat), eps)"]}
{"goal":"partial[Real](a, k + i).is_close(limit(partial[Real](a)), eps)","proof":["not tail_bound(partial[Real](a), limit(partial[Real](a)), n, eps) or not n <= i + k or partial[Real](a, i + k).is_close(limit(partial[Real](a)), eps)","not n <= i or not i <= i + k or n <= i + k","i + k != i + k or i <= i + k","i + k = k + i","i <= i + k","not partial[Real](a, i + k).is_close(limit(partial[Real](a)), eps)","not i <= i + k or n <= i + k","n <= i + k","not n <= i + k or partial[Real](a, i + k).is_close(limit(partial[Real](a)), eps)"]}
{"goal":"partial[Real](a, k + i).is_close(partial[Real](a, k) + limit(partial[Real](a)) - partial[Real](a, k), eps)","proof":["limit(partial[Real](a)) + partial[Real](a, k) - partial[Real](a, k) = limit(partial[Real](a))","partial[Real](a, k) + limit(partial[Real](a)) = limit(partial[Real](a)) + partial[Real](a, k)","not partial[Real](a, k + i).is_close(limit(partial[Real](a)) + partial[Real](a, k) - partial[Real](a, k), eps)"]}
{"goal":"(partial[Real](a, k + i) - partial[Real](a, k)).is_close(limit(partial[Real](a)) - partial[Real](a, k), eps)","proof":["partial[Real](a, k + i) - (partial[Real](a, k) + (limit(partial[Real](a)) - partial[Real](a, k))) = partial[Real](a, k + i) - partial[Real](a, k) - (limit(partial[Real](a)) - partial[Real](a, k))","limit(partial[Real](a)) + partial[Real](a, k) - partial[Real](a, k) = limit(partial[Real](a)) - partial[Real](a, k) + partial[Real](a, k)","(partial[Real](a, k + i) - limit(partial[Real](a))).abs < eps = partial[Real](a, k + i).is_close(limit(partial[Real](a)), eps)","(partial[Real](a, k + i) - partial[Real](a, k) - target).abs < eps = (partial[Real](a, k + i) - partial[Real](a, k)).is_close(target, eps)","limit(partial[Real](a)) + partial[Real](a, k) - partial[Real](a, k) = limit(partial[Real](a))","partial[Real](a, k) + (limit(partial[Real](a)) - partial[Real](a, k)) = limit(partial[Real](a)) - partial[Real](a, k) + partial[Real](a, k)"]}
{"goal":"(partial[Real](a, k) + partial[Real](tail[Real](a, k), i) - partial[Real](a, k)).is_close(target, eps)","proof":["partial[Real](a, k) + partial[Real](tail[Real](a, k), i) = partial[Real](a, k + i)"]}
{"goal":"partial[Real](tail[Real](a, k), i).is_close(target, eps)","proof":["partial[Real](a, k + i) - partial[Real](a, k) = partial[Real](tail[Real](a, k), i)"]}
{"goal":"tail_bound(partial[Real](tail[Real](a, k)), target, n, eps)","proof":["let s0: (Nat -> Real, Real, Nat, Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat, x3: Real, x4: Nat) { not tail_bound(x0, x1, x2, x3) or not x2 <= x4 or x0(x4).is_close(x1, x3) } and forall(x5: Nat, x6: Nat -> Real, x7: Real, x8: Real) { x5 <= s0(x6, x7, x5, x8) or tail_bound(x6, x7, x5, x8) } and forall(x9: Nat -> Real, x10: Real, x11: Nat, x12: Real) { not x9(s0(x9, x10, x11, x12)).is_close(x10, x12) or tail_bound(x9, x10, x11, x12) } }","not n <= s0(partial[Real](tail[Real](a, k)), target, n, eps) or partial[Real](tail[Real](a, k), s0(partial[Real](tail[Real](a, k)), target, n, eps)).is_close(target, eps)","not partial[Real](tail[Real](a, k), s0(partial[Real](tail[Real](a, k)), target, n, eps)).is_close(target, eps) or tail_bound(partial[Real](tail[Real](a, k)), target, n, eps)","n <= s0(partial[Real](tail[Real](a, k)), target, n, eps) or tail_bound(partial[Real](tail[Real](a, k)), target, n, eps)","n <= s0(partial[Real](tail[Real](a, k)), target, n, eps)","not partial[Real](tail[Real](a, k), s0(partial[Real](tail[Real](a, k)), target, n, eps)).is_close(target, eps)","partial[Real](tail[Real](a, k), s0(partial[Real](tail[Real](a, k)), target, n, eps)).is_close(target, eps)"]}
{"goal":"converges_to(partial[Real](tail[Real](a, k)), target)","proof":["let (s0: (Nat -> Real, Real, Real) -> Nat, s1: (Nat -> Real, Real) -> Real) satisfy { forall(x0: Real, x1: Nat -> Real, x2: Real) { not x0.is_positive or not converges_to(x1, x2) or tail_bound(x1, x2, s0(x1, x2, x0), x0) } and forall(x3: Nat -> Real, x4: Real) { s1(x3, x4).is_positive or converges_to(x3, x4) } and forall(x5: Nat -> Real, x6: Real, x7: Nat) { not tail_bound(x5, x6, x7, s1(x5, x6)) or converges_to(x5, x6) } }","let s2: Real -> Nat satisfy { forall(x8: Real) { not x8.is_positive or tail_bound(partial[Real](tail[Real](a, k)), target, s2(x8), x8) } }","not s1(partial[Real](tail[Real](a, k)), target).is_positive or tail_bound(partial[Real](tail[Real](a, k)), target, s2(s1(partial[Real](tail[Real](a, k)), target)), s1(partial[Real](tail[Real](a, k)), target))","not tail_bound(partial[Real](tail[Real](a, k)), target, s2(s1(partial[Real](tail[Real](a, k)), target)), s1(partial[Real](tail[Real](a, k)), target)) or converges_to(partial[Real](tail[Real](a, k)), target)","s1(partial[Real](tail[Real](a, k)), target).is_positive or converges_to(partial[Real](tail[Real](a, k)), target)","s1(partial[Real](tail[Real](a, k)), target).is_positive","not tail_bound(partial[Real](tail[Real](a, k)), target, s2(s1(partial[Real](tail[Real](a, k)), target)), s1(partial[Real](tail[Real](a, k)), target))"]}
{"goal":"tail_partial_converges","proof":[]}
{"goal":"converges_const_seq","proof":["let (s1: (Nat -> Real, Real) -> Nat, s2: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not s1(x0, x1) <= x2 or not real_seq.eventual_eq(x0, x1) or x1 = x0(x2) } and forall(x3: Nat, x4: Nat -> Real, x5: Real) { x3 <= s2(x4, x5, x3) or real_seq.eventual_eq(x4, x5) } and forall(x6: Nat -> Real, x7: Real, x8: Nat) { x6(s2(x6, x7, x8)) != x7 or real_seq.eventual_eq(x6, x7) } }","let s0: Nat satisfy { true }","const_seq(a, s2(const_seq(a), a, s0)) != a or real_seq.eventual_eq(const_seq(a), a)","not real_seq.eventual_eq(const_seq(a), a) or converges(const_seq(a))","not real_seq.eventual_eq(const_seq(a), a)","const_seq(a, s2(const_seq(a), a, s0)) = a","const_seq(a, s2(const_seq(a), a, s0)) != a"]}
{"goal":"add_seq_converges","proof":["not converges(a) or not converges(b) or converges_to(add_seq(a, b), limit(a) + limit(b))","not converges_to(add_seq(a, b), limit(a) + limit(b)) or converges(add_seq(a, b))","not converges_to(add_seq(a, b), limit(a) + limit(b))"]}
{"goal":"neg_seq_neg_seq","proof":["let s0: Nat satisfy { neg_seq(neg_seq(a), s0) != a(s0) }","mul_seq(-1, a, s0) = neg_seq(a, s0)","mul_seq(-1, neg_seq(a), s0) = neg_seq(neg_seq(a), s0)","mul_seq(-1, a, s0) = -1 * a(s0)","mul_seq(-1, neg_seq(a), s0) = -1 * neg_seq(a, s0)","-1 * neg_seq(a, s0) = -(1 * neg_seq(a, s0))","-1 * a(s0) = -a(s0)","1 * neg_seq(a, s0) = neg_seq(a, s0)","--a(s0) = a(s0)","--neg_seq(a, s0) = neg_seq(a, s0)","--neg_seq(neg_seq(a), s0) = neg_seq(neg_seq(a), s0)","--neg_seq(neg_seq(a), s0) != a(s0)","--neg_seq(neg_seq(a), s0) != --a(s0)","-neg_seq(neg_seq(a), s0) != -a(s0)"]}
{"goal":"neg_seq_lifts","proof":["let s0: Nat satisfy { neg_seq(lift_seq(a), s0) != lift_seq(neg_rat_seq(a), s0) }","mul_seq(-1, lift_seq(a), s0) = neg_seq(lift_seq(a), s0)","mul_seq(-1, lift_seq(a), s0) = -1 * lift_seq(a, s0)","-1 * -lift_seq(neg_rat_seq(a), s0) = --lift_seq(neg_rat_seq(a), s0)","neg_rat_seq(a, s0) = -a(s0)","lift_seq(a, s0) = Real.from_rat(a(s0))","lift_seq(neg_rat_seq(a), s0) = Real.from_rat(neg_rat_seq(a, s0))","-Real.from_rat(a(s0)) = Real.from_rat(-a(s0))","--Real.from_rat(-a(s0)) = Real.from_rat(-a(s0))","--Real.from_rat(a(s0)) = Real.from_rat(a(s0))"]}
{"goal":"add_seq(a, b, i) - b(i) = a(i)","proof":["a(i) + b(i) = add_seq(a, b, i)","a(i) + b(i) != add_seq(a, b, i) or add_seq(a, b, i) - b(i) = a(i)"]}
{"goal":"add_seq(a, b, i) + neg_seq(b, i) = a(i)","proof":["-1 * b(i) = -(1 * b(i))","mul_seq(-1, b, i) = neg_seq(b, i)","mul_seq(-1, b, i) = -1 * b(i)","add_seq(a, b, i) + --neg_seq(b, i) = add_seq(a, b, i) - -neg_seq(b, i)","1 * b(i) = b(i)","--b(i) = b(i)","--neg_seq(b, i) = neg_seq(b, i)"]}
{"goal":"add_seq(add_seq(a, b), neg_seq(b))(i) = a(i)","proof":["add_seq(a, b, i) + neg_seq(b, i) = add_seq(add_seq(a, b), neg_seq(b), i)"]}
{"goal":"neg_seq_cancels","proof":["let s0: Nat satisfy { add_seq(add_seq(a, b), neg_seq(b), s0) != a(s0) }","add_seq(add_seq(a, b), neg_seq(b), s0) = a(s0)"]}
{"goal":"converges_to(mul_seq(-1, a), -1 * limit(a))","proof":["not converges(a) or converges_to(mul_seq(-1, a), -1 * limit(a))"]}
{"goal":"neg_seq(a) = mul_seq(-1, a)","proof":["let s0: Nat satisfy { mul_seq(-1, a, s0) != neg_seq(a, s0) }","mul_seq(-1, a, s0) = neg_seq(a, s0)"]}
{"goal":"converges_to(neg_seq(a), -1 * limit(a))","proof":["not converges_to(mul_seq(-1, a), -1 * limit(a))"]}
{"goal":"neg_seq_converges_to","proof":["-1 * limit(a) = -limit(a)"]}
{"goal":"neg_seq_converges","proof":["not converges(a) or converges_to(neg_seq(a), -limit(a))","not converges_to(neg_seq(a), -limit(a)) or converges(neg_seq(a))","not converges_to(neg_seq(a), -limit(a))"]}
{"goal":"converges(neg_seq(neg_seq(a)))","proof":["not converges(neg_seq(a)) or converges(neg_seq(neg_seq(a)))"]}
{"goal":"neg_seq(neg_seq(a)) = a","proof":["let s0: Nat satisfy { neg_seq(neg_seq(a), s0) != a(s0) }","neg_seq(neg_seq(a), s0) = a(s0)"]}
{"goal":"neg_seq_converges_converse","proof":["not converges(neg_seq(neg_seq(a)))"]}
{"goal":"converges(neg_seq(a))","proof":["not converges(a) or converges(neg_seq(a))"]}
{"goal":"converges(add_seq(add_seq(a, b), neg_seq(a)))","proof":["not converges(add_seq(a, b)) or not converges(neg_seq(a)) or converges(add_seq(add_seq(a, b), neg_seq(a)))"]}
{"goal":"add_seq(a, b) = add_seq(b, a)","proof":["let s0: Nat satisfy { add_seq(b, a, s0) != add_seq(a, b, s0) }","a(s0) + b(s0) = add_seq(a, b, s0)","b(s0) + a(s0) = add_seq(b, a, s0)","b(s0) + a(s0) = a(s0) + b(s0)","b(s0) + a(s0) != add_seq(a, b, s0)"]}
{"goal":"add_seq(add_seq(b, a), neg_seq(a)) = b","proof":["let s0: Nat satisfy { add_seq(add_seq(b, a), neg_seq(a), s0) != b(s0) }","add_seq(add_seq(b, a), neg_seq(a), s0) = b(s0)"]}
{"goal":"add_seq(add_seq(a, b), neg_seq(a)) = b","proof":["let s0: Nat satisfy { add_seq(add_seq(a, b), neg_seq(a), s0) != b(s0) }","add_seq(add_seq(b, a), neg_seq(a), s0) = b(s0)"]}
{"goal":"conv_add_imp_conv_right","proof":["not converges(add_seq(add_seq(a, b), neg_seq(a)))"]}
{"goal":"add_seq(a, b) = add_seq(b, a)","proof":["let s0: Nat satisfy { add_seq(b, a, s0) != add_seq(a, b, s0) }","a(s0) + b(s0) = add_seq(a, b, s0)","b(s0) + a(s0) = add_seq(b, a, s0)","b(s0) + a(s0) = a(s0) + b(s0)","b(s0) + a(s0) != add_seq(a, b, s0)"]}
{"goal":"conv_add_imp_conv_left","proof":["not converges(add_seq(b, a)) or not converges(b) or converges(a)","not converges(add_seq(b, a)) or not converges(b)","converges(add_seq(b, a))","not converges(add_seq(b, a))"]}
{"goal":"partial[Real](tail[Real](a, n)) = add_seq(tail[Real](partial[Real](a), n), const_seq(-partial[Real](a, n)))","proof":["let s0: Nat satisfy { add_seq(tail[Real](partial[Real](a), n), const_seq(-partial[Real](a, n)), s0) != partial[Real](tail[Real](a, n), s0) }","add_seq(tail[Real](partial[Real](a), n), const_seq(-partial[Real](a, n)), s0) = partial[Real](tail[Real](a, n), s0)"]}
{"goal":"converges(add_seq(tail[Real](partial[Real](a), n), const_seq(-partial[Real](a, n))))","proof":[]}
{"goal":"converges(const_seq(-partial[Real](a, n)))","proof":["converges(const_seq(-partial[Real](a, n)))"]}
{"goal":"converges(tail[Real](partial[Real](a), n))","proof":["not converges(add_seq(tail[Real](partial[Real](a), n), const_seq(-partial[Real](a, n)))) or not converges(const_seq(-partial[Real](a, n))) or converges(tail[Real](partial[Real](a), n))"]}
{"goal":"partial_tail_conv_imp_partial_conv","proof":["not converges(tail[Real](partial[Real](a), n)) or converges_to(partial[Real](a), limit(tail[Real](partial[Real](a), n)))","not converges_to(partial[Real](a), limit(tail[Real](partial[Real](a), n))) or converges(partial[Real](a))","not converges_to(partial[Real](a), limit(tail[Real](partial[Real](a), n)))"]}
{"goal":"(a + b).abs = -(a + b)","proof":["not (a + b).is_negative or (a + b).abs = -(a + b)"]}
{"goal":"-(a + b) = -a + -b","proof":["-a + -b = -(a + b)"]}
{"goal":"-b <= b.abs","proof":["(-b).abs = b.abs","not -b <= (-b).abs","-b <= (-b).abs"]}
{"goal":"-a + -b <= -a + b.abs","proof":["not -b <= b.abs or -a + -b <= -a + b.abs"]}
{"goal":"-a <= a.abs","proof":["(-a).abs = a.abs","not -a <= (-a).abs","-a <= (-a).abs"]}
{"goal":"-a + b.abs <= a.abs + b.abs","proof":["not -a <= a.abs or -a + b.abs <= a.abs + b.abs"]}
{"goal":"(a + b).abs <= a.abs + b.abs","proof":["-a + -b = -(a + b)","not (a + b).abs <= -a + b.abs or not -a + b.abs <= a.abs + b.abs or (a + b).abs <= a.abs + b.abs","-(a + b) <= -a + b.abs","not -a + b.abs <= a.abs + b.abs or not (a + b).abs <= -a + b.abs","(a + b).abs <= -a + b.abs","not (a + b).abs <= -a + b.abs"]}
{"goal":"(a + b).abs = a + b","proof":["(a + b).is_negative or (a + b).abs = a + b"]}
{"goal":"b <= b.abs","proof":["b <= b.abs"]}
{"goal":"a + b <= a + b.abs","proof":["not b <= b.abs or a + b <= a + b.abs"]}
{"goal":"a <= a.abs","proof":["a <= a.abs"]}
{"goal":"a + b.abs <= a.abs + b.abs","proof":["not a <= a.abs or a + b.abs <= a.abs + b.abs"]}
{"goal":"(a + b).abs <= a.abs + b.abs","proof":["not (a + b).abs <= a + b.abs or not a + b.abs <= a.abs + b.abs or (a + b).abs <= a.abs + b.abs","not a + b.abs <= a.abs + b.abs or not (a + b).abs <= a + b.abs","(a + b).abs <= a + b.abs","not (a + b).abs <= a + b.abs"]}
{"goal":"triangle_ineq","proof":[]}
{"goal":"sum[Real](List.nil[Real]).abs = 0","proof":["List.nil[Real] != List.nil[Real] or sum[Real](List.nil[Real]) = 0","0.abs = 0 or 0.is_negative","0 != 0 or not 0.is_negative","not 0.is_negative","sum[Real](List.nil[Real]) = 0","0.abs != 0"]}
{"goal":"map[Real, Real](List.nil[Real], Real.abs) = List.nil[Real]","proof":["List.nil[Real] != List.nil[Real] or map[Real, Real](List.nil[Real], Real.abs) = List.nil[Real]"]}
{"goal":"sum[Real](map[Real, Real](List.nil[Real], Real.abs)) = 0","proof":["sum[Real](List.nil[Real]) != 0","List.nil[Real] != List.nil[Real] or sum[Real](List.nil[Real]) = 0"]}
{"goal":"0 <= 0","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Rat, x2: Real) { not x0.gt_rat(x1) or not x0 <= x2 or x2.gt_rat(x1) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not 0.gt_rat(s0(0, 0)) or 0 <= 0","not 0.gt_rat(s0(0, 0))","0.gt_rat(s0(0, 0)) or 0 <= 0"]}
{"goal":"p(List.nil[Real])","proof":["sum[Real](List.nil[Real]).abs <= sum[Real](map[Real, Real](List.nil[Real], Real.abs)) = p(List.nil[Real])"]}
{"goal":"sum[Real](rest).abs <= sum[Real](map[Real, Real](rest, Real.abs))","proof":["sum[Real](rest).abs <= sum[Real](map[Real, Real](rest, Real.abs)) = p(rest)"]}
{"goal":"(head + sum[Real](rest)).abs <= head.abs + sum[Real](rest).abs","proof":["(head + sum[Real](rest)).abs <= head.abs + sum[Real](rest).abs"]}
{"goal":"head.abs + sum[Real](rest).abs <= head.abs + sum[Real](map[Real, Real](rest, Real.abs))","proof":["not sum[Real](rest).abs <= sum[Real](map[Real, Real](rest, Real.abs)) or head.abs + sum[Real](rest).abs <= head.abs + sum[Real](map[Real, Real](rest, Real.abs))"]}
{"goal":"sum[Real](List.cons(head, rest)) = head + sum[Real](rest)","proof":["List.cons(head, rest) != List.cons(head, rest) or head + sum[Real](rest) = sum[Real](List.cons(head, rest))"]}
{"goal":"map[Real, Real](List.cons(head, rest), Real.abs) = List.cons(head.abs, map[Real, Real](rest, Real.abs))","proof":["List.cons(head, rest) != List.cons(head, rest) or List.cons(head.abs, map[Real, Real](rest, Real.abs)) = map[Real, Real](List.cons(head, rest), Real.abs)"]}
{"goal":"map[Real, Real](List.cons(head, rest), Real.abs) = List.cons(head.abs, map[Real, Real](rest, Real.abs))","proof":[]}
{"goal":"sum[Real](map[Real, Real](List.cons(head, rest), Real.abs)) = head.abs + sum[Real](map[Real, Real](rest, Real.abs))","proof":["List.cons(head.abs, map[Real, Real](rest, Real.abs)) != map[Real, Real](List.cons(head, rest), Real.abs) or head.abs + sum[Real](map[Real, Real](rest, Real.abs)) = sum[Real](map[Real, Real](List.cons(head, rest), Real.abs))"]}
{"goal":"p(List.cons(head, rest))","proof":["sum[Real](List.cons(head, rest)).abs <= sum[Real](map[Real, Real](List.cons(head, rest), Real.abs)) = p(List.cons(head, rest))","not (head + sum[Real](rest)).abs <= head.abs + sum[Real](rest).abs or not head.abs + sum[Real](rest).abs <= sum[Real](map[Real, Real](List.cons(head, rest), Real.abs)) or (head + sum[Real](rest)).abs <= sum[Real](map[Real, Real](List.cons(head, rest), Real.abs))","head.abs + sum[Real](rest).abs <= sum[Real](map[Real, Real](List.cons(head, rest), Real.abs))","not sum[Real](List.cons(head, rest)).abs <= sum[Real](map[Real, Real](List.cons(head, rest), Real.abs))","not head.abs + sum[Real](rest).abs <= sum[Real](map[Real, Real](List.cons(head, rest), Real.abs)) or (head + sum[Real](rest)).abs <= sum[Real](map[Real, Real](List.cons(head, rest), Real.abs))","not (head + sum[Real](rest)).abs <= sum[Real](map[Real, Real](List.cons(head, rest), Real.abs))","(head + sum[Real](rest)).abs <= sum[Real](map[Real, Real](List.cons(head, rest), Real.abs))"]}
{"goal":"sum_abs_le_abs_sum","proof":["let (s0: List<Real> -> Bool -> Real, s1: List<Real> -> Bool -> List<Real>) satisfy { forall(x0: List<Real> -> Bool, x1: List<Real>) { not x0(List.nil[Real]) or x0(s1(x0)) or x0(x1) } and forall(x2: List<Real> -> Bool, x3: List<Real>) { not x2(List.cons(s0(x2), s1(x2))) or not x2(List.nil[Real]) or x2(x3) } }","not p(s1(p)) or p(List.cons(s0(p), s1(p)))","sum[Real](items).abs <= sum[Real](map[Real, Real](items, Real.abs)) = p(items)","not p(items)","not p(List.cons(s0(p), s1(p))) or not p(List.nil[Real]) or p(items)","not p(List.nil[Real]) or p(s1(p)) or p(items)","p(s1(p))","not p(List.cons(s0(p), s1(p)))"]}
{"goal":"partial[Real](a, n) = sum[Real](map[Nat, Real](n.range, a))","proof":["sum[Real](map[Nat, Real](n.range, a)) = partial[Real](a, n)"]}
{"goal":"partial[Real](a, m) = sum[Real](map[Nat, Real](m.range, a))","proof":["sum[Real](map[Nat, Real](m.range, a)) = partial[Real](a, m)"]}
{"goal":"m.range + m.until(n) = n.range","proof":["not m <= n or m.range + m.until(n) = n.range"]}
{"goal":"map[Nat, Real](m.range, a) + map[Nat, Real](m.until(n), a) = map[Nat, Real](n.range, a)","proof":["map[Nat, Real](m.range, a) + map[Nat, Real](m.until(n), a) = map[Nat, Real](m.range + m.until(n), a)"]}
{"goal":"sum[Real](map[Nat, Real](n.range, a)) - sum[Real](map[Nat, Real](m.range, a)) = sum[Real](map[Nat, Real](m.until(n), a))","proof":["sum[Real](map[Nat, Real](m.range, a)) + sum[Real](map[Nat, Real](m.until(n), a)) = sum[Real](map[Nat, Real](m.range, a) + map[Nat, Real](m.until(n), a))","sum[Real](map[Nat, Real](m.until(n), a)) + sum[Real](map[Nat, Real](m.range, a)) != sum[Real](map[Nat, Real](n.range, a)) or sum[Real](map[Nat, Real](n.range, a)) - sum[Real](map[Nat, Real](m.range, a)) = sum[Real](map[Nat, Real](m.until(n), a))","sum[Real](map[Nat, Real](m.until(n), a)) + sum[Real](map[Nat, Real](m.range, a)) = sum[Real](map[Nat, Real](m.range, a)) + sum[Real](map[Nat, Real](m.until(n), a))","sum[Real](map[Nat, Real](m.until(n), a)) + sum[Real](map[Nat, Real](m.range, a)) != sum[Real](map[Nat, Real](n.range, a))"]}
{"goal":"diff_partial","proof":[]}
{"goal":"exists(k0: Nat) { cauchy_bound(q, k0, eps) }","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: Nat -> Real -> Real) satisfy { forall(x0: Real, x1: Nat -> Real) { not x0.is_positive or not converges(x1) or cauchy_bound(x1, s0(x1, x0), x0) } and forall(x2: Nat -> Real) { s1(x2).is_positive or converges(x2) } and forall(x3: Nat -> Real, x4: Nat) { not cauchy_bound(x3, x4, s1(x3)) or converges(x3) } }","not cauchy_bound(q, s0(q, eps), eps)","converges(q)","not eps.is_positive or not converges(q) or cauchy_bound(q, s0(q, eps), eps)"]}
{"goal":"q(i).is_close(q(j), eps)","proof":["not cauchy_bound(q, n, eps) or not n <= i or not n <= j or q(i).is_close(q(j), eps)","not cauchy_bound(q, n, eps) or not n <= j or not n <= i"]}
{"goal":"(q(i) - q(j)).abs < eps","proof":["(q(i) - q(j)).abs < eps = q(i).is_close(q(j), eps)"]}
{"goal":"partial[Real](compose[Nat, Real, Real](Real.abs, a), j) - partial[Real](compose[Nat, Real, Real](Real.abs, a), i) = sum[Real](map[Nat, Real](i.until(j), compose[Nat, Real, Real](Real.abs, a)))","proof":["not i <= j or partial[Real](compose[Nat, Real, Real](Real.abs, a), j) - partial[Real](compose[Nat, Real, Real](Real.abs, a), i) = sum[Real](map[Nat, Real](i.until(j), compose[Nat, Real, Real](Real.abs, a)))"]}
{"goal":"q(j) - q(i) = sum[Real](map[Nat, Real](i.until(j), compose[Nat, Real, Real](Real.abs, a)))","proof":["partial[Real](compose[Nat, Real, Real](Real.abs, a), i) = q(i)","partial[Real](compose[Nat, Real, Real](Real.abs, a), j) = q(j)"]}
{"goal":"q(j) - q(i) = sum[Real](map[Real, Real](map[Nat, Real](i.until(j), a), Real.abs))","proof":["map[Nat, Real](i.until(j), compose[Nat, Real, Real](Real.abs, a)) = map[Real, Real](map[Nat, Real](i.until(j), a), Real.abs)"]}
{"goal":"sum[Real](map[Nat, Real](i.until(j), a)).abs <= q(j) - q(i)","proof":["sum[Real](map[Nat, Real](i.until(j), a)).abs <= sum[Real](map[Real, Real](map[Nat, Real](i.until(j), a), Real.abs))"]}
{"goal":"partial[Real](a, j) - partial[Real](a, i) = sum[Real](map[Nat, Real](i.until(j), a))","proof":["not i <= j or partial[Real](a, j) - partial[Real](a, i) = sum[Real](map[Nat, Real](i.until(j), a))"]}
{"goal":"p(j) - p(i) = sum[Real](map[Nat, Real](i.until(j), a))","proof":["partial[Real](a, i) = p(i)","partial[Real](a, j) = p(j)"]}
{"goal":"(p(j) - p(i)).abs <= q(j) - q(i)","proof":["not sum[Real](map[Nat, Real](i.until(j), a)).abs <= q(j) - q(i)"]}
{"goal":"q(j).is_close(q(i), eps)","proof":["not q(i).is_close(q(j), eps) or q(j).is_close(q(i), eps)"]}
{"goal":"(p(j) - p(i)).abs <= (q(j) - q(i)).abs","proof":["not (p(j) - p(i)).abs <= q(j) - q(i) or not q(j) - q(i) <= (q(j) - q(i)).abs or (p(j) - p(i)).abs <= (q(j) - q(i)).abs","q(j) - q(i) <= (q(j) - q(i)).abs","not q(j) - q(i) <= (q(j) - q(i)).abs or not (p(j) - p(i)).abs <= q(j) - q(i)"]}
{"goal":"(p(j) - p(i)).abs < eps","proof":["(q(j) - q(i)).abs < eps = q(j).is_close(q(i), eps)","not (q(j) - q(i)).abs < eps or not (p(j) - p(i)).abs <= (q(j) - q(i)).abs or (p(j) - p(i)).abs < eps","not (p(j) - p(i)).abs <= (q(j) - q(i)).abs or not (q(j) - q(i)).abs < eps","(q(j) - q(i)).abs < eps","not (q(j) - q(i)).abs < eps"]}
{"goal":"p(i).is_close(p(j), eps)","proof":["(p(j) - p(i)).abs < eps = p(j).is_close(p(i), eps)","not p(j).is_close(p(i), eps) or p(i).is_close(p(j), eps)","p(j).is_close(p(i), eps)","not p(j).is_close(p(i), eps)"]}
{"goal":"j <= i","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or x0 + s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat) { Nat.0 != s0(x2, x3) or not x2 < x3 } }","not j < i or j + s0(j, i) = i","j + s0(j, i) != i or j <= i","j + s0(j, i) != i","j < i or i <= j","not j < i","j < i"]}
{"goal":"partial[Real](compose[Nat, Real, Real](Real.abs, a), i) - partial[Real](compose[Nat, Real, Real](Real.abs, a), j) = sum[Real](map[Nat, Real](j.until(i), compose[Nat, Real, Real](Real.abs, a)))","proof":["not j <= i or partial[Real](compose[Nat, Real, Real](Real.abs, a), i) - partial[Real](compose[Nat, Real, Real](Real.abs, a), j) = sum[Real](map[Nat, Real](j.until(i), compose[Nat, Real, Real](Real.abs, a)))"]}
{"goal":"q(i) - q(j) = sum[Real](map[Nat, Real](j.until(i), compose[Nat, Real, Real](Real.abs, a)))","proof":["partial[Real](compose[Nat, Real, Real](Real.abs, a), i) = q(i)","partial[Real](compose[Nat, Real, Real](Real.abs, a), j) = q(j)"]}
{"goal":"q(i) - q(j) = sum[Real](map[Real, Real](map[Nat, Real](j.until(i), a), Real.abs))","proof":["map[Nat, Real](j.until(i), compose[Nat, Real, Real](Real.abs, a)) = map[Real, Real](map[Nat, Real](j.until(i), a), Real.abs)"]}
{"goal":"sum[Real](map[Nat, Real](j.until(i), a)).abs <= q(i) - q(j)","proof":["sum[Real](map[Nat, Real](j.until(i), a)).abs <= sum[Real](map[Real, Real](map[Nat, Real](j.until(i), a), Real.abs))"]}
{"goal":"partial[Real](a, i) - partial[Real](a, j) = sum[Real](map[Nat, Real](j.until(i), a))","proof":["not j <= i or partial[Real](a, i) - partial[Real](a, j) = sum[Real](map[Nat, Real](j.until(i), a))"]}
{"goal":"p(i) - p(j) = sum[Real](map[Nat, Real](j.until(i), a))","proof":["partial[Real](a, i) = p(i)","partial[Real](a, j) = p(j)"]}
{"goal":"(p(i) - p(j)).abs <= q(i) - q(j)","proof":["not sum[Real](map[Nat, Real](j.until(i), a)).abs <= q(i) - q(j)"]}
{"goal":"q(i).is_close(q(j), eps)","proof":[]}
{"goal":"(p(i) - p(j)).abs <= (q(i) - q(j)).abs","proof":["not (p(i) - p(j)).abs <= q(i) - q(j) or not q(i) - q(j) <= (q(i) - q(j)).abs or (p(i) - p(j)).abs <= (q(i) - q(j)).abs","q(i) - q(j) <= (q(i) - q(j)).abs","not q(i) - q(j) <= (q(i) - q(j)).abs or not (p(i) - p(j)).abs <= q(i) - q(j)"]}
{"goal":"(p(i) - p(j)).abs < eps","proof":["not (q(i) - q(j)).abs < eps or not (p(i) - p(j)).abs <= (q(i) - q(j)).abs or (p(i) - p(j)).abs < eps","not (p(i) - p(j)).abs <= (q(i) - q(j)).abs or not (q(i) - q(j)).abs < eps"]}
{"goal":"p(i).is_close(p(j), eps)","proof":["(p(i) - p(j)).abs < eps = p(i).is_close(p(j), eps)"]}
{"goal":"cauchy_bound(partial[Real](a), n, eps)","proof":["not cauchy_bound(p, n, eps)","let (s0: (Nat -> Real, Nat, Real) -> Nat, s1: (Nat -> Real, Nat, Real) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Nat, x2: Real, x3: Nat, x4: Nat) { not cauchy_bound(x0, x1, x2) or not x1 <= x3 or not x1 <= x4 or x0(x3).is_close(x0(x4), x2) } and forall(x5: Nat, x6: Nat -> Real, x7: Real) { x5 <= s0(x6, x5, x7) or cauchy_bound(x6, x5, x7) } and forall(x8: Nat, x9: Nat -> Real, x10: Real) { x8 <= s1(x9, x8, x10) or cauchy_bound(x9, x8, x10) } and forall(x11: Nat -> Real, x12: Nat, x13: Real) { not x11(s0(x11, x12, x13)).is_close(x11(s1(x11, x12, x13)), x13) or cauchy_bound(x11, x12, x13) } }","not n <= s0(p, n, eps) or not n <= s1(p, n, eps) or p(s0(p, n, eps)).is_close(p(s1(p, n, eps)), eps)","not p(s0(p, n, eps)).is_close(p(s1(p, n, eps)), eps) or cauchy_bound(p, n, eps)","n <= s1(partial[Real](a), n, eps) or cauchy_bound(partial[Real](a), n, eps)","n <= s0(partial[Real](a), n, eps) or cauchy_bound(partial[Real](a), n, eps)","n <= s0(partial[Real](a), n, eps)","n <= s1(partial[Real](a), n, eps)","n <= s1(p, n, eps)","n <= s0(p, n, eps)","not p(s0(p, n, eps)).is_close(p(s1(p, n, eps)), eps)"]}
{"goal":"abs_conv_imp_conv","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: Nat -> Real -> Real) satisfy { forall(x0: Real, x1: Nat -> Real) { not x0.is_positive or not converges(x1) or cauchy_bound(x1, s0(x1, x0), x0) } and forall(x2: Nat -> Real) { s1(x2).is_positive or converges(x2) } and forall(x3: Nat -> Real, x4: Nat) { not cauchy_bound(x3, x4, s1(x3)) or converges(x3) } }","let s2: Real -> Nat satisfy { forall(x5: Real) { not x5.is_positive or cauchy_bound(partial[Real](a), s2(x5), x5) } }","not s1(partial[Real](a)).is_positive or cauchy_bound(partial[Real](a), s2(s1(partial[Real](a))), s1(partial[Real](a)))","not cauchy_bound(partial[Real](a), s2(s1(partial[Real](a))), s1(partial[Real](a))) or converges(partial[Real](a))","s1(partial[Real](a)).is_positive or converges(partial[Real](a))","s1(partial[Real](a)).is_positive","not cauchy_bound(partial[Real](a), s2(s1(partial[Real](a))), s1(partial[Real](a)))"]}
{"goal":"1 >= 0","proof":["1 * 1 >= 0","1 * 1 = 1"]}
{"goal":"0 <= r.pow(Nat.0)","proof":["Nat.0 != Nat.0 or Real.new(r.gt_rat).pow(Nat.0) = 1","1 >= 0 = 0 <= 1","0 <= 1","Real.new(r.gt_rat) = r","not 0 <= Real.new(r.gt_rat).pow(Nat.0)","Real.new(r.gt_rat).pow(Nat.0) = 1"]}
{"goal":"p(Nat.0)","proof":["0 <= r.pow(Nat.0) = p(Nat.0)"]}
{"goal":"0 <= r.pow(k)","proof":["0 <= r.pow(k) = p(k)"]}
{"goal":"not r.pow(k).is_negative","proof":["not 0 <= r.pow(k) or not r.pow(k).is_negative"]}
{"goal":"not r.is_negative","proof":["not 0 <= r or not r.is_negative"]}
{"goal":"not r.pow(k.suc).is_negative","proof":["k.suc != k.suc or r * r.pow(k) = r.pow(k.suc)","not (r * r.pow(k)).is_negative or r.is_negative or r.pow(k).is_negative","r * r.pow(k) = r.pow(k.suc)","(r * r.pow(k)).is_negative"]}
{"goal":"0 <= r.pow(k.suc)","proof":["0 <= r.pow(k.suc) or r.pow(k.suc).is_negative"]}
{"goal":"p(k.suc)","proof":["0 <= r.pow(k.suc) = p(k.suc)"]}
{"goal":"p(n)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(Nat.0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(Nat.0) or x2(x3) } }","not p(s0(p)) or p(s0(p).suc)","not p(s0(p).suc) or not p(Nat.0) or p(n)","not p(s0(p).suc)","not p(Nat.0) or p(s0(p)) or p(n)","not p(s0(p))","p(s0(p))"]}
{"goal":"pow_nonneg","proof":["0 <= r.pow(n) = p(n)"]}
{"goal":"(r + -1) * sum[Real](map[Nat, Real](n.range, r.pow)) = r.pow(n) + -1","proof":["(r + -1) * sum[Real](map[Nat, Real](n.range, r.pow)) = r.pow(n) + -1"]}
{"goal":"(1 - r) * sum[Real](map[Nat, Real](n.range, r.pow)) = 1 - r.pow(n)","proof":["--r + -1 = -(1 + -r)","--r.pow(n) + -1 = -(1 + -r.pow(n))","sum[Real](map[Nat, Real](n.range, r.pow)) = partial[Real](r.pow, n)","-(1 - r) * sum[Real](map[Nat, Real](n.range, r.pow)) = -((1 - r) * sum[Real](map[Nat, Real](n.range, r.pow)))","1 + -r = 1 - r","1 + -r.pow(n) = 1 - r.pow(n)","sum[Real](map[Nat, Real](n.range, r.pow)) * (r + -1) = (r + -1) * sum[Real](map[Nat, Real](n.range, r.pow))","sum[Real](map[Nat, Real](n.range, r.pow)) * -(1 - r) = -(1 - r) * sum[Real](map[Nat, Real](n.range, r.pow))","Real.new(lib(real.real_base).neg_gt(-((1 - r) * sum[Real](map[Nat, Real](n.range, r.pow))))) = --((1 - r) * sum[Real](map[Nat, Real](n.range, r.pow)))","Real.new(lib(real.real_base).neg_gt(-(1 - r.pow(n)))) = --(1 - r.pow(n))","--((1 - r) * partial[Real](r.pow, n)) = (1 - r) * partial[Real](r.pow, n)","--(1 - r.pow(n)) = 1 - r.pow(n)","--r = r","--r.pow(n) = r.pow(n)"]}
{"goal":"sum[Real](map[Nat, Real](n.range, r.pow)) * (1 - r) = 1 - r.pow(n)","proof":["--r + -1 = -(1 + -r)","--r.pow(n) + -1 = -(1 + -r.pow(n))","sum[Real](map[Nat, Real](n.range, r.pow)) = partial[Real](r.pow, n)","sum[Real](map[Nat, Real](n.range, r.pow)) * -(1 - r) = -(sum[Real](map[Nat, Real](n.range, r.pow)) * (1 - r))","1 + -r = 1 - r","1 + -r.pow(n) = 1 - r.pow(n)","partial[Real](r.pow, n) * (1 - r) = (1 - r) * partial[Real](r.pow, n)","sum[Real](map[Nat, Real](n.range, r.pow)) * -(1 - r) = -(1 - r) * sum[Real](map[Nat, Real](n.range, r.pow))","Real.new(lib(real.real_base).neg_gt(-(1 - r.pow(n)))) = --(1 - r.pow(n))","Real.new(lib(real.real_base).neg_gt(-(sum[Real](map[Nat, Real](n.range, r.pow)) * (1 - r)))) = --(sum[Real](map[Nat, Real](n.range, r.pow)) * (1 - r))","--((1 - r) * sum[Real](map[Nat, Real](n.range, r.pow))) = (1 - r) * sum[Real](map[Nat, Real](n.range, r.pow))","--(1 - r.pow(n)) = 1 - r.pow(n)","--r = r","--r.pow(n) = r.pow(n)"]}
{"goal":"0 <= x","proof":["not 0 <= r.pow(n)","not 0 <= r or 0 <= r.pow(n)"]}
{"goal":"0 + (1 - x) <= x + (1 - x)","proof":["not 0 <= x or 0 + (1 - x) <= x + (1 - x)","not 0 <= x","not 0 <= r or 0 <= r.pow(n)","0 <= r.pow(n)"]}
{"goal":"sum[Real](map[Nat, Real](n.range, r.pow)) * (1 - r) <= 1","proof":["not 1 - r.pow(n) <= 1","not 1 - x <= 1","1 + x - x = 1 - x + x","1 + x - x = 1","1 - x + x = x + (1 - x)","0 + (1 - x) = 1 - x","not 1 - x <= 1 + x - x","0 + (1 - x) <= 1 - x + x","1 - x <= 1 - x + x"]}
{"goal":"pos_geom_indirect_upper_bound","proof":["sum[Real](map[Nat, Real](n.range, r.pow)) = partial[Real](r.pow, n)"]}
{"goal":"pos_mul_eq_pos","proof":["a.abs * b.abs = (a * b).abs","a * -b = -(a * b)","real_set.flip(real_set.flip(Real.is_negative), -(a * b)) = (-(a * b)).is_negative","real_set.flip(real_set.flip(Real.is_negative), a * b) = (a * b).is_negative","(--b).abs = (-b).abs","not (a * b).is_positive or (a * b).abs = a * b","not a.is_positive or a.abs = a","(-b).abs = -b or (-b).is_negative","not (-b).is_negative or b.is_positive","not (-b).is_negative","not (a * b).is_positive or (-(a * b)).is_negative","limit(constant[Nat, Real](b)) = b","--limit(constant[Nat, Real](b)) = limit(constant[Nat, Real](b))","not (a * b).is_negative or not (a * b).is_positive","a.abs = a","not (a * b).is_negative","(-(a * b)).is_negative","(a * b).abs = a * b","(-b).abs = -b"]}
{"goal":"exists(k0: Rat) { a < Real.from_rat(k0) }","proof":["let s0: Nat satisfy { true }","let s1: (Real, Rat) -> Rat satisfy { forall(x0: Rat, x1: Real) { not x0.is_positive or Real.from_rat(s1(x1, x0)) < x1 } and forall(x2: Rat, x3: Real) { not x2.is_positive or x3 < Real.from_rat(s1(x3, x2) + x2) } }","not a < Real.from_rat(s1(a, rat.iop(s0)) + rat.iop(s0))","not rat.iop(s0).is_positive or a < Real.from_rat(s1(a, rat.iop(s0)) + rat.iop(s0))","not rat.iop(s0).is_positive","rat.iop(s0).is_positive"]}
{"goal":"Real.from_rat(ra).is_positive","proof":["not a.is_positive or not a < Real.from_rat(ra) or Real.from_rat(ra).is_positive"]}
{"goal":"ra.is_positive","proof":["real_set.flip(real_set.flip(Real.is_negative), -Real.from_rat(ra)) = (-Real.from_rat(ra)).is_negative","real_set.flip(real_set.flip(Real.is_negative), Real.from_rat(ra)) = Real.from_rat(ra).is_negative","Real.from_rat(ra).abs = Real.from_rat(ra.abs)","-Real.from_rat(ra) = Real.from_rat(-ra)","ra.abs = -ra or ra.is_positive","ra.abs = -ra","not Real.from_rat(ra).is_positive or Real.from_rat(ra).abs = Real.from_rat(ra)","not Real.from_rat(ra).is_positive or (-Real.from_rat(ra)).is_negative","not Real.from_rat(ra).is_negative or not Real.from_rat(ra).is_positive","not Real.from_rat(ra).is_negative","(-Real.from_rat(ra)).is_negative","Real.from_rat(ra).abs = Real.from_rat(ra)"]}
{"goal":"exists(k0: Rat) { k0.is_positive and Real.from_rat(k0) < b }","proof":["let s0: Real -> Rat satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or Real.from_rat(s0(x1)) < x1 } }","not Real.from_rat(s0(b)) < b or not s0(b).is_positive","not b.is_positive or Real.from_rat(s0(b)) < b","not b.is_positive or s0(b).is_positive","s0(b).is_positive","Real.from_rat(s0(b)) < b","not Real.from_rat(s0(b)) < b"]}
{"goal":"rc.is_positive","proof":["not (ra / rb).is_positive","not ra.is_positive or not rb.reciprocal.is_positive or (ra * rb.reciprocal).is_positive","ra * rb.reciprocal = ra / rb","not rb.is_positive or rb.reciprocal.is_positive","rb.reciprocal.is_positive","not rb.reciprocal.is_positive or (ra * rb.reciprocal).is_positive","not (ra * rb.reciprocal).is_positive","(ra * rb.reciprocal).is_positive"]}
{"goal":"ra = rb * rc","proof":["rb * (ra / rb) = ra or Rat.0 = rb","rb * (ra / rb) != ra","not rb.is_positive or Rat.0 != rb","Rat.0 = rb","Rat.0 != rb"]}
{"goal":"ra <= rb * rc","proof":["not ra <= ra","ra <= ra or ra <= ra"]}
{"goal":"Real.from_rat(ra) <= Real.from_rat(rb) * Real.from_rat(rc)","proof":["Real.from_rat(rb) * Real.from_rat(rc) = Real.from_rat(rb * rc)","not Real.from_rat(ra) <= Real.from_rat(rb * rc)","not ra <= rb * rc or Real.from_rat(ra) <= Real.from_rat(rb * rc)"]}
{"goal":"a < Real.from_rat(rb) * Real.from_rat(rc)","proof":["Real.from_rat(rb) * Real.from_rat(rc) = Real.from_rat(rb * rc)"]}
{"goal":"Real.from_rat(rb) * Real.from_rat(rc) < b * Real.from_rat(rc)","proof":["not Real.from_rat(rc).is_positive or not Real.from_rat(rb) < b or Real.from_rat(rb) * Real.from_rat(rc) < b * Real.from_rat(rc)","not Real.from_rat(rc).is_positive","not rc.is_positive or Real.from_rat(rc).is_positive"]}
{"goal":"a < b * Real.from_rat(rc)","proof":["not Real.from_rat(rb) * Real.from_rat(rc) <= b * Real.from_rat(rc) or not a < Real.from_rat(rb) * Real.from_rat(rc) or a < b * Real.from_rat(rc)","not Real.from_rat(rb) * Real.from_rat(rc) < b * Real.from_rat(rc) or Real.from_rat(rb) * Real.from_rat(rc) <= b * Real.from_rat(rc)","not Real.from_rat(rb) * Real.from_rat(rc) <= b * Real.from_rat(rc) or not a < Real.from_rat(rb) * Real.from_rat(rc)","Real.from_rat(rb) * Real.from_rat(rc) <= b * Real.from_rat(rc)","not Real.from_rat(rb) * Real.from_rat(rc) <= b * Real.from_rat(rc)"]}
{"goal":"exists_large_mul","proof":["not a < b * Real.from_rat(rc)"]}
{"goal":"not a(n).is_negative","proof":["not nonneg_seq(a) or not a(n).is_negative"]}
{"goal":"0 <= a(n)","proof":["0 <= a(n) or a(n).is_negative"]}
{"goal":"partial[Real](a, n.suc) = partial[Real](a, n) + a(n)","proof":["partial[Real](a, n) + a(n) = partial[Real](a, n.suc)"]}
{"goal":"partial[Real](a, n) <= partial[Real](a, n) + a(n)","proof":["not 0 <= a(n) or partial[Real](a, n) + 0 <= partial[Real](a, n) + a(n)","partial[Real](a, n) + 0 = partial[Real](a, n)","not partial[Real](a, n) + 0 <= partial[Real](a, n) + a(n)"]}
{"goal":"partial[Real](a, n) <= partial[Real](a, n.suc)","proof":[]}
{"goal":"nonneg_imp_partial_increasing","proof":["let s0: Nat -> Real -> Nat satisfy { forall(x0: Nat -> Real, x1: Nat) { not is_increasing(x0) or x0(x1) <= x0(x1.suc) } and forall(x2: Nat -> Real) { not x2(s0(x2)) <= x2(s0(x2).suc) or is_increasing(x2) } }","partial[Real](a, s0(partial[Real](a))) <= partial[Real](a, s0(partial[Real](a)).suc)","not partial[Real](a, s0(partial[Real](a))) <= partial[Real](a, s0(partial[Real](a)).suc) or is_increasing(partial[Real](a))"]}
{"goal":"increasing_from_nonneg_start","proof":["let s0: Nat -> Real -> Nat satisfy { forall(x0: Nat -> Real, x1: Nat) { not nonneg_seq(x0) or not x0(x1).is_negative } and forall(x2: Nat -> Real) { x2(s0(x2)).is_negative or nonneg_seq(x2) } }","not is_increasing(a) or not Nat.0 <= Nat.0 + s0(a) or a(Nat.0) <= a(Nat.0 + s0(a))","not a(Nat.0) <= a(Nat.0 + s0(a)) or not a(Nat.0 + s0(a)) < 0 or a(Nat.0) < 0","Nat.0 + s0(a) != Nat.0 + s0(a) or Nat.0 <= Nat.0 + s0(a)","a(s0(a)).is_negative or nonneg_seq(a)","a(s0(a)).is_negative","not a(Nat.0) < 0 or a(Nat.0).is_negative","not a(Nat.0 + s0(a)).is_negative or a(Nat.0 + s0(a)) < 0","Nat.0 + s0(a) = s0(a)","not a(Nat.0) < 0","Nat.0 <= Nat.0 + s0(a)","not Nat.0 <= Nat.0 + s0(a) or a(Nat.0) <= a(Nat.0 + s0(a))","a(Nat.0) <= a(Nat.0 + s0(a))","a(Nat.0 + s0(a)).is_negative","not a(Nat.0) <= a(Nat.0 + s0(a)) or not a(Nat.0 + s0(a)) < 0","a(Nat.0 + s0(a)) < 0"]}
{"goal":"nonneg_partial_nonneg","proof":["not is_increasing(partial[Real](a)) or partial[Real](a, Nat.0).is_negative or nonneg_seq(partial[Real](a))","not nonneg_seq(a) or is_increasing(partial[Real](a))","partial[Real](a, Nat.0) = 0","not partial[Real](a, Nat.0).is_negative or partial[Real](a, Nat.0) != 0","not is_increasing(partial[Real](a)) or partial[Real](a, Nat.0).is_negative","is_increasing(partial[Real](a))","partial[Real](a, Nat.0).is_negative"]}
{"goal":"nonneg_pow","proof":["let s0: Nat -> Real -> Nat satisfy { forall(x0: Nat -> Real, x1: Nat) { not nonneg_seq(x0) or not x0(x1).is_negative } and forall(x2: Nat -> Real) { x2(s0(x2)).is_negative or nonneg_seq(x2) } }","not 0 <= r or 0 <= r.pow(s0(r.pow))","r.pow(s0(r.pow)).is_negative or nonneg_seq(r.pow)","r.pow(s0(r.pow)).is_negative","not 0 <= r.pow(s0(r.pow)) or not r.pow(s0(r.pow)).is_negative","0 <= r.pow(s0(r.pow))"]}
{"goal":"(1 - r).is_positive","proof":["not r < 1 or (1 - r).is_positive"]}
{"goal":"1.is_positive","proof":["not ((1 - r) * 1).is_positive or not (1 - r).is_positive or 1.is_positive","not ((1 - r) * 1).is_positive or not (1 - r).is_positive","(1 - r) * 1 = 1 - r","not ((1 - r) * 1).is_positive","((1 - r) * 1).is_positive"]}
{"goal":"exists(k0: Real) { 1 < k0 * (1 - r) }","proof":["let s0: (Real, Real) -> Real satisfy { forall(x0: Real, x1: Real) { not x0.is_positive or not x1.is_positive or x0 < x1 * s0(x0, x1) } }","not 1 < s0(1, 1 - r) * (1 - r)","not 1.is_positive or not (1 - r).is_positive or 1 < (1 - r) * s0(1, 1 - r)","s0(1, 1 - r) * (1 - r) = (1 - r) * s0(1, 1 - r)","not 1.is_positive or 1 < (1 - r) * s0(1, 1 - r)","1 < (1 - r) * s0(1, 1 - r)"]}
{"goal":"(ub * (1 - r)).is_positive","proof":["not 1.is_positive or not 1 < ub * (1 - r) or (ub * (1 - r)).is_positive"]}
{"goal":"ub.is_positive","proof":["not ((1 - r) * ub).is_positive or not (1 - r).is_positive or ub.is_positive","(1 - r) * ub = ub * (1 - r)","not ((1 - r) * ub).is_positive or not (1 - r).is_positive","((1 - r) * ub).is_positive","not ((1 - r) * ub).is_positive"]}
{"goal":"partial[Real](r.pow, n) * (1 - r) <= 1","proof":["not 0 <= r or not r < 1 or partial[Real](r.pow, n) * (1 - r) <= 1"]}
{"goal":"partial[Real](r.pow, n) * (1 - r) * ub <= ub","proof":["not partial[Real](r.pow, n) * (1 - r) <= 1 or partial[Real](r.pow, n) * (1 - r) * ub <= 1 * ub or ub.is_negative","1 * ub = ub","not ub.is_negative or not ub.is_positive","not ub.is_negative","not partial[Real](r.pow, n) * (1 - r) * ub <= 1 * ub"]}
{"goal":"nonneg_seq(partial[Real](r.pow))","proof":["not 0 <= r or nonneg_seq(r.pow)","not nonneg_seq(r.pow) or nonneg_seq(partial[Real](r.pow))","nonneg_seq(r.pow)","not nonneg_seq(r.pow)"]}
{"goal":"0 <= partial[Real](r.pow, n)","proof":["not nonneg_seq(partial[Real](r.pow)) or not partial[Real](r.pow, n).is_negative","0 <= partial[Real](r.pow, n) or partial[Real](r.pow, n).is_negative","partial[Real](r.pow, n).is_negative","not partial[Real](r.pow, n).is_negative"]}
{"goal":"partial[Real](r.pow, n) * 1 <= partial[Real](r.pow, n) * ((1 - r) * ub)","proof":["not 1 <= ub * (1 - r) or partial[Real](r.pow, n) * 1 <= partial[Real](r.pow, n) * (ub * (1 - r)) or partial[Real](r.pow, n).is_negative","not 1 < ub * (1 - r) or 1 <= ub * (1 - r)","(1 - r) * ub = ub * (1 - r)","not partial[Real](r.pow, n) * 1 <= partial[Real](r.pow, n) * (ub * (1 - r))","not 0 <= partial[Real](r.pow, n) or not partial[Real](r.pow, n).is_negative","not partial[Real](r.pow, n).is_negative","1 <= ub * (1 - r)","not 1 <= ub * (1 - r)"]}
{"goal":"partial[Real](r.pow, n) <= ub","proof":["not util.is_transitive[Real](Real.lte) or not partial[Real](r.pow, n) <= partial[Real](r.pow, n) * (1 - r) * ub or not partial[Real](r.pow, n) * (1 - r) * ub <= ub or partial[Real](r.pow, n) <= ub","partial[Real](r.pow, n) * ((1 - r) * ub) = partial[Real](r.pow, n) * (1 - r) * ub","partial[Real](r.pow, n) * 1 = partial[Real](r.pow, n)","partial[Real](r.pow, n) <= partial[Real](r.pow, n) * ((1 - r) * ub)","not partial[Real](r.pow, n) <= partial[Real](r.pow, n) * (1 - r) * ub or not partial[Real](r.pow, n) * (1 - r) * ub <= ub","partial[Real](r.pow, n) <= partial[Real](r.pow, n) * (1 - r) * ub","not partial[Real](r.pow, n) <= partial[Real](r.pow, n) * (1 - r) * ub"]}
{"goal":"is_upper_bound(partial[Real](r.pow), ub)","proof":["let s0: (Nat -> Real, Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not is_upper_bound(x0, x1) or x0(x2) <= x1 } and forall(x3: Nat -> Real, x4: Real) { not x3(s0(x3, x4)) <= x4 or is_upper_bound(x3, x4) } }","partial[Real](r.pow, s0(partial[Real](r.pow), ub)) <= ub","not partial[Real](r.pow, s0(partial[Real](r.pow), ub)) <= ub or is_upper_bound(partial[Real](r.pow), ub)"]}
{"goal":"pos_geom_has_upper_bound","proof":["not is_upper_bound(partial[Real](r.pow), ub)"]}
{"goal":"exists(k0: Real) { is_upper_bound(partial[Real](r.pow), k0) }","proof":["let s0: Real -> Real satisfy { forall(x0: Real) { not 0 <= x0 or not x0 < 1 or is_upper_bound(partial[Real](x0.pow), s0(x0)) } }","not is_upper_bound(partial[Real](r.pow), s0(r))","not 0 <= r or not r < 1 or is_upper_bound(partial[Real](r.pow), s0(r))"]}
{"goal":"is_increasing(partial[Real](r.pow))","proof":["not 0 <= r or nonneg_seq(r.pow)","not nonneg_seq(r.pow) or is_increasing(partial[Real](r.pow))","nonneg_seq(r.pow)","not nonneg_seq(r.pow)"]}
{"goal":"pos_geom_converges","proof":["not is_upper_bound(partial[Real](r.pow), ub) or not is_increasing(partial[Real](r.pow)) or converges(partial[Real](r.pow))"]}
{"goal":"r.abs.pow(Nat.0) = 1","proof":["Nat.0 != Nat.0 or r.abs.pow(Nat.0) = 1"]}
{"goal":"r.pow(Nat.0) = 1","proof":["Nat.0 != Nat.0 or r.pow(Nat.0) = 1"]}
{"goal":"r.pow(Nat.0).abs = 1.abs","proof":["r.pow(Nat.0) != 1"]}
{"goal":"1.abs = 1","proof":["not Rat.1.is_positive or Real.from_rat(Rat.1).is_positive","not 1.is_positive or 1.abs = 1","not 1.is_positive","not Real.from_rat(Rat.1).is_positive"]}
{"goal":"r.abs.pow(Nat.0) = r.pow(Nat.0).abs","proof":[]}
{"goal":"p(Nat.0)","proof":["r.abs.pow(Nat.0) != r.pow(Nat.0).abs or p(Nat.0)"]}
{"goal":"r.abs.pow(k) = r.pow(k).abs","proof":["not p(k) or r.abs.pow(k) = r.pow(k).abs"]}
{"goal":"r.abs.pow(k.suc) = r.abs * r.abs.pow(k)","proof":["k.suc != k.suc or r.abs * r.abs.pow(k) = r.abs.pow(k.suc)"]}
{"goal":"r.abs.pow(k.suc) = r.abs * r.pow(k).abs","proof":["r.abs * r.abs.pow(k) != r.abs.pow(k.suc)"]}
{"goal":"r.pow(k.suc) = r * r.pow(k)","proof":["k.suc != k.suc or r * r.pow(k) = r.pow(k.suc)"]}
{"goal":"r.pow(k.suc).abs = (r * r.pow(k)).abs","proof":["r * r.pow(k) != r.pow(k.suc)"]}
{"goal":"(r * r.pow(k)).abs = r.abs * r.pow(k).abs","proof":["r.abs * r.pow(k).abs = (r * r.pow(k)).abs"]}
{"goal":"r.pow(k.suc).abs = r.abs * r.pow(k).abs","proof":["r.abs * r.pow(k).abs != (r * r.pow(k)).abs"]}
{"goal":"r.abs.pow(k.suc) = r.pow(k.suc).abs","proof":["r.abs * r.pow(k).abs != r.abs.pow(k.suc)"]}
{"goal":"p(k.suc)","proof":["r.abs.pow(k.suc) != r.pow(k.suc).abs or p(k.suc)"]}
{"goal":"p(n)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(Nat.0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(Nat.0) or x2(x3) } }","not p(s0(p)) or p(s0(p).suc)","not p(s0(p).suc) or not p(Nat.0) or p(n)","not p(s0(p).suc)","not p(Nat.0) or p(s0(p)) or p(n)","not p(s0(p))","p(s0(p))"]}
{"goal":"abs_pow","proof":["not p(n) or r.abs.pow(n) = r.pow(n).abs"]}
{"goal":"abs_geom_comm","proof":["let s0: Nat satisfy { compose[Nat, Real, Real](Real.abs, r.pow, s0) != r.abs.pow(s0) }","r.abs.pow(s0) = r.pow(s0).abs","compose[Nat, Real, Real](Real.abs, r.pow, s0) != r.pow(s0).abs","compose[Nat, Real, Real](Real.abs, r.pow, s0) = r.pow(s0).abs"]}
{"goal":"0 <= r.abs","proof":["0 <= r.abs = r.abs >= 0","not r.abs >= 0","r.abs >= 0"]}
{"goal":"converges(partial[Real](r.abs.pow))","proof":["not 0 <= r.abs or not r.abs < 1 or converges(partial[Real](r.abs.pow))"]}
{"goal":"compose[Nat, Real, Real](Real.abs, r.pow) = r.abs.pow","proof":["let s0: Nat satisfy { compose[Nat, Real, Real](Real.abs, r.pow, s0) != r.abs.pow(s0) }","compose[Nat, Real, Real](Real.abs, r.pow, s0) = r.abs.pow(s0)"]}
{"goal":"partial[Real](r.abs.pow) = partial[Real](compose[Nat, Real, Real](Real.abs, r.pow))","proof":["let s0: Nat satisfy { partial[Real](compose[Nat, Real, Real](Real.abs, r.pow), s0) != partial[Real](r.abs.pow, s0) }","compose[Nat, Real, Real](Real.abs, r.pow) != r.abs.pow"]}
{"goal":"converges(partial[Real](compose[Nat, Real, Real](Real.abs, r.pow)))","proof":[]}
{"goal":"geom_converges","proof":["not converges(partial[Real](compose[Nat, Real, Real](Real.abs, r.pow))) or converges(partial[Real](r.pow))"]}
{"goal":"converges_to(partial[Real](tail[Real](a, m)), limit(partial[Real](a)) - partial[Real](a, m))","proof":["not converges(partial[Real](a)) or converges_to(partial[Real](tail[Real](a, m)), limit(partial[Real](a)) - partial[Real](a, m))"]}
{"goal":"limit(partial[Real](tail[Real](a, m))) = limit(partial[Real](a)) - partial[Real](a, m)","proof":["not converges_to(partial[Real](tail[Real](a, m)), limit(partial[Real](a)) - partial[Real](a, m)) or not converges_to(partial[Real](tail[Real](a, m)), limit(partial[Real](tail[Real](a, m)))) or limit(partial[Real](a)) - partial[Real](a, m) = limit(partial[Real](tail[Real](a, m)))","not converges(partial[Real](tail[Real](a, m))) or converges_to(partial[Real](tail[Real](a, m)), limit(partial[Real](tail[Real](a, m))))","not converges_to(partial[Real](tail[Real](a, m)), limit(partial[Real](a)) - partial[Real](a, m)) or converges(partial[Real](tail[Real](a, m)))","converges(partial[Real](tail[Real](a, m)))","not converges_to(partial[Real](tail[Real](a, m)), limit(partial[Real](a)) - partial[Real](a, m)) or not converges_to(partial[Real](tail[Real](a, m)), limit(partial[Real](tail[Real](a, m))))","converges_to(partial[Real](tail[Real](a, m)), limit(partial[Real](tail[Real](a, m))))","not converges_to(partial[Real](tail[Real](a, m)), limit(partial[Real](tail[Real](a, m))))"]}
{"goal":"partial_tail_decomp","proof":["limit(partial[Real](a)) + partial[Real](a, m) - partial[Real](a, m) = limit(partial[Real](a)) - partial[Real](a, m) + partial[Real](a, m)","limit(partial[Real](a)) + partial[Real](a, m) - partial[Real](a, m) = limit(partial[Real](a))","partial[Real](a, m) + (limit(partial[Real](a)) - partial[Real](a, m)) = limit(partial[Real](a)) - partial[Real](a, m) + partial[Real](a, m)","partial[Real](a, m) + (limit(partial[Real](a)) - partial[Real](a, m)) != limit(partial[Real](a))","limit(partial[Real](a)) - partial[Real](a, m) + partial[Real](a, m) != limit(partial[Real](a))"]}
{"goal":"pow_tail","proof":["let s0: Nat satisfy { mul_seq(r, r.pow, s0) != tail[Real](r.pow, Nat.1, s0) }","r.pow(Nat.1) * r.pow(s0) = r.pow(Nat.1 + s0)","tail[Real](r.pow, Nat.1, s0) = r.pow(Nat.1 + s0)","mul_seq(r, r.pow, s0) = r * r.pow(s0)","r.pow(Nat.1) = r"]}
{"goal":"partial_one","proof":["partial[Real](a, Nat.0) + a(Nat.0) = partial[Real](a, Nat.0.suc)","partial[Real](a, Nat.0) = 0","0 + a(Nat.0) = a(Nat.0)","partial[Real](a, Nat.0.suc) != a(Nat.0)","partial[Real](a, Nat.0) + a(Nat.0) != a(Nat.0)"]}
{"goal":"converges(partial[Real](r.pow))","proof":["not r.abs < 1 or converges(partial[Real](r.pow))"]}
{"goal":"converges(partial[Real](tail[Real](r.pow, Nat.1)))","proof":["not converges(partial[Real](r.pow)) or converges_to(partial[Real](tail[Real](r.pow, Nat.1)), limit(partial[Real](r.pow)) - partial[Real](r.pow, Nat.1))","not converges_to(partial[Real](tail[Real](r.pow, Nat.1)), limit(partial[Real](r.pow)) - partial[Real](r.pow, Nat.1)) or converges(partial[Real](tail[Real](r.pow, Nat.1)))","not converges_to(partial[Real](tail[Real](r.pow, Nat.1)), limit(partial[Real](r.pow)) - partial[Real](r.pow, Nat.1))"]}
{"goal":"limit(partial[Real](r.pow)) = partial[Real](r.pow, Nat.1) + limit(partial[Real](tail[Real](r.pow, Nat.1)))","proof":["not converges(partial[Real](r.pow)) or partial[Real](r.pow, Nat.1) + limit(partial[Real](tail[Real](r.pow, Nat.1))) = limit(partial[Real](r.pow))"]}
{"goal":"partial[Real](r.pow, Nat.1) = r.pow(Nat.0)","proof":["partial[Real](r.pow, Nat.1) = r.pow(Nat.0)"]}
{"goal":"partial[Real](r.pow, Nat.1) = 1","proof":["r.pow(Nat.0) != 1","Nat.0 != Nat.0 or r.pow(Nat.0) = 1"]}
{"goal":"t = mul_seq(r, r.pow)","proof":["let s0: Nat satisfy { mul_seq(r, r.pow, s0) != t(s0) }","tail[Real](r.pow, Nat.1, s0) = t(s0)","mul_seq(r, r.pow, s0) = tail[Real](r.pow, Nat.1, s0)"]}
{"goal":"partial[Real](t) = partial[Real](mul_seq(r, r.pow))","proof":["let s0: Nat satisfy { partial[Real](mul_seq(r, r.pow), s0) != partial[Real](t, s0) }","mul_seq(r, r.pow) != t"]}
{"goal":"partial[Real](tail[Real](r.pow, Nat.1)) = partial[Real](mul_seq(r, r.pow))","proof":["let s0: Nat satisfy { partial[Real](mul_seq(r, r.pow), s0) != partial[Real](tail[Real](r.pow, Nat.1), s0) }"]}
{"goal":"limit(partial[Real](tail[Real](r.pow, Nat.1))) = limit(partial[Real](mul_seq(r, r.pow)))","proof":["partial[Real](mul_seq(r, r.pow)) != partial[Real](tail[Real](r.pow, Nat.1))"]}
{"goal":"partial[Real](mul_seq(r, r.pow)) = mul_seq(r, partial[Real](r.pow))","proof":["let s0: Nat satisfy { partial[Real](mul_seq(r, r.pow), s0) != mul_seq(r, partial[Real](r.pow), s0) }","partial[Real](mul_seq(r, r.pow), s0) = mul_seq(r, partial[Real](r.pow), s0)"]}
{"goal":"limit(partial[Real](mul_seq(r, r.pow))) = limit(mul_seq(r, partial[Real](r.pow)))","proof":["partial[Real](mul_seq(r, r.pow)) != mul_seq(r, partial[Real](r.pow))"]}
{"goal":"converges(partial[Real](r.pow))","proof":[]}
{"goal":"converges(mul_seq(r, partial[Real](r.pow)))","proof":[]}
{"goal":"limit(mul_seq(r, partial[Real](r.pow))) = r * limit(partial[Real](r.pow))","proof":["not converges(partial[Real](r.pow)) or converges_to(mul_seq(r, partial[Real](r.pow)), r * limit(partial[Real](r.pow)))","not converges_to(mul_seq(r, partial[Real](r.pow)), r * limit(partial[Real](r.pow))) or not converges_to(mul_seq(r, partial[Real](r.pow)), limit(mul_seq(r, partial[Real](r.pow)))) or limit(mul_seq(r, partial[Real](r.pow))) = r * limit(partial[Real](r.pow))","not converges(mul_seq(r, partial[Real](r.pow))) or converges_to(mul_seq(r, partial[Real](r.pow)), limit(mul_seq(r, partial[Real](r.pow))))","not converges_to(mul_seq(r, partial[Real](r.pow)), limit(mul_seq(r, partial[Real](r.pow)))) or not converges_to(mul_seq(r, partial[Real](r.pow)), r * limit(partial[Real](r.pow)))","converges_to(mul_seq(r, partial[Real](r.pow)), limit(mul_seq(r, partial[Real](r.pow))))","converges_to(mul_seq(r, partial[Real](r.pow)), r * limit(partial[Real](r.pow)))"]}
{"goal":"limit(partial[Real](mul_seq(r, r.pow))) = r * limit(partial[Real](r.pow))","proof":["limit(mul_seq(r, partial[Real](r.pow))) != r * limit(partial[Real](r.pow))"]}
{"goal":"geom_series_no_div","proof":[]}
