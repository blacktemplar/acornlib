{"goal":"r - (r - Rat.1) = Rat.1","proof":["r + -Rat.1 = r - Rat.1","r - (r + -Rat.1) = --Rat.1","--Rat.1 = Rat.1","r - (r + -Rat.1) != Rat.1"]}
{"goal":"r > r - Rat.1","proof":["not Rat.1.is_positive or r > r - Rat.1","not Rat.1.is_positive"]}
{"goal":"not r > r","proof":["not r < r or not r < r","r < r = r > r","r < r"]}
{"goal":"gt_is_cut","proof":["let s0: Rat satisfy { true }","not r > r - Rat.1 or is_cut(r.gt) or r > s0","not r > s0 or is_cut(r.gt) or r > r","not r > r - Rat.1 or r > s0","not r > s0 or r > r","r > s0","not r > s0"]}
{"goal":"y < r","proof":["y < r = r > y"]}
{"goal":"x < r","proof":["not x < y or not y < r or x < r","not x < y or not y < r"]}
{"goal":"r > x","proof":["x < r = r > x"]}
{"goal":"gt_is_lower","proof":["let (s0: Rat -> Bool -> Rat, s1: Rat -> Bool -> Rat) satisfy { forall(x0: Rat -> Bool, x1: Rat, x2: Rat) { not is_lower(x0) or not x1 < x2 or not x0(x2) or x0(x1) } and forall(x3: Rat -> Bool) { is_lower(x3) or x3(s1(x3)) } and forall(x4: Rat -> Bool) { s0(x4) < s1(x4) or is_lower(x4) } and forall(x5: Rat -> Bool) { not x5(s0(x5)) or is_lower(x5) } }","not r > s1(r.gt) or not s0(r.gt) < s1(r.gt) or r > s0(r.gt)","s0(r.gt) < s1(r.gt) or is_lower(r.gt)","not r > s0(r.gt) or is_lower(r.gt)","not r > s0(r.gt)","is_lower(r.gt) or r > s1(r.gt)","r > s1(r.gt)","s0(r.gt) < s1(r.gt)"]}
{"goal":"exists(k0: Rat) { is_greatest(r.gt, k0) }","proof":["let s0: Rat -> Bool -> Rat satisfy { forall(x0: Rat -> Bool) { not has_greatest(x0) or is_greatest(x0, s0(x0)) } and forall(x1: Rat -> Bool, x2: Rat) { not is_greatest(x1, x2) or has_greatest(x1) } }","not is_greatest(r.gt, s0(r.gt))","not has_greatest(r.gt) or is_greatest(r.gt, s0(r.gt))"]}
{"goal":"r > q","proof":["not is_greatest(r.gt, q) or r > q"]}
{"goal":"diff.is_positive","proof":["not (r - q).is_positive","not q <= r or (r - q).is_positive or q = r","r > q = q < r","q < r","not q < r or q <= r","not q < r or q != r","q != r","q <= r","not q <= r"]}
{"goal":"q + diff = r","proof":["diff + q = q + diff","diff + q != r","r - q + q = r"]}
{"goal":"(diff / Rat.2).is_positive","proof":["not diff.is_positive or not Rat.2.reciprocal.is_positive or (diff * Rat.2.reciprocal).is_positive","diff * Rat.2.reciprocal = diff / Rat.2","not (diff * Rat.2.reciprocal).is_positive","not Rat.2.reciprocal.is_positive"]}
{"goal":"q < z","proof":["not (diff / Rat.2).is_positive or q < q + diff / Rat.2","not q < q + diff / Rat.2"]}
{"goal":"z + diff / Rat.2 = r","proof":["q + (diff / Rat.2 + diff / Rat.2) = q + diff / Rat.2 + diff / Rat.2","diff / Rat.2 + diff / Rat.2 = diff"]}
{"goal":"z < r","proof":["not (diff / Rat.2).is_positive or z < z + diff / Rat.2","not z < z + diff / Rat.2"]}
{"goal":"r > z","proof":["r > z = z < r"]}
{"goal":"q >= z","proof":["not is_greatest(r.gt, q) or not r > z or z <= q","q >= z = z <= q","not z <= q","not is_greatest(r.gt, q) or not r > z"]}
{"goal":"false","proof":["not z <= q or z < q or z = q","not z < q or not q < z","q >= z = z <= q","z <= q","not q < q","not z < q","z = q"]}
{"goal":"gt_has_no_greatest","proof":[]}
{"goal":"gt_is_dedekind_cut","proof":["not is_lower(r.gt) or not is_cut(r.gt) or has_greatest(r.gt) or is_dedekind_cut(r.gt)"]}
{"goal":"exists(k0: Rat -> Bool) { is_dedekind_cut(k0) }","proof":["let s0: Rat satisfy { true }","not is_dedekind_cut(s0.gt)","is_dedekind_cut(s0.gt)"]}
{"goal":"lte_self","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Rat, x2: Real) { not x0.gt_rat(x1) or not x0 <= x2 or x2.gt_rat(x1) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not r.gt_rat(s0(r, r)) or r <= r","not r.gt_rat(s0(r, r))","r.gt_rat(s0(r, r)) or r <= r"]}
{"goal":"lte_trans","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Rat, x2: Real) { not x0.gt_rat(x1) or not x0 <= x2 or x2.gt_rat(x1) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not a.gt_rat(s0(a, c)) or not a <= b or b.gt_rat(s0(a, c))","not b.gt_rat(s0(a, c)) or not b <= c or c.gt_rat(s0(a, c))","not c.gt_rat(s0(a, c)) or a <= c","not c.gt_rat(s0(a, c))","a.gt_rat(s0(a, c)) or a <= c","a.gt_rat(s0(a, c))","not b.gt_rat(s0(a, c)) or c.gt_rat(s0(a, c))","not a.gt_rat(s0(a, c)) or b.gt_rat(s0(a, c))","not b.gt_rat(s0(a, c))","b.gt_rat(s0(a, c))"]}
{"goal":"is_lower(z.gt_rat)","proof":["not is_dedekind_cut(z.gt_rat) or is_lower(z.gt_rat)","not is_dedekind_cut(z.gt_rat)","is_dedekind_cut(z.gt_rat)"]}
{"goal":"z.gt_rat(r2)","proof":["not is_lower(Real.new(z.gt_rat).gt_rat) or not r2 < r1 or not Real.new(z.gt_rat).gt_rat(r1) or Real.new(z.gt_rat).gt_rat(r2)","Real.new(z.gt_rat) = z","not Real.new(z.gt_rat).gt_rat(r2)","Real.new(z.gt_rat).gt_rat(r1)","is_lower(Real.new(z.gt_rat).gt_rat)","not is_lower(Real.new(z.gt_rat).gt_rat) or not Real.new(z.gt_rat).gt_rat(r1) or Real.new(z.gt_rat).gt_rat(r2)"]}
{"goal":"false","proof":["not z <= q or (q - z).is_positive or z = q","(q - z).is_positive = z < q","not z < q or not q < z","q >= z = z <= q","z <= q","not q < q","not z < q","(q - z).is_positive or z = q","not (q - z).is_positive","z = q"]}
{"goal":"z.gt_rat(r2)","proof":[]}
{"goal":"false","proof":[]}
{"goal":"gt_rat_sorts","proof":["not r2 <= r1 or r2 < r1 or r2 = r1","r2 <= r1 or r1 <= r2","not r2 <= r1","r2 <= r1"]}
{"goal":"exists(k0: Rat) { a.gt_rat(k0) and not b.gt_rat(k0) }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Rat, x2: Real) { not x0.gt_rat(x1) or not x0 <= x2 or x2.gt_rat(x1) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not a.gt_rat(s0(a, b)) or b.gt_rat(s0(a, b))","not b.gt_rat(s0(a, b)) or a <= b","a.gt_rat(s0(a, b)) or a <= b","a.gt_rat(s0(a, b))","not b.gt_rat(s0(a, b))","b.gt_rat(s0(a, b))"]}
{"goal":"r2 < r1","proof":["not b.gt_rat(r2) or b.gt_rat(r1) or r2 <= r1","not r2 <= r1 or r2 < r1 or r2 = r1","not r2 <= r1 or r2 = r1","not b.gt_rat(r2) or r2 <= r1","r2 <= r1","r2 = r1"]}
{"goal":"a.gt_rat(r2)","proof":["not a.gt_rat(r1) or a.gt_rat(r2) or r1 <= r2","not r2 < r1 or not r1 <= r2 or r2 < r2","not a.gt_rat(r1) or r1 <= r2","r1 <= r2","not r2 < r2","not r1 <= r2 or r2 < r2"]}
{"goal":"b <= a","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Rat, x2: Real) { not x0.gt_rat(x1) or not x0 <= x2 or x2.gt_rat(x1) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not b.gt_rat(s0(b, a)) or a.gt_rat(s0(b, a))","not a.gt_rat(s0(b, a)) or b <= a","not a.gt_rat(s0(b, a))","b.gt_rat(s0(b, a)) or b <= a","not b.gt_rat(s0(b, a))","b.gt_rat(s0(b, a))"]}
{"goal":"lte_or_gte","proof":[]}
{"goal":"b.gt_rat(r)","proof":["not a <= b or not a.gt_rat(r) or b.gt_rat(r)","not a <= b or not a.gt_rat(r)"]}
{"goal":"a.gt_rat(r) = b.gt_rat(r)","proof":["not a.gt_rat(r)"]}
{"goal":"not a.gt_rat(r)","proof":[]}
{"goal":"not b.gt_rat(r)","proof":["not b <= a or not b.gt_rat(r) or a.gt_rat(r)","not b <= a or a.gt_rat(r)"]}
{"goal":"a.gt_rat(r) = b.gt_rat(r)","proof":["a.gt_rat(r)"]}
{"goal":"a.gt_rat = b.gt_rat","proof":["let s0: Rat satisfy { b.gt_rat(s0) != a.gt_rat(s0) }","b.gt_rat(s0) = a.gt_rat(s0)"]}
{"goal":"a = b","proof":["Real.new(a.gt_rat) = a","Real.new(b.gt_rat) = b"]}
{"goal":"lte_both_ways_imp_eq","proof":[]}
{"goal":"real_is_reflexive","proof":["let s0: (Real, Real) -> Bool -> Real satisfy { forall(x0: (Real, Real) -> Bool, x1: Real) { not is_reflexive[Real](x0) or x0(x1, x1) } and forall(x2: (Real, Real) -> Bool) { not x2(s0(x2), s0(x2)) or is_reflexive[Real](x2) } }","let s1: (Real, Real) -> Rat satisfy { forall(x3: Real, x4: Rat, x5: Real) { not x3.gt_rat(x4) or not x3 <= x5 or x5.gt_rat(x4) } and forall(x6: Real, x7: Real) { x6.gt_rat(s1(x6, x7)) or x6 <= x7 } and forall(x8: Real, x9: Real) { not x8.gt_rat(s1(x9, x8)) or x9 <= x8 } }","not s0(Real.lte).gt_rat(s1(s0(Real.lte), s0(Real.lte))) or s0(Real.lte) <= s0(Real.lte)","s0(Real.lte).gt_rat(s1(s0(Real.lte), s0(Real.lte))) or s0(Real.lte) <= s0(Real.lte)","not s0(Real.lte) <= s0(Real.lte) or is_reflexive[Real](Real.lte)","not s0(Real.lte) <= s0(Real.lte)","not s0(Real.lte).gt_rat(s1(s0(Real.lte), s0(Real.lte)))","s0(Real.lte).gt_rat(s1(s0(Real.lte), s0(Real.lte)))"]}
{"goal":"real_is_transitive","proof":["let (s0: (Real, Real) -> Bool -> Real, s1: (Real, Real) -> Bool -> Real, s2: (Real, Real) -> Bool -> Real) satisfy { forall(x0: (Real, Real) -> Bool, x1: Real, x2: Real, x3: Real) { not is_transitive[Real](x0) or not x0(x1, x2) or not x0(x2, x3) or x0(x1, x3) } and forall(x4: (Real, Real) -> Bool) { x4(s0(x4), s1(x4)) or is_transitive[Real](x4) } and forall(x5: (Real, Real) -> Bool) { x5(s1(x5), s2(x5)) or is_transitive[Real](x5) } and forall(x6: (Real, Real) -> Bool) { not x6(s0(x6), s2(x6)) or is_transitive[Real](x6) } }","not s0(Real.lte) <= s1(Real.lte) or not s1(Real.lte) <= Real.new(s2(Real.lte).gt_rat) or s0(Real.lte) <= Real.new(s2(Real.lte).gt_rat)","not s0(Real.lte) <= s2(Real.lte) or is_transitive[Real](Real.lte)","not s0(Real.lte) <= s2(Real.lte)","s1(Real.lte) <= s2(Real.lte) or is_transitive[Real](Real.lte)","s1(Real.lte) <= s2(Real.lte)","s0(Real.lte) <= s1(Real.lte) or is_transitive[Real](Real.lte)","s0(Real.lte) <= s1(Real.lte)","Real.new(s2(Real.lte).gt_rat) = s2(Real.lte)","s1(Real.lte) <= Real.new(s2(Real.lte).gt_rat)","not s0(Real.lte) <= Real.new(s2(Real.lte).gt_rat)","not s1(Real.lte) <= Real.new(s2(Real.lte).gt_rat) or s0(Real.lte) <= Real.new(s2(Real.lte).gt_rat)"]}
{"goal":"real_is_antisymmetric","proof":["let (s0: (Real, Real) -> Bool -> Real, s1: (Real, Real) -> Bool -> Real) satisfy { forall(x0: (Real, Real) -> Bool, x1: Real, x2: Real) { not is_antisymmetric[Real](x0) or not x0(x1, x2) or not x0(x2, x1) or x1 = x2 } and forall(x3: (Real, Real) -> Bool) { x3(s0(x3), s1(x3)) or is_antisymmetric[Real](x3) } and forall(x4: (Real, Real) -> Bool) { x4(s1(x4), s0(x4)) or is_antisymmetric[Real](x4) } and forall(x5: (Real, Real) -> Bool) { s1(x5) != s0(x5) or is_antisymmetric[Real](x5) } }","not s1(Real.lte) <= s0(Real.lte) or not s0(Real.lte) <= s1(Real.lte) or s1(Real.lte) = s0(Real.lte)","s1(Real.lte) <= s0(Real.lte) or is_antisymmetric[Real](Real.lte)","s1(Real.lte) <= s0(Real.lte)","s0(Real.lte) <= s1(Real.lte) or is_antisymmetric[Real](Real.lte)","s0(Real.lte) <= s1(Real.lte)","s1(Real.lte) != s0(Real.lte) or is_antisymmetric[Real](Real.lte)","s1(Real.lte) = s0(Real.lte)","s1(Real.lte) != s0(Real.lte)"]}
{"goal":"is_antisymmetric[Real](Real.lte) and is_reflexive[Real](Real.lte) and is_transitive[Real](Real.lte)","proof":["not is_transitive[Real](Real.lte) or not is_reflexive[Real](Real.lte)","not is_reflexive[Real](Real.lte)"]}
{"goal":"forall(x0: Real, x1: Real) { PartialOrder.lte[Real](x0, x1) or PartialOrder.lte[Real](x1, x0) }","proof":["let (s0: Real, s1: Real) satisfy { not s0 <= s1 and not s1 <= s0 }","s0 <= s1 or s1 <= s0"]}
{"goal":"gt_imp_from_rat_gt","proof":["not is_dedekind_cut(r1.gt) or not r1 > r2 or Real.new(r1.gt).gt_rat(r2)","Real.new(r1.gt) = Real.from_rat(r1)","not Real.new(r1.gt).gt_rat(r2)","is_dedekind_cut(r1.gt)"]}
{"goal":"from_rat_gt_imp_gt","proof":["not Real.new(r1.gt).gt_rat(r2) or not is_dedekind_cut(r1.gt) or r1 > r2","Real.new(r1.gt) = Real.from_rat(r1)","is_dedekind_cut(r1.gt)","Real.new(r1.gt).gt_rat(r2)"]}
{"goal":"r > r","proof":["not Real.from_rat(r).gt_rat(r) or r > r"]}
{"goal":"false","proof":["-(Rat.0 - r) = r - Rat.0","not --r < r or not r < --r","--r < r = r > --r","r < --r = --r > r","Rat.0 - r = -r","r - Rat.0 = r","not --r < r"]}
{"goal":"not_gt_rat_self","proof":["not Real.from_rat(r).gt_rat(r) or r > r","r > r","not r < r or not r < r","r < r = r > r","r < r"]}
{"goal":"not Rat.0 > Rat.0","proof":["not Rat.0 < Rat.0 or not Rat.0 < Rat.0","Rat.0 < Rat.0 = Rat.0 > Rat.0","Rat.0 < Rat.0"]}
{"goal":"not Real.from_rat(Rat.0).gt_rat(Rat.0)","proof":["not Real.from_rat(Rat.0).gt_rat(Rat.0) or Rat.0 > Rat.0"]}
{"goal":"not Real.from_rat(Rat.0).is_positive","proof":["Real.from_rat(Rat.0).gt_rat(Rat.0) = Real.from_rat(Rat.0).is_positive"]}
{"goal":"zero_not_positive","proof":[]}
{"goal":"gte_self","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Rat, x2: Real) { not x0.gt_rat(x1) or not x0 <= x2 or x2.gt_rat(x1) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not r.gt_rat(s0(r, r)) or r <= r","r.gt_rat(s0(r, r)) or r <= r","r >= r = r <= r","not r <= r","not r.gt_rat(s0(r, r))","r.gt_rat(s0(r, r))"]}
{"goal":"exists(k0: Rat) { Real.from_rat(r).gt_rat(k0) and not a.gt_rat(k0) }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Rat, x2: Real) { not x0.gt_rat(x1) or not x0 <= x2 or x2.gt_rat(x1) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not Real.from_rat(r).gt_rat(s0(Real.from_rat(r), a)) or a.gt_rat(s0(Real.from_rat(r), a))","not a.gt_rat(s0(Real.from_rat(r), a)) or Real.from_rat(r) <= a","Real.from_rat(r).gt_rat(s0(Real.from_rat(r), a)) or Real.from_rat(r) <= a","not a.gt_rat(s0(Real.from_rat(r), a))","Real.from_rat(r).gt_rat(s0(Real.from_rat(r), a))","not Real.from_rat(r).gt_rat(s0(Real.from_rat(r), a))"]}
{"goal":"r < r2","proof":["not a.gt_rat(r) or not a <= Real.from_rat(r) or Real.from_rat(r).gt_rat(r)","a <= Real.from_rat(r) or Real.from_rat(r) <= a","not Real.from_rat(r).gt_rat(r)","a <= Real.from_rat(r)","not a <= Real.from_rat(r) or Real.from_rat(r).gt_rat(r)"]}
{"goal":"a.gt_rat(r2)","proof":["not a.gt_rat(r) or not a <= Real.from_rat(r) or Real.from_rat(r).gt_rat(r)","a <= Real.from_rat(r) or Real.from_rat(r) <= a","not Real.from_rat(r).gt_rat(r)","a <= Real.from_rat(r)","not a <= Real.from_rat(r) or Real.from_rat(r).gt_rat(r)"]}
{"goal":"false","proof":[]}
{"goal":"false","proof":["not Real.from_rat(r).gt_rat(r)"]}
{"goal":"gt_rat_imp_gt_from_rat","proof":["not Real.from_rat(r) <= a or PartialOrder.lt<Real>(Real.from_rat(r), a) or Real.from_rat(r) = a","a > Real.from_rat(r) = PartialOrder.lt<Real>(Real.from_rat(r), a)","PartialOrder.lt<Real>(Real.from_rat(r), a)","not PartialOrder.lt<Real>(Real.from_rat(r), a)"]}
{"goal":"not a <= Real.from_rat(r)","proof":["not a > Real.from_rat(r) or a.min(Real.from_rat(r)) = Real.from_rat(r)","not a <= Real.from_rat(r) or a.min(Real.from_rat(r)) = a","a.min(Real.from_rat(r)) = a","PartialOrder.lt<Real>(Real.from_rat(r), a) = a > Real.from_rat(r)","not PartialOrder.lt<Real>(a.min(Real.from_rat(r)), a) or a.min(Real.from_rat(r)) != a","PartialOrder.lt<Real>(Real.from_rat(r), a)","a.min(Real.from_rat(r)) = Real.from_rat(r)","not PartialOrder.lt<Real>(a.min(Real.from_rat(r)), a)","PartialOrder.lt<Real>(a.min(Real.from_rat(r)), a)"]}
{"goal":"exists(k0: Rat) { a.gt_rat(k0) and not Real.from_rat(r).gt_rat(k0) }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Rat, x2: Real) { not x0.gt_rat(x1) or not x0 <= x2 or x2.gt_rat(x1) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not a.gt_rat(s0(a, Real.from_rat(r))) or Real.from_rat(r).gt_rat(s0(a, Real.from_rat(r)))","not Real.from_rat(r).gt_rat(s0(a, Real.from_rat(r))) or a <= Real.from_rat(r)","a.gt_rat(s0(a, Real.from_rat(r))) or a <= Real.from_rat(r)","a.gt_rat(s0(a, Real.from_rat(r)))","not Real.from_rat(r).gt_rat(s0(a, Real.from_rat(r)))","Real.from_rat(r).gt_rat(s0(a, Real.from_rat(r)))"]}
{"goal":"gt_from_rat_imp_gt_rat","proof":["let s0: Rat satisfy { a.gt_rat(s0) and not Real.from_rat(r).gt_rat(s0) }","not a.gt_rat(s0) or a.gt_rat(r) or s0 <= r","not r < s0 or not s0 <= r or r < r","r > s0 or r < s0 or s0 = r","not r > s0 or Real.from_rat(r).gt_rat(s0)","not a.gt_rat(s0) or s0 <= r","s0 <= r","not r < r","not r > s0","not r < s0 or r < r","not r < s0","s0 = r"]}
{"goal":"a.is_positive","proof":[]}
{"goal":"a.gt_rat(Rat.0)","proof":["a.gt_rat(Rat.0) = a.is_positive"]}
{"goal":"a > Real.from_rat(Rat.0)","proof":["not a.gt_rat(Rat.0) or a > Real.from_rat(Rat.0)"]}
{"goal":"pos_gt_zero","proof":[]}
{"goal":"a > Real.0","proof":[]}
{"goal":"a > Real.from_rat(Rat.0)","proof":[]}
{"goal":"a.gt_rat(Rat.0)","proof":["not a > Real.from_rat(Rat.0) or a.gt_rat(Rat.0)"]}
{"goal":"a.is_positive","proof":["a.gt_rat(Rat.0) = a.is_positive"]}
{"goal":"gt_zero_imp_pos","proof":[]}
{"goal":"Real.0 <= a","proof":["not a <= Real.0 or a < Real.0 or Real.0 = a","let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Rat, x2: Real) { not x0.gt_rat(x1) or not x0 <= x2 or x2.gt_rat(x1) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not a.gt_rat(s0(Real.0, a)) or Real.0 <= a","not a.gt_rat(s0(Real.0, a))","Real.0.gt_rat(s0(Real.0, a)) or Real.0 <= a","Real.0.gt_rat(s0(Real.0, a))","a <= Real.0 or Real.0 <= a","a <= Real.0","Real.0 = a"]}
{"goal":"false","proof":[]}
{"goal":"a > Real.0","proof":["a.max(Real.0) = Real.0 or a > Real.0","a.max(Real.0) = Real.0","not Real.0 <= a or a.max(Real.0) = a","a.max(Real.0) != a","a.max(Real.0) = a"]}
{"goal":"a.is_positive","proof":["not a > Real.0 or a.is_positive"]}
{"goal":"false","proof":["not a.is_positive or not a.is_negative"]}
{"goal":"neg_lt_zero","proof":[]}
{"goal":"a.is_positive","proof":["a.is_positive or Real.0 = a or a.is_negative","Real.0 = a","not a < Real.0 or Real.0 != a"]}
{"goal":"a > Real.0","proof":["not a.is_positive or a > Real.0"]}
{"goal":"a >= Real.0","proof":["PartialOrder.lt<Real>(Real.0, a) = a > Real.0","not PartialOrder.lt<Real>(Real.0, a) or Real.0 <= a","a >= Real.0 = Real.0 <= a","not Real.0 <= a","PartialOrder.lt<Real>(Real.0, a)","not PartialOrder.lt<Real>(Real.0, a)"]}
{"goal":"a = Real.0","proof":["not a <= Real.0 or not Real.0 <= a or Real.0 = a","a >= Real.0 = Real.0 <= a","Real.0 <= a","not a <= Real.0","not a < Real.0 or a <= Real.0"]}
{"goal":"false","proof":["Real.0.is_negative","Real.0 != Real.0 or not Real.0.is_negative"]}
{"goal":"lt_zero_imp_neg","proof":[]}
{"goal":"exists(k0: Rat, k1: Rat) { z1.gt_rat(k0) and z2.gt_rat(k1) and r = k0 + k1 }","proof":["let (s0: (Real, Real, Rat) -> Rat, s1: (Real, Real, Rat) -> Rat) satisfy { forall(x0: Real, x1: Real, x2: Rat) { not add_gt(x0, x1, x2) or x0.gt_rat(s0(x0, x1, x2)) } and forall(x3: Real, x4: Real, x5: Rat) { not add_gt(x3, x4, x5) or x4.gt_rat(s1(x3, x4, x5)) } and forall(x6: Real, x7: Real, x8: Rat) { not add_gt(x6, x7, x8) or s0(x6, x7, x8) + s1(x6, x7, x8) = x8 } and forall(x9: Real, x10: Rat, x11: Real, x12: Rat, x13: Rat) { not x9.gt_rat(x10) or not x11.gt_rat(x12) or x10 + x12 != x13 or add_gt(x9, x11, x13) } }","not z2.gt_rat(s1(z1, z2, r)) or not z1.gt_rat(s0(z1, z2, r)) or s0(z1, z2, r) + s1(z1, z2, r) != r","not add_gt(z1, z2, r) or s0(z1, z2, r) + s1(z1, z2, r) = r","not add_gt(z1, z2, r) or z2.gt_rat(s1(z1, z2, r))","not add_gt(z1, z2, r) or z1.gt_rat(s0(z1, z2, r))","z1.gt_rat(s0(z1, z2, r))","z2.gt_rat(s1(z1, z2, r))","s0(z1, z2, r) + s1(z1, z2, r) = r"]}
{"goal":"add_gt(z2, z1, r2 + r1)","proof":["not Real.new(z2.gt_rat).gt_rat(r2) or not z1.gt_rat(r1) or r2 + r1 != r2 + r1 or add_gt(Real.new(z2.gt_rat), z1, r2 + r1)","Real.new(z2.gt_rat) = z2","not add_gt(Real.new(z2.gt_rat), z1, r2 + r1)","Real.new(z2.gt_rat).gt_rat(r2)","not Real.new(z2.gt_rat).gt_rat(r2) or not z1.gt_rat(r1) or add_gt(Real.new(z2.gt_rat), z1, r2 + r1)"]}
{"goal":"add_gt_symm","proof":["r2 + r1 = r1 + r2"]}
{"goal":"is_cut(z.gt_rat)","proof":["not is_dedekind_cut(z.gt_rat) or is_cut(z.gt_rat)","not is_dedekind_cut(z.gt_rat)","is_dedekind_cut(z.gt_rat)"]}
{"goal":"exists_lesser_rat","proof":["let (s0: Rat -> Bool -> Rat, s1: Rat -> Bool -> Rat) satisfy { forall(x0: Rat -> Bool) { not is_cut(x0) or x0(s0(x0)) } and forall(x1: Rat -> Bool) { not is_cut(x1) or not x1(s1(x1)) } and forall(x2: Rat -> Bool, x3: Rat, x4: Rat) { not x2(x3) or is_cut(x2) or x2(x4) } }","not z.gt_rat(s0(z.gt_rat))","not is_cut(z.gt_rat) or z.gt_rat(s0(z.gt_rat))"]}
{"goal":"is_cut(z.gt_rat)","proof":["not is_dedekind_cut(z.gt_rat) or is_cut(z.gt_rat)","not is_dedekind_cut(z.gt_rat)","is_dedekind_cut(z.gt_rat)"]}
{"goal":"exists_gte_rat","proof":["let (s0: Rat -> Bool -> Rat, s1: Rat -> Bool -> Rat) satisfy { forall(x0: Rat -> Bool) { not is_cut(x0) or x0(s0(x0)) } and forall(x1: Rat -> Bool) { not is_cut(x1) or not x1(s1(x1)) } and forall(x2: Rat -> Bool, x3: Rat, x4: Rat) { not x2(x3) or is_cut(x2) or x2(x4) } }","z.gt_rat(s1(z.gt_rat))","not is_cut(z.gt_rat) or not z.gt_rat(s1(z.gt_rat))"]}
{"goal":"exists(k0: Rat) { z1.gt_rat(k0) }","proof":["let s0: Real -> Rat satisfy { forall(x0: Real) { x0.gt_rat(s0(x0)) } }","not z1.gt_rat(s0(z1))","z1.gt_rat(s0(z1))"]}
{"goal":"exists(k0: Rat) { z2.gt_rat(k0) }","proof":["let s0: Real -> Rat satisfy { forall(x0: Real) { x0.gt_rat(s0(x0)) } }","not z2.gt_rat(s0(z2))","z2.gt_rat(s0(z2))"]}
{"goal":"add_gt(z1, z2, lower1 + lower2)","proof":["not Real.new(z1.gt_rat).gt_rat(lower1) or not z2.gt_rat(lower2) or lower1 + lower2 != lower1 + lower2 or add_gt(Real.new(z1.gt_rat), z2, lower1 + lower2)","Real.new(z1.gt_rat) = z1","not add_gt(Real.new(z1.gt_rat), z2, lower1 + lower2)","Real.new(z1.gt_rat).gt_rat(lower1)","not Real.new(z1.gt_rat).gt_rat(lower1) or not z2.gt_rat(lower2) or add_gt(Real.new(z1.gt_rat), z2, lower1 + lower2)"]}
{"goal":"exists(k0: Rat) { not z1.gt_rat(k0) }","proof":["let s0: Real -> Rat satisfy { forall(x0: Real) { not x0.gt_rat(s0(x0)) } }","z1.gt_rat(s0(z1))","not z1.gt_rat(s0(z1))"]}
{"goal":"exists(k0: Rat) { not z2.gt_rat(k0) }","proof":["let s0: Real -> Rat satisfy { forall(x0: Real) { not x0.gt_rat(s0(x0)) } }","z2.gt_rat(s0(z2))","not z2.gt_rat(s0(z2))"]}
{"goal":"exists(k0: Rat, k1: Rat) { z1.gt_rat(k0) and z2.gt_rat(k1) and upper1 + upper2 = k0 + k1 }","proof":["let (s0: (Real, Real, Rat) -> Rat, s1: (Real, Real, Rat) -> Rat) satisfy { forall(x0: Real, x1: Real, x2: Rat) { not add_gt(x0, x1, x2) or x0.gt_rat(s0(x0, x1, x2)) } and forall(x3: Real, x4: Real, x5: Rat) { not add_gt(x3, x4, x5) or x4.gt_rat(s1(x3, x4, x5)) } and forall(x6: Real, x7: Real, x8: Rat) { not add_gt(x6, x7, x8) or s0(x6, x7, x8) + s1(x6, x7, x8) = x8 } and forall(x9: Real, x10: Rat, x11: Real, x12: Rat, x13: Rat) { not x9.gt_rat(x10) or not x11.gt_rat(x12) or x10 + x12 != x13 or add_gt(x9, x11, x13) } }","s0(z1, z2, upper1 + upper2) + s1(z1, z2, upper1 + upper2) != upper1 + upper2 or not z2.gt_rat(s1(z1, z2, upper1 + upper2)) or not z1.gt_rat(s0(z1, z2, upper1 + upper2))","not add_gt(z1, z2, upper1 + upper2) or s0(z1, z2, upper1 + upper2) + s1(z1, z2, upper1 + upper2) = upper1 + upper2","not add_gt(z1, z2, upper1 + upper2) or z2.gt_rat(s1(z1, z2, upper1 + upper2))","not add_gt(z1, z2, upper1 + upper2) or z1.gt_rat(s0(z1, z2, upper1 + upper2))","z1.gt_rat(s0(z1, z2, upper1 + upper2))","z2.gt_rat(s1(z1, z2, upper1 + upper2))","s0(z1, z2, upper1 + upper2) + s1(z1, z2, upper1 + upper2) = upper1 + upper2"]}
{"goal":"f1 < upper1","proof":["not z1.gt_rat(f1) or z1.gt_rat(upper1) or f1 <= upper1","not f1 <= upper1 or f1 < upper1 or f1 = upper1","not f1 <= upper1 or f1 = upper1","not z1.gt_rat(f1) or f1 <= upper1","f1 <= upper1","f1 = upper1"]}
{"goal":"f2 < upper2","proof":["not z2.gt_rat(f2) or z2.gt_rat(upper2) or f2 <= upper2","not f2 <= upper2 or f2 < upper2 or f2 = upper2","not f2 <= upper2 or f2 = upper2","not z2.gt_rat(f2) or f2 <= upper2","f2 <= upper2","f2 = upper2"]}
{"goal":"f1 + f2 < upper1 + f2","proof":["not f1 < upper1 or f1 + f2 < upper1 + f2"]}
{"goal":"upper1 + f2 < upper1 + upper2","proof":["not f1 < upper1 or not f2 < upper2 or f1 + f2 < upper1 + upper2","not f1 + f2 < upper1 + upper2 or f1 + f2 != upper1 + upper2","not f1 + f2 < upper1 + upper2"]}
{"goal":"f1 + f2 < upper1 + upper2","proof":["not f1 < upper1 or not f2 < upper2 or f1 + f2 < upper1 + upper2"]}
{"goal":"false","proof":["not upper1 + f2 < f1 + f2 or not f1 + f2 < upper1 + f2","upper1 + f2 < f1 + f2","not upper1 + f2 < f1 + f2"]}
{"goal":"add_gt_is_cut","proof":["let s0: Rat satisfy { true }","not add_gt(z1, z2, lower1 + lower2) or is_cut(add_gt(z1, z2)) or add_gt(z1, z2, s0)","not add_gt(z1, z2, s0) or is_cut(add_gt(z1, z2)) or add_gt(z1, z2, upper1 + upper2)","not add_gt(z1, z2, lower1 + lower2) or add_gt(z1, z2, s0)","not add_gt(z1, z2, s0) or add_gt(z1, z2, upper1 + upper2)","add_gt(z1, z2, s0)","not add_gt(z1, z2, s0)"]}
{"goal":"exists(k0: Rat, k1: Rat) { z1.gt_rat(k0) and z2.gt_rat(k1) and r2 = k0 + k1 }","proof":["let (s0: (Real, Real, Rat) -> Rat, s1: (Real, Real, Rat) -> Rat) satisfy { forall(x0: Real, x1: Real, x2: Rat) { not add_gt(x0, x1, x2) or x0.gt_rat(s0(x0, x1, x2)) } and forall(x3: Real, x4: Real, x5: Rat) { not add_gt(x3, x4, x5) or x4.gt_rat(s1(x3, x4, x5)) } and forall(x6: Real, x7: Real, x8: Rat) { not add_gt(x6, x7, x8) or s0(x6, x7, x8) + s1(x6, x7, x8) = x8 } and forall(x9: Real, x10: Rat, x11: Real, x12: Rat, x13: Rat) { not x9.gt_rat(x10) or not x11.gt_rat(x12) or x10 + x12 != x13 or add_gt(x9, x11, x13) } }","not z2.gt_rat(s1(z1, z2, r2)) or not z1.gt_rat(s0(z1, z2, r2)) or s0(z1, z2, r2) + s1(z1, z2, r2) != r2","not add_gt(z1, z2, r2) or s0(z1, z2, r2) + s1(z1, z2, r2) = r2","not add_gt(z1, z2, r2) or z2.gt_rat(s1(z1, z2, r2))","not add_gt(z1, z2, r2) or z1.gt_rat(s0(z1, z2, r2))","z1.gt_rat(s0(z1, z2, r2))","z2.gt_rat(s1(z1, z2, r2))","s0(z1, z2, r2) + s1(z1, z2, r2) = r2"]}
{"goal":"(r2 - r1).is_positive","proof":["not r1 <= r2 or (r2 - r1).is_positive or r1 = r2","not r1 < r2 or r1 <= r2","not r1 < r2 or r1 != r2","r1 != r2","r1 <= r2","not r1 <= r2"]}
{"goal":"f1 + f2 + -(r2 - r1) = r2 + -(r2 - r1)","proof":["f1 + f2 != r2"]}
{"goal":"f1 + f2 + -(r2 - r1) = r1","proof":["-(r2 - r1) = r1 - r2","f1 + f2 + -(r2 - r1) = -(r2 - r1) + (f1 + f2)","-(r2 - r1) + (f1 + f2) != r1","-(r2 - r1) + r2 != r1","r1 - r2 + r2 != r1","r1 - r2 + r2 = r1"]}
{"goal":"f1 + (f2 + -(r2 - r1)) = r1","proof":["f1 + (f2 + -(r2 - r1)) = f1 + f2 + -(r2 - r1)"]}
{"goal":"f2 + -(r2 - r1) < f2","proof":["not (-(r2 - r1)).is_negative or f2 + -(r2 - r1) < f2","not (-(r2 - r1)).is_negative","not (r2 - r1).is_positive or (-(r2 - r1)).is_negative"]}
{"goal":"not f2 <= f2 + -(r2 - r1)","proof":["not f2 <= f2 + -(r2 - r1) or not f2 + -(r2 - r1) < f2 or f2 + -(r2 - r1) < f2 + -(r2 - r1)","not f2 + -(r2 - r1) < f2 + -(r2 - r1)","not f2 + -(r2 - r1) < f2 or f2 + -(r2 - r1) < f2 + -(r2 - r1)"]}
{"goal":"z2.gt_rat(f2 + -(r2 - r1))","proof":["not z2.gt_rat(f2) or z2.gt_rat(f2 + -(r2 - r1)) or f2 <= f2 + -(r2 - r1)","not z2.gt_rat(f2) or f2 <= f2 + -(r2 - r1)"]}
{"goal":"add_gt(z1, z2, r1)","proof":["not z1.gt_rat(f1) or not z2.gt_rat(f2 + -(r2 - r1)) or f1 + (f2 + -(r2 - r1)) != r1 or add_gt(z1, z2, r1)","not z2.gt_rat(f2 + -(r2 - r1)) or not z1.gt_rat(f1) or f1 + (f2 + -(r2 - r1)) != r1"]}
{"goal":"add_gt_is_lower","proof":["let (s0: Rat -> Bool -> Rat, s1: Rat -> Bool -> Rat) satisfy { forall(x0: Rat -> Bool, x1: Rat, x2: Rat) { not is_lower(x0) or not x1 < x2 or not x0(x2) or x0(x1) } and forall(x3: Rat -> Bool) { is_lower(x3) or x3(s1(x3)) } and forall(x4: Rat -> Bool) { s0(x4) < s1(x4) or is_lower(x4) } and forall(x5: Rat -> Bool) { not x5(s0(x5)) or is_lower(x5) } }","not add_gt(z1, z2, s1(add_gt(z1, z2))) or not s0(add_gt(z1, z2)) < s1(add_gt(z1, z2)) or add_gt(z1, z2, s0(add_gt(z1, z2)))","s0(add_gt(z1, z2)) < s1(add_gt(z1, z2)) or is_lower(add_gt(z1, z2))","not add_gt(z1, z2, s0(add_gt(z1, z2))) or is_lower(add_gt(z1, z2))","is_lower(add_gt(z1, z2)) or add_gt(z1, z2, s1(add_gt(z1, z2)))","add_gt(z1, z2, s1(add_gt(z1, z2)))","not add_gt(z1, z2, s0(add_gt(z1, z2)))","s0(add_gt(z1, z2)) < s1(add_gt(z1, z2))"]}
{"goal":"exists(k0: Rat) { is_greatest(add_gt(z1, z2), k0) }","proof":["let s0: Rat -> Bool -> Rat satisfy { forall(x0: Rat -> Bool) { not has_greatest(x0) or is_greatest(x0, s0(x0)) } and forall(x1: Rat -> Bool, x2: Rat) { not is_greatest(x1, x2) or has_greatest(x1) } }","not is_greatest(add_gt(z1, z2), s0(add_gt(z1, z2)))","not has_greatest(add_gt(z1, z2)) or is_greatest(add_gt(z1, z2), s0(add_gt(z1, z2)))"]}
{"goal":"add_gt(z1, z2, q)","proof":["not is_greatest(add_gt(z1, z2), q) or add_gt(z1, z2, q)"]}
{"goal":"exists(k0: Rat, k1: Rat) { z1.gt_rat(k0) and z2.gt_rat(k1) and q = k0 + k1 }","proof":["let (s0: (Real, Real, Rat) -> Rat, s1: (Real, Real, Rat) -> Rat) satisfy { forall(x0: Real, x1: Real, x2: Rat) { not add_gt(x0, x1, x2) or x0.gt_rat(s0(x0, x1, x2)) } and forall(x3: Real, x4: Real, x5: Rat) { not add_gt(x3, x4, x5) or x4.gt_rat(s1(x3, x4, x5)) } and forall(x6: Real, x7: Real, x8: Rat) { not add_gt(x6, x7, x8) or s0(x6, x7, x8) + s1(x6, x7, x8) = x8 } and forall(x9: Real, x10: Rat, x11: Real, x12: Rat, x13: Rat) { not x9.gt_rat(x10) or not x11.gt_rat(x12) or x10 + x12 != x13 or add_gt(x9, x11, x13) } }","not z2.gt_rat(s1(z1, z2, q)) or not z1.gt_rat(s0(z1, z2, q)) or s0(z1, z2, q) + s1(z1, z2, q) != q","not add_gt(z1, z2, q) or s0(z1, z2, q) + s1(z1, z2, q) = q","not add_gt(z1, z2, q) or z2.gt_rat(s1(z1, z2, q))","not add_gt(z1, z2, q) or z1.gt_rat(s0(z1, z2, q))","z1.gt_rat(s0(z1, z2, q))","z2.gt_rat(s1(z1, z2, q))","s0(z1, z2, q) + s1(z1, z2, q) = q"]}
{"goal":"not is_greatest(z1.gt_rat, f1)","proof":["not is_greatest(z1.gt_rat, f1) or has_greatest(z1.gt_rat)","has_greatest(z1.gt_rat)","not is_dedekind_cut(z1.gt_rat) or not has_greatest(z1.gt_rat)","is_dedekind_cut(z1.gt_rat)"]}
{"goal":"exists(k0: Rat) { z1.gt_rat(k0) and not k0 <= f1 }","proof":["let s0: (Rat -> Bool, Rat) -> Rat satisfy { forall(x0: Rat -> Bool, x1: Rat) { not is_greatest(x0, x1) or x0(x1) } and forall(x2: Rat -> Bool, x3: Rat, x4: Rat) { not is_greatest(x2, x3) or not x2(x4) or x4 <= x3 } and forall(x5: Rat -> Bool, x6: Rat) { not x5(x6) or is_greatest(x5, x6) or x5(s0(x5, x6)) } and forall(x7: Rat -> Bool, x8: Rat) { not s0(x7, x8) <= x8 or not x7(x8) or is_greatest(x7, x8) } }","not z1.gt_rat(s0(z1.gt_rat, f1)) or s0(z1.gt_rat, f1) <= f1","not s0(z1.gt_rat, f1) <= f1 or not z1.gt_rat(f1) or is_greatest(z1.gt_rat, f1)","not z1.gt_rat(f1) or is_greatest(z1.gt_rat, f1) or z1.gt_rat(s0(z1.gt_rat, f1))","z1.gt_rat(s0(z1.gt_rat, f1))","not s0(z1.gt_rat, f1) <= f1","s0(z1.gt_rat, f1) <= f1"]}
{"goal":"f1 < g1","proof":["not f1 <= g1 or f1 < g1 or g1 = f1","g1 <= f1 or f1 <= g1","g1 != f1 or g1 <= f1","g1 != f1","f1 <= g1","not f1 <= g1"]}
{"goal":"f1 + f2 < g1 + f2","proof":["not f1 < g1 or f1 + f2 < g1 + f2"]}
{"goal":"add_gt(z1, z2, g1 + f2)","proof":["not Real.new(z1.gt_rat).gt_rat(g1) or not z2.gt_rat(f2) or g1 + f2 != g1 + f2 or add_gt(Real.new(z1.gt_rat), z2, g1 + f2)","Real.new(z1.gt_rat) = z1","not add_gt(Real.new(z1.gt_rat), z2, g1 + f2)","Real.new(z1.gt_rat).gt_rat(g1)","not Real.new(z1.gt_rat).gt_rat(g1) or not z2.gt_rat(f2) or add_gt(Real.new(z1.gt_rat), z2, g1 + f2)"]}
{"goal":"q < g1 + f2","proof":["not f1 + f2 < g1 + f2"]}
{"goal":"not g1 + f2 <= q","proof":["not q < g1 + f2 or not g1 + f2 <= q or q < q","not q < q","not q < g1 + f2 or q < q"]}
{"goal":"not is_greatest(add_gt(z1, z2), q)","proof":["not is_greatest(add_gt(z1, z2), q) or not add_gt(z1, z2, g1 + f2) or g1 + f2 <= q","not add_gt(z1, z2, g1 + f2) or g1 + f2 <= q"]}
{"goal":"false","proof":["Real.0.is_positive"]}
{"goal":"add_gt_has_no_greatest","proof":[]}
{"goal":"add_gt_is_dedekind_cut","proof":["not is_lower(add_gt(z1, z2)) or not is_cut(add_gt(z1, z2)) or has_greatest(add_gt(z1, z2)) or is_dedekind_cut(add_gt(z1, z2))","not has_greatest(add_gt(z1, z2))","is_lower(add_gt(z1, z2))","not is_cut(add_gt(z1, z2))","is_cut(add_gt(z1, z2))"]}
{"goal":"add_gt_rat","proof":["not z1.gt_rat(r1) or not z2.gt_rat(r2) or r1 + r2 != r1 + r2 or add_gt(z1, z2, r1 + r2)","not is_dedekind_cut(add_gt(z1, z2)) or not add_gt(z1, z2, r1 + r2) or Real.new(add_gt(z1, z2)).gt_rat(r1 + r2)","Real.new(add_gt(z1, z2)) = z1 + z2","is_dedekind_cut(add_gt(z1, z2))","not Real.new(add_gt(z1, z2)).gt_rat(r1 + r2)","r1 + r2 != r1 + r2 or not z1.gt_rat(r1) or add_gt(z1, z2, r1 + r2)","r1 + r2 != r1 + r2 or add_gt(z1, z2, r1 + r2)","not add_gt(z1, z2, r1 + r2)","add_gt(z1, z2, r1 + r2)"]}
{"goal":"add_gt(b, a, r)","proof":["not add_gt(a, b, r) or add_gt(b, a, r)"]}
{"goal":"add_gt(a, b, r) = add_gt(b, a, r)","proof":["not add_gt(a, b, r)"]}
{"goal":"not add_gt(b, a, r)","proof":["not add_gt(b, a, r) or add_gt(a, b, r)"]}
{"goal":"add_gt(a, b, r) = add_gt(b, a, r)","proof":["add_gt(a, b, r)"]}
{"goal":"add_gt(a, b, r) = add_gt(b, a, r)","proof":["add_gt(a, b, r)","not add_gt(b, a, r)"]}
{"goal":"add_gt(a, b) = add_gt(b, a)","proof":["let s0: Rat satisfy { add_gt(b, a, s0) != add_gt(a, b, s0) }","add_gt(b, a, s0) = add_gt(a, b, s0)"]}
{"goal":"add_comm","proof":["Real.new(add_gt(a, b)) = a + b","Real.new(add_gt(b, a)) = b + a"]}
{"goal":"add_gt(z1 + z2, z3, q)","proof":["not Real.new(add_gt(z1 + z2, z3)).gt_rat(q) or not is_dedekind_cut(add_gt(z1 + z2, z3)) or add_gt(z1 + z2, z3, q)","Real.new(add_gt(z1 + z2, z3)) = z1 + z2 + z3","is_dedekind_cut(add_gt(z1 + z2, z3))","Real.new(add_gt(z1 + z2, z3)).gt_rat(q)"]}
{"goal":"exists(k0: Rat, k1: Rat) { (z1 + z2).gt_rat(k0) and z3.gt_rat(k1) and q = k0 + k1 }","proof":["let (s0: (Real, Real, Rat) -> Rat, s1: (Real, Real, Rat) -> Rat) satisfy { forall(x0: Real, x1: Real, x2: Rat) { not add_gt(x0, x1, x2) or x0.gt_rat(s0(x0, x1, x2)) } and forall(x3: Real, x4: Real, x5: Rat) { not add_gt(x3, x4, x5) or x4.gt_rat(s1(x3, x4, x5)) } and forall(x6: Real, x7: Real, x8: Rat) { not add_gt(x6, x7, x8) or s0(x6, x7, x8) + s1(x6, x7, x8) = x8 } and forall(x9: Real, x10: Rat, x11: Real, x12: Rat, x13: Rat) { not x9.gt_rat(x10) or not x11.gt_rat(x12) or x10 + x12 != x13 or add_gt(x9, x11, x13) } }","not (z1 + z2).gt_rat(s0(z1 + z2, z3, q)) or not z3.gt_rat(s1(z1 + z2, z3, q)) or s0(z1 + z2, z3, q) + s1(z1 + z2, z3, q) != q","not add_gt(z1 + z2, z3, q) or s0(z1 + z2, z3, q) + s1(z1 + z2, z3, q) = q","not add_gt(z1 + z2, z3, q) or z3.gt_rat(s1(z1 + z2, z3, q))","not add_gt(z1 + z2, z3, q) or (z1 + z2).gt_rat(s0(z1 + z2, z3, q))","z3.gt_rat(s1(z1 + z2, z3, q))","(z1 + z2).gt_rat(s0(z1 + z2, z3, q))","s0(z1 + z2, z3, q) + s1(z1 + z2, z3, q) = q"]}
{"goal":"add_gt(z1, z2, r12)","proof":["not Real.new(add_gt(z1, z2)).gt_rat(r12) or not is_dedekind_cut(add_gt(z1, z2)) or add_gt(z1, z2, r12)","Real.new(add_gt(z1, z2)) = z1 + z2","is_dedekind_cut(add_gt(z1, z2))","Real.new(add_gt(z1, z2)).gt_rat(r12)"]}
{"goal":"exists(k0: Rat, k1: Rat) { z1.gt_rat(k0) and z2.gt_rat(k1) and r12 = k0 + k1 }","proof":["let (s0: (Real, Real, Rat) -> Rat, s1: (Real, Real, Rat) -> Rat) satisfy { forall(x0: Real, x1: Real, x2: Rat) { not add_gt(x0, x1, x2) or x0.gt_rat(s0(x0, x1, x2)) } and forall(x3: Real, x4: Real, x5: Rat) { not add_gt(x3, x4, x5) or x4.gt_rat(s1(x3, x4, x5)) } and forall(x6: Real, x7: Real, x8: Rat) { not add_gt(x6, x7, x8) or s0(x6, x7, x8) + s1(x6, x7, x8) = x8 } and forall(x9: Real, x10: Rat, x11: Real, x12: Rat, x13: Rat) { not x9.gt_rat(x10) or not x11.gt_rat(x12) or x10 + x12 != x13 or add_gt(x9, x11, x13) } }","not z2.gt_rat(s1(z1, z2, r12)) or not z1.gt_rat(s0(z1, z2, r12)) or s0(z1, z2, r12) + s1(z1, z2, r12) != r12","not add_gt(z1, z2, r12) or s0(z1, z2, r12) + s1(z1, z2, r12) = r12","not add_gt(z1, z2, r12) or z2.gt_rat(s1(z1, z2, r12))","not add_gt(z1, z2, r12) or z1.gt_rat(s0(z1, z2, r12))","z1.gt_rat(s0(z1, z2, r12))","z2.gt_rat(s1(z1, z2, r12))","s0(z1, z2, r12) + s1(z1, z2, r12) = r12"]}
{"goal":"gt_rat_adding_three","proof":["let (s0: Rat, s1: Rat) satisfy { z1.gt_rat(s0) and z2.gt_rat(s1) and s0 + s1 = r12 }","not z3.gt_rat(r3) or s0 + s1 + r3 != q or not z2.gt_rat(s1) or not z1.gt_rat(s0)","s0 + s1 + r3 != q or not z2.gt_rat(s1) or not z1.gt_rat(s0)","s0 + s1 + r3 = q"]}
{"goal":"exists(k0: Rat, k1: Rat, k2: Rat) { z1.gt_rat(k0) and z2.gt_rat(k1) and z3.gt_rat(k2) and q = k0 + k1 + k2 }","proof":["let (s0: Rat, s1: Rat, s2: Rat) satisfy { z1.gt_rat(s0) and z2.gt_rat(s1) and z3.gt_rat(s2) and s0 + s1 + s2 = q }","not z3.gt_rat(s2) or not z2.gt_rat(s1) or s0 + s1 + s2 != q or not z1.gt_rat(s0)"]}
{"goal":"add_gt(z1, z2 + z3, r1 + r2 + r3)","proof":["not z1.gt_rat(r1) or not (z2 + z3).gt_rat(r2 + r3) or r1 + (r2 + r3) != r1 + r2 + r3 or add_gt(z1, z2 + z3, r1 + r2 + r3)","not z2.gt_rat(r2) or not z3.gt_rat(r3) or (z2 + z3).gt_rat(r2 + r3)","r1 + (r2 + r3) = r1 + r2 + r3","r1 + (r2 + r3) != r1 + r2 + r3 or not (z2 + z3).gt_rat(r2 + r3) or not z1.gt_rat(r1)","not (z2 + z3).gt_rat(r2 + r3)"]}
{"goal":"gt_rat_adding_three_converse","proof":["let (s0: Rat, s1: Rat, s2: Rat) satisfy { z1.gt_rat(s0) and z2.gt_rat(s1) and z3.gt_rat(s2) and s0 + s1 + s2 = q }","not (z1 + z2).gt_rat(s0 + s1) or not z3.gt_rat(s2) or (z1 + z2 + z3).gt_rat(s0 + s1 + s2)","not z1.gt_rat(s0) or not z2.gt_rat(s1) or (z1 + z2).gt_rat(s0 + s1)","not (z1 + z2 + z3).gt_rat(s0 + s1 + s2)","not z1.gt_rat(s0) or (z1 + z2).gt_rat(s0 + s1)","not (z1 + z2).gt_rat(s0 + s1)","(z1 + z2).gt_rat(s0 + s1)"]}
{"goal":"exists(k0: Rat, k1: Rat, k2: Rat) { a.gt_rat(k0) and b.gt_rat(k1) and c.gt_rat(k2) and r = k0 + k1 + k2 }","proof":["let (s0: (Real, Real, Real, Rat) -> Rat, s1: (Real, Real, Real, Rat) -> Rat, s2: (Real, Real, Real, Rat) -> Rat) satisfy { forall(x0: Real, x1: Real, x2: Real, x3: Rat) { not (x0 + x1 + x2).gt_rat(x3) or x0.gt_rat(s0(x0, x1, x2, x3)) } and forall(x4: Real, x5: Real, x6: Real, x7: Rat) { not (x4 + x5 + x6).gt_rat(x7) or x5.gt_rat(s1(x4, x5, x6, x7)) } and forall(x8: Real, x9: Real, x10: Real, x11: Rat) { not (x8 + x9 + x10).gt_rat(x11) or x10.gt_rat(s2(x8, x9, x10, x11)) } and forall(x12: Real, x13: Real, x14: Real, x15: Rat) { not (x12 + x13 + x14).gt_rat(x15) or s0(x12, x13, x14, x15) + s1(x12, x13, x14, x15) + s2(x12, x13, x14, x15) = x15 } }","not c.gt_rat(s2(a, b, c, r)) or s0(a, b, c, r) + s1(a, b, c, r) + s2(a, b, c, r) != r or not b.gt_rat(s1(a, b, c, r)) or not a.gt_rat(s0(a, b, c, r))","not (a + b + c).gt_rat(r) or c.gt_rat(s2(a, b, c, r))","not (a + b + c).gt_rat(r) or b.gt_rat(s1(a, b, c, r))","not (a + b + c).gt_rat(r) or a.gt_rat(s0(a, b, c, r))","not (a + b + c).gt_rat(r) or s0(a, b, c, r) + s1(a, b, c, r) + s2(a, b, c, r) = r","a.gt_rat(s0(a, b, c, r))","b.gt_rat(s1(a, b, c, r))","c.gt_rat(s2(a, b, c, r))","s0(a, b, c, r) + s1(a, b, c, r) + s2(a, b, c, r) = r"]}
{"goal":"(b + c).gt_rat(rb + rc)","proof":["not b.gt_rat(rb) or not c.gt_rat(rc) or (b + c).gt_rat(rb + rc)"]}
{"goal":"(a + (b + c)).gt_rat(r)","proof":["let (s0: Rat, s1: Rat, s2: Rat) satisfy { a.gt_rat(s0) and b.gt_rat(s1) and c.gt_rat(s2) and s0 + s1 + s2 = r }","not a.gt_rat(s0) or not (b + c).gt_rat(s1 + s2) or (a + (b + c)).gt_rat(s0 + (s1 + s2))","not b.gt_rat(s1) or not c.gt_rat(s2) or (b + c).gt_rat(s1 + s2)","s0 + (s1 + s2) = s0 + s1 + s2","not (a + (b + c)).gt_rat(s0 + s1 + s2)","not b.gt_rat(s1) or (b + c).gt_rat(s1 + s2)","(b + c).gt_rat(s1 + s2)","not (b + c).gt_rat(s1 + s2) or (a + (b + c)).gt_rat(s0 + (s1 + s2))","not (a + (b + c)).gt_rat(s0 + (s1 + s2))","(a + (b + c)).gt_rat(s0 + (s1 + s2))"]}
{"goal":"(a + b + c).gt_rat(r) = (a + (b + c)).gt_rat(r)","proof":["not (a + b + c).gt_rat(r)"]}
{"goal":"add_gt(a, b + c, r)","proof":["not Real.new(add_gt(a, b + c)).gt_rat(r) or not is_dedekind_cut(add_gt(a, b + c)) or add_gt(a, b + c, r)","Real.new(add_gt(a, b + c)) = a + (b + c)","is_dedekind_cut(add_gt(a, b + c))","Real.new(add_gt(a, b + c)).gt_rat(r)"]}
{"goal":"exists(k0: Rat, k1: Rat) { a.gt_rat(k0) and (b + c).gt_rat(k1) and r = k0 + k1 }","proof":["let (s0: (Real, Real, Rat) -> Rat, s1: (Real, Real, Rat) -> Rat) satisfy { forall(x0: Real, x1: Real, x2: Rat) { not add_gt(x0, x1, x2) or x0.gt_rat(s0(x0, x1, x2)) } and forall(x3: Real, x4: Real, x5: Rat) { not add_gt(x3, x4, x5) or x4.gt_rat(s1(x3, x4, x5)) } and forall(x6: Real, x7: Real, x8: Rat) { not add_gt(x6, x7, x8) or s0(x6, x7, x8) + s1(x6, x7, x8) = x8 } and forall(x9: Real, x10: Rat, x11: Real, x12: Rat, x13: Rat) { not x9.gt_rat(x10) or not x11.gt_rat(x12) or x10 + x12 != x13 or add_gt(x9, x11, x13) } }","not (b + c).gt_rat(s1(a, b + c, r)) or not a.gt_rat(s0(a, b + c, r)) or s0(a, b + c, r) + s1(a, b + c, r) != r","not add_gt(a, b + c, r) or s0(a, b + c, r) + s1(a, b + c, r) = r","not add_gt(a, b + c, r) or (b + c).gt_rat(s1(a, b + c, r))","not add_gt(a, b + c, r) or a.gt_rat(s0(a, b + c, r))","a.gt_rat(s0(a, b + c, r))","(b + c).gt_rat(s1(a, b + c, r))","s0(a, b + c, r) + s1(a, b + c, r) = r"]}
{"goal":"add_gt(b, c, rbc)","proof":["not Real.new(add_gt(b, c)).gt_rat(rbc) or not is_dedekind_cut(add_gt(b, c)) or add_gt(b, c, rbc)","Real.new(add_gt(b, c)) = b + c","is_dedekind_cut(add_gt(b, c))","Real.new(add_gt(b, c)).gt_rat(rbc)"]}
{"goal":"exists(k0: Rat, k1: Rat) { b.gt_rat(k0) and c.gt_rat(k1) and rbc = k0 + k1 }","proof":["let (s0: (Real, Real, Rat) -> Rat, s1: (Real, Real, Rat) -> Rat) satisfy { forall(x0: Real, x1: Real, x2: Rat) { not add_gt(x0, x1, x2) or x0.gt_rat(s0(x0, x1, x2)) } and forall(x3: Real, x4: Real, x5: Rat) { not add_gt(x3, x4, x5) or x4.gt_rat(s1(x3, x4, x5)) } and forall(x6: Real, x7: Real, x8: Rat) { not add_gt(x6, x7, x8) or s0(x6, x7, x8) + s1(x6, x7, x8) = x8 } and forall(x9: Real, x10: Rat, x11: Real, x12: Rat, x13: Rat) { not x9.gt_rat(x10) or not x11.gt_rat(x12) or x10 + x12 != x13 or add_gt(x9, x11, x13) } }","not c.gt_rat(s1(b, c, rbc)) or not b.gt_rat(s0(b, c, rbc)) or s0(b, c, rbc) + s1(b, c, rbc) != rbc","not add_gt(b, c, rbc) or s0(b, c, rbc) + s1(b, c, rbc) = rbc","not add_gt(b, c, rbc) or c.gt_rat(s1(b, c, rbc))","not add_gt(b, c, rbc) or b.gt_rat(s0(b, c, rbc))","b.gt_rat(s0(b, c, rbc))","c.gt_rat(s1(b, c, rbc))","s0(b, c, rbc) + s1(b, c, rbc) = rbc"]}
{"goal":"r = ra + rb + rc","proof":["ra + (rb + rc) = ra + rb + rc"]}
{"goal":"false","proof":["not (a + b).gt_rat(ra + rb) or not c.gt_rat(rc) or (a + b + c).gt_rat(ra + rb + rc)","not a.gt_rat(ra) or not b.gt_rat(rb) or (a + b).gt_rat(ra + rb)","not (a + b).gt_rat(ra + rb) or (a + b + c).gt_rat(ra + rb + rc)","not a.gt_rat(ra) or (a + b).gt_rat(ra + rb)","(a + b).gt_rat(ra + rb)","not (a + b + c).gt_rat(ra + rb + rc)","(a + b + c).gt_rat(ra + rb + rc)"]}
{"goal":"(a + b + c).gt_rat(r) = (a + (b + c)).gt_rat(r)","proof":["(a + b + c).gt_rat(r)"]}
{"goal":"(a + b + c).gt_rat = (a + (b + c)).gt_rat","proof":["let s0: Rat satisfy { (a + (b + c)).gt_rat(s0) != (a + b + c).gt_rat(s0) }","(a + (b + c)).gt_rat(s0) = (a + b + c).gt_rat(s0)"]}
{"goal":"add_assoc","proof":["a + (b + c) = b + c + a","Real.new((a + b + c).gt_rat) = a + b + c","Real.new((b + c + a).gt_rat) = b + c + a"]}
{"goal":"gt_imp_not_lte","proof":["not a > b or a.max(b) = a","not a <= b or b.max(a) = b","b.max(a) = b","PartialOrder.lt<Real>(b, a) = a > b","b.max(a) = a.max(b)","a.max(b) = b","not PartialOrder.lt<Real>(b, a.max(b)) or a.max(b) != b","PartialOrder.lt<Real>(b, a)","a.max(b) = a","not PartialOrder.lt<Real>(b, a.max(b))","PartialOrder.lt<Real>(b, a.max(b))"]}
{"goal":"not_lte_imp_gt","proof":["a.min(b) = a or a > b","a.min(b) = a","a.min(b) <= b"]}
{"goal":"gte_imp_not_lt","proof":["not a <= b or not b <= a or b = a","a >= b = b <= a","b <= a","not a < b or a <= b","a <= b","b = a","not a < b or b != a"]}
{"goal":"not_lt_imp_gte","proof":["not a <= b or a < b or b = a","a >= b = b <= a","b >= a = a <= b","not b <= a","a <= b or b <= a","a <= b","b = a"]}
{"goal":"a != b","proof":["a < a","not a < a or a != a"]}
{"goal":"a.gt_rat != b.gt_rat","proof":["Real.new(a.gt_rat) = a","Real.new(b.gt_rat) = b"]}
{"goal":"exists(k0: Rat) { a.gt_rat(k0) != b.gt_rat(k0) }","proof":["let s0: Rat satisfy { b.gt_rat(s0) != a.gt_rat(s0) }","b.gt_rat(s0) = a.gt_rat(s0)"]}
{"goal":"not b.gt_rat(r)","proof":[]}
{"goal":"false","proof":["not a <= b or not a.gt_rat(r) or b.gt_rat(r)","not a < b or a <= b","a <= b","not a <= b or not a.gt_rat(r)"]}
{"goal":"not a.gt_rat(r)","proof":[]}
{"goal":"b.gt_rat(r)","proof":[]}
{"goal":"rat_separating","proof":["not b.gt_rat(r) or a.gt_rat(r)","a.gt_rat(r)"]}
{"goal":"not is_greatest(z.gt_rat, r1)","proof":["not is_greatest(z.gt_rat, r1) or has_greatest(z.gt_rat)","has_greatest(z.gt_rat)","not is_dedekind_cut(z.gt_rat) or not has_greatest(z.gt_rat)","is_dedekind_cut(z.gt_rat)"]}
{"goal":"exists(k0: Rat) { z.gt_rat(k0) and not k0 <= r1 }","proof":["let s0: (Rat -> Bool, Rat) -> Rat satisfy { forall(x0: Rat -> Bool, x1: Rat) { not is_greatest(x0, x1) or x0(x1) } and forall(x2: Rat -> Bool, x3: Rat, x4: Rat) { not is_greatest(x2, x3) or not x2(x4) or x4 <= x3 } and forall(x5: Rat -> Bool, x6: Rat) { not x5(x6) or is_greatest(x5, x6) or x5(s0(x5, x6)) } and forall(x7: Rat -> Bool, x8: Rat) { not s0(x7, x8) <= x8 or not x7(x8) or is_greatest(x7, x8) } }","not z.gt_rat(s0(z.gt_rat, r1)) or s0(z.gt_rat, r1) <= r1","not s0(z.gt_rat, r1) <= r1 or not z.gt_rat(r1) or is_greatest(z.gt_rat, r1)","not z.gt_rat(r1) or is_greatest(z.gt_rat, r1) or z.gt_rat(s0(z.gt_rat, r1))","z.gt_rat(s0(z.gt_rat, r1))","not s0(z.gt_rat, r1) <= r1","s0(z.gt_rat, r1) <= r1"]}
{"goal":"rat_between_rat_and_real","proof":["let s0: Rat satisfy { z.gt_rat(s0) and not s0 <= r1 }","not z.gt_rat(s0) or not r1 < s0","not r1 < s0","not r1 <= s0 or r1 < s0 or s0 = r1","s0 <= r1 or r1 <= s0","s0 != r1 or s0 <= r1","s0 != r1","r1 <= s0","not r1 <= s0"]}
{"goal":"exists(k0: Rat) { b.gt_rat(k0) and not a.gt_rat(k0) }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x1.gt_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2.gt_rat(s0(x2, x3)) or not x2 < x3 } }","not b.gt_rat(s0(a, b)) or a.gt_rat(s0(a, b))","not a.gt_rat(s0(a, b)) or not a < b","not a < b or b.gt_rat(s0(a, b))","b.gt_rat(s0(a, b))","not a.gt_rat(s0(a, b))","a.gt_rat(s0(a, b))"]}
{"goal":"not a > Real.from_rat(r1)","proof":["not a > Real.from_rat(r1) or a.gt_rat(r1)"]}
{"goal":"a <= Real.from_rat(r1)","proof":["a > Real.from_rat(r1) or a <= Real.from_rat(r1)"]}
{"goal":"exists(k0: Rat) { b.gt_rat(k0) and r1 < k0 }","proof":["let s0: (Real, Rat) -> Rat satisfy { forall(x0: Real, x1: Rat) { not x0.gt_rat(x1) or x0.gt_rat(s0(x0, x1)) } and forall(x2: Real, x3: Rat) { not x2.gt_rat(x3) or x3 < s0(x2, x3) } }","not b.gt_rat(s0(b, r1)) or not r1 < s0(b, r1)","not b.gt_rat(r1) or r1 < s0(b, r1)","not b.gt_rat(r1) or b.gt_rat(s0(b, r1))","b.gt_rat(s0(b, r1))","r1 < s0(b, r1)","not r1 < s0(b, r1)"]}
{"goal":"a < Real.from_rat(r2)","proof":["not Real.from_rat(r2) <= a or not Real.from_rat(r2).gt_rat(r1) or a.gt_rat(r1)","not r2 > r1 or Real.from_rat(r2).gt_rat(r1)","a >= Real.from_rat(r2) or a < Real.from_rat(r2)","a >= Real.from_rat(r2)","a >= Real.from_rat(r2) = Real.from_rat(r2) <= a","Real.from_rat(r2) <= a","r2 > r1 = r1 < r2","r2 > r1","not Real.from_rat(r2) <= a or not Real.from_rat(r2).gt_rat(r1)","Real.from_rat(r2).gt_rat(r1)","not Real.from_rat(r2).gt_rat(r1)"]}
{"goal":"Real.from_rat(r2) < b","proof":["not b.gt_rat(r2) or b > Real.from_rat(r2)","Real.from_rat(r2) >= b or Real.from_rat(r2) < b","Real.from_rat(r2) >= b","not b <= Real.from_rat(r2) or not b > Real.from_rat(r2)","Real.from_rat(r2) >= b = b <= Real.from_rat(r2)","b <= Real.from_rat(r2)","b > Real.from_rat(r2)","not b > Real.from_rat(r2)"]}
{"goal":"rat_between_reals","proof":["not Real.from_rat(r2) < b or not a < Real.from_rat(r2)","not a < Real.from_rat(r2)"]}
{"goal":"b < a","proof":["b >= a or b < a","b >= a","not a <= b or not a > b","b >= a = a <= b","not a <= b","a <= b"]}
{"goal":"exists(k0: Rat) { b < Real.from_rat(k0) and Real.from_rat(k0) < a }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not b < Real.from_rat(s0(b, a)) or not Real.from_rat(s0(b, a)) < a","not b < a or Real.from_rat(s0(b, a)) < a","not b < a or b < Real.from_rat(s0(b, a))","b < Real.from_rat(s0(b, a))","Real.from_rat(s0(b, a)) < a","not Real.from_rat(s0(b, a)) < a"]}
{"goal":"rat_between_reals_gt","proof":["let s0: Rat satisfy { b < Real.from_rat(s0) and Real.from_rat(s0) < a }","not Real.from_rat(s0) > b or not a > Real.from_rat(s0)","not Real.from_rat(s0) >= a or not Real.from_rat(s0) < a","not b >= Real.from_rat(s0) or not b < Real.from_rat(s0)","Real.from_rat(s0) <= b or Real.from_rat(s0) > b","a <= Real.from_rat(s0) or a > Real.from_rat(s0)","Real.from_rat(s0) >= a = a <= Real.from_rat(s0)","b >= Real.from_rat(s0) = Real.from_rat(s0) <= b","not b >= Real.from_rat(s0)","not Real.from_rat(s0) >= a","not a <= Real.from_rat(s0)","not Real.from_rat(s0) <= b","Real.from_rat(s0) > b","a > Real.from_rat(s0)","not a > Real.from_rat(s0)"]}
{"goal":"add_gt_trans","proof":["not is_lower(add_gt(Real.new(z1.gt_rat), Real.new(z2.gt_rat))) or not r2 < r1 or not add_gt(Real.new(z1.gt_rat), Real.new(z2.gt_rat), r1) or add_gt(Real.new(z1.gt_rat), Real.new(z2.gt_rat), r2)","r2 < r1 = r1 > r2","is_lower(add_gt(Real.new(z1.gt_rat), Real.new(z2.gt_rat)))","Real.new(z1.gt_rat) = z1","Real.new(z2.gt_rat) = z2","not add_gt(Real.new(z1.gt_rat), z2, r2)","r2 < r1","add_gt(Real.new(z1.gt_rat), z2, r1)","not add_gt(Real.new(z1.gt_rat), Real.new(z2.gt_rat), r2)","not is_lower(add_gt(Real.new(z1.gt_rat), Real.new(z2.gt_rat))) or not add_gt(Real.new(z1.gt_rat), Real.new(z2.gt_rat), r1) or add_gt(Real.new(z1.gt_rat), Real.new(z2.gt_rat), r2)","add_gt(Real.new(z1.gt_rat), Real.new(z2.gt_rat), r1)","not add_gt(Real.new(z1.gt_rat), Real.new(z2.gt_rat), r1) or add_gt(Real.new(z1.gt_rat), Real.new(z2.gt_rat), r2)"]}
{"goal":"Real.new(add_gt(z1, z2)).gt_rat(r)","proof":["not is_dedekind_cut(add_gt(z1, z2)) or not add_gt(z1, z2, r) or Real.new(add_gt(z1, z2)).gt_rat(r)","not is_dedekind_cut(add_gt(z1, z2))","is_dedekind_cut(add_gt(z1, z2))"]}
{"goal":"Real.new(add_gt(z1, z2)) > Real.from_rat(r)","proof":["not Real.new(add_gt(z1, z2)).gt_rat(r) or Real.new(add_gt(z1, z2)) > Real.from_rat(r)"]}
{"goal":"add_gt_imp_gt_from_rat","proof":["Real.new(add_gt(z1, z2)) = z1 + z2"]}
{"goal":"Real.new(add_gt(z1, z2)) > Real.from_rat(r)","proof":["Real.new(add_gt(z1, z2)) = z1 + z2"]}
{"goal":"Real.new(add_gt(z1, z2)).gt_rat(r)","proof":["not Real.new(add_gt(z1, z2)) > Real.from_rat(r) or Real.new(add_gt(z1, z2)).gt_rat(r)"]}
{"goal":"gt_from_rat_imp_add_gt","proof":["not Real.new(add_gt(z1, z2)).gt_rat(r) or not is_dedekind_cut(add_gt(z1, z2)) or add_gt(z1, z2, r)","not is_dedekind_cut(add_gt(z1, z2))","is_dedekind_cut(add_gt(z1, z2))"]}
{"goal":"not b <= a","proof":["not a <= b or not b <= a or b = a","not a < b or a <= b","not a < b or b != a","b != a","a <= b","not a <= b"]}
{"goal":"not c <= a","proof":["not b <= c or not c <= a or b <= a","not b <= c or b <= a"]}
{"goal":"lt_lte_trans","proof":["not a <= c or a < c or c = a","not a <= c or c = a","a <= c or c <= a","a <= a","a <= c","c = a"]}
{"goal":"not b < a","proof":["not b < a or not a <= b or b < b","not a <= b or b < b","b < b","not b < b or b != b"]}
{"goal":"not c < a","proof":["not b < c or not c <= a or b < a","not c < a or c <= a","c <= a","not b < c or not c <= a"]}
{"goal":"lte_lt_trans","proof":["not a < b or not b <= c or a < c","not a <= b or a < b or b = a","not b < c or b <= c","not b <= c or not a < b","b <= c","a < b or b = a","not a < b","b = a"]}
{"goal":"not b < a","proof":["not b < a or not a <= b or b < b","not a < b or a <= b","not a <= b or b < b","not b < b or b != b","a <= b","not b < b"]}
{"goal":"not c < b","proof":["not c < b or not b <= c or c < c","not b < c or b <= c","not b <= c or c < c","not c < c or c != c","b <= c","not c < c"]}
{"goal":"lt_trans","proof":["not a < b or not b <= c or a < c","not b < c or b <= c","not b <= c or not a < b","b <= c","not b <= c"]}
{"goal":"exists(k0: Rat, k1: Rat) { Real.from_rat(p).gt_rat(k0) and Real.from_rat(q).gt_rat(k1) and r = k0 + k1 }","proof":["let (s0: (Real, Real, Rat) -> Rat, s1: (Real, Real, Rat) -> Rat) satisfy { forall(x0: Real, x1: Real, x2: Rat) { not add_gt(x0, x1, x2) or x0.gt_rat(s0(x0, x1, x2)) } and forall(x3: Real, x4: Real, x5: Rat) { not add_gt(x3, x4, x5) or x4.gt_rat(s1(x3, x4, x5)) } and forall(x6: Real, x7: Real, x8: Rat) { not add_gt(x6, x7, x8) or s0(x6, x7, x8) + s1(x6, x7, x8) = x8 } and forall(x9: Real, x10: Rat, x11: Real, x12: Rat, x13: Rat) { not x9.gt_rat(x10) or not x11.gt_rat(x12) or x10 + x12 != x13 or add_gt(x9, x11, x13) } }","not Real.from_rat(q).gt_rat(s1(Real.from_rat(p), Real.from_rat(q), r)) or not Real.from_rat(p).gt_rat(s0(Real.from_rat(p), Real.from_rat(q), r)) or s0(Real.from_rat(p), Real.from_rat(q), r) + s1(Real.from_rat(p), Real.from_rat(q), r) != r","not add_gt(Real.from_rat(p), Real.from_rat(q), r) or s0(Real.from_rat(p), Real.from_rat(q), r) + s1(Real.from_rat(p), Real.from_rat(q), r) = r","not add_gt(Real.from_rat(p), Real.from_rat(q), r) or Real.from_rat(q).gt_rat(s1(Real.from_rat(p), Real.from_rat(q), r))","not add_gt(Real.from_rat(p), Real.from_rat(q), r) or Real.from_rat(p).gt_rat(s0(Real.from_rat(p), Real.from_rat(q), r))","Real.from_rat(p).gt_rat(s0(Real.from_rat(p), Real.from_rat(q), r))","Real.from_rat(q).gt_rat(s1(Real.from_rat(p), Real.from_rat(q), r))","s0(Real.from_rat(p), Real.from_rat(q), r) + s1(Real.from_rat(p), Real.from_rat(q), r) = r"]}
{"goal":"p > rp","proof":["not Real.from_rat(p).gt_rat(rp) or p > rp"]}
{"goal":"q > rq","proof":["not Real.from_rat(q).gt_rat(rq) or q > rq"]}
{"goal":"p + q > rp + rq","proof":["not rp < p or not rq < q or rp + rq < p + q","rp + rq < p + q = p + q > rp + rq","rp < p = p > rp","rq < q = q > rq","not rp + rq < p + q","rq < q","rp < p","not rp < p"]}
{"goal":"p + q > r","proof":["not p + q > rp + rq"]}
{"goal":"add_gt_from_rat_imp_rat_add_gt","proof":[]}
{"goal":"d.is_positive","proof":["not r <= p + q or (p + q - r).is_positive or p + q = r","p + q > r = r < p + q","r < p + q","not r < p + q or r <= p + q","not (p + q - r).is_positive","not r < p + q or p + q != r","p + q != r","r <= p + q","not r <= p + q"]}
{"goal":"d + r = p + q","proof":["p + q - r + r = p + q"]}
{"goal":"p + q = r + d","proof":["d + r = r + d"]}
{"goal":"p + q - d = r + d - d","proof":["r + d != p + q"]}
{"goal":"p + q - d = r","proof":["r + d - d = r"]}
{"goal":"(d / Rat.2).is_positive","proof":["not d.is_positive or not Rat.2.reciprocal.is_positive or (d * Rat.2.reciprocal).is_positive","d * Rat.2.reciprocal = d / Rat.2","not (d * Rat.2.reciprocal).is_positive","not Rat.2.reciprocal.is_positive"]}
{"goal":"rp < p","proof":["not (d / Rat.2).is_positive or p > p - d / Rat.2","p > p - d / Rat.2 = p - d / Rat.2 < p","not p - d / Rat.2 < p","p > p - d / Rat.2"]}
{"goal":"Real.from_rat(p).gt_rat(rp)","proof":["not p > rp or Real.from_rat(p).gt_rat(rp)","not p > rp","p > rp = rp < p"]}
{"goal":"rq < q","proof":["not (d / Rat.2).is_positive or q > q - d / Rat.2","q > q - d / Rat.2 = q - d / Rat.2 < q","not q - d / Rat.2 < q","q > q - d / Rat.2"]}
{"goal":"Real.from_rat(q).gt_rat(rq)","proof":["not q > rq or Real.from_rat(q).gt_rat(rq)","not q > rq","q > rq = rq < q"]}
{"goal":"rp + rq = p - d / Rat.2 + (q - d / Rat.2)","proof":[]}
{"goal":"rp + rq = p - d / Rat.2 + q - d / Rat.2","proof":["p - d / Rat.2 + (q + -(d / Rat.2)) = p - d / Rat.2 + q + -(d / Rat.2)","q + -(d / Rat.2) = q - d / Rat.2","rp + q + -(d / Rat.2) = rp + q - d / Rat.2"]}
{"goal":"p + q - d / Rat.2 = p - d / Rat.2 + q","proof":["p + (-(d / Rat.2) + q) = p + -(d / Rat.2) + q","p + (q + -(d / Rat.2)) = p + q + -(d / Rat.2)","p + -(d / Rat.2) = p - d / Rat.2","p + q + -(d / Rat.2) = p + q - d / Rat.2","q + -(d / Rat.2) = -(d / Rat.2) + q"]}
{"goal":"rp + rq = p + q - d / Rat.2 - d / Rat.2","proof":["p - d / Rat.2 + q - d / Rat.2 != rp + rq"]}
{"goal":"rp + rq = p + q - (d / Rat.2 + d / Rat.2)","proof":["p + q - (d / Rat.2 + d / Rat.2) = p + q - d / Rat.2 - d / Rat.2"]}
{"goal":"rp + rq = p + q - d","proof":["d / Rat.2 + d / Rat.2 = d"]}
{"goal":"rat_add_gt_imp_add_gt_from_rat","proof":["not Real.from_rat(p).gt_rat(rp) or not Real.from_rat(q).gt_rat(rq) or rp + rq != rp + rq or add_gt(Real.from_rat(p), Real.from_rat(q), rp + rq)","not add_gt(Real.from_rat(p), Real.from_rat(q), p + q - d)","not add_gt(Real.from_rat(p), Real.from_rat(q), rp + rq)","not Real.from_rat(p).gt_rat(rp) or not Real.from_rat(q).gt_rat(rq) or add_gt(Real.from_rat(p), Real.from_rat(q), rp + rq)"]}
{"goal":"exists(k0: Rat) { Real.from_rat(p) + Real.from_rat(q) < Real.from_rat(k0) and Real.from_rat(k0) < Real.from_rat(p + q) }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(p) + Real.from_rat(q) < Real.from_rat(s0(Real.from_rat(p) + Real.from_rat(q), Real.from_rat(p + q))) or not Real.from_rat(s0(Real.from_rat(p) + Real.from_rat(q), Real.from_rat(p + q))) < Real.from_rat(p + q)","not Real.from_rat(p) + Real.from_rat(q) < Real.from_rat(p + q) or Real.from_rat(s0(Real.from_rat(p) + Real.from_rat(q), Real.from_rat(p + q))) < Real.from_rat(p + q)","not Real.from_rat(p) + Real.from_rat(q) < Real.from_rat(p + q) or Real.from_rat(p) + Real.from_rat(q) < Real.from_rat(s0(Real.from_rat(p) + Real.from_rat(q), Real.from_rat(p + q)))","Real.from_rat(s0(Real.from_rat(p) + Real.from_rat(q), Real.from_rat(p + q))) < Real.from_rat(p + q)","Real.from_rat(p) + Real.from_rat(q) < Real.from_rat(s0(Real.from_rat(p) + Real.from_rat(q), Real.from_rat(p + q)))","not Real.from_rat(p) + Real.from_rat(q) < Real.from_rat(s0(Real.from_rat(p) + Real.from_rat(q), Real.from_rat(p + q)))"]}
{"goal":"p + q > r","proof":["not Real.from_rat(r) < Real.from_rat(p + q) or not Real.from_rat(p + q) <= Real.from_rat(r) or Real.from_rat(p + q) < Real.from_rat(p + q)","not Real.from_rat(p + q) > Real.from_rat(r) or Real.from_rat(p + q).gt_rat(r)","not Real.from_rat(p + q).gt_rat(r) or p + q > r","Real.from_rat(p + q) <= Real.from_rat(r) or Real.from_rat(p + q) > Real.from_rat(r)","not Real.from_rat(p + q).gt_rat(r)","not Real.from_rat(p + q) < Real.from_rat(p + q) or Real.from_rat(p + q) != Real.from_rat(p + q)","not Real.from_rat(p + q) < Real.from_rat(p + q)","not Real.from_rat(p + q) <= Real.from_rat(r) or Real.from_rat(p + q) < Real.from_rat(p + q)","not Real.from_rat(p + q) <= Real.from_rat(r)","not Real.from_rat(p + q) > Real.from_rat(r)","Real.from_rat(p + q) > Real.from_rat(r)"]}
{"goal":"add_gt(Real.from_rat(p), Real.from_rat(q), r)","proof":["not p + q > r or add_gt(Real.from_rat(p), Real.from_rat(q), r)"]}
{"goal":"Real.from_rat(p) + Real.from_rat(q) > Real.from_rat(r)","proof":["not add_gt(Real.from_rat(p), Real.from_rat(q), r) or Real.from_rat(p) + Real.from_rat(q) > Real.from_rat(r)"]}
{"goal":"false","proof":["not Real.from_rat(p) + Real.from_rat(q) > Real.from_rat(r) or not Real.from_rat(p) + Real.from_rat(q) <= Real.from_rat(r)","not Real.from_rat(p) + Real.from_rat(q) < Real.from_rat(r) or Real.from_rat(p) + Real.from_rat(q) <= Real.from_rat(r)","not Real.from_rat(p) + Real.from_rat(q) <= Real.from_rat(r)","Real.from_rat(p) + Real.from_rat(q) <= Real.from_rat(r)"]}
{"goal":"exists(k0: Rat) { Real.from_rat(p + q) < Real.from_rat(k0) and Real.from_rat(k0) < Real.from_rat(p) + Real.from_rat(q) }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(s0(Real.from_rat(p + q), Real.from_rat(p) + Real.from_rat(q))) < Real.from_rat(p) + Real.from_rat(q) or not Real.from_rat(p + q) < Real.from_rat(s0(Real.from_rat(p + q), Real.from_rat(p) + Real.from_rat(q)))","not Real.from_rat(p + q) < Real.from_rat(p) + Real.from_rat(q) or Real.from_rat(s0(Real.from_rat(p + q), Real.from_rat(p) + Real.from_rat(q))) < Real.from_rat(p) + Real.from_rat(q)","not Real.from_rat(p + q) < Real.from_rat(p) + Real.from_rat(q) or Real.from_rat(p + q) < Real.from_rat(s0(Real.from_rat(p + q), Real.from_rat(p) + Real.from_rat(q)))","Real.from_rat(p + q) < Real.from_rat(s0(Real.from_rat(p + q), Real.from_rat(p) + Real.from_rat(q)))","Real.from_rat(s0(Real.from_rat(p + q), Real.from_rat(p) + Real.from_rat(q))) < Real.from_rat(p) + Real.from_rat(q)","not Real.from_rat(s0(Real.from_rat(p + q), Real.from_rat(p) + Real.from_rat(q))) < Real.from_rat(p) + Real.from_rat(q)"]}
{"goal":"add_gt(Real.from_rat(p), Real.from_rat(q), r)","proof":["not Real.from_rat(p) + Real.from_rat(q) > Real.from_rat(r) or add_gt(Real.from_rat(p), Real.from_rat(q), r)","not Real.from_rat(p) + Real.from_rat(q) <= Real.from_rat(r) or not Real.from_rat(r) <= Real.from_rat(p) + Real.from_rat(q) or Real.from_rat(p) + Real.from_rat(q) = Real.from_rat(r)","Real.from_rat(p) + Real.from_rat(q) <= Real.from_rat(r) or Real.from_rat(p) + Real.from_rat(q) > Real.from_rat(r)","not Real.from_rat(r) < Real.from_rat(p) + Real.from_rat(q) or Real.from_rat(r) <= Real.from_rat(p) + Real.from_rat(q)","not Real.from_rat(r) < Real.from_rat(p) + Real.from_rat(q) or Real.from_rat(p) + Real.from_rat(q) != Real.from_rat(r)","not Real.from_rat(p) + Real.from_rat(q) > Real.from_rat(r)","Real.from_rat(p) + Real.from_rat(q) != Real.from_rat(r)","Real.from_rat(r) <= Real.from_rat(p) + Real.from_rat(q)","Real.from_rat(p) + Real.from_rat(q) <= Real.from_rat(r)","not Real.from_rat(p) + Real.from_rat(q) <= Real.from_rat(r)"]}
{"goal":"p + q > r","proof":["not add_gt(Real.from_rat(p), Real.from_rat(q), r) or p + q > r"]}
{"goal":"Real.from_rat(p) + Real.from_rat(q) > Real.from_rat(r)","proof":["not add_gt(Real.from_rat(p), Real.from_rat(q), r) or Real.from_rat(p) + Real.from_rat(q) > Real.from_rat(r)"]}
{"goal":"false","proof":["not Real.from_rat(p + q).gt_rat(r) or Real.from_rat(p + q) > Real.from_rat(r)","not p + q > r or Real.from_rat(p + q).gt_rat(r)","not Real.from_rat(p + q) > Real.from_rat(r) or not Real.from_rat(p + q) <= Real.from_rat(r)","not Real.from_rat(p + q) < Real.from_rat(r) or Real.from_rat(p + q) <= Real.from_rat(r)","Real.from_rat(p + q).gt_rat(r)","Real.from_rat(p + q) <= Real.from_rat(r)","Real.from_rat(p + q) > Real.from_rat(r)","not Real.from_rat(p + q) > Real.from_rat(r)"]}
{"goal":"add_from_rat","proof":["not Real.from_rat(p + q) <= Real.from_rat(p) + Real.from_rat(q) or Real.from_rat(p + q) < Real.from_rat(p) + Real.from_rat(q) or Real.from_rat(p) + Real.from_rat(q) = Real.from_rat(p + q)","not Real.from_rat(p) + Real.from_rat(q) <= Real.from_rat(p + q) or Real.from_rat(p) + Real.from_rat(q) < Real.from_rat(p + q) or Real.from_rat(p) + Real.from_rat(q) = Real.from_rat(p + q)","Real.from_rat(p + q) <= Real.from_rat(p) + Real.from_rat(q) or Real.from_rat(p) + Real.from_rat(q) <= Real.from_rat(p + q)","not Real.from_rat(p) + Real.from_rat(q) <= Real.from_rat(p + q)","not Real.from_rat(p + q) <= Real.from_rat(p) + Real.from_rat(q)","Real.from_rat(p + q) <= Real.from_rat(p) + Real.from_rat(q)"]}
{"goal":"add_gt(a, c, r)","proof":["not a + c > Real.from_rat(r) or add_gt(a, c, r)","not (a + c).gt_rat(r) or a + c > Real.from_rat(r)","not a + c > Real.from_rat(r)","a + c > Real.from_rat(r)"]}
{"goal":"exists(k0: Rat, k1: Rat) { a.gt_rat(k0) and c.gt_rat(k1) and r = k0 + k1 }","proof":["let (s0: (Real, Real, Rat) -> Rat, s1: (Real, Real, Rat) -> Rat) satisfy { forall(x0: Real, x1: Real, x2: Rat) { not add_gt(x0, x1, x2) or x0.gt_rat(s0(x0, x1, x2)) } and forall(x3: Real, x4: Real, x5: Rat) { not add_gt(x3, x4, x5) or x4.gt_rat(s1(x3, x4, x5)) } and forall(x6: Real, x7: Real, x8: Rat) { not add_gt(x6, x7, x8) or s0(x6, x7, x8) + s1(x6, x7, x8) = x8 } and forall(x9: Real, x10: Rat, x11: Real, x12: Rat, x13: Rat) { not x9.gt_rat(x10) or not x11.gt_rat(x12) or x10 + x12 != x13 or add_gt(x9, x11, x13) } }","not c.gt_rat(s1(a, c, r)) or not a.gt_rat(s0(a, c, r)) or s0(a, c, r) + s1(a, c, r) != r","not add_gt(a, c, r) or s0(a, c, r) + s1(a, c, r) = r","not add_gt(a, c, r) or c.gt_rat(s1(a, c, r))","not add_gt(a, c, r) or a.gt_rat(s0(a, c, r))","a.gt_rat(s0(a, c, r))","c.gt_rat(s1(a, c, r))","s0(a, c, r) + s1(a, c, r) = r"]}
{"goal":"b.gt_rat(ra)","proof":["not a.gt_rat(ra) or not a <= b or b.gt_rat(ra)","not a.gt_rat(ra) or not a <= b"]}
{"goal":"(b + c).gt_rat(r)","proof":["not b.gt_rat(ra) or not c.gt_rat(rc) or (b + c).gt_rat(ra + rc)","not (b + c).gt_rat(ra + rc)"]}
{"goal":"lte_add_right","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Rat, x2: Real) { not x0.gt_rat(x1) or not x0 <= x2 or x2.gt_rat(x1) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not (a + c).gt_rat(s0(a + c, b + c)) or (b + c).gt_rat(s0(a + c, b + c))","not (b + c).gt_rat(s0(a + c, b + c)) or a + c <= b + c","(a + c).gt_rat(s0(a + c, b + c)) or a + c <= b + c","(a + c).gt_rat(s0(a + c, b + c))","not (b + c).gt_rat(s0(a + c, b + c))","(b + c).gt_rat(s0(a + c, b + c))"]}
{"goal":"lte_add_left","proof":["not a <= b or a + c <= b + c","c + a = a + c","c + b = b + c","not a + c <= c + b","not a + c <= b + c"]}
{"goal":"lt_add_converse","proof":["not b <= a or b + c <= a + c","not a + c < b + c or not b + c <= a + c or b + c < b + c","not a <= b or a < b or b = a","not a <= b or b = a","a <= b or b <= a","not a + c < b + c or b + c != a + c","not b + c < b + c or b + c != b + c","not b + c < b + c","b + c != a + c","b != a","not a <= b","not b + c <= a + c or b + c < b + c","not b + c <= a + c","b <= a","not b <= a"]}
{"goal":"add_from_rat_zero","proof":["Real.from_rat(r) + Real.from_rat(Rat.0) = Real.from_rat(r + Rat.0)","r + Rat.0 = r","Real.from_rat(r) + Real.from_rat(Rat.0) != Real.from_rat(r)"]}
{"goal":"exists(k0: Rat) { a + Real.0 < Real.from_rat(k0) and Real.from_rat(k0) < a }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not a + Real.0 < Real.from_rat(s0(a + Real.0, a)) or not Real.from_rat(s0(a + Real.0, a)) < a","not a + Real.0 < a or Real.from_rat(s0(a + Real.0, a)) < a","not a + Real.0 < a or a + Real.0 < Real.from_rat(s0(a + Real.0, a))","Real.from_rat(s0(a + Real.0, a)) < a","a + Real.0 < Real.from_rat(s0(a + Real.0, a))","not a + Real.0 < Real.from_rat(s0(a + Real.0, a))"]}
{"goal":"Real.from_rat(r) <= a","proof":["not Real.from_rat(r) < a or Real.from_rat(r) <= a"]}
{"goal":"Real.from_rat(r) + Real.0 <= a + Real.0","proof":["not Real.from_rat(r) <= a or Real.from_rat(r) + Real.0 <= a + Real.0"]}
{"goal":"Real.from_rat(r) <= a + Real.0","proof":["Real.from_rat(r) + Real.0 = Real.from_rat(r)"]}
{"goal":"false","proof":["not Real.from_rat(r) <= a + Real.0 or not a + Real.0 <= Real.from_rat(r) or a + Real.0 = Real.from_rat(r)","not a + Real.0 < Real.from_rat(r) or a + Real.0 <= Real.from_rat(r)","not a + Real.0 < Real.from_rat(r) or a + Real.0 != Real.from_rat(r)","a + Real.0 != Real.from_rat(r)","a + Real.0 <= Real.from_rat(r)","not a + Real.0 <= Real.from_rat(r)"]}
{"goal":"exists(k0: Rat) { a < Real.from_rat(k0) and Real.from_rat(k0) < a + Real.0 }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(s0(a, a + Real.0)) < a + Real.0 or not a < Real.from_rat(s0(a, a + Real.0))","not a < a + Real.0 or Real.from_rat(s0(a, a + Real.0)) < a + Real.0","not a < a + Real.0 or a < Real.from_rat(s0(a, a + Real.0))","a < Real.from_rat(s0(a, a + Real.0))","Real.from_rat(s0(a, a + Real.0)) < a + Real.0","not Real.from_rat(s0(a, a + Real.0)) < a + Real.0"]}
{"goal":"a <= Real.from_rat(r)","proof":["not a < Real.from_rat(r) or a <= Real.from_rat(r)"]}
{"goal":"a + Real.0 <= Real.from_rat(r) + Real.0","proof":["not a <= Real.from_rat(r) or a + Real.0 <= Real.from_rat(r) + Real.0"]}
{"goal":"a + Real.0 <= Real.from_rat(r)","proof":["Real.from_rat(r) + Real.0 = Real.from_rat(r)"]}
{"goal":"false","proof":["not Real.from_rat(r) <= a + Real.0 or not a + Real.0 <= Real.from_rat(r) or a + Real.0 = Real.from_rat(r)","not Real.from_rat(r) < a + Real.0 or Real.from_rat(r) <= a + Real.0","not Real.from_rat(r) < a + Real.0 or a + Real.0 != Real.from_rat(r)","a + Real.0 != Real.from_rat(r)","Real.from_rat(r) <= a + Real.0","not Real.from_rat(r) <= a + Real.0"]}
{"goal":"add_zero_right","proof":["not a + Real.0 <= a or a + Real.0 < a or a + Real.0 = a","not a <= a + Real.0 or a < a + Real.0 or a + Real.0 = a","not a <= a + Real.0","not a + Real.0 <= a","a + Real.0 <= a or a <= a + Real.0"]}
{"goal":"add_zero_left","proof":["a + Real.0 = Real.0 + a","a + Real.0 != a","a + Real.0 = a"]}
{"goal":"Real.from_rat(q) <= Real.from_rat(p)","proof":["not Real.from_rat(p) <= Real.from_rat(q) or Real.from_rat(p) < Real.from_rat(q) or Real.from_rat(q) = Real.from_rat(p)","Real.from_rat(p) <= Real.from_rat(q) or Real.from_rat(q) <= Real.from_rat(p)","Real.from_rat(p) <= Real.from_rat(q)","Real.from_rat(q) = Real.from_rat(p)"]}
{"goal":"q <= p","proof":["not Real.from_rat(q).gt_rat(p) or Real.from_rat(q) > Real.from_rat(p)","not q > p or Real.from_rat(q).gt_rat(p)","q > p = p < q","not Real.from_rat(q) <= Real.from_rat(p) or not Real.from_rat(q) > Real.from_rat(p)","q > p","not Real.from_rat(q) > Real.from_rat(p)","Real.from_rat(q).gt_rat(p)","not Real.from_rat(q).gt_rat(p)"]}
{"goal":"false","proof":["not p <= q or not q <= p or q = p","not p < q or p <= q","not p < q or q != p","q != p","p <= q","not p <= q"]}
{"goal":"from_rat_maintains_lt","proof":["not Real.from_rat(q).gt_rat(p) or Real.from_rat(q) > Real.from_rat(p)","not q > p or Real.from_rat(q).gt_rat(p)","Real.from_rat(p) >= Real.from_rat(q) or Real.from_rat(p) < Real.from_rat(q)","Real.from_rat(p) >= Real.from_rat(q)","not Real.from_rat(q) <= Real.from_rat(p) or not Real.from_rat(q) > Real.from_rat(p)","Real.from_rat(p) >= Real.from_rat(q) = Real.from_rat(q) <= Real.from_rat(p)","q > p = p < q","Real.from_rat(q) <= Real.from_rat(p)","q > p","not Real.from_rat(q) > Real.from_rat(p)","Real.from_rat(q).gt_rat(p)","not Real.from_rat(q).gt_rat(p)"]}
{"goal":"exists(k0: Rat) { a < Real.from_rat(k0) and Real.from_rat(k0) < b }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(s0(a, b)) < b or not a < Real.from_rat(s0(a, b))","not a < b or Real.from_rat(s0(a, b)) < b","not a < b or a < Real.from_rat(s0(a, b))","a < Real.from_rat(s0(a, b))","Real.from_rat(s0(a, b)) < b","not Real.from_rat(s0(a, b)) < b"]}
{"goal":"exists(k0: Rat) { Real.from_rat(rab1) < Real.from_rat(k0) and Real.from_rat(k0) < b }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(rab1) < Real.from_rat(s0(Real.from_rat(rab1), b)) or not Real.from_rat(s0(Real.from_rat(rab1), b)) < b","not Real.from_rat(rab1) < b or Real.from_rat(s0(Real.from_rat(rab1), b)) < b","not Real.from_rat(rab1) < b or Real.from_rat(rab1) < Real.from_rat(s0(Real.from_rat(rab1), b))","Real.from_rat(s0(Real.from_rat(rab1), b)) < b","Real.from_rat(rab1) < Real.from_rat(s0(Real.from_rat(rab1), b))","not Real.from_rat(rab1) < Real.from_rat(s0(Real.from_rat(rab1), b))"]}
{"goal":"exists(k0: Rat) { c < Real.from_rat(k0) and Real.from_rat(k0) < d }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(s0(c, d)) < d or not c < Real.from_rat(s0(c, d))","not c < d or Real.from_rat(s0(c, d)) < d","not c < d or c < Real.from_rat(s0(c, d))","c < Real.from_rat(s0(c, d))","Real.from_rat(s0(c, d)) < d","not Real.from_rat(s0(c, d)) < d"]}
{"goal":"exists(k0: Rat) { Real.from_rat(rcd1) < Real.from_rat(k0) and Real.from_rat(k0) < d }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(rcd1) < Real.from_rat(s0(Real.from_rat(rcd1), d)) or not Real.from_rat(s0(Real.from_rat(rcd1), d)) < d","not Real.from_rat(rcd1) < d or Real.from_rat(s0(Real.from_rat(rcd1), d)) < d","not Real.from_rat(rcd1) < d or Real.from_rat(rcd1) < Real.from_rat(s0(Real.from_rat(rcd1), d))","Real.from_rat(s0(Real.from_rat(rcd1), d)) < d","Real.from_rat(rcd1) < Real.from_rat(s0(Real.from_rat(rcd1), d))","not Real.from_rat(rcd1) < Real.from_rat(s0(Real.from_rat(rcd1), d))"]}
{"goal":"a + c <= Real.from_rat(rab1) + c","proof":["not a <= Real.from_rat(rab1) or a + c <= Real.from_rat(rab1) + c","not a <= Real.from_rat(rab1)","not a < Real.from_rat(rab1) or a <= Real.from_rat(rab1)"]}
{"goal":"Real.from_rat(rab1) + c <= Real.from_rat(rab1) + Real.from_rat(rcd1)","proof":["not c <= Real.from_rat(rcd1) or Real.from_rat(rab1) + c <= Real.from_rat(rab1) + Real.from_rat(rcd1)","not c <= Real.from_rat(rcd1)","not c < Real.from_rat(rcd1) or c <= Real.from_rat(rcd1)"]}
{"goal":"a + c <= Real.from_rat(rab1) + Real.from_rat(rcd1)","proof":["not a + c <= Real.from_rat(rab1) + c or not Real.from_rat(rab1) + c <= Real.from_rat(rab1) + Real.from_rat(rcd1) or a + c <= Real.from_rat(rab1) + Real.from_rat(rcd1)","not Real.from_rat(rab1) + c <= Real.from_rat(rab1) + Real.from_rat(rcd1) or not a + c <= Real.from_rat(rab1) + c"]}
{"goal":"Real.from_rat(rab2) + d <= b + d","proof":["not Real.from_rat(rab2) <= b or Real.from_rat(rab2) + d <= b + d","not Real.from_rat(rab2) <= b","not Real.from_rat(rab2) < b or Real.from_rat(rab2) <= b"]}
{"goal":"Real.from_rat(rab2) + Real.from_rat(rcd2) <= Real.from_rat(rab2) + d","proof":["not Real.from_rat(rcd2) <= d or Real.from_rat(rab2) + Real.from_rat(rcd2) <= Real.from_rat(rab2) + d","not Real.from_rat(rcd2) <= d","not Real.from_rat(rcd2) < d or Real.from_rat(rcd2) <= d"]}
{"goal":"Real.from_rat(rab2) + Real.from_rat(rcd2) <= b + d","proof":["not Real.from_rat(rab2) + Real.from_rat(rcd2) <= Real.from_rat(rab2) + d or not Real.from_rat(rab2) + d <= b + d or Real.from_rat(rab2) + Real.from_rat(rcd2) <= b + d","not Real.from_rat(rab2) + Real.from_rat(rcd2) <= Real.from_rat(rab2) + d or not Real.from_rat(rab2) + d <= b + d"]}
{"goal":"rab1 < rab2","proof":["not Real.from_rat(rab2) < Real.from_rat(rab1) or not Real.from_rat(rab1) < Real.from_rat(rab2) or Real.from_rat(rab2) < Real.from_rat(rab2)","not rab2 < rab1 or Real.from_rat(rab2) < Real.from_rat(rab1)","rab1 > rab2 or rab1 < rab2 or rab2 = rab1","rab1 > rab2 or rab2 = rab1","rab1 > rab2 = rab2 < rab1","not Real.from_rat(rab1) < Real.from_rat(rab2) or Real.from_rat(rab2) != Real.from_rat(rab1)","not Real.from_rat(rab2) < Real.from_rat(rab2) or Real.from_rat(rab2) != Real.from_rat(rab2)","not Real.from_rat(rab2) < Real.from_rat(rab2)","Real.from_rat(rab2) != Real.from_rat(rab1)","rab2 != rab1","rab1 > rab2","rab2 < rab1","not Real.from_rat(rab2) < Real.from_rat(rab1) or Real.from_rat(rab2) < Real.from_rat(rab2)","Real.from_rat(rab2) < Real.from_rat(rab1)","not Real.from_rat(rab2) < Real.from_rat(rab1)"]}
{"goal":"rcd1 < rcd2","proof":["not Real.from_rat(rcd2) < Real.from_rat(rcd1) or not Real.from_rat(rcd1) < Real.from_rat(rcd2) or Real.from_rat(rcd2) < Real.from_rat(rcd2)","not rcd2 < rcd1 or Real.from_rat(rcd2) < Real.from_rat(rcd1)","rcd1 > rcd2 or rcd1 < rcd2 or rcd2 = rcd1","rcd1 > rcd2 or rcd2 = rcd1","rcd1 > rcd2 = rcd2 < rcd1","not Real.from_rat(rcd1) < Real.from_rat(rcd2) or Real.from_rat(rcd2) != Real.from_rat(rcd1)","not Real.from_rat(rcd2) < Real.from_rat(rcd2) or Real.from_rat(rcd2) != Real.from_rat(rcd2)","not Real.from_rat(rcd2) < Real.from_rat(rcd2)","Real.from_rat(rcd2) != Real.from_rat(rcd1)","rcd2 != rcd1","rcd1 > rcd2","rcd2 < rcd1","not Real.from_rat(rcd2) < Real.from_rat(rcd1) or Real.from_rat(rcd2) < Real.from_rat(rcd2)","Real.from_rat(rcd2) < Real.from_rat(rcd1)","not Real.from_rat(rcd2) < Real.from_rat(rcd1)"]}
{"goal":"rab1 + rcd1 < rab2 + rcd2","proof":["not rab1 < rab2 or not rcd1 < rcd2 or rab1 + rcd1 < rab2 + rcd2"]}
{"goal":"Real.from_rat(rab1 + rcd1) < Real.from_rat(rab2 + rcd2)","proof":["not rab1 + rcd1 < rab2 + rcd2 or Real.from_rat(rab1 + rcd1) < Real.from_rat(rab2 + rcd2)"]}
{"goal":"Real.from_rat(rab1) + Real.from_rat(rcd1) < Real.from_rat(rab2) + Real.from_rat(rcd2)","proof":["Real.from_rat(rab1) + Real.from_rat(rcd1) = Real.from_rat(rab1 + rcd1)","Real.from_rat(rab2) + Real.from_rat(rcd2) = Real.from_rat(rab2 + rcd2)"]}
{"goal":"Real.from_rat(rab1) + Real.from_rat(rcd1) < Real.from_rat(rab2) + Real.from_rat(rcd2)","proof":[]}
{"goal":"a + c < Real.from_rat(rab2) + Real.from_rat(rcd2)","proof":["Real.from_rat(rab1) + Real.from_rat(rcd1) = Real.from_rat(rab1 + rcd1)","not Real.from_rat(rab1 + rcd1) < Real.from_rat(rab2) + Real.from_rat(rcd2) or not a + c <= Real.from_rat(rab1 + rcd1) or a + c < Real.from_rat(rab2) + Real.from_rat(rcd2)","a + c <= Real.from_rat(rab1 + rcd1)","Real.from_rat(rab1 + rcd1) < Real.from_rat(rab2) + Real.from_rat(rcd2)","not Real.from_rat(rab1 + rcd1) < Real.from_rat(rab2) + Real.from_rat(rcd2) or not a + c <= Real.from_rat(rab1 + rcd1)"]}
{"goal":"Real.from_rat(rab2) + Real.from_rat(rcd2) <= b + d","proof":[]}
{"goal":"add_lt_lt","proof":["Real.from_rat(rab2) + Real.from_rat(rcd2) = Real.from_rat(rab2 + rcd2)","not a + c < Real.from_rat(rab2 + rcd2) or not Real.from_rat(rab2 + rcd2) <= b + d or a + c < b + d","Real.from_rat(rab2 + rcd2) <= b + d","a + c < Real.from_rat(rab2 + rcd2)","not Real.from_rat(rab2 + rcd2) <= b + d or not a + c < Real.from_rat(rab2 + rcd2)"]}
{"goal":"exists(k0: Rat) { not a.gt_rat(k0) }","proof":["let s0: Real -> Rat satisfy { forall(x0: Real) { not x0.gt_rat(s0(x0)) } }","a.gt_rat(s0(a))","not a.gt_rat(s0(a))"]}
{"goal":"lte_some_rat","proof":["let s0: Rat satisfy { not a.gt_rat(s0) }","not a <= Real.from_rat(s0)","not a > Real.from_rat(s0) or a.gt_rat(s0)","a > Real.from_rat(s0) or a <= Real.from_rat(s0)","a > Real.from_rat(s0)"]}
{"goal":"exists(k0: Rat) { a <= Real.from_rat(k0) }","proof":["let s0: Real -> Rat satisfy { forall(x0: Real) { x0 <= Real.from_rat(s0(x0)) } }","not a <= Real.from_rat(s0(a))","a <= Real.from_rat(s0(a))"]}
{"goal":"r1 < r1 + Rat.1","proof":["not Rat.1.is_positive or r1 < r1 + Rat.1","not Rat.1.is_positive"]}
{"goal":"Real.from_rat(r1) < Real.from_rat(r1 + Rat.1)","proof":["not r1 < r1 + Rat.1 or Real.from_rat(r1) < Real.from_rat(r1 + Rat.1)"]}
{"goal":"a < Real.from_rat(r1 + Rat.1)","proof":["not Real.from_rat(r1) < Real.from_rat(r1 + Rat.1) or not a <= Real.from_rat(r1) or a < Real.from_rat(r1 + Rat.1)","not Real.from_rat(r1) < Real.from_rat(r1 + Rat.1) or not a <= Real.from_rat(r1)"]}
{"goal":"lt_some_rat","proof":["not a < Real.from_rat(r1 + Rat.1)"]}
{"goal":"gt_some_rat","proof":["let s0: Real -> Rat satisfy { forall(x0: Real) { x0.gt_rat(s0(x0)) } }","not a > Real.from_rat(s0(a))","not a.gt_rat(s0(a)) or a > Real.from_rat(s0(a))","not a.gt_rat(s0(a))","a.gt_rat(s0(a))"]}
{"goal":"Real.from_rat(p) < Real.from_rat(q)","proof":["not p < q or Real.from_rat(p) < Real.from_rat(q)"]}
{"goal":"Real.from_rat(p) <= Real.from_rat(q)","proof":["not q < p or not p <= q or q < q","not Real.from_rat(p) > Real.from_rat(q) or Real.from_rat(p).gt_rat(q)","not Real.from_rat(p).gt_rat(q) or p > q","Real.from_rat(p) > Real.from_rat(q) or Real.from_rat(p) <= Real.from_rat(q)","Real.from_rat(p) > Real.from_rat(q)","p > q = q < p","not q < q","not q < p or q < q","not q < p","Real.from_rat(p).gt_rat(q)","not p > q","p > q"]}
{"goal":"from_rat_maintains_lte","proof":[]}
{"goal":"exists(k0: Rat) { a > Real.from_rat(k0) }","proof":["let s0: Real -> Rat satisfy { forall(x0: Real) { x0 > Real.from_rat(s0(x0)) } }","not a > Real.from_rat(s0(a))","a > Real.from_rat(s0(a))"]}
{"goal":"Rat.from_int(r.floor) <= r","proof":["Rat.from_int(lib(rat.rat_base).floor_impl(r)) <= r","r.floor = lib(rat.rat_base).floor_impl(r)"]}
{"goal":"Real.from_rat(Rat.from_int(r.floor)) <= Real.from_rat(r)","proof":["not Rat.from_int(r.floor) <= r or Real.from_rat(Rat.from_int(r.floor)) <= Real.from_rat(r)"]}
{"goal":"Real.from_int(r.floor) <= Real.from_rat(r)","proof":["Real.from_rat(Rat.from_int(r.floor)) = Real.from_int(r.floor)"]}
{"goal":"gt_some_int","proof":["not a > Real.from_int(r.floor)","not is_transitive[Real](Real.lte) or not a <= Real.from_int(r.floor) or not Real.from_int(r.floor) <= Real.from_rat(r) or a <= Real.from_rat(r)","a <= Real.from_int(r.floor) or a > Real.from_int(r.floor)","a <= Real.from_int(r.floor)","not a <= Real.from_rat(r) or not a > Real.from_rat(r)","not a <= Real.from_rat(r)","not a <= Real.from_int(r.floor) or a <= Real.from_rat(r)"]}
{"goal":"exists(k0: Rat) { a < Real.from_rat(k0) }","proof":["let s0: Real -> Rat satisfy { forall(x0: Real) { x0 < Real.from_rat(s0(x0)) } }","not a < Real.from_rat(s0(a))","a < Real.from_rat(s0(a))"]}
{"goal":"exists(k0: Int) { r < Rat.from_int(k0) }","proof":["not r < Rat.from_int(lib(rat.rat_base).floor_impl(r) + Int.1)","r < Rat.from_int(lib(rat.rat_base).floor_impl(r) + Int.1)"]}
{"goal":"a < Real.from_int(n)","proof":["not a < Real.from_rat(r) or not Real.from_rat(r) < Real.from_int(n) or a < Real.from_int(n)","not r < Rat.from_int(n) or Real.from_rat(r) < Real.from_rat(Rat.from_int(n))","Real.from_rat(Rat.from_int(n)) = Real.from_int(n)","not Real.from_rat(r) < Real.from_int(n) or not a < Real.from_rat(r)","not Real.from_rat(r) < Real.from_int(n)","Real.from_rat(r) < Real.from_rat(Rat.from_int(n))","not Real.from_rat(r) < Real.from_rat(Rat.from_int(n))"]}
{"goal":"lt_some_int","proof":["not a < Real.from_int(n)"]}
{"goal":"Real.from_rat(r) < Real.0","proof":["not Real.from_rat(r).is_negative or Real.from_rat(r) < Real.0"]}
{"goal":"Real.0.gt_rat(r)","proof":["not Real.0 <= Real.from_rat(r) or not Real.from_rat(r) <= Real.0 or Real.from_rat(r) = Real.0","not Real.0 > Real.from_rat(r) or Real.0.gt_rat(r)","not Real.0 > Real.from_rat(r)","Real.0 <= Real.from_rat(r) or Real.0 > Real.from_rat(r)","not Real.from_rat(r) < Real.0 or Real.from_rat(r) <= Real.0","not Real.from_rat(r).is_negative or Real.from_rat(r) != Real.0","Real.from_rat(r) != Real.0","Real.from_rat(r) <= Real.0","Real.0 <= Real.from_rat(r)","not Real.0 <= Real.from_rat(r)"]}
{"goal":"r < Rat.0","proof":["not Real.from_rat(Rat.0).gt_rat(r) or Rat.0 > r","r < Rat.0 = Rat.0 > r","not Rat.0 > r","not Real.from_rat(Rat.0).gt_rat(r)"]}
{"goal":"real_neg_imp_rat_neg","proof":["not r < Rat.0 or r.is_negative"]}
{"goal":"Real.from_rat(Rat.from_int(m)) < Real.from_rat(Rat.from_int(n))","proof":["Real.from_rat(Rat.from_int(m)) = Real.from_int(m)","Real.from_rat(Rat.from_int(n)) = Real.from_int(n)"]}
{"goal":"Rat.from_int(m) < Rat.from_int(n)","proof":["not Real.from_rat(Rat.from_int(n)) < Real.from_rat(Rat.from_int(m)) or not Real.from_rat(Rat.from_int(m)) < Real.from_rat(Rat.from_int(n)) or Real.from_rat(Rat.from_int(n)) < Real.from_rat(Rat.from_int(n))","not Rat.from_int(n) < Rat.from_int(m) or Real.from_rat(Rat.from_int(n)) < Real.from_rat(Rat.from_int(m))","Rat.from_int(m) > Rat.from_int(n) or Rat.from_int(m) < Rat.from_int(n) or Rat.from_int(n) = Rat.from_int(m)","Rat.from_int(m) > Rat.from_int(n) = Rat.from_int(n) < Rat.from_int(m)","not Real.from_rat(Rat.from_int(m)) < Real.from_rat(Rat.from_int(n)) or Real.from_rat(Rat.from_int(n)) != Real.from_rat(Rat.from_int(m))","not Real.from_rat(Rat.from_int(n)) < Real.from_rat(Rat.from_int(n)) or Real.from_rat(Rat.from_int(n)) != Real.from_rat(Rat.from_int(n))","not Real.from_rat(Rat.from_int(n)) < Real.from_rat(Rat.from_int(n))","Rat.from_int(m) > Rat.from_int(n) or Rat.from_int(n) = Rat.from_int(m)","Real.from_rat(Rat.from_int(n)) != Real.from_rat(Rat.from_int(m))","Rat.from_int(n) != Rat.from_int(m)","Rat.from_int(m) > Rat.from_int(n)","Rat.from_int(n) < Rat.from_int(m)","not Real.from_rat(Rat.from_int(n)) < Real.from_rat(Rat.from_int(m)) or Real.from_rat(Rat.from_int(n)) < Real.from_rat(Rat.from_int(n))","Real.from_rat(Rat.from_int(n)) < Real.from_rat(Rat.from_int(m))","not Real.from_rat(Rat.from_int(n)) < Real.from_rat(Rat.from_int(m))"]}
{"goal":"lt_some_int_cancel","proof":["not Rat.from_int(n) <= Rat.from_int(m) or not Rat.from_int(m) < Rat.from_int(n) or Rat.from_int(m) < Rat.from_int(m)","not m <= n or m < n or n = m","not m <= n or n = m","not n <= m or Rat.from_int(n) <= Rat.from_int(m)","m <= n or n <= m","not Real.from_int(m) < Real.from_int(n) or Real.from_int(n) != Real.from_int(m)","not Rat.from_int(m) < Rat.from_int(m)","Real.from_int(n) != Real.from_int(m)","n != m","not m <= n","not Rat.from_int(n) <= Rat.from_int(m) or Rat.from_int(m) < Rat.from_int(m)","not Rat.from_int(n) <= Rat.from_int(m)","n <= m","not n <= m"]}
{"goal":"exists(k0: Int) { a > Real.from_int(k0) }","proof":["let s0: Real -> Int satisfy { forall(x0: Real) { x0 > Real.from_int(s0(x0)) } }","not a > Real.from_int(s0(a))","a > Real.from_int(s0(a))"]}
{"goal":"Real.from_int(m) <= a","proof":["not a > Real.from_int(m) or not a <= Real.from_int(m)","a <= Real.from_int(m) or Real.from_int(m) <= a","not a <= Real.from_int(m)","a <= Real.from_int(m)"]}
{"goal":"f(Nat.0)","proof":["Real.from_int(m + Int.from_nat(Nat.0)) <= a = f(Nat.0)","-Int.from_nat(Nat.0) = lib(int.int_base).neg_nat(Nat.0)","m + Int.0 = m","--Int.from_nat(Nat.0) = Int.from_nat(Nat.0)"]}
{"goal":"Real.from_int(m + Int.from_nat(x)) <= a","proof":["Real.from_int(m + Int.from_nat(x)) <= a = f(x)"]}
{"goal":"Real.from_int(m + Int.from_nat(x) + Int.1) <= a","proof":["not a < Real.from_int(m + Int.from_nat(x) + Int.1) or not Real.from_int(m + Int.from_nat(x)) <= a or floor_exists(a)","a < Real.from_int(m + Int.from_nat(x) + Int.1) or a >= Real.from_int(m + Int.from_nat(x) + Int.1)","a >= Real.from_int(m + Int.from_nat(x) + Int.1) = Real.from_int(m + Int.from_nat(x) + Int.1) <= a","not a >= Real.from_int(m + Int.from_nat(x) + Int.1)","not a < Real.from_int(m + Int.from_nat(x) + Int.1)","a < Real.from_int(m + Int.from_nat(x) + Int.1)"]}
{"goal":"Real.from_int(m + Int.from_nat(x.suc)) <= a","proof":["m + (Int.from_nat(x) + Int.1) = m + Int.from_nat(x) + Int.1","Int.from_nat(x) + Int.from_nat(Nat.1) = Int.from_nat(x + Nat.1)","a >= Real.from_int(m + Int.from_nat(x) + Int.1) = Real.from_int(m + Int.from_nat(x) + Int.1) <= a","a >= Real.from_int(m + Int.from_nat(x.suc)) = Real.from_int(m + Int.from_nat(x.suc)) <= a","m + Int.from_nat(x.suc) = Int.from_nat(x.suc) + m","x + Nat.1 = Nat.1 + x","Real.from_rat(Rat.from_int(Int.from_nat(x.suc) + m)) = Real.from_int(Int.from_nat(x.suc) + m)","Real.from_rat(Rat.from_int(m + Int.from_nat(x) + Int.1)) = Real.from_int(m + Int.from_nat(x) + Int.1)","Nat.1 + x = x.suc"]}
{"goal":"f(x.suc)","proof":["Real.from_int(m + Int.from_nat(x.suc)) <= a = f(x.suc)"]}
{"goal":"f(x)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(Nat.0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(Nat.0) or x2(x3) } }","not f(s0(f)) or f(s0(f).suc)","not f(s0(f).suc) or not f(Nat.0) or f(x)","not f(s0(f).suc)","not f(Nat.0) or f(s0(f)) or f(x)","not f(s0(f))","f(s0(f))"]}
{"goal":"exists(k0: Int) { a < Real.from_int(k0) }","proof":["let s0: Real -> Int satisfy { forall(x0: Real) { x0 < Real.from_int(s0(x0)) } }","not a < Real.from_int(s0(a))","a < Real.from_int(s0(a))"]}
{"goal":"f(abs(m) + abs(big))","proof":["f(abs(m) + abs(big))"]}
{"goal":"Real.from_int(m + Int.from_nat(abs(m) + abs(big))) <= a","proof":["f(abs(m) + abs(big))","Real.from_int(m + Int.from_nat(abs(m) + abs(big))) <= a = f(abs(m) + abs(big))"]}
{"goal":"Real.from_int(m + Int.from_nat(abs(m) + abs(big))) < Real.from_int(big)","proof":["not Real.from_int(m + Int.from_nat(abs(m) + abs(big))) <= a or not a < Real.from_int(big) or Real.from_int(m + Int.from_nat(abs(m) + abs(big))) < Real.from_int(big)","not Real.from_int(m + Int.from_nat(abs(m) + abs(big))) <= a or not a < Real.from_int(big)"]}
{"goal":"m + Int.from_nat(abs(m) + abs(big)) < big","proof":["not Real.from_int(m + Int.from_nat(abs(m) + abs(big))) < Real.from_int(big) or m + Int.from_nat(abs(m) + abs(big)) < big"]}
{"goal":"m + Int.from_nat(abs(m)) + Int.from_nat(abs(big)) < big","proof":["m + (Int.from_nat(abs(m)) + Int.from_nat(abs(big))) = m + Int.from_nat(abs(m)) + Int.from_nat(abs(big))","Int.from_nat(abs(m)) + Int.from_nat(abs(big)) = Int.from_nat(abs(m) + abs(big))"]}
{"goal":"big <= Int.from_nat(abs(big))","proof":["big <= Int.from_nat(abs(big))"]}
{"goal":"-m <= Int.from_nat(abs(m))","proof":["-m <= Int.from_nat(abs(-m))","abs(-m) = abs(m)"]}
{"goal":"Int.0 <= m + Int.from_nat(abs(m))","proof":["m + Int.from_nat(abs(m)) >= Int.0","Int.0 <= m + Int.from_nat(abs(m)) = m + Int.from_nat(abs(m)) >= Int.0"]}
{"goal":"Int.0 + big <= m + Int.from_nat(abs(m)) + Int.from_nat(abs(big))","proof":["not Int.0 <= m + Int.from_nat(abs(m)) or not big <= Int.from_nat(abs(big)) or Int.0 + big <= m + Int.from_nat(abs(m)) + Int.from_nat(abs(big))"]}
{"goal":"false","proof":["m + (Int.from_nat(lib(int.int_base).abs(m)) + Int.from_nat(lib(int.int_base).abs(big))) = m + Int.from_nat(lib(int.int_base).abs(m)) + Int.from_nat(lib(int.int_base).abs(big))","not m + Int.from_nat(lib(int.int_base).abs(m) + lib(int.int_base).abs(big)) < big or not big <= m + Int.from_nat(lib(int.int_base).abs(m) + lib(int.int_base).abs(big)) or big < big","Int.from_nat(lib(int.int_base).abs(m)) + Int.from_nat(lib(int.int_base).abs(big)) = Int.from_nat(lib(int.int_base).abs(m) + lib(int.int_base).abs(big))","big + Int.0 = Int.0 + big","big + Int.0 = big","not big < big","not big <= m + Int.from_nat(lib(int.int_base).abs(m) + lib(int.int_base).abs(big)) or big < big","not big <= m + Int.from_nat(lib(int.int_base).abs(m) + lib(int.int_base).abs(big))"]}
{"goal":"floor_exists","proof":["let s0: Real -> Int satisfy { forall(x0: Real) { not floor_exists(x0) or Real.from_int(s0(x0)) <= x0 } and forall(x1: Real) { not floor_exists(x1) or x1 < Real.from_int(s0(x1) + Int.1) } and forall(x2: Real, x3: Int) { not x2 < Real.from_int(x3 + Int.1) or not Real.from_int(x3) <= x2 or floor_exists(x2) } }","not a < Real.from_int(s0(a) + Int.1) or not Real.from_int(s0(a)) <= a","not floor_exists(a) or Real.from_int(s0(a)) <= a","not floor_exists(a) or a < Real.from_int(s0(a) + Int.1)","Real.from_int(s0(a)) <= a","a < Real.from_int(s0(a) + Int.1)","not a < Real.from_int(s0(a) + Int.1)"]}
{"goal":"exists(k0: Int) { Real.from_int(k0) <= a and a < Real.from_int(k0 + Int.1) }","proof":["let s0: Real -> Int satisfy { forall(x0: Real) { Real.from_int(s0(x0)) <= x0 } and forall(x1: Real) { x1 < Real.from_int(s0(x1) + Int.1) } }","not a < Real.from_int(s0(a) + Int.1) or not Real.from_int(s0(a)) <= a","a < Real.from_int(s0(a) + Int.1)","Real.from_int(s0(a)) <= a"]}
{"goal":"Real.from_int(m) + Real.from_int(n) = Real.from_rat(Rat.from_int(m)) + Real.from_int(n)","proof":["Real.from_rat(Rat.from_int(m)) != Real.from_int(m)","Real.from_rat(Rat.from_int(m)) = Real.from_int(m)"]}
{"goal":"Real.from_rat(Rat.from_int(m)) + Real.from_int(n) = Real.from_rat(Rat.from_int(m)) + Real.from_rat(Rat.from_int(n))","proof":["Real.from_rat(Rat.from_int(n)) != Real.from_int(n)","Real.from_rat(Rat.from_int(n)) = Real.from_int(n)"]}
{"goal":"Real.from_rat(Rat.from_int(m) + Rat.from_int(n)) = Real.from_int(m + n)","proof":["Rat.from_int(m) + Rat.from_int(n) = Rat.from_int(m + n)","Real.from_rat(Rat.from_int(m + n)) != Real.from_int(m + n)","Real.from_rat(Rat.from_int(m + n)) = Real.from_int(m + n)"]}
{"goal":"Real.from_int(m + n) = Real.from_int(m + n)","proof":[]}
{"goal":"add_from_int","proof":["Real.from_rat(Rat.from_int(m)) + Real.from_rat(Rat.from_int(n)) = Real.from_rat(Rat.from_int(m) + Rat.from_int(n))"]}
{"goal":"floor(a) < floor(a) + Int.1","proof":["not Real.from_int(floor(a)) < Real.from_int(floor(a) + Int.1) or floor(a) < floor(a) + Int.1","a < Real.from_int(floor(a) + Int.1)","not Real.from_int(floor(a)) < Real.from_int(floor(a) + Int.1)"]}
{"goal":"Real.from_int(floor(a)) < Real.from_int(floor(a) + Int.1)","proof":["not a < Real.from_int(floor(a) + Int.1)","a < Real.from_int(floor(a) + Int.1)"]}
{"goal":"a < Real.from_int(floor(a) + Int.1)","proof":["not Real.from_int(floor(a)) < Real.from_int(floor(a) + Int.1)"]}
{"goal":"a < Real.from_int(floor(a)) + Real.1","proof":["not a < a + Real.1","Real.from_int(Int.1) + Real.from_int(floor(a)) = Real.from_int(Int.1 + floor(a))","a < a + Real.1 or a >= a + Real.1","not a < Real.from_int(floor(a) + Int.1) or not a >= Real.from_int(floor(a) + Int.1)","Real.1 + Real.from_int(floor(a)) = Real.from_int(floor(a)) + Real.1","floor(a) + Int.1 = Int.1 + floor(a)","Real.from_rat(Rat.from_int(Int.1)) = Real.from_int(Int.1)","a >= a + Real.1","not a >= Real.from_int(floor(a) + Int.1)"]}
{"goal":"a < a + Real.1","proof":["not a < Real.from_int(floor(a)) + Real.1"]}
{"goal":"Real.from_int(floor(a)) <= a","proof":["Real.from_int(floor(a)) <= a"]}
{"goal":"Real.from_int(floor(a)) < a","proof":["not Real.from_int(floor(a)) <= a or Real.from_int(floor(a)) < a or Real.from_int(floor(a)) = a"]}
{"goal":"a < Real.from_int(floor(a) + Int.1)","proof":["a < Real.from_int(floor(a) + Int.1)"]}
{"goal":"Real.from_int(floor(a)) + a < a + Real.from_int(floor(a) + Int.1)","proof":["not Real.from_int(floor(a)) < a or not a < Real.from_int(floor(a) + Int.1) or Real.from_int(floor(a)) + a < a + Real.from_int(floor(a) + Int.1)"]}
{"goal":"Real.from_int(floor(a)) + a < a + (Real.from_int(floor(a)) + Real.1)","proof":["Real.from_int(Int.1) + Real.from_int(floor(a)) = Real.from_int(Int.1 + floor(a))","Real.new(add_gt(Real.from_int(floor(a) + Int.1), a)) = Real.from_int(floor(a) + Int.1) + a","Real.new(add_gt(Real.from_int(floor(a)) + Real.1, a)) = Real.from_int(floor(a)) + Real.1 + a","Real.1 + Real.from_int(floor(a)) = Real.from_int(floor(a)) + Real.1","a + (Real.from_int(floor(a)) + Real.1) = Real.from_int(floor(a)) + Real.1 + a","a + Real.from_int(floor(a) + Int.1) = Real.from_int(floor(a) + Int.1) + a","floor(a) + Int.1 = Int.1 + floor(a)","Real.from_rat(Rat.from_int(Int.1)) = Real.from_int(Int.1)"]}
{"goal":"a + Real.from_int(floor(a)) < a + Real.1 + Real.from_int(floor(a))","proof":["a + (Real.1 + Real.from_int(floor(a))) = a + Real.1 + Real.from_int(floor(a))","Real.1 + Real.from_int(floor(a)) = Real.from_int(floor(a)) + Real.1","a + Real.from_int(floor(a)) = Real.from_int(floor(a)) + a"]}
{"goal":"a < a + Real.1","proof":["not a + Real.from_int(floor(a)) < a + Real.1 + Real.from_int(floor(a)) or a < a + Real.1"]}
{"goal":"lt_add_one","proof":[]}
{"goal":"Int.1 <= n","proof":["not n.is_positive or not Int.1.divides(n) or Int.1 <= n","not Int.1.divides(n)","n * Int.1 != n * Int.1 or Int.1.divides(n * Int.1)","n * Int.1 = n","Int.1.divides(n * Int.1)"]}
{"goal":"Real.1 <= Real.from_int(n)","proof":["not Rat.1 <= Rat.from_int(n) or Real.from_rat(Rat.1) <= Real.from_rat(Rat.from_int(n))","not Int.1 <= n or Rat.from_int(Int.1) <= Rat.from_int(n)","Real.from_rat(Rat.from_int(n)) = Real.from_int(n)","not Real.1 <= Real.from_rat(Rat.from_int(n))","Rat.from_int(Int.1) <= Rat.from_int(n)","Rat.1 <= Rat.from_int(n)","not Real.from_rat(Rat.1) <= Real.from_rat(Rat.from_int(n))","Real.from_rat(Rat.1) <= Real.from_rat(Rat.from_int(n))"]}
{"goal":"a + Real.1 <= a + Real.from_int(n)","proof":["not Real.1 <= Real.from_int(n) or a + Real.1 <= a + Real.from_int(n)"]}
{"goal":"a < a + Real.1","proof":["a < a + Real.1"]}
{"goal":"lt_add_pos_int","proof":["not a < Real.1 + a or not Real.1 + a <= a + Real.from_int(n) or a < a + Real.from_int(n)","a + Real.1 = Real.1 + a","a < Real.1 + a","Real.1 + a <= a + Real.from_int(n)","not Real.1 + a <= a + Real.from_int(n) or not a < Real.1 + a"]}
{"goal":"Real.0 <= Real.from_rat(r)","proof":["not Rat.0 < r or Real.from_rat(Rat.0) < Real.from_rat(r)","not Real.0 < Real.from_rat(r) or Real.0 <= Real.from_rat(r)","not Real.0 < Real.from_rat(r)","not r.is_positive or Rat.0 < r","Rat.0 < r","not Real.from_rat(Rat.0) < Real.from_rat(r)","Real.from_rat(Rat.0) < Real.from_rat(r)"]}
{"goal":"a <= a + Real.from_rat(r)","proof":["not Real.0 <= Real.from_rat(r) or a + Real.0 <= a + Real.from_rat(r)","a + Real.0 = a","not a + Real.0 <= a + Real.from_rat(r)"]}
{"goal":"r * Rat.from_int(Int.from_nat(Nat.0)) = Rat.0","proof":["Rat.new(Int.from_nat(Nat.0), Int.1) = Rat.from_int(Int.from_nat(Nat.0))","r * Rat.0 = Rat.0","r * Rat.new(Int.from_nat(Nat.0), Int.1) != Rat.0","r * Rat.new(Int.0, Int.1) != Rat.0"]}
{"goal":"f(Nat.0)","proof":["a + Real.from_rat(r * Rat.from_int(Int.from_nat(Nat.0))) != a or f(Nat.0)","a + Real.from_rat(r) = Real.from_rat(r) + a","Real.from_rat(r) + a + Real.0 = Real.from_rat(r) + a","a + Real.from_rat(r * Rat.from_int(Int.from_nat(Nat.0))) != a"]}
{"goal":"a = a + Real.from_rat(r * Rat.from_int(Int.from_nat(x)))","proof":["not f(x) or a + Real.from_rat(r * Rat.from_int(Int.from_nat(x))) = a"]}
{"goal":"a = a + Real.from_rat(r) + Real.from_rat(r * Rat.from_int(Int.from_nat(x)))","proof":["a + Real.from_rat(r * Rat.from_int(Int.from_nat(x))) != a"]}
{"goal":"a = a + (Real.from_rat(r) + Real.from_rat(r * Rat.from_int(Int.from_nat(x))))","proof":["a + (Real.from_rat(r) + Real.from_rat(r * Rat.from_int(Int.from_nat(x)))) = a + Real.from_rat(r) + Real.from_rat(r * Rat.from_int(Int.from_nat(x)))"]}
{"goal":"a = a + Real.from_rat(r + r * Rat.from_int(Int.from_nat(x)))","proof":["Real.from_rat(r) + Real.from_rat(r * Rat.from_int(Int.from_nat(x))) = Real.from_rat(r + r * Rat.from_int(Int.from_nat(x)))"]}
{"goal":"a = a + Real.from_rat(r * Rat.1 + r * Rat.from_int(Int.from_nat(x)))","proof":["r * Rat.1 = Rat.1 * r","a + Real.from_rat(Rat.1 * r + r * Rat.from_int(Int.from_nat(x))) != a","Rat.1 * r = r"]}
{"goal":"a = a + Real.from_rat(r * (Rat.1 + Rat.from_int(Int.from_nat(x))))","proof":["r * Rat.1 + r * Rat.from_int(Int.from_nat(x)) = r * (Rat.1 + Rat.from_int(Int.from_nat(x)))"]}
{"goal":"Rat.1 + Rat.from_int(Int.from_nat(x)) = Rat.from_int(Int.from_nat(x.suc))","proof":["Rat.from_int(Int.1) + Rat.from_int(Int.from_nat(x)) = Rat.from_int(Int.1 + Int.from_nat(x))","Int.from_nat(Nat.1) + Int.from_nat(x) = Int.from_nat(Nat.1 + x)","Nat.1 + x = x.suc"]}
{"goal":"a = a + Real.from_rat(r * Rat.from_int(Int.from_nat(x.suc)))","proof":["a + Real.from_rat(r * (Rat.1 + Rat.from_int(Int.from_nat(x)))) != a"]}
{"goal":"f(x.suc)","proof":["a + Real.from_rat(r * Rat.from_int(Int.from_nat(x.suc))) != a or f(x.suc)"]}
{"goal":"f(x)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(Nat.0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(Nat.0) or x2(x3) } }","not f(s0(f)) or f(s0(f).suc)","not f(s0(f).suc) or not f(Nat.0) or f(x)","not f(s0(f).suc)","not f(Nat.0) or f(s0(f)) or f(x)","not f(s0(f))","f(s0(f))"]}
{"goal":"f(abs(r.denom))","proof":["f(abs(r.denom))"]}
{"goal":"a = a + Real.from_rat(r * Rat.from_int(Int.from_nat(abs(r.denom))))","proof":["f(abs(r.denom))","not f(abs(r.denom)) or a + Real.from_rat(r * Rat.from_int(Int.from_nat(abs(r.denom)))) = a","a + Real.from_rat(r * Rat.from_int(Int.from_nat(abs(r.denom)))) = a"]}
{"goal":"r.denom.is_positive","proof":["(-r).denom = r.denom","not (-r).denom.is_positive","(-r).denom.is_positive"]}
{"goal":"Int.from_nat(abs(r.denom)) = r.denom","proof":["not r.denom.is_positive or r.denom.abs = r.denom","Int.from_nat(abs(r.denom)) = r.denom.abs","r.denom.abs = r.denom","r.denom.abs != r.denom"]}
{"goal":"a = a + Real.from_rat(r * Rat.from_int(r.denom))","proof":["a + Real.from_rat(r * Rat.from_int(Int.from_nat(lib(int.int_base).abs(r.denom)))) != a"]}
{"goal":"a = a + Real.from_rat(Rat.from_int(r.num))","proof":["r * Rat.from_int(r.denom) = Rat.from_int(r.num)"]}
{"goal":"r.num.is_positive","proof":["r.num.is_positive = r.is_positive"]}
{"goal":"false","proof":["not r.num.is_positive or a < a + Real.from_int(r.num)","Real.from_rat(Rat.from_int(r.num)) = Real.from_int(r.num)","a + Real.from_int(r.num) = a","not a < a + Real.from_int(r.num) or a + Real.from_int(r.num) != a","a < a + Real.from_int(r.num)"]}
{"goal":"lt_add_pos_rat","proof":["not a <= a + Real.from_rat(r) or a < a + Real.from_rat(r) or a + Real.from_rat(r) = a"]}
{"goal":"Real.0 < b","proof":["not Real.0 <= b or Real.0 < b or Real.0 = b","not Real.0 <= b or Real.0 = b","not b <= Real.0 or not b > Real.0","Real.0 <= b or b <= Real.0","not b.is_positive or b > Real.0","b > Real.0","not b <= Real.0","Real.0 <= b","Real.0 = b"]}
{"goal":"exists(k0: Rat) { Real.0 < Real.from_rat(k0) and Real.from_rat(k0) < b }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not Real.0 < Real.from_rat(s0(Real.0, b)) or not Real.from_rat(s0(Real.0, b)) < b","not Real.0 < b or Real.from_rat(s0(Real.0, b)) < b","not Real.0 < b or Real.0 < Real.from_rat(s0(Real.0, b))","Real.0 < Real.from_rat(s0(Real.0, b))","Real.from_rat(s0(Real.0, b)) < b","not Real.from_rat(s0(Real.0, b)) < b"]}
{"goal":"Real.from_rat(r).is_positive","proof":["not Real.from_rat(r) <= Real.0 or not Real.0 <= Real.from_rat(r) or Real.from_rat(r) = Real.0","Real.from_rat(r) <= Real.0 or Real.from_rat(r) > Real.0","not Real.0 < Real.from_rat(r) or Real.0 <= Real.from_rat(r)","not Real.from_rat(r) > Real.0 or Real.from_rat(r).is_positive","not Real.from_rat(r) > Real.0","not Real.0 < Real.from_rat(r) or Real.from_rat(r) != Real.0","Real.from_rat(r) != Real.0","Real.0 <= Real.from_rat(r)","Real.from_rat(r) <= Real.0","not Real.from_rat(r) <= Real.0"]}
{"goal":"Rat.0 <= r","proof":["not Real.from_rat(r).gt_rat(Rat.0) or Real.from_rat(r).gt_rat(r) or Rat.0 <= r","not Real.from_rat(r).gt_rat(Rat.0) or Real.from_rat(r).gt_rat(r)","Real.from_rat(r).gt_rat(Rat.0) = Real.from_rat(r).is_positive","not Real.from_rat(r).gt_rat(r)","Real.from_rat(r).gt_rat(Rat.0)","not Real.from_rat(r).gt_rat(Rat.0)"]}
{"goal":"r.is_positive","proof":["not Rat.0 <= r or (r - Rat.0).is_positive or Rat.0 = r","not Real.0 < Real.from_rat(r) or Real.from_rat(r) != Real.0","r - Rat.0 = r","not (r - Rat.0).is_positive","Rat.0 = r","Real.from_rat(r) != Real.0","Real.from_rat(r) = Real.0"]}
{"goal":"a < a + Real.from_rat(r)","proof":["not r.is_positive or a < a + Real.from_rat(r)"]}
{"goal":"a + Real.from_rat(r) <= a + b","proof":["not Real.from_rat(r) <= b or a + Real.from_rat(r) <= a + b","not Real.from_rat(r) <= b","not Real.from_rat(r) < b or Real.from_rat(r) <= b"]}
{"goal":"a < a + b","proof":["not a < Real.from_rat(r) + a or not Real.from_rat(r) + a <= a + b or a < a + b","a + Real.from_rat(r) = Real.from_rat(r) + a","a < Real.from_rat(r) + a","Real.from_rat(r) + a <= a + b","not Real.from_rat(r) + a <= a + b or not a < Real.from_rat(r) + a"]}
{"goal":"lt_add_pos","proof":[]}
{"goal":"a + Real.0 < b + Real.0","proof":["a + Real.0 = Real.0 + a","b + Real.0 = Real.0 + b","Real.0 + a = a","Real.0 + b = b"]}
{"goal":"a + (Real.from_rat(r) + Real.from_rat(-r)) < b + (Real.from_rat(r) + Real.from_rat(-r))","proof":["Real.from_rat(r) + Real.from_rat(-r) = Real.from_rat(r + -r)","Real.new(add_gt(Real.0, a)) = Real.0 + a","Real.new(add_gt(Real.0, b)) = Real.0 + b","Real.new(add_gt(Real.from_rat(r) + Real.from_rat(-r), a)) = Real.from_rat(r) + Real.from_rat(-r) + a","Real.new(add_gt(Real.from_rat(r) + Real.from_rat(-r), b)) = Real.from_rat(r) + Real.from_rat(-r) + b","a + Real.from_rat(r + -r) = Real.from_rat(r + -r) + a","b + Real.from_rat(r + -r) = Real.from_rat(r + -r) + b","r + -r = Rat.0","Real.0 + a = a","Real.0 + b = b"]}
{"goal":"a + Real.from_rat(r) + Real.from_rat(-r) < b + Real.from_rat(r) + Real.from_rat(-r)","proof":["a + (Real.from_rat(r) + Real.from_rat(-r)) = a + Real.from_rat(r) + Real.from_rat(-r)","b + (Real.from_rat(r) + Real.from_rat(-r)) = b + Real.from_rat(r) + Real.from_rat(-r)"]}
{"goal":"lt_add_rat_right","proof":["not a + Real.from_rat(r) + Real.from_rat(-r) < b + Real.from_rat(r) + Real.from_rat(-r) or a + Real.from_rat(r) < b + Real.from_rat(r)"]}
{"goal":"lt_add_rat_left","proof":["not a < b or a + Real.from_rat(r) < b + Real.from_rat(r)","a + Real.from_rat(r) = Real.from_rat(r) + a","b + Real.from_rat(r) = Real.from_rat(r) + b","not a + Real.from_rat(r) < Real.from_rat(r) + b","a + Real.from_rat(r) < b + Real.from_rat(r)"]}
{"goal":"exists(k0: Rat) { a < Real.from_rat(k0) and Real.from_rat(k0) < b }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(s0(a, b)) < b or not a < Real.from_rat(s0(a, b))","not a < b or Real.from_rat(s0(a, b)) < b","not a < b or a < Real.from_rat(s0(a, b))","a < Real.from_rat(s0(a, b))","Real.from_rat(s0(a, b)) < b","not Real.from_rat(s0(a, b)) < b"]}
{"goal":"exists(k0: Rat) { Real.from_rat(r1) < Real.from_rat(k0) and Real.from_rat(k0) < b }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(r1) < Real.from_rat(s0(Real.from_rat(r1), b)) or not Real.from_rat(s0(Real.from_rat(r1), b)) < b","not Real.from_rat(r1) < b or Real.from_rat(s0(Real.from_rat(r1), b)) < b","not Real.from_rat(r1) < b or Real.from_rat(r1) < Real.from_rat(s0(Real.from_rat(r1), b))","Real.from_rat(s0(Real.from_rat(r1), b)) < b","Real.from_rat(r1) < Real.from_rat(s0(Real.from_rat(r1), b))","not Real.from_rat(r1) < Real.from_rat(s0(Real.from_rat(r1), b))"]}
{"goal":"r1 + (r2 - r1) = r2","proof":["r2 - r1 + r1 = r1 + (r2 - r1)","r2 - r1 + r1 = r2"]}
{"goal":"r1 < r2","proof":["not Real.from_rat(r2) < Real.from_rat(r1) or not Real.from_rat(r1) < Real.from_rat(r2) or Real.from_rat(r2) < Real.from_rat(r2)","not r2 < r1 or Real.from_rat(r2) < Real.from_rat(r1)","r1 > r2 or r1 < r2 or r2 = r1","r1 > r2 or r2 = r1","r1 > r2 = r2 < r1","not Real.from_rat(r1) < Real.from_rat(r2) or Real.from_rat(r2) != Real.from_rat(r1)","not Real.from_rat(r2) < Real.from_rat(r2) or Real.from_rat(r2) != Real.from_rat(r2)","not Real.from_rat(r2) < Real.from_rat(r2)","Real.from_rat(r2) != Real.from_rat(r1)","r2 != r1","r1 > r2","r2 < r1","not Real.from_rat(r2) < Real.from_rat(r1) or Real.from_rat(r2) < Real.from_rat(r2)","Real.from_rat(r2) < Real.from_rat(r1)","not Real.from_rat(r2) < Real.from_rat(r1)"]}
{"goal":"eps.is_positive","proof":["not (r2 - r1).is_positive","not r1 <= r2 or (r2 - r1).is_positive or r2 = r1","not r1 < r2 or r1 <= r2","not r1 < r2 or r2 != r1","r2 != r1","r1 <= r2","not r1 <= r2"]}
{"goal":"r1 + eps = r2","proof":["r1 + (r2 - r1) != r2"]}
{"goal":"Real.from_rat(r1) + Real.from_rat(eps) = Real.from_rat(r2)","proof":["Real.from_rat(r1) + Real.from_rat(eps) = Real.from_rat(r1 + eps)"]}
{"goal":"a + Real.from_rat(eps) < Real.from_rat(r1) + Real.from_rat(eps)","proof":["not a < Real.from_rat(r1) or a + Real.from_rat(eps) < Real.from_rat(r1) + Real.from_rat(eps)"]}
{"goal":"a + Real.from_rat(eps) < Real.from_rat(r2)","proof":["not a + Real.from_rat(eps) < Real.from_rat(r1) + Real.from_rat(eps)"]}
{"goal":"Real.from_rat(r2) < b","proof":["not b.gt_rat(r2) or b > Real.from_rat(r2)","Real.from_rat(r2) < b = b > Real.from_rat(r2)","b > Real.from_rat(r2)","not b > Real.from_rat(r2)"]}
{"goal":"a + Real.from_rat(eps) < b","proof":["not a + Real.from_rat(eps) < Real.from_rat(r2) or not Real.from_rat(r2) <= b or a + Real.from_rat(eps) < b","not Real.from_rat(r2) < b or Real.from_rat(r2) <= b","Real.from_rat(r2) <= b","not a + Real.from_rat(eps) < Real.from_rat(r2) or not Real.from_rat(r2) <= b"]}
{"goal":"add_rat_eps_between","proof":["not a + Real.from_rat(eps) < b or not eps.is_positive","not a + Real.from_rat(eps) < b"]}
{"goal":"exists(k0: Rat) { k0.is_positive and a + Real.from_rat(k0) < b }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or s0(x0, x1).is_positive } and forall(x2: Real, x3: Real) { not x2 < x3 or x2 + Real.from_rat(s0(x2, x3)) < x3 } }","not a + Real.from_rat(s0(a, b)) < b or not s0(a, b).is_positive","not a < b or a + Real.from_rat(s0(a, b)) < b","not a < b or s0(a, b).is_positive","s0(a, b).is_positive","a + Real.from_rat(s0(a, b)) < b","not a + Real.from_rat(s0(a, b)) < b"]}
{"goal":"a < a + Real.from_rat(r / Rat.2)","proof":["not (r / Rat.2).is_positive or a < a + Real.from_rat(r / Rat.2)","not (r / Rat.2).is_positive","not r.is_positive or (r / Rat.2).is_positive"]}
{"goal":"a < a + hr","proof":["not a < a + Real.from_rat(r / Rat.2)"]}
{"goal":"c < c + Real.from_rat(r / Rat.2)","proof":["not (r / Rat.2).is_positive or c < c + Real.from_rat(r / Rat.2)","not (r / Rat.2).is_positive","not r.is_positive or (r / Rat.2).is_positive"]}
{"goal":"c < c + hr","proof":["not c < c + Real.from_rat(r / Rat.2)"]}
{"goal":"hr + hr = Real.from_rat(r)","proof":["Real.from_rat(r / Rat.2) + Real.from_rat(r / Rat.2) = Real.from_rat(r / Rat.2 + r / Rat.2)","r / Rat.2 + r / Rat.2 = r"]}
{"goal":"a + c < a + hr + (c + hr)","proof":["not a < a + hr or not c < c + hr or a + c < a + hr + (c + hr)"]}
{"goal":"a + c < a + hr + hr + c","proof":["a + hr + (hr + c) = a + hr + hr + c","c + Real.from_rat(r / Rat.2) = Real.from_rat(r / Rat.2) + c"]}
{"goal":"a + c < a + Real.from_rat(r) + c","proof":["a + (hr + hr) = a + hr + hr"]}
{"goal":"a + Real.from_rat(r) + c <= b + c","proof":["not a + Real.from_rat(r) <= b or a + Real.from_rat(r) + c <= b + c","not a + Real.from_rat(r) < b or a + Real.from_rat(r) <= b","not a + Real.from_rat(r) <= b","a + Real.from_rat(r) <= b"]}
{"goal":"lt_add_right","proof":["not a + c < a + Real.from_rat(r) + c or not a + Real.from_rat(r) + c <= b + c or a + c < b + c","not a + c < a + Real.from_rat(r) + c or not a + Real.from_rat(r) + c <= b + c"]}
{"goal":"lt_add_left","proof":["not a < b or a + c < b + c","c + a = a + c","c + b = b + c","not a + c < c + b","not a + c < b + c"]}
{"goal":"not a + c < b + c","proof":["a + c < a + c","not a + c < a + c or a < a","a < a","let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x1.gt_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2.gt_rat(s0(x2, x3)) or not x2 < x3 } }","not a.gt_rat(s0(a, a)) or not a < a","not a < a or a.gt_rat(s0(a, a))","not a.gt_rat(s0(a, a))","a.gt_rat(s0(a, a))"]}
{"goal":"not b + c < a + c","proof":[]}
{"goal":"not b < a","proof":["not b < a or b + c < a + c"]}
{"goal":"a <= b","proof":["not b <= a or b < a or b = a","let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Rat, x2: Real) { not x0.gt_rat(x1) or not x0 <= x2 or x2.gt_rat(x1) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not b.gt_rat(s0(a, b)) or a <= b","not b.gt_rat(s0(a, b))","a.gt_rat(s0(a, b)) or a <= b","a.gt_rat(s0(a, b))","b <= a or a <= b","b <= a","b = a"]}
{"goal":"lt_add_cancel_right","proof":["not a < b or a + c < b + c","not a <= b or a < b or b = a","not a < b","a < b"]}
{"goal":"lt_add_cancel_left","proof":["b + c != a + c or b = a","a + c = c + a","b + c = c + b","b + c != a + c","b + c = c + a"]}
{"goal":"Real.from_int(floor(a)) <= a","proof":["Real.from_int(floor(a)) <= a"]}
{"goal":"exists(k0: Rat) { Real.from_rat(k0) <= a }","proof":["not Real.from_rat(Rat.from_int(floor(a))) <= a","Real.from_rat(Rat.from_int(floor(a))) = Real.from_int(floor(a))"]}
{"goal":"exists(k0: Rat) { k0 < p }","proof":["let s0: Nat satisfy { true }","not p + -rat.iop(s0) < p","not (-rat.iop(s0)).is_negative or p + -rat.iop(s0) < p","not (-rat.iop(s0)).is_negative","not rat.iop(s0).is_positive or (-rat.iop(s0)).is_negative","not rat.iop(s0).is_positive","rat.iop(s0).is_positive"]}
{"goal":"Real.from_rat(q) < a","proof":["not Real.from_rat(q) < Real.from_rat(p) or not Real.from_rat(p) <= a or Real.from_rat(q) < a","not q < p or Real.from_rat(q) < Real.from_rat(p)","not Real.from_rat(q) < Real.from_rat(p) or not Real.from_rat(p) <= a","Real.from_rat(q) < Real.from_rat(p)","not Real.from_rat(q) < Real.from_rat(p)"]}
{"goal":"lower_rat","proof":["not Real.from_rat(q) < a"]}
{"goal":"exists(k0: Rat) { Real.from_rat(k0) < a }","proof":["let s0: Real -> Rat satisfy { forall(x0: Real) { Real.from_rat(s0(x0)) < x0 } }","not Real.from_rat(s0(a)) < a","Real.from_rat(s0(a)) < a"]}
{"goal":"not a < Real.from_rat(r1)","proof":["not a <= Real.from_rat(r1) or not Real.from_rat(r1) <= a or Real.from_rat(r1) = a","not Real.from_rat(r1) < a or Real.from_rat(r1) <= a","not a < Real.from_rat(r1) or a <= Real.from_rat(r1)","a <= Real.from_rat(r1)","not a < Real.from_rat(r1) or Real.from_rat(r1) != a","Real.from_rat(r1) != a","Real.from_rat(r1) <= a","not Real.from_rat(r1) <= a"]}
{"goal":"not a < Real.from_rat(--r1)","proof":["-(Rat.0 - r1) = r1 - Rat.0","Real.new((--r1).gt) = Real.from_rat(--r1)","Real.new(r1.gt) = Real.from_rat(r1)","Rat.0 - r1 = -r1","r1 - Rat.0 = r1"]}
{"goal":"not neg_gt(a, -r1)","proof":["a < Real.from_rat(--r1) = neg_gt(a, -r1)"]}
{"goal":"exists(k0: Rat) { a < Real.from_rat(k0) }","proof":["let s0: Nat satisfy { true }","let s1: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s1(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s1(x2, x3)) < x3 } }","not a < Real.from_rat(s1(a, a + Real.from_rat(rat.iop(s0))))","not a < a + Real.from_rat(rat.iop(s0)) or a < Real.from_rat(s1(a, a + Real.from_rat(rat.iop(s0))))","not a < a + Real.from_rat(rat.iop(s0))","not rat.iop(s0).is_positive or a < a + Real.from_rat(rat.iop(s0))","not rat.iop(s0).is_positive","rat.iop(s0).is_positive"]}
{"goal":"a < Real.from_rat(--r2)","proof":["-(Rat.0 - r2) = r2 - Rat.0","Real.new((--r2).gt) = Real.from_rat(--r2)","Real.new(r2.gt) = Real.from_rat(r2)","Rat.0 - r2 = -r2","r2 - Rat.0 = r2"]}
{"goal":"neg_gt(a, -r2)","proof":["a < Real.from_rat(--r2) = neg_gt(a, -r2)"]}
{"goal":"neg_gt_is_cut","proof":["let s0: Rat satisfy { true }","not neg_gt(a, -r2) or is_cut(neg_gt(a)) or neg_gt(a, s0)","not neg_gt(a, s0) or is_cut(neg_gt(a)) or neg_gt(a, -r1)","not neg_gt(a, -r2) or neg_gt(a, s0)","not neg_gt(a, s0) or neg_gt(a, -r1)","neg_gt(a, s0)","not neg_gt(a, s0)"]}
{"goal":"a < Real.from_rat(-r2)","proof":["a < Real.from_rat(-r2) = neg_gt(a, r2)"]}
{"goal":"-r2 < -r1","proof":["not r1 < r2 or -r2 < -r1"]}
{"goal":"Real.from_rat(-r2) < Real.from_rat(-r1)","proof":["not -r2 < -r1 or Real.from_rat(-r2) < Real.from_rat(-r1)"]}
{"goal":"neg_gt(a, r1)","proof":["not a < Real.from_rat(-r2) or not Real.from_rat(-r2) <= Real.from_rat(-r1) or a < Real.from_rat(-r1)","a < Real.from_rat(-r1) = neg_gt(a, r1)","not a < Real.from_rat(-r1)","not Real.from_rat(-r2) < Real.from_rat(-r1) or Real.from_rat(-r2) <= Real.from_rat(-r1)","Real.from_rat(-r2) <= Real.from_rat(-r1)","not Real.from_rat(-r2) <= Real.from_rat(-r1) or a < Real.from_rat(-r1)"]}
{"goal":"neg_gt_is_lower","proof":["let (s0: Rat -> Bool -> Rat, s1: Rat -> Bool -> Rat) satisfy { forall(x0: Rat -> Bool, x1: Rat, x2: Rat) { not is_lower(x0) or not x1 < x2 or not x0(x2) or x0(x1) } and forall(x3: Rat -> Bool) { is_lower(x3) or x3(s1(x3)) } and forall(x4: Rat -> Bool) { s0(x4) < s1(x4) or is_lower(x4) } and forall(x5: Rat -> Bool) { not x5(s0(x5)) or is_lower(x5) } }","not neg_gt(a, s1(neg_gt(a))) or not s0(neg_gt(a)) < s1(neg_gt(a)) or neg_gt(a, s0(neg_gt(a)))","s0(neg_gt(a)) < s1(neg_gt(a)) or is_lower(neg_gt(a))","not neg_gt(a, s0(neg_gt(a))) or is_lower(neg_gt(a))","not neg_gt(a, s0(neg_gt(a)))","is_lower(neg_gt(a)) or neg_gt(a, s1(neg_gt(a)))","neg_gt(a, s1(neg_gt(a)))","s0(neg_gt(a)) < s1(neg_gt(a))"]}
{"goal":"exists(k0: Rat) { is_greatest(neg_gt(a), k0) }","proof":["let s0: Rat -> Bool -> Rat satisfy { forall(x0: Rat -> Bool) { not has_greatest(x0) or is_greatest(x0, s0(x0)) } and forall(x1: Rat -> Bool, x2: Rat) { not is_greatest(x1, x2) or has_greatest(x1) } }","not is_greatest(neg_gt(a), s0(neg_gt(a)))","not has_greatest(neg_gt(a)) or is_greatest(neg_gt(a), s0(neg_gt(a)))"]}
{"goal":"neg_gt(a, q)","proof":["not is_greatest(neg_gt(a), q) or neg_gt(a, q)"]}
{"goal":"a < Real.from_rat(-q)","proof":["a < Real.from_rat(-q) = neg_gt(a, q)"]}
{"goal":"exists(k0: Rat) { k0.is_positive and a + Real.from_rat(k0) < Real.from_rat(-q) }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or s0(x0, x1).is_positive } and forall(x2: Real, x3: Real) { not x2 < x3 or x2 + Real.from_rat(s0(x2, x3)) < x3 } }","not a + Real.from_rat(s0(a, Real.from_rat(-q))) < Real.from_rat(-q) or not s0(a, Real.from_rat(-q)).is_positive","not a < Real.from_rat(-q) or a + Real.from_rat(s0(a, Real.from_rat(-q))) < Real.from_rat(-q)","not a < Real.from_rat(-q) or s0(a, Real.from_rat(-q)).is_positive","s0(a, Real.from_rat(-q)).is_positive","a + Real.from_rat(s0(a, Real.from_rat(-q))) < Real.from_rat(-q)","not a + Real.from_rat(s0(a, Real.from_rat(-q))) < Real.from_rat(-q)"]}
{"goal":"a + Real.from_rat(r) + Real.from_rat(-r) < Real.from_rat(-q) + Real.from_rat(-r)","proof":["not a + Real.from_rat(r) < Real.from_rat(-q) or a + Real.from_rat(r) + Real.from_rat(-r) < Real.from_rat(-q) + Real.from_rat(-r)"]}
{"goal":"a + (Real.from_rat(r) + Real.from_rat(-r)) < Real.from_rat(-q) + Real.from_rat(-r)","proof":["a + (Real.from_rat(r) + Real.from_rat(-r)) = a + Real.from_rat(r) + Real.from_rat(-r)"]}
{"goal":"a + Real.from_rat(r + -r) < Real.from_rat(-q) + Real.from_rat(-r)","proof":["Real.from_rat(r) + Real.from_rat(-r) = Real.from_rat(r + -r)"]}
{"goal":"a < Real.from_rat(-q) + Real.from_rat(-r)","proof":["Real.from_rat(r) + Real.from_rat(-r) = Real.from_rat(r + -r)","a + Real.from_rat(r + -r) = Real.from_rat(r + -r) + a","r + -r = Rat.0","Real.0 + a = a"]}
{"goal":"a < Real.from_rat(-q + -r)","proof":["Real.from_rat(-q) + Real.from_rat(-r) = Real.from_rat(-q + -r)"]}
{"goal":"a < Real.from_rat(-(q + r))","proof":["q * -Rat.1 + r * -Rat.1 = (q + r) * -Rat.1","Real.from_rat(-q) + Real.from_rat(-r) = Real.from_rat(-q + -r)","(q + r) * -Rat.1 = -(q + r)","q * -Rat.1 = -q","r * -Rat.1 = -r","Real.new((-(q + r)).gt) = Real.from_rat(-(q + r))","Real.new((-q + -r).gt) = Real.from_rat(-q + -r)"]}
{"goal":"neg_gt(a, q + r)","proof":["a < Real.from_rat(-(q + r)) = neg_gt(a, q + r)"]}
{"goal":"q + r <= q","proof":["not is_greatest(neg_gt(a), q) or not neg_gt(a, q + r) or q + r <= q","not neg_gt(a, q + r) or not is_greatest(neg_gt(a), q)"]}
{"goal":"q < q + r","proof":["not r.is_positive or q < q + r"]}
{"goal":"false","proof":["not q + r <= q or q + r < q or q + r = q","not q + r < q or not q < q + r","not q < q","not q + r < q","q + r = q"]}
{"goal":"neg_gt_has_no_greatest","proof":[]}
{"goal":"neg_gt_is_dedekind_cut","proof":["not is_lower(neg_gt(a)) or not is_cut(neg_gt(a)) or has_greatest(neg_gt(a)) or is_dedekind_cut(neg_gt(a))","not has_greatest(neg_gt(a))","not is_lower(neg_gt(a)) or not is_cut(neg_gt(a))","is_lower(neg_gt(a))","is_cut(neg_gt(a))"]}
{"goal":"Real.new(neg_gt(a)).gt_rat(r)","proof":["a < Real.from_rat(-r) = neg_gt(a, r)","neg_gt(a, r)","not is_dedekind_cut(neg_gt(a)) or not neg_gt(a, r) or Real.new(neg_gt(a)).gt_rat(r)","not is_dedekind_cut(neg_gt(a))","is_dedekind_cut(neg_gt(a))"]}
{"goal":"Real.new(neg_gt(a)) > Real.from_rat(r)","proof":["not Real.new(neg_gt(a)).gt_rat(r) or Real.new(neg_gt(a)) > Real.from_rat(r)"]}
{"goal":"lt_rat_neg","proof":["not (-a).gt_rat(r) or -a > Real.from_rat(r)","not (-a).gt_rat(r)","Real.new(neg_gt(a)) = -a"]}
{"goal":"Real.new(neg_gt(Real.from_rat(r))) > Real.from_rat(-r)","proof":["Real.new(neg_gt(Real.from_rat(r))) = -Real.from_rat(r)"]}
{"goal":"Real.new(neg_gt(Real.from_rat(r))).gt_rat(-r)","proof":["not Real.new(neg_gt(Real.from_rat(r))) > Real.from_rat(-r) or Real.new(neg_gt(Real.from_rat(r))).gt_rat(-r)"]}
{"goal":"neg_gt(Real.from_rat(r), -r)","proof":["not Real.new(neg_gt(Real.from_rat(r))).gt_rat(-r) or not is_dedekind_cut(neg_gt(Real.from_rat(r))) or neg_gt(Real.from_rat(r), -r)","not is_dedekind_cut(neg_gt(Real.from_rat(r)))","is_dedekind_cut(neg_gt(Real.from_rat(r)))"]}
{"goal":"Real.from_rat(--r).gt_rat(r)","proof":["Real.from_rat(r) < Real.from_rat(--r) = neg_gt(Real.from_rat(r), -r)","-(Rat.0 - r) = r - Rat.0","not Real.from_rat(r) < Real.from_rat(--r) or Real.from_rat(--r) != Real.from_rat(r)","Rat.0 - r = -r","r - Rat.0 = r","Real.from_rat(r) < Real.from_rat(--r)","Real.from_rat(--r) != Real.from_rat(r)"]}
{"goal":"r < --r","proof":["not Real.from_rat(--r).gt_rat(r) or --r > r","r < --r = --r > r","--r > r","not --r > r"]}
{"goal":"false","proof":["-(Rat.0 - r) = r - Rat.0","not --r < r or not r < --r","Rat.0 - r = -r","r - Rat.0 = r","not --r < r"]}
{"goal":"exists(k0: Rat) { -Real.from_rat(r) < Real.from_rat(k0) and Real.from_rat(k0) < Real.from_rat(-r) }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not -Real.from_rat(r) < Real.from_rat(s0(-Real.from_rat(r), Real.from_rat(-r))) or not Real.from_rat(s0(-Real.from_rat(r), Real.from_rat(-r))) < Real.from_rat(-r)","not -Real.from_rat(r) < Real.from_rat(-r) or Real.from_rat(s0(-Real.from_rat(r), Real.from_rat(-r))) < Real.from_rat(-r)","not -Real.from_rat(r) < Real.from_rat(-r) or -Real.from_rat(r) < Real.from_rat(s0(-Real.from_rat(r), Real.from_rat(-r)))","-Real.from_rat(r) < Real.from_rat(s0(-Real.from_rat(r), Real.from_rat(-r)))","Real.from_rat(s0(-Real.from_rat(r), Real.from_rat(-r))) < Real.from_rat(-r)","not Real.from_rat(s0(-Real.from_rat(r), Real.from_rat(-r))) < Real.from_rat(-r)"]}
{"goal":"q < -r","proof":["not -r < q or Real.from_rat(-r) < Real.from_rat(q)","q > -r or q < -r or -r = q","not Real.from_rat(q) >= Real.from_rat(-r) or not Real.from_rat(q) < Real.from_rat(-r)","Real.from_rat(q) >= Real.from_rat(-r) = Real.from_rat(-r) <= Real.from_rat(q)","not Real.from_rat(-r) < Real.from_rat(q) or Real.from_rat(-r) <= Real.from_rat(q)","q > -r = -r < q","not Real.from_rat(q) < Real.from_rat(-r) or Real.from_rat(-r) != Real.from_rat(q)","q > -r or -r = q","Real.from_rat(-r) != Real.from_rat(q)","-r != q","q > -r","-r < q","not Real.from_rat(q) >= Real.from_rat(-r)","not Real.from_rat(-r) <= Real.from_rat(q)","Real.from_rat(-r) < Real.from_rat(q)","not Real.from_rat(-r) < Real.from_rat(q)"]}
{"goal":"--r < -q","proof":["not q < -r or --r < -q"]}
{"goal":"r < -q","proof":["-(Rat.0 - r) = r - Rat.0","--r < -q = -q > --r","r < -q = -q > r","Rat.0 - r = -r","r.reciprocal.reciprocal = r","r.reciprocal.reciprocal - Rat.0 = r.reciprocal.reciprocal"]}
{"goal":"Real.from_rat(r) < Real.from_rat(-q)","proof":["not r < -q or Real.from_rat(r) < Real.from_rat(-q)"]}
{"goal":"-Real.from_rat(r) > Real.from_rat(q)","proof":["not Real.from_rat(r) < Real.from_rat(-q) or -Real.from_rat(r) > Real.from_rat(q)"]}
{"goal":"false","proof":["not -Real.from_rat(r) > Real.from_rat(q) or not -Real.from_rat(r) <= Real.from_rat(q)","not -Real.from_rat(r) < Real.from_rat(q) or -Real.from_rat(r) <= Real.from_rat(q)","not -Real.from_rat(r) <= Real.from_rat(q)","-Real.from_rat(r) <= Real.from_rat(q)"]}
{"goal":"neg_from_rat","proof":["not -Real.from_rat(r) <= Real.from_rat(-r) or -Real.from_rat(r) < Real.from_rat(-r) or -Real.from_rat(r) = Real.from_rat(-r)","-Real.from_rat(r) > Real.from_rat(-r) or -Real.from_rat(r) <= Real.from_rat(-r)","not -Real.from_rat(r) <= Real.from_rat(-r)","-Real.from_rat(r) <= Real.from_rat(-r)"]}
{"goal":"Real.new(neg_gt(a)) > Real.from_rat(r)","proof":["Real.new(neg_gt(a)) = -a"]}
{"goal":"Real.new(neg_gt(a)).gt_rat(r)","proof":["not Real.new(neg_gt(a)) > Real.from_rat(r) or Real.new(neg_gt(a)).gt_rat(r)"]}
{"goal":"neg_gt_rat","proof":["a < Real.from_rat(-r) = neg_gt(a, r)","not neg_gt(a, r)","not Real.new(neg_gt(a)).gt_rat(r) or not is_dedekind_cut(neg_gt(a)) or neg_gt(a, r)","not is_dedekind_cut(neg_gt(a))","is_dedekind_cut(neg_gt(a))"]}
{"goal":"a < Real.from_rat(-r)","proof":["not -a > Real.from_rat(r) or a < Real.from_rat(-r)"]}
{"goal":"false","proof":["not a > Real.from_rat(-r) or not a <= Real.from_rat(-r)","not a < Real.from_rat(-r) or a <= Real.from_rat(-r)","not a <= Real.from_rat(-r)","a <= Real.from_rat(-r)"]}
{"goal":"Real.from_rat(-r) < a","proof":["Real.from_rat(-r) >= a or Real.from_rat(-r) < a","Real.from_rat(-r) >= a","not a <= Real.from_rat(-r) or not a > Real.from_rat(-r)","Real.from_rat(-r) >= a = a <= Real.from_rat(-r)","not a <= Real.from_rat(-r)","a <= Real.from_rat(-r)"]}
{"goal":"exists(k0: Rat) { k0.is_positive and Real.from_rat(-r) + Real.from_rat(k0) < a }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or s0(x0, x1).is_positive } and forall(x2: Real, x3: Real) { not x2 < x3 or x2 + Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(-r) + Real.from_rat(s0(Real.from_rat(-r), a)) < a or not s0(Real.from_rat(-r), a).is_positive","not Real.from_rat(-r) < a or Real.from_rat(-r) + Real.from_rat(s0(Real.from_rat(-r), a)) < a","not Real.from_rat(-r) < a or s0(Real.from_rat(-r), a).is_positive","s0(Real.from_rat(-r), a).is_positive","Real.from_rat(-r) + Real.from_rat(s0(Real.from_rat(-r), a)) < a","not Real.from_rat(-r) + Real.from_rat(s0(Real.from_rat(-r), a)) < a"]}
{"goal":"-a > Real.from_rat(r - eps)","proof":["not (-a).gt_rat(r - eps) or -a > Real.from_rat(r - eps)","not r > r - eps or Real.from_rat(r).gt_rat(r - eps)","not eps.is_positive or r > r - eps","not (-a).gt_rat(r - eps)","not Real.from_rat(r).gt_rat(r - eps)","r > r - eps"]}
{"goal":"false","proof":["not -a > Real.from_rat(r - eps) or a < Real.from_rat(-(r - eps))","Real.from_rat(-r) + Real.from_rat(eps) = Real.from_rat(-r + eps)","not Real.from_rat(-r) + Real.from_rat(eps) < a or not a < Real.from_rat(-r) + Real.from_rat(eps) or Real.from_rat(-r) + Real.from_rat(eps) < Real.from_rat(-r) + Real.from_rat(eps)","eps + -r = eps - r","-(r - eps) = eps - r","eps + -r = -r + eps","not Real.from_rat(-r) + Real.from_rat(eps) < Real.from_rat(-r) + Real.from_rat(eps) or Real.from_rat(-r) + Real.from_rat(eps) != Real.from_rat(-r) + Real.from_rat(eps)","Real.new((-(r - eps)).gt) = Real.from_rat(-(r - eps))","Real.new((-r + eps).gt) = Real.from_rat(-r + eps)","not Real.from_rat(-r) + Real.from_rat(eps) < Real.from_rat(-r) + Real.from_rat(eps)","a < Real.from_rat(-(r - eps))","not a < Real.from_rat(-r) + Real.from_rat(eps) or Real.from_rat(-r) + Real.from_rat(eps) < Real.from_rat(-r) + Real.from_rat(eps)","not a < Real.from_rat(-r) + Real.from_rat(eps)"]}
{"goal":"gt_rat_neg","proof":["not -a <= Real.from_rat(r) or -a < Real.from_rat(r) or -a = Real.from_rat(r)","not -a <= Real.from_rat(r)","-a > Real.from_rat(r) or -a <= Real.from_rat(r)"]}
{"goal":"-a > Real.from_rat(r)","proof":["not a < Real.from_rat(-r) or -a > Real.from_rat(r)"]}
{"goal":"false","proof":["not -a > Real.from_rat(r) or not -a <= Real.from_rat(r)","not -a < Real.from_rat(r) or -a <= Real.from_rat(r)","not -a <= Real.from_rat(r)","-a <= Real.from_rat(r)"]}
{"goal":"-a != Real.from_rat(r)","proof":["-a < -a","let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x1.gt_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2.gt_rat(s0(x2, x3)) or not x2 < x3 } }","not (-a).gt_rat(s0(-a, -a)) or not -a < -a","not -a < -a or (-a).gt_rat(s0(-a, -a))","not (-a).gt_rat(s0(-a, -a))","(-a).gt_rat(s0(-a, -a))"]}
{"goal":"Real.from_rat(-r) != a","proof":["-(Rat.0 - r) = r - Rat.0","-Real.from_rat(-r) = Real.from_rat(--r)","Rat.0 - r = -r","r.reciprocal.reciprocal = r","r.reciprocal.reciprocal - Rat.0 = r.reciprocal.reciprocal"]}
{"goal":"Real.from_rat(-r) < a","proof":["not Real.from_rat(-r) <= a or Real.from_rat(-r) < a or Real.from_rat(-r) = a","not a <= Real.from_rat(-r) or a < Real.from_rat(-r) or Real.from_rat(-r) = a","not Real.from_rat(-r) <= a","a <= Real.from_rat(-r) or Real.from_rat(-r) <= a","not a <= Real.from_rat(-r)","a <= Real.from_rat(-r)"]}
{"goal":"exists(k0: Rat) { k0.is_positive and Real.from_rat(-r) + Real.from_rat(k0) < a }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or s0(x0, x1).is_positive } and forall(x2: Real, x3: Real) { not x2 < x3 or x2 + Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(-r) + Real.from_rat(s0(Real.from_rat(-r), a)) < a or not s0(Real.from_rat(-r), a).is_positive","not Real.from_rat(-r) < a or Real.from_rat(-r) + Real.from_rat(s0(Real.from_rat(-r), a)) < a","not Real.from_rat(-r) < a or s0(Real.from_rat(-r), a).is_positive","s0(Real.from_rat(-r), a).is_positive","Real.from_rat(-r) + Real.from_rat(s0(Real.from_rat(-r), a)) < a","not Real.from_rat(-r) + Real.from_rat(s0(Real.from_rat(-r), a)) < a"]}
{"goal":"-a < Real.from_rat(r + eps)","proof":[]}
{"goal":"false","proof":["not a + Real.0 >= Real.from_rat(r) or not a + Real.0 < Real.from_rat(r)","a + Real.0 >= Real.from_rat(r) = Real.from_rat(r) <= a + Real.0","not a + Real.0 >= Real.from_rat(r)","a + Real.0 >= Real.from_rat(r)"]}
{"goal":"neg_lt_rat","proof":["not a <= Real.from_rat(-r) or a < Real.from_rat(-r) or Real.from_rat(-r) = a","a > Real.from_rat(-r) or a <= Real.from_rat(-r)","not a <= Real.from_rat(-r)","a <= Real.from_rat(-r)"]}
{"goal":"exists(k0: Rat) { a < Real.from_rat(k0) and Real.from_rat(k0) < b }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(s0(a, b)) < b or not a < Real.from_rat(s0(a, b))","not a < b or Real.from_rat(s0(a, b)) < b","not a < b or a < Real.from_rat(s0(a, b))","a < Real.from_rat(s0(a, b))","Real.from_rat(s0(a, b)) < b","not Real.from_rat(s0(a, b)) < b"]}
{"goal":"-b < -Real.from_rat(r)","proof":["not b > Real.from_rat(--r) or -b < Real.from_rat(-r)","not Real.from_rat(r) < b or not b <= Real.from_rat(r) or b < b","-(Rat.0 - r) = r - Rat.0","-Real.from_rat(r) = Real.from_rat(-r)","not -b < Real.from_rat(-r)","b <= Real.from_rat(--r) or b > Real.from_rat(--r)","not b < b or b != b","Real.new((--r).gt) = Real.from_rat(--r)","Real.new(r.gt) = Real.from_rat(r)","Rat.0 - r = -r","r - Rat.0 = r","not b > Real.from_rat(--r)","not b < b","not b <= Real.from_rat(r) or b < b","not b <= Real.from_rat(r)","b <= Real.from_rat(--r)"]}
{"goal":"a < Real.from_rat(--r)","proof":["-(Rat.0 - r) = r - Rat.0","Real.new((--r).gt) = Real.from_rat(--r)","Real.new(r.gt) = Real.from_rat(r)","Rat.0 - r = -r","r - Rat.0 = r"]}
{"goal":"-a > Real.from_rat(-r)","proof":["not a < Real.from_rat(--r) or -a > Real.from_rat(-r)"]}
{"goal":"-Real.from_rat(r) < -a","proof":["-Real.from_rat(r) = Real.from_rat(-r)","-Real.from_rat(r) >= -a or -Real.from_rat(r) < -a","not -a <= Real.from_rat(-r) or not -a > Real.from_rat(-r)","-Real.from_rat(r) >= -a = -a <= -Real.from_rat(r)","-Real.from_rat(r) >= -a","-a <= -Real.from_rat(r)","not -a <= Real.from_rat(-r)","-a <= Real.from_rat(-r)"]}
{"goal":"lt_swap_neg","proof":["not -b < -Real.from_rat(r) or not -Real.from_rat(r) <= -a or -b < -a","not -Real.from_rat(r) < -a or -Real.from_rat(r) <= -a","not -b < -Real.from_rat(r) or not -Real.from_rat(r) <= -a","-Real.from_rat(r) <= -a","not -Real.from_rat(r) <= -a"]}
{"goal":"exists(k0: Rat) { a < Real.from_rat(k0) and Real.from_rat(k0) < -b }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(s0(a, -b)) < -b or not a < Real.from_rat(s0(a, -b))","not a < -b or Real.from_rat(s0(a, -b)) < -b","not a < -b or a < Real.from_rat(s0(a, -b))","a < Real.from_rat(s0(a, -b))","Real.from_rat(s0(a, -b)) < -b","not Real.from_rat(s0(a, -b)) < -b"]}
{"goal":"lt_neg_swap_neg","proof":["let s0: Rat satisfy { a < Real.from_rat(s0) and Real.from_rat(s0) < -b }","not b > Real.from_rat(-s0) or -b < Real.from_rat(s0)","not Real.from_rat(s0) < -b or not -b < Real.from_rat(s0) or Real.from_rat(s0) < Real.from_rat(s0)","not -Real.from_rat(s0) < -a or not b <= -Real.from_rat(s0) or b < -a","not a < Real.from_rat(s0) or -Real.from_rat(s0) < -a","-Real.from_rat(s0) = Real.from_rat(-s0)","b <= Real.from_rat(-s0) or b > Real.from_rat(-s0)","not Real.from_rat(s0) < Real.from_rat(s0) or Real.from_rat(s0) != Real.from_rat(s0)","not -Real.from_rat(s0) < -a or not b <= -Real.from_rat(s0)","not Real.from_rat(s0) < Real.from_rat(s0)","-Real.from_rat(s0) < -a","not -b < Real.from_rat(s0) or Real.from_rat(s0) < Real.from_rat(s0)","not -b < Real.from_rat(s0)","not b <= -Real.from_rat(s0)","not b <= Real.from_rat(-s0)","not b > Real.from_rat(-s0)","b > Real.from_rat(-s0)"]}
{"goal":"exists(k0: Rat) { -a < Real.from_rat(k0) and Real.from_rat(k0) < b }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not -a < Real.from_rat(s0(-a, b)) or not Real.from_rat(s0(-a, b)) < b","not -a < b or Real.from_rat(s0(-a, b)) < b","not -a < b or -a < Real.from_rat(s0(-a, b))","Real.from_rat(s0(-a, b)) < b","-a < Real.from_rat(s0(-a, b))","not -a < Real.from_rat(s0(-a, b))"]}
{"goal":"neg_lt_swap_neg","proof":["let s0: Rat satisfy { -a < Real.from_rat(s0) and Real.from_rat(s0) < b }","not -a < Real.from_rat(s0) or a > Real.from_rat(-s0)","not -b < -Real.from_rat(s0) or not -Real.from_rat(s0) <= a or -b < a","not Real.from_rat(s0) < b or -b < -Real.from_rat(s0)","-Real.from_rat(s0) = Real.from_rat(-s0)","not a <= Real.from_rat(-s0) or not a > Real.from_rat(-s0)","a <= Real.from_rat(-s0) or Real.from_rat(-s0) <= a","not -b < -Real.from_rat(s0) or not -Real.from_rat(s0) <= a","a > Real.from_rat(-s0)","-b < -Real.from_rat(s0)","not -Real.from_rat(s0) <= a","not Real.from_rat(-s0) <= a","not a <= Real.from_rat(-s0)","a <= Real.from_rat(-s0)"]}
{"goal":"exists(k0: Rat) { -a < Real.from_rat(k0) and Real.from_rat(k0) < -b }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(s0(-a, -b)) < -b or not -a < Real.from_rat(s0(-a, -b))","not -a < -b or Real.from_rat(s0(-a, -b)) < -b","not -a < -b or -a < Real.from_rat(s0(-a, -b))","-a < Real.from_rat(s0(-a, -b))","Real.from_rat(s0(-a, -b)) < -b","not Real.from_rat(s0(-a, -b)) < -b"]}
{"goal":"neg_lt_neg_swap_neg","proof":["let s0: Rat satisfy { -a < Real.from_rat(s0) and Real.from_rat(s0) < -b }","not b < -Real.from_rat(s0) or not -Real.from_rat(s0) < a or b < a","not -a < Real.from_rat(s0) or -Real.from_rat(s0) < a","not Real.from_rat(s0) < -b or b < -Real.from_rat(s0)","not b < -Real.from_rat(s0) or not -Real.from_rat(s0) < a","b < -Real.from_rat(s0)","-Real.from_rat(s0) < a","not -Real.from_rat(s0) < a"]}
{"goal":"-a < -a","proof":["not a < --a or -a < -a","not a < --a","a >= --a or a < --a","not --a <= a or not --a > a","a >= --a = --a <= a","not --a <= a","a >= --a","not a >= --a"]}
{"goal":"false","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x1.gt_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2.gt_rat(s0(x2, x3)) or not x2 < x3 } }","not (-a).gt_rat(s0(-a, -a)) or not -a < -a","not -a < -a or (-a).gt_rat(s0(-a, -a))","not (-a).gt_rat(s0(-a, -a))","(-a).gt_rat(s0(-a, -a))"]}
{"goal":"-a > -a","proof":["not --a < a or -a < -a","not -a < -a or -a != -a","not -a < -a"]}
{"goal":"false","proof":["not --a < a or -a < -a","not -a < -a or -a != -a","not -a < -a"]}
{"goal":"neg_neg","proof":["not --a <= a or --a < a or --a = a","not --a <= a","--a > a or --a <= a"]}
{"goal":"neg_zero","proof":["-Real.from_rat(Rat.0) = Real.from_rat(-Rat.0)","Rat.0 - Rat.0 = -Rat.0","Rat.new(Int.0, Int.1) - Rat.0 = Rat.new(Int.0, Int.1)"]}
{"goal":"neg_pos_is_neg","proof":["not -Real.0 < a or -a < Real.0","not a.is_positive or Real.0 < Real.0 + a","not -a < Real.0 or (-a).is_negative","not -a < Real.0","Real.0 + a = a","Real.0 < Real.0 + a","not -Real.0 < a","not Real.0 < a"]}
{"goal":"neg_neg_is_pos","proof":["not -a < Real.from_rat(Rat.0) or a > Real.from_rat(-Rat.0)","-Real.from_rat(Rat.0) = Real.from_rat(-Rat.0)","not (-a).is_negative or -a < Real.0","not a > Real.0 or a.is_positive","not a > Real.0","-a < Real.0","not a > -Real.0","-a < Real.from_rat(Rat.0)","not a > -Real.from_rat(Rat.0)","a > Real.from_rat(-Rat.0)","not a > Real.from_rat(-Rat.0)"]}
{"goal":"gt_add_neg","proof":["not b < Real.0 or b + a < Real.0 + a","not a + b < a or not a <= a + b or a + b < a + b","a <= a + b or a > a + b","a <= a + b","a + b = b + a","not b.is_negative or b < Real.0","not a + b < a + b or a + b != a + b","Real.0 + a = a","b < Real.0","not a + b < a + b","not a + b < a or a + b < a + b","not a + b < a","not b + a < a","b + a < Real.0 + a"]}
{"goal":"a < a + Real.from_rat(eps)","proof":["not eps.is_positive or a < a + Real.from_rat(eps)"]}
{"goal":"exists(k0: Rat) { a < Real.from_rat(k0) and Real.from_rat(k0) < a + Real.from_rat(eps) }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(s0(a, a + Real.from_rat(eps))) < a + Real.from_rat(eps) or not a < Real.from_rat(s0(a, a + Real.from_rat(eps)))","not a < a + Real.from_rat(eps) or Real.from_rat(s0(a, a + Real.from_rat(eps))) < a + Real.from_rat(eps)","not a < a + Real.from_rat(eps) or a < Real.from_rat(s0(a, a + Real.from_rat(eps)))","a < Real.from_rat(s0(a, a + Real.from_rat(eps)))","Real.from_rat(s0(a, a + Real.from_rat(eps))) < a + Real.from_rat(eps)","not Real.from_rat(s0(a, a + Real.from_rat(eps))) < a + Real.from_rat(eps)"]}
{"goal":"r + eps = top","proof":["eps + (-eps + top) = eps + -eps + top","r + eps = eps + r","top + -eps = -eps + top","eps + r != top","eps + -eps = Rat.0","Rat.0 + top = top","eps + (top + -eps) != top","eps + (-eps + top) != top","eps + -eps + top != top"]}
{"goal":"Real.from_rat(r + eps) < a + Real.from_rat(eps)","proof":["not Real.from_rat(top) < a + Real.from_rat(eps)"]}
{"goal":"exists(k0: Real) { Real.from_rat(r) + k0 < a + k0 }","proof":["not Real.from_rat(r) + Real.from_rat(eps) < a + Real.from_rat(eps)","Real.from_rat(r) + Real.from_rat(eps) = Real.from_rat(r + eps)"]}
{"goal":"Real.from_rat(r) < a","proof":["let s0: Real satisfy { Real.from_rat(r) + s0 < a + s0 }","not Real.from_rat(r) + s0 < a + s0 or Real.from_rat(r) < a"]}
{"goal":"a < Real.from_rat(top)","proof":[]}
{"goal":"rat_window","proof":["not a < Real.from_rat(r + eps) or not Real.from_rat(r) < a","not a < Real.from_rat(r + eps)","a < Real.from_rat(r + eps)"]}
{"goal":"Real.0 < a + -a","proof":["Real.0 >= a + -a or Real.0 < a + -a","not a + -a <= Real.0 or not a + -a > Real.0","Real.0 >= a + -a = a + -a <= Real.0","Real.0 >= a + -a","not a + -a <= Real.0","a + -a <= Real.0"]}
{"goal":"(a + -a).is_positive","proof":["not a + -a > Real.0 or (a + -a).is_positive"]}
{"goal":"exists(k0: Rat) { Real.0 < Real.from_rat(k0) and Real.from_rat(k0) < a + -a }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(s0(Real.0, a + -a)) < a + -a or not Real.0 < Real.from_rat(s0(Real.0, a + -a))","not Real.0 < a + -a or Real.from_rat(s0(Real.0, a + -a)) < a + -a","not Real.0 < a + -a or Real.0 < Real.from_rat(s0(Real.0, a + -a))","a + -a > Real.0 = Real.0 < a + -a","Real.0 < a + -a","Real.0 < Real.from_rat(s0(Real.0, a + -a))","Real.from_rat(s0(Real.0, a + -a)) < a + -a","not Real.from_rat(s0(Real.0, a + -a)) < a + -a"]}
{"goal":"Real.from_rat(r) > Real.0","proof":["not Real.0 >= Real.from_rat(r) or not Real.0 < Real.from_rat(r)","Real.from_rat(r) <= Real.0 or Real.from_rat(r) > Real.0","Real.from_rat(r) <= Real.0","Real.0 >= Real.from_rat(r) = Real.from_rat(r) <= Real.0","not Real.0 >= Real.from_rat(r)","Real.0 >= Real.from_rat(r)"]}
{"goal":"Real.from_rat(r).gt_rat(Rat.0)","proof":["not Real.from_rat(r) > Real.0 or Real.from_rat(r).is_positive","Real.from_rat(r).gt_rat(Rat.0) = Real.from_rat(r).is_positive","Real.from_rat(r).is_positive","not Real.from_rat(r).is_positive"]}
{"goal":"Rat.0 < r","proof":["not Real.from_rat(r).gt_rat(Rat.0) or r > Rat.0","Rat.0 < r = r > Rat.0","r > Rat.0","not r > Rat.0"]}
{"goal":"r.is_positive","proof":["not Real.from_rat(r).gt_rat(Rat.0) or r > Rat.0","Rat.0 < r = r > Rat.0","Real.from_rat(r).gt_rat(Rat.0) = Real.from_rat(r).is_positive","not Rat.0 < r or r.is_positive","not Rat.0 < r","not r > Rat.0","Real.from_rat(r).gt_rat(Rat.0)","not Real.from_rat(r).gt_rat(Rat.0)"]}
{"goal":"exists(k0: Rat) { Real.from_rat(k0) < a and a < Real.from_rat(k0 + r) }","proof":["let s0: (Real, Rat) -> Rat satisfy { forall(x0: Rat, x1: Real) { not x0.is_positive or Real.from_rat(s0(x1, x0)) < x1 } and forall(x2: Rat, x3: Real) { not x2.is_positive or x3 < Real.from_rat(s0(x3, x2) + x2) } }","not a < Real.from_rat(s0(a, r) + r) or not Real.from_rat(s0(a, r)) < a","not r.is_positive or a < Real.from_rat(s0(a, r) + r)","not r.is_positive or Real.from_rat(s0(a, r)) < a","Real.from_rat(s0(a, r)) < a","a < Real.from_rat(s0(a, r) + r)"]}
{"goal":"-a < Real.from_rat(-b)","proof":["not Real.from_rat(b) < a or -a < -Real.from_rat(b)","-Real.from_rat(b) = Real.from_rat(-b)","-a < -Real.from_rat(b)","not -a < -Real.from_rat(b)"]}
{"goal":"a + -a < Real.from_rat(b + r) + Real.from_rat(-b)","proof":["not a < Real.from_rat(b + r) or not -a < Real.from_rat(-b) or a + -a < Real.from_rat(b + r) + Real.from_rat(-b)"]}
{"goal":"a + -a < Real.from_rat(b + r + -b)","proof":["Real.from_rat(b + r) + Real.from_rat(-b) = Real.from_rat(b + r + -b)"]}
{"goal":"b + r + -b = r","proof":["-b + (b + r) = -b + b + r","-b + (b + r) = b + r + -b","-b + b = Rat.0","Rat.0 + r = r","-b + (b + r) != r","-b + b + r != r"]}
{"goal":"a + -a < Real.from_rat(r)","proof":["not a + -a < Real.from_rat(b + r + -b)"]}
{"goal":"false","proof":["not Real.from_rat(r) >= a + -a or not Real.from_rat(r) < a + -a","Real.from_rat(r) >= a + -a = a + -a <= Real.from_rat(r)","not a + -a < Real.from_rat(r) or a + -a <= Real.from_rat(r)","a + -a <= Real.from_rat(r)","not Real.from_rat(r) >= a + -a","Real.from_rat(r) >= a + -a"]}
{"goal":"add_neg_lte_zero","proof":["a + -a > Real.0 or a + -a <= Real.0"]}
{"goal":"exists(k0: Rat) { Real.from_rat(k0) < Real.0 and a + -a < Real.from_rat(k0) }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not a + -a < Real.from_rat(s0(a + -a, Real.0)) or not Real.from_rat(s0(a + -a, Real.0)) < Real.0","not a + -a < Real.0 or Real.from_rat(s0(a + -a, Real.0)) < Real.0","not a + -a < Real.0 or a + -a < Real.from_rat(s0(a + -a, Real.0))","Real.from_rat(s0(a + -a, Real.0)) < Real.0","a + -a < Real.from_rat(s0(a + -a, Real.0))","not a + -a < Real.from_rat(s0(a + -a, Real.0))"]}
{"goal":"Real.0 > Real.from_rat(r)","proof":["not Real.from_rat(r) >= Real.0 or not Real.from_rat(r) < Real.0","Real.0 <= Real.from_rat(r) or Real.0 > Real.from_rat(r)","Real.0 <= Real.from_rat(r)","Real.from_rat(r) >= Real.0 = Real.0 <= Real.from_rat(r)","not Real.from_rat(r) >= Real.0","Real.from_rat(r) >= Real.0"]}
{"goal":"(-r).is_positive","proof":["not Real.from_rat(r).is_negative or r.is_negative","not Real.from_rat(r) < Real.0 or Real.from_rat(r).is_negative","not r.is_negative or (-r).is_positive","not r.is_negative","Real.from_rat(r).is_negative","not Real.from_rat(r).is_negative"]}
{"goal":"exists(k0: Rat) { Real.from_rat(k0) < a and a < Real.from_rat(k0 + -r) }","proof":["let s0: (Real, Rat) -> Rat satisfy { forall(x0: Rat, x1: Real) { not x0.is_positive or Real.from_rat(s0(x1, x0)) < x1 } and forall(x2: Rat, x3: Real) { not x2.is_positive or x3 < Real.from_rat(s0(x3, x2) + x2) } }","not a < Real.from_rat(s0(a, -r) + -r) or not Real.from_rat(s0(a, -r)) < a","not (-r).is_positive or a < Real.from_rat(s0(a, -r) + -r)","not (-r).is_positive or Real.from_rat(s0(a, -r)) < a","Real.from_rat(s0(a, -r)) < a","a < Real.from_rat(s0(a, -r) + -r)"]}
{"goal":"a > Real.from_rat(b)","proof":["not Real.from_rat(b) >= a or not Real.from_rat(b) < a","a <= Real.from_rat(b) or a > Real.from_rat(b)","a <= Real.from_rat(b)","Real.from_rat(b) >= a = a <= Real.from_rat(b)","not Real.from_rat(b) >= a","Real.from_rat(b) >= a"]}
{"goal":"-a > -Real.from_rat(b + -r)","proof":["not a < Real.from_rat(--(b + -r)) or -a > Real.from_rat(-(b + -r))","-(Rat.0 - (b + -r)) = b + -r - Rat.0","-Real.from_rat(b + -r) = Real.from_rat(-(b + -r))","not -a > Real.from_rat(-(b + -r))","Rat.0 - (b + -r) = -(b + -r)","b + -r - Rat.0 = b + -r","not a < Real.from_rat(--(b + -r))"]}
{"goal":"a + -a > Real.from_rat(b) + -Real.from_rat(b + -r)","proof":["not a.gt_rat(b) or not (-a).gt_rat(-(b + -r)) or b + -(b + -r) != b + -(b + -r) or add_gt(a, -a, b + -(b + -r))","not add_gt(a, -a, b + -(b + -r)) or a + -a > Real.from_rat(b + -(b + -r))","Real.from_rat(b) + Real.from_rat(-(b + -r)) = Real.from_rat(b + -(b + -r))","not -a > Real.from_rat(-(b + -r)) or (-a).gt_rat(-(b + -r))","not a > Real.from_rat(b) or a.gt_rat(b)","-Real.from_rat(b + -r) = Real.from_rat(-(b + -r))","not a + -a > Real.from_rat(b) + Real.from_rat(-(b + -r))","a.gt_rat(b)","-a > Real.from_rat(-(b + -r))","not a + -a > Real.from_rat(b + -(b + -r))","not a.gt_rat(b) or not (-a).gt_rat(-(b + -r)) or add_gt(a, -a, b + -(b + -r))","not add_gt(a, -a, b + -(b + -r))","(-a).gt_rat(-(b + -r))","not (-a).gt_rat(-(b + -r))"]}
{"goal":"not a >= Real.from_rat(b + -r)","proof":["not a >= Real.from_rat(b + -r) or not a < Real.from_rat(b + -r)"]}
{"goal":"not a >= -Real.from_rat(-b + r)","proof":["-Rat.1 * -b + -Rat.1 * r = -Rat.1 * (-b + r)","-(Rat.0 - b) = b - Rat.0","-Real.from_rat(-b + r) = Real.from_rat(-(-b + r))","a >= Real.from_rat(-(-b + r)) = Real.from_rat(-(-b + r)) <= a","a >= Real.from_rat(b + -r) = Real.from_rat(b + -r) <= a","-Rat.1 * (-b + r) = -(-b + r)","-Rat.1 * -b = --b","-Rat.1 * r = -r","Real.new((-(-b + r)).gt) = Real.from_rat(-(-b + r))","Real.new((b + -r).gt) = Real.from_rat(b + -r)","Rat.0 - b = -b","b - Rat.0 = b"]}
{"goal":"a < -Real.from_rat(-b + r)","proof":["a >= -Real.from_rat(-b + r) or a < -Real.from_rat(-b + r)"]}
{"goal":"Real.from_rat(-b + r) < -a","proof":["not a < Real.from_rat(-(-b + r)) or -a > Real.from_rat(-b + r)","-Real.from_rat(-b + r) = Real.from_rat(-(-b + r))","Real.from_rat(-b + r) >= -a or Real.from_rat(-b + r) < -a","not -a <= Real.from_rat(-b + r) or not -a > Real.from_rat(-b + r)","Real.from_rat(-b + r) >= -a = -a <= Real.from_rat(-b + r)","a < Real.from_rat(-(-b + r))","Real.from_rat(-b + r) >= -a","-a <= Real.from_rat(-b + r)","-a > Real.from_rat(-b + r)","not -a > Real.from_rat(-b + r)"]}
{"goal":"a + -a > Real.from_rat(b) + Real.from_rat(-b + r)","proof":["-Rat.1 * -b + -Rat.1 * r = -Rat.1 * (-b + r)","b + (-b + r) = b + -b + r","Real.from_rat(b) + Real.from_rat(-b + r) = Real.from_rat(b + (-b + r))","-(Rat.0 - (-b + r)) = -b + r - Rat.0","-(Rat.0 - b) = b - Rat.0","-Real.from_rat(-(-b + r)) = Real.from_rat(--(-b + r))","-Real.from_rat(-b + r) = Real.from_rat(-(-b + r))","not a + -a <= Real.from_rat(b) + -Real.from_rat(b + -r) or not a + -a > Real.from_rat(b) + -Real.from_rat(b + -r)","-Real.from_rat(b + -r) + Real.from_rat(b) = Real.from_rat(b) + -Real.from_rat(b + -r)","Real.from_rat(b) + Real.from_rat(-b + r) = Real.from_rat(-b + r) + Real.from_rat(b)","Real.from_rat(b) + -Real.from_rat(b + -r) >= a + -a = a + -a <= Real.from_rat(b) + -Real.from_rat(b + -r)","Real.from_rat(r) >= a + -a = a + -a <= Real.from_rat(r)","not a + -a < Real.from_rat(r) or a + -a <= Real.from_rat(r)","-Rat.1 * (-b + r) = -(-b + r)","-Rat.1 * -b = --b","-Rat.1 * r = -r","Real.new((-(-b + r)).gt) = Real.from_rat(-(-b + r))","Real.new((b + (-b + r)).gt) = Real.from_rat(b + (-b + r))","Real.new((b + -r).gt) = Real.from_rat(b + -r)","Real.new(r.gt) = Real.from_rat(r)","Rat.0 - (-b + r) = -(-b + r)","Rat.0 - b = -b","b + -b = Rat.0","-b + r - Rat.0 = -b + r","b - Rat.0 = b","Rat.0 + r = r","a + -a <= Real.from_rat(r)","not a + -a <= Real.from_rat(b) + -Real.from_rat(b + -r)"]}
{"goal":"a + -a > Real.from_rat(b + -b + r)","proof":["b + (-b + r) = b + -b + r","Real.from_rat(b) + Real.from_rat(-b + r) = Real.from_rat(b + (-b + r))"]}
{"goal":"a + -a > Real.from_rat(r)","proof":["Real.new((b + -b + r).gt) = Real.from_rat(b + -b + r)","Real.new(r.gt) = Real.from_rat(r)","b + -b = Rat.0","Rat.0 + r = r"]}
{"goal":"false","proof":["not a + -a > Real.from_rat(r) or not a + -a <= Real.from_rat(r)","not a + -a < Real.from_rat(r) or a + -a <= Real.from_rat(r)","not a + -a <= Real.from_rat(r)","a + -a <= Real.from_rat(r)"]}
{"goal":"add_neg_gte_zero","proof":["a + -a >= Real.0 or a + -a < Real.0"]}
{"goal":"a + -a >= Real.0","proof":["a + -a >= Real.0"]}
{"goal":"a + -a <= Real.0","proof":["a + -a <= Real.0"]}
{"goal":"add_neg_eq_zero","proof":["not a + -a <= Real.0 or a + -a < Real.0 or a + -a = Real.0","a + -a >= Real.0","a + -a <= Real.0","not a + -a >= Real.0 or not a + -a < Real.0","a + -a < Real.0"]}
{"goal":"a + b + -(a + b) = Real.0","proof":["a + b + -(a + b) = Real.0"]}
{"goal":"-(a + b) + b + a = Real.0","proof":["a + (b + -(a + b)) = a + b + -(a + b)","a + (-(a + b) + b) = -(a + b) + b + a","b + -(a + b) = -(a + b) + b"]}
{"goal":"-(a + b) + b = -a","proof":["-(a + b) + b + -(-(a + b) + b) != -(a + b) + b + a or -(-(a + b) + b) = a","-(a + b) + b + -(-(a + b) + b) = Real.0","--(-(a + b) + b) = -(a + b) + b","--(-(a + b) + b) != -a","-(-(a + b) + b) != a","-(a + b) + b + -(-(a + b) + b) = -(a + b) + b + a"]}
{"goal":"-(a + b) + (b + -b) = -(a + b)","proof":["-(a + b) + Real.0 = Real.0 + -(a + b)","b + -b = Real.0","-(a + b) + Real.0 != -(a + b)","Real.0 + -(a + b) = -(a + b)"]}
{"goal":"-(a + b) + b + -b = -(a + b)","proof":["-(a + b) + (b + -b) = -(a + b) + b + -b"]}
{"goal":"-(a + b) = -a + -b","proof":["-(a + b) + b + -b != -(a + b)"]}
{"goal":"neg_distrib","proof":[]}
{"goal":"forall(x0: Real, x1: Real, x2: Real) { x0 + (x1 + x2) = x0 + x1 + x2 }","proof":["let (s0: Real, s1: Real, s2: Real) satisfy { s0 + (s1 + s2) != s0 + s1 + s2 }","s0 + (s1 + s2) = s0 + s1 + s2"]}
{"goal":"forall(x0: Real, x1: Real) { AddSemigroup.add[Real](x0, x1) = AddSemigroup.add[Real](x1, x0) }","proof":["let (s0: Real, s1: Real) satisfy { s1 + s0 != s0 + s1 }","s1 + s0 = s0 + s1"]}
{"goal":"forall(x0: Real) { AddSemigroup.add[Real](Real.0, x0) = x0 } and forall(x1: Real) { AddSemigroup.add[Real](x1, Real.0) = x1 }","proof":["let (s0: Real, s1: Real) satisfy { s1 + Real.0 != s1 or Real.0 + s0 != s0 }","s1 + Real.0 = Real.0 + s1","Real.0 + s0 = s0","Real.0 + s1 = s1","s1 + Real.0 != s1"]}
{"goal":"forall(x0: Real) { AddSemigroup.add[Real](x0, -x0) = add_monoid.AddMonoid.0[Real] }","proof":["let s0: Real satisfy { s0 + -s0 != Real.0 }","s0 + -s0 = Real.0"]}
{"goal":"pos_imp_eq_abs","proof":["a.abs = a or a.is_negative","a.is_negative","not a.is_positive or not a.is_negative"]}
{"goal":"a + (b + -b) = a","proof":["a + Real.0 = Real.0 + a","b + -b = Real.0","a + Real.0 != a","Real.0 + a != a","Real.0 + a = a"]}
{"goal":"a + b + -b = a","proof":["a + (b + -b) = a + b + -b"]}
{"goal":"sub_cancels","proof":["a + b + -b = a + b - b"]}
{"goal":"sub_moves_sides","proof":["a + b - b = a"]}
{"goal":"a <= Real.0","proof":["a <= Real.0 or a > Real.0","a > Real.0","not a > Real.0 or a.is_positive","not a.is_negative or not a.is_positive","a.is_positive","not a.is_positive"]}
{"goal":"Real.0 <= a.abs","proof":["not a.is_negative or a.abs = -a","not a.abs <= Real.0 or not a.abs > Real.0","a.abs <= Real.0 or Real.0 <= a.abs","a.abs <= Real.0","not (--a).is_negative or (-a).is_positive","not (-a).is_positive or -a > Real.0","--a = a","(--a).is_negative","a.abs = -a","not a.abs > Real.0","not -a > Real.0","(-a).is_positive","not (-a).is_positive"]}
{"goal":"a <= a.abs","proof":["not a <= Real.0 or not Real.0 <= a.abs or a <= a.abs","not Real.0 <= a.abs or not a <= Real.0"]}
{"goal":"a = a.abs","proof":["a.abs = a or a.is_negative"]}
{"goal":"a <= a.abs","proof":["not a <= a","let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Rat, x2: Real) { not x0.gt_rat(x1) or not x0 <= x2 or x2.gt_rat(x1) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not a.gt_rat(s0(a, a)) or a <= a","a.gt_rat(s0(a, a)) or a <= a","not a.gt_rat(s0(a, a))","a.gt_rat(s0(a, a))"]}
{"goal":"lte_abs","proof":[]}
{"goal":"(-a).abs = a.abs","proof":["not a.is_negative or a.abs = -a","(-a).abs = -a or (-a).is_negative","not (-a).is_negative or a.is_positive","not a.is_positive or not a.is_negative","not a.is_positive","a.abs = -a","(-a).abs != -a","not (-a).is_negative","(-a).is_negative"]}
{"goal":"(-a).abs = a.abs","proof":["-a != a","-a != Real.0","-Real.0 != Real.0"]}
{"goal":"(-a).is_negative","proof":["a.is_positive or Real.0 = a or a.is_negative","a.is_positive","not a.is_positive or (-a).is_negative"]}
{"goal":"(-a).abs = a.abs","proof":["not (-a).is_negative or (-a).abs = --a","a.abs = a or a.is_negative","a.abs = a","(-a).abs != a","--a = a","(-a).abs = --a","(-a).abs != --a"]}
{"goal":"abs_neg","proof":[]}
{"goal":"not a.abs.is_negative","proof":["not a.is_negative or a.abs = -a","not (-a.abs).is_negative or a.abs.is_positive","--a = a","not a.abs.is_positive or not a.abs.is_negative","not a.abs.is_positive","(--a).is_negative","a.abs = -a","not (-a.abs).is_negative","(-a.abs).is_negative"]}
{"goal":"not a.abs.is_negative","proof":["a.abs = a or a.is_negative","a.abs = a"]}
{"goal":"abs_not_neg","proof":[]}
{"goal":"a.is_positive","proof":["Real.0 > a = a < Real.0","a.is_positive or Real.0 = a or a.is_negative","Real.0 = a","not a > Real.0 or a.is_positive","not a > Real.0"]}
{"goal":"a.min(b).is_positive","proof":["not a <= b or a.min(b) = a","not a < b or a <= b","a <= b","a.min(b) = a"]}
{"goal":"b.is_positive","proof":[]}
{"goal":"a.min(b).is_positive","proof":["not b <= a or b.min(a) = b","b.min(a) = a.min(b)","not b.min(a).is_positive","a >= b or a < b","a >= b","a >= b = b <= a","b <= a","b.min(a) = b"]}
{"goal":"min_pos_pos","proof":[]}
{"goal":"a.is_positive","proof":[]}
{"goal":"a.max(b).is_positive","proof":["a <= b or b.max(a) = a","b.max(a) = a.max(b)","not b.max(a).is_positive","not a > b or not a <= b","not a <= b","b.max(a) = a"]}
{"goal":"b.is_positive","proof":[]}
{"goal":"a.max(b).is_positive","proof":["not a <= b or b.max(a) = b","b.max(a) = a.max(b)","not b.max(a).is_positive","a > b or a <= b","a <= b","b.max(a) = b"]}
{"goal":"max_pos_pos","proof":[]}
{"goal":"a.min(b) = a","proof":["not a <= b or a.min(b) = a","not a <= b","not a < b or a <= b"]}
{"goal":"a.min(b) <= a","proof":["not a <= a","let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Rat, x2: Real) { not x0.gt_rat(x1) or not x0 <= x2 or x2.gt_rat(x1) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not a.gt_rat(s0(a, a)) or a <= a","a.gt_rat(s0(a, a)) or a <= a","not a.gt_rat(s0(a, a))","a.gt_rat(s0(a, a))"]}
{"goal":"a.min(b) = b","proof":["a.min(b) = a or a.min(b) = b","a.min(b) = a","b != a","not a <= b or a < b or b = a","a <= b or a.min(b) = b","not a <= b","a <= b"]}
{"goal":"a.min(b) <= a","proof":["not b <= a","not a <= b or a < b or b = a","a <= b or b <= a","a <= b","b = a"]}
{"goal":"min_lte_left","proof":[]}
{"goal":"a.max(b) = a","proof":["a <= b or b.max(a) = a","b.max(a) = a.max(b)","b.max(a) != a","not a > b or not a <= b","a <= b","not a <= b"]}
{"goal":"a.max(b) >= a","proof":["not a >= a","let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x1.gt_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2.gt_rat(s0(x2, x3)) or not x2 < x3 } }","not a.gt_rat(s0(a, a)) or not a < a","not a < a or a.gt_rat(s0(a, a))","a >= a or a < a","a < a","not a.gt_rat(s0(a, a))","a.gt_rat(s0(a, a))"]}
{"goal":"a.max(b) = b","proof":["a.max(b) = a or a.max(b) = b","a.max(b) = a","b != a","not a <= b or not b <= a or b = a","b <= a or a.max(b) = b","b <= a","a > b or a <= b","not a <= b","a <= b"]}
{"goal":"a.max(b) >= a","proof":["not b >= a","a <= b or a > b","a <= b","b >= a = a <= b"]}
{"goal":"max_gte_left","proof":[]}
{"goal":"a.min(b) = a","proof":["not a <= b or a.min(b) = a","not a <= b","not a < b or a <= b"]}
{"goal":"a.min(b) <= b","proof":["not a <= b","let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Rat, x2: Real) { not x0.gt_rat(x1) or not x0 <= x2 or x2.gt_rat(x1) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not b.gt_rat(s0(b, b)) or b <= b","b.gt_rat(s0(b, b)) or b <= b","a <= b or a.min(b) = b","a.min(b) = b","not b <= b","not b.gt_rat(s0(b, b))","b.gt_rat(s0(b, b))"]}
{"goal":"a.min(b) = b","proof":["a.min(b) = a or a.min(b) = b","a.min(b) = a","b != a","not a <= b or a < b or b = a","a <= b or a.min(b) = b","not a <= b","a <= b"]}
{"goal":"a.min(b) <= b","proof":["not b <= b","let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Rat, x2: Real) { not x0.gt_rat(x1) or not x0 <= x2 or x2.gt_rat(x1) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not b.gt_rat(s0(b, b)) or b <= b","b.gt_rat(s0(b, b)) or b <= b","not b.gt_rat(s0(b, b))","b.gt_rat(s0(b, b))"]}
{"goal":"min_lte_right","proof":[]}
{"goal":"a.max(b) = a","proof":["a <= b or b.max(a) = a","b.max(a) = a.max(b)","b.max(a) != a","not a > b or not a <= b","a <= b","not a <= b"]}
{"goal":"a.max(b) >= b","proof":["not a > b or not a <= b","a.max(b) >= b = b <= a.max(b)","not b <= a.max(b)","not b <= a","a <= b or b <= a","not a <= b","a <= b"]}
{"goal":"a.max(b) = b","proof":["a.max(b) = a or a.max(b) = b","a.max(b) = a","b != a","not a <= b or not b <= a or b = a","b <= a or a.max(b) = b","b <= a","a > b or a <= b","not a <= b","a <= b"]}
{"goal":"a.max(b) >= b","proof":["not b >= b","let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x1.gt_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2.gt_rat(s0(x2, x3)) or not x2 < x3 } }","not b.gt_rat(s0(b, b)) or not b < b","not b < b or b.gt_rat(s0(b, b))","b < b or b >= b","b < b","not b.gt_rat(s0(b, b))","b.gt_rat(s0(b, b))"]}
{"goal":"max_gte_right","proof":[]}
{"goal":"not b <= b.min(c)","proof":["not b.min(c) <= b or not b <= b.min(c) or b.min(c) = b","b.min(c) <= b","b.min(c) = b"]}
{"goal":"b.min(c) < b","proof":["b.min(c) >= b or b.min(c) < b","b.min(c) >= b","b.min(c) >= b = b <= b.min(c)"]}
{"goal":"b.min(c) != b","proof":["a < b.min(c)"]}
{"goal":"not c <= b.min(c)","proof":["not b.min(c) <= c or not c <= b.min(c) or b.min(c) = c","b.min(c) <= c","b.min(c) = c"]}
{"goal":"b.min(c) < c","proof":["b.min(c) = b or b.min(c) = c","b.min(c) = c"]}
{"goal":"b.min(c) != c","proof":["a < b.min(c)"]}
{"goal":"false","proof":["b.min(c) = b or b.min(c) = c"]}
{"goal":"lt_both_imp_lt_min","proof":[]}
{"goal":"not a < b.min(c)","proof":["not a < b.min(c) or not b.min(c) <= b or a < b","b.min(c) <= b","not b.min(c) <= b or a < b"]}
{"goal":"false","proof":["not Real.from_rat(r) >= a + Real.0 or not Real.from_rat(r) < a + Real.0","Real.from_rat(r) >= a + Real.0 = a + Real.0 <= Real.from_rat(r)","not Real.from_rat(r) >= a + Real.0","Real.from_rat(r) >= a + Real.0"]}
{"goal":"lt_min_imp_lt_left","proof":[]}
{"goal":"not a < b.min(c)","proof":["not a < b.min(c) or not b.min(c) <= c or a < c","b.min(c) <= c","not b.min(c) <= c or a < c"]}
{"goal":"false","proof":["not q + r <= q or Real.from_rat(q + r) <= Real.from_rat(q)","not q < q + r or Real.from_rat(q) < Real.from_rat(q + r)","not Real.from_rat(q) >= Real.from_rat(q + r) or not Real.from_rat(q) < Real.from_rat(q + r)","Real.from_rat(q) >= Real.from_rat(q + r) = Real.from_rat(q + r) <= Real.from_rat(q)","Real.from_rat(q) < Real.from_rat(q + r)","Real.from_rat(q + r) <= Real.from_rat(q)","not Real.from_rat(q) >= Real.from_rat(q + r)","Real.from_rat(q) >= Real.from_rat(q + r)"]}
{"goal":"lt_min_imp_lt_right","proof":[]}
{"goal":"not b.max(c) < b","proof":["not b.max(c) < b or not b.max(c) >= b","not b.max(c) >= b","b.max(c) >= b"]}
{"goal":"b.max(c) != b","proof":["a > b.max(c)"]}
{"goal":"not b.max(c) < c","proof":["not b.max(c) < c or not b.max(c) >= c","not b.max(c) >= c","b.max(c) >= c"]}
{"goal":"b.max(c) != c","proof":["a > b.max(c)"]}
{"goal":"false","proof":["b.max(c) = b or b.max(c) = c"]}
{"goal":"gt_both_imp_gt_max","proof":[]}
{"goal":"not a > b.max(c)","proof":["not is_transitive[Real](Real.lte) or not a <= b or not b <= b.max(c) or a <= b.max(c)","b <= b.max(c) = PartialOrder.gte<Real>(b.max(c), b)","a <= b or a > b","not a <= b.max(c) or not a > b.max(c)","not a <= b.max(c)","PartialOrder.gte<Real>(b.max(c), b)","a <= b","not b <= b.max(c) or not a <= b","not b <= b.max(c)"]}
{"goal":"false","proof":["not Real.from_rat(r) > a + Real.0 or not Real.from_rat(r) <= a + Real.0","Real.from_rat(r) > a + Real.0 = a + Real.0 < Real.from_rat(r)","not Real.from_rat(r) > a + Real.0","Real.from_rat(r) > a + Real.0"]}
{"goal":"gt_max_imp_gt_left","proof":[]}
{"goal":"not a > b.max(c)","proof":["not a > c.max(b) or a > c","c.max(b) = b.max(c)","a > c.max(b)"]}
{"goal":"false","proof":["not a + Real.0 > Real.from_rat(r) or not a + Real.0 <= Real.from_rat(r)","a + Real.0 > Real.from_rat(r) = Real.from_rat(r) < a + Real.0","not a + Real.0 > Real.from_rat(r)","a + Real.0 > Real.from_rat(r)"]}
{"goal":"gt_max_imp_gt_right","proof":[]}
{"goal":"exists(k0: Rat) { b < Real.from_rat(k0) }","proof":["let s0: Nat satisfy { true }","let s1: (Real, Rat) -> Rat satisfy { forall(x0: Rat, x1: Real) { not x0.is_positive or Real.from_rat(s1(x1, x0)) < x1 } and forall(x2: Rat, x3: Real) { not x2.is_positive or x3 < Real.from_rat(s1(x3, x2) + x2) } }","not b < Real.from_rat(s1(b, rat.iop(s0)) + rat.iop(s0))","not rat.iop(s0).is_positive or b < Real.from_rat(s1(b, rat.iop(s0)) + rat.iop(s0))","not rat.iop(s0).is_positive","rat.iop(s0).is_positive"]}
{"goal":"a < Real.from_rat(r) and b < Real.from_rat(r)","proof":["not a < Real.from_rat(r)","not a < b or not b <= Real.from_rat(r) or a < Real.from_rat(r)","not b < Real.from_rat(r) or b <= Real.from_rat(r)","b <= Real.from_rat(r)","not b <= Real.from_rat(r) or not a < b"]}
{"goal":"exists(k0: Rat) { a < Real.from_rat(k0) }","proof":["let s0: Nat satisfy { true }","let s1: (Real, Rat) -> Rat satisfy { forall(x0: Rat, x1: Real) { not x0.is_positive or Real.from_rat(s1(x1, x0)) < x1 } and forall(x2: Rat, x3: Real) { not x2.is_positive or x3 < Real.from_rat(s1(x3, x2) + x2) } }","not a < Real.from_rat(s1(a, rat.iop(s0)) + rat.iop(s0))","not rat.iop(s0).is_positive or a < Real.from_rat(s1(a, rat.iop(s0)) + rat.iop(s0))","not rat.iop(s0).is_positive","rat.iop(s0).is_positive"]}
{"goal":"a < Real.from_rat(r) and b < Real.from_rat(r)","proof":["not b < Real.from_rat(r)","not a < Real.from_rat(r) or not b <= a or b < Real.from_rat(r)","not a <= b or a < b or b = a","a <= b or b <= a","not a < Real.from_rat(r) or not b <= a","not b <= a","not a <= b or b = a","a <= b","b = a"]}
{"goal":"rat_dual_upper_bound","proof":["let s0: Rat satisfy { a < Real.from_rat(s0) and b < Real.from_rat(s0) }","not b < Real.from_rat(s0) or not a < Real.from_rat(s0)","not a < Real.from_rat(s0)"]}
{"goal":"a.abs = -a","proof":["not a.is_negative or a.abs = -a"]}
{"goal":"(-a).is_positive","proof":["not (--a).is_negative or (-a).is_positive","not (--a).is_negative","--a = a"]}
{"goal":"-a > Real.0","proof":["not (-a).is_positive or -a > Real.0"]}
{"goal":"a.abs >= Real.0","proof":["not -a > Real.0 or not -a <= Real.0","a.abs >= Real.0 = Real.0 <= a.abs","not Real.0 <= a.abs","not Real.0 <= -a","-a <= Real.0 or Real.0 <= -a","not -a <= Real.0","-a <= Real.0"]}
{"goal":"a.abs = a","proof":["a.abs = a or a.is_negative"]}
{"goal":"a >= Real.0","proof":["a < Real.0 or a >= Real.0","a < Real.0","not a < Real.0 or a.is_negative"]}
{"goal":"a.abs >= Real.0","proof":[]}
{"goal":"abs_gte_zero","proof":[]}
{"goal":"p.is_negative","proof":["not Real.from_rat(p).is_negative or p.is_negative"]}
{"goal":"Real.from_rat(p).abs = -Real.from_rat(p)","proof":["not Real.from_rat(p).is_negative or Real.from_rat(p).abs = -Real.from_rat(p)"]}
{"goal":"Real.from_rat(p.abs) = -Real.from_rat(p)","proof":["-Real.from_rat(p) = Real.from_rat(-p)","Real.from_rat(p.abs) != Real.from_rat(-p)","p.abs != -p","not p.is_negative or p.abs = -p"]}
{"goal":"Real.from_rat(p).abs = Real.from_rat(p.abs)","proof":["Real.from_rat(p).abs != -Real.from_rat(p)"]}
{"goal":"not p.is_negative","proof":["not p < Rat.0 or Real.from_rat(p) < Real.from_rat(Rat.0)","not Real.from_rat(p) < Real.0 or Real.from_rat(p).is_negative","not p.is_negative or p < Rat.0","p < Rat.0","not Real.from_rat(p) < Real.0","Real.from_rat(p) < Real.from_rat(Rat.0)","not Real.from_rat(p) < Real.from_rat(Rat.0)"]}
{"goal":"p.abs = p","proof":["p.abs = p or p.is_negative"]}
{"goal":"Real.from_rat(p).abs = Real.from_rat(p)","proof":["Real.from_rat(p).abs = Real.from_rat(p) or Real.from_rat(p).is_negative"]}
{"goal":"Real.from_rat(p.abs) = Real.from_rat(p)","proof":["p.abs != p"]}
{"goal":"Real.from_rat(p).abs = Real.from_rat(p.abs)","proof":["Real.from_rat(p).abs != Real.from_rat(p)"]}
{"goal":"abs_from_rat","proof":[]}
{"goal":"(a - b).abs < eps","proof":["(a - b).abs < eps = a.is_close(b, eps)"]}
{"goal":"(a - b).abs >= Real.0","proof":["(a - b).abs >= Real.0"]}
{"goal":"Real.0 <= (a - b).abs","proof":["(a - b).abs >= Real.0 = Real.0 <= (a - b).abs"]}
{"goal":"Real.0 < eps","proof":["not (a - b).abs < eps or not Real.0 <= (a - b).abs or Real.0 < eps","not Real.0 <= (a - b).abs or not (a - b).abs < eps"]}
{"goal":"eps.is_positive","proof":["not eps <= Real.0 or not Real.0 <= eps or Real.0 = eps","eps <= Real.0 or eps > Real.0","not Real.0 < eps or Real.0 <= eps","not eps > Real.0 or eps.is_positive","not eps > Real.0","not Real.0 < eps or Real.0 != eps","Real.0 != eps","Real.0 <= eps","eps <= Real.0","not eps <= Real.0"]}
{"goal":"close_imp_eps_pos","proof":[]}
{"goal":"a - b = -(b - a)","proof":["--a + -b = -(b + -a)","a + -b = a - b","b + -a = b - a","--a = a"]}
{"goal":"(a - b).abs = (b - a).abs","proof":["(-(b - a)).abs = (b - a).abs"]}
{"goal":"(a - b).abs < eps","proof":["(a - b).abs < eps = a.is_close(b, eps)"]}
{"goal":"(b - a).abs < eps","proof":[]}
{"goal":"close_comm","proof":["(b - a).abs < eps = b.is_close(a, eps)"]}
{"goal":"(a - b).abs < eps","proof":["(a - b).abs < eps = a.is_close(b, eps)"]}
{"goal":"a - b <= (a - b).abs","proof":["a - b <= (a - b).abs"]}
{"goal":"a - b < eps","proof":["not (a - b).abs < eps or not a - b <= (a - b).abs or a - b < eps","not a - b <= (a - b).abs or not (a - b).abs < eps"]}
{"goal":"a - b + b < eps + b","proof":["not a - b < eps or a - b + b < eps + b"]}
{"goal":"a < eps + b","proof":["a + -b = a - b","a - b + --b = a - b - -b","a + -b - -b = a","--b = b","not a + -b - -b < eps + b","a - b + --b < eps + b","a - b - -b < eps + b"]}
{"goal":"a < b + eps","proof":["eps + b = b + eps"]}
{"goal":"(b - a).abs < eps","proof":["(b - a).abs < eps = b.is_close(a, eps)","not b.is_close(a, eps)","not a.is_close(b, eps) or b.is_close(a, eps)"]}
{"goal":"b - a <= (b - a).abs","proof":["b - a <= (b - a).abs"]}
{"goal":"b - a < eps","proof":["not (b - a).abs < eps or not b - a <= (b - a).abs or b - a < eps","not b - a <= (b - a).abs or not (b - a).abs < eps"]}
{"goal":"b - a + a < eps + a","proof":["not b - a < eps or b - a + a < eps + a"]}
{"goal":"b - a + a = b","proof":["b + -a != b - a or b - a - -a = b","b + -a = b - a","b - a + --a = b - a - -a","--a = a","b - a + --a != b","b - a - -a != b"]}
{"goal":"b < eps + a","proof":["not b - a + a < eps + a"]}
{"goal":"eps + a > b","proof":["not b >= eps + a or not b < eps + a","eps + a <= b or eps + a > b","eps + a <= b","b >= eps + a = eps + a <= b","not b >= eps + a","b >= eps + a"]}
{"goal":"a + eps > b","proof":["eps + a = a + eps"]}
{"goal":"b < a + eps","proof":["eps + a = a + eps"]}
{"goal":"b + -eps < a + eps + -eps","proof":["not b < a + eps or b + -eps < a + eps + -eps"]}
{"goal":"a + eps + -eps > b + -eps","proof":["a + eps + -eps = a + eps - eps","not a + eps - eps > b + -eps","a + eps - eps = a","not a > b + -eps","not b + -eps >= a or not b + -eps < a","a <= b + -eps or a > b + -eps","b + -eps >= a = a <= b + -eps","b + -eps < a + eps - eps","b + -eps < a","a <= b + -eps","not b + -eps >= a","b + -eps >= a"]}
{"goal":"a > b + -eps","proof":["a + eps + -eps = a + eps - eps","a + eps - eps = a","a + eps - eps > b + -eps"]}
{"goal":"close_imp_bounds","proof":["a + eps + -eps = a + eps - eps","b + -eps = b - eps","a > b - eps","not b - eps < a","a + eps - eps = a"]}
{"goal":"(a - b).abs = b - a","proof":["--b + -a = -(a + -b)","a + -b = a - b","b + -a = b - a","not (a - b).is_negative or (a - b).abs = -(a - b)","--b = b","(a - b).abs = -(a - b)"]}
{"goal":"a > b + -eps","proof":["b + -eps = b - eps","not b - eps >= a or not b - eps < a","a <= b + -eps or a > b + -eps","b - eps >= a = a <= b - eps","a <= b + -eps","a <= b - eps","not b - eps >= a","b - eps >= a"]}
{"goal":"a + eps + -eps > b + -eps","proof":["a + eps + -eps = a + eps - eps","not a + eps - eps > b + -eps","a + eps - eps = a"]}
{"goal":"a + eps > b","proof":["not a + eps <= b or a + eps + -eps <= b + -eps","a + eps <= b or a + eps > b","a + eps <= b","not a + eps + -eps <= b + -eps or not a + eps + -eps > b + -eps","not a + eps + -eps <= b + -eps"]}
{"goal":"eps + a > b","proof":["eps + a = a + eps","not a + eps > b","b < a + eps","b < a + eps = a + eps > b"]}
{"goal":"b < eps + a","proof":["b >= eps + a or b < eps + a","b >= eps + a","not eps + a <= b or not eps + a > b","b >= eps + a = eps + a <= b","not eps + a <= b","eps + a <= b"]}
{"goal":"b - a + a = b","proof":["b + -a != b - a or b - a - -a = b","b + -a = b - a","b - a + --a = b - a - -a","--a = a","b - a + --a != b","b - a - -a != b"]}
{"goal":"b - a + a < eps + a","proof":[]}
{"goal":"b - a < eps","proof":["not b - a + a < eps + a or b - a < eps"]}
{"goal":"(a - b).abs < eps","proof":[]}
{"goal":"a.is_close(b, eps)","proof":["(a - b).abs < eps = a.is_close(b, eps)"]}
{"goal":"(a - b).abs = a - b","proof":["(a - b).is_negative or (a - b).abs = a - b"]}
{"goal":"a < eps + b","proof":["eps + b = b + eps"]}
{"goal":"a - b + b < eps + b","proof":["a + -b = a - b","a - b + --b = a - b - -b","a + -b - -b = a","eps + b = b + eps","--b = b","not a - b + --b < eps + b","not a - b + --b < b + eps","not a - b - -b < b + eps","a + -b - -b < b + eps"]}
{"goal":"a - b < eps","proof":["not a - b + b < eps + b or a - b < eps"]}
{"goal":"a - b < eps","proof":[]}
{"goal":"(a - b).abs < eps","proof":[]}
{"goal":"a.is_close(b, eps)","proof":["(a - b).abs < eps = a.is_close(b, eps)"]}
{"goal":"bounds_imp_close","proof":[]}
{"goal":"a + eps - eps <= a","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Rat, x2: Real) { not x0.gt_rat(x1) or not x0 <= x2 or x2.gt_rat(x1) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not a.gt_rat(s0(a, a)) or a <= a","a.gt_rat(s0(a, a)) or a <= a","a + eps - eps = a","not a <= a","not a.gt_rat(s0(a, a))","a.gt_rat(s0(a, a))"]}
{"goal":"b + -eps < a","proof":["not b < a + eps or b + -eps < a + eps + -eps","not b + -eps < a + eps + -eps or not a + eps + -eps <= a or b + -eps < a","a + eps + -eps = a + eps - eps","not b + -eps < a + eps + -eps or not a + eps + -eps <= a","a + eps + -eps <= a","b + -eps < a + eps + -eps"]}
{"goal":"b - eps < a","proof":["b + -eps = b - eps"]}
{"goal":"sum_bounds_imp_close","proof":["not a < b + eps or not b - eps < a or a.is_close(b, eps)"]}
{"goal":"self_close","proof":["not a < a + eps or not a < a + eps or a.is_close(a, eps)","not a < a + eps","not eps.is_positive or a < a + eps"]}
{"goal":"(q - r).abs < eps","proof":["(q - r).abs < eps = q.is_close(r, eps)"]}
{"goal":"Real.from_rat((q - r).abs) < Real.from_rat(eps)","proof":["not (q - r).abs < eps or Real.from_rat((q - r).abs) < Real.from_rat(eps)"]}
{"goal":"(Real.from_rat(q) - Real.from_rat(r)).abs < Real.from_rat(eps)","proof":["Real.from_rat(q) + Real.from_rat(-r) = Real.from_rat(q + -r)","Real.from_rat(q) + -Real.from_rat(r) = Real.from_rat(q) - Real.from_rat(r)","q + -r = q - r","Real.from_rat(q - r).abs = Real.from_rat((q - r).abs)","-Real.from_rat(r) = Real.from_rat(-r)","(Real.from_rat(q) - Real.from_rat(r)).abs < Real.from_rat(eps) = Real.from_rat(eps) > (Real.from_rat(q) - Real.from_rat(r)).abs","Real.from_rat((q - r).abs) < Real.from_rat(eps) = Real.from_rat(eps) > Real.from_rat((q - r).abs)"]}
{"goal":"close_rats_imp_close_reals","proof":["(Real.from_rat(q) - Real.from_rat(r)).abs < Real.from_rat(eps) = Real.from_rat(q).is_close(Real.from_rat(r), Real.from_rat(eps))"]}
{"goal":"(Real.from_rat(q) - Real.from_rat(r)).abs < Real.from_rat(eps)","proof":["(Real.from_rat(q) - Real.from_rat(r)).abs < Real.from_rat(eps) = Real.from_rat(q).is_close(Real.from_rat(r), Real.from_rat(eps))"]}
{"goal":"Real.from_rat((q - r).abs) < Real.from_rat(eps)","proof":["Real.from_rat(q) + Real.from_rat(-r) = Real.from_rat(q + -r)","q + -r = q - r","Real.from_rat(q) + -Real.from_rat(r) = Real.from_rat(q) - Real.from_rat(r)","Real.from_rat(q - r).abs = Real.from_rat((q - r).abs)","-Real.from_rat(r) = Real.from_rat(-r)","(Real.from_rat(q) - Real.from_rat(r)).abs < Real.from_rat(eps) = Real.from_rat(eps) > (Real.from_rat(q) - Real.from_rat(r)).abs","Real.from_rat((q - r).abs) < Real.from_rat(eps) = Real.from_rat(eps) > Real.from_rat((q - r).abs)","(-(Real.from_rat(q) - Real.from_rat(r))).abs = (Real.from_rat(q) - Real.from_rat(r)).abs","(-Real.from_rat(q - r)).abs = Real.from_rat(q - r).abs"]}
{"goal":"(q - r).abs < eps","proof":["not Real.from_rat(eps) < Real.from_rat((q - r).abs) or not Real.from_rat((q - r).abs) < Real.from_rat(eps) or Real.from_rat(eps) < Real.from_rat(eps)","not eps < (q - r).abs or Real.from_rat(eps) < Real.from_rat((q - r).abs)","(q - r).abs > eps or (q - r).abs < eps or (q - r).abs = eps","(q - r).abs > eps = eps < (q - r).abs","not Real.from_rat((q - r).abs) < Real.from_rat(eps) or Real.from_rat((q - r).abs) != Real.from_rat(eps)","not Real.from_rat(eps) < Real.from_rat(eps) or Real.from_rat(eps) != Real.from_rat(eps)","not Real.from_rat(eps) < Real.from_rat(eps)","(q - r).abs > eps or (q - r).abs = eps","Real.from_rat((q - r).abs) != Real.from_rat(eps)","(q - r).abs != eps","(q - r).abs > eps","eps < (q - r).abs","not Real.from_rat(eps) < Real.from_rat((q - r).abs) or Real.from_rat(eps) < Real.from_rat(eps)","Real.from_rat(eps) < Real.from_rat((q - r).abs)","not Real.from_rat(eps) < Real.from_rat((q - r).abs)"]}
{"goal":"close_reals_imp_close_rats","proof":["(q - r).abs < eps = q.is_close(r, eps)"]}
{"goal":"exists(k0: Rat) { Real.from_rat(k0) < x and x < Real.from_rat(k0 + eps) }","proof":["let s0: (Real, Rat) -> Rat satisfy { forall(x0: Rat, x1: Real) { not x0.is_positive or Real.from_rat(s0(x1, x0)) < x1 } and forall(x2: Rat, x3: Real) { not x2.is_positive or x3 < Real.from_rat(s0(x3, x2) + x2) } }","not x < Real.from_rat(s0(x, eps) + eps) or not Real.from_rat(s0(x, eps)) < x","not eps.is_positive or x < Real.from_rat(s0(x, eps) + eps)","not eps.is_positive or Real.from_rat(s0(x, eps)) < x","Real.from_rat(s0(x, eps)) < x","x < Real.from_rat(s0(x, eps) + eps)"]}
{"goal":"r - eps < r","proof":["not eps.is_positive or r > r - eps","r - eps < r = r > r - eps","not r > r - eps"]}
{"goal":"Real.from_rat(r - eps) < Real.from_rat(r)","proof":["not r - eps < r or Real.from_rat(r - eps) < Real.from_rat(r)"]}
{"goal":"Real.from_rat(r) - Real.from_rat(eps) < Real.from_rat(r)","proof":["not r < r + eps or not r > r - eps or r.is_close(r, eps)","not r.is_close(r, eps) or Real.from_rat(r).is_close(Real.from_rat(r), Real.from_rat(eps))","not Real.from_rat(r).is_close(Real.from_rat(r), Real.from_rat(eps)) or Real.from_rat(r) - Real.from_rat(eps) < Real.from_rat(r)","not eps.is_positive or r < r + eps","r - eps < r = r > r - eps","r > r - eps","not Real.from_rat(r).is_close(Real.from_rat(r), Real.from_rat(eps))","r < r + eps","not r.is_close(r, eps)","r.is_close(r, eps)"]}
{"goal":"Real.from_rat(r) - Real.from_rat(eps) < x","proof":["not Real.from_rat(r) - Real.from_rat(eps) < Real.from_rat(r) or not Real.from_rat(r) <= x or Real.from_rat(r) - Real.from_rat(eps) < x","not Real.from_rat(r) < x or Real.from_rat(r) <= x","Real.from_rat(r) <= x","not Real.from_rat(r) - Real.from_rat(eps) < Real.from_rat(r) or not Real.from_rat(r) <= x"]}
{"goal":"rat_approx_exists","proof":["not x.is_close(Real.from_rat(r), Real.from_rat(eps))","not x < Real.from_rat(r) + Real.from_rat(eps) or not Real.from_rat(r) - Real.from_rat(eps) < x or x.is_close(Real.from_rat(r), Real.from_rat(eps))","Real.from_rat(r) + Real.from_rat(eps) = Real.from_rat(r + eps)","not x < Real.from_rat(r) + Real.from_rat(eps)","x < Real.from_rat(r) + Real.from_rat(eps)"]}
{"goal":"exists(k0: Rat) { x < Real.from_rat(k0) }","proof":["let s0: (Real, Rat) -> Rat satisfy { forall(x0: Rat, x1: Real) { not x0.is_positive or Real.from_rat(s0(x1, x0)) < x1 } and forall(x2: Rat, x3: Real) { not x2.is_positive or x3 < Real.from_rat(s0(x3, x2) + x2) } }","not x < Real.from_rat(s0(x, eps) + eps)","not eps.is_positive or x < Real.from_rat(s0(x, eps) + eps)","not eps.is_positive"]}
{"goal":"x < Real.from_rat(r) - Real.from_rat(eps)","proof":["Real.from_rat(r1) + Real.from_rat(eps) = Real.from_rat(r1 + eps)","Real.from_rat(r1) + Real.from_rat(eps) - Real.from_rat(eps) = Real.from_rat(r1)","not x < Real.from_rat(r1 + eps) - Real.from_rat(eps)","x < Real.from_rat(r1) + Real.from_rat(eps) - Real.from_rat(eps)"]}
{"goal":"x < Real.from_rat(r - eps)","proof":["not x.is_close(Real.from_rat(r), Real.from_rat(eps)) or x > Real.from_rat(r) - Real.from_rat(eps)","not x > Real.from_rat(r) - Real.from_rat(eps) or not x <= Real.from_rat(r) - Real.from_rat(eps)","not x < Real.from_rat(r) - Real.from_rat(eps) or x <= Real.from_rat(r) - Real.from_rat(eps)","x <= Real.from_rat(r) - Real.from_rat(eps)","x > Real.from_rat(r) - Real.from_rat(eps)","not x > Real.from_rat(r) - Real.from_rat(eps)"]}
{"goal":"x < Real.from_rat(r1)","proof":[]}
{"goal":"false","proof":["not x.is_close(Real.from_rat(r), Real.from_rat(eps)) or x > Real.from_rat(r) - Real.from_rat(eps)","not x > Real.from_rat(r) - Real.from_rat(eps) or not x <= Real.from_rat(r) - Real.from_rat(eps)","not x < Real.from_rat(r) - Real.from_rat(eps) or x <= Real.from_rat(r) - Real.from_rat(eps)","x <= Real.from_rat(r) - Real.from_rat(eps)","x > Real.from_rat(r) - Real.from_rat(eps)","not x > Real.from_rat(r) - Real.from_rat(eps)"]}
{"goal":"x < Real.from_rat(r)","proof":["Real.from_rat(r1) + Real.from_rat(eps) = Real.from_rat(r1 + eps)","not x < Real.from_rat(r1) or not Real.from_rat(r1) < Real.from_rat(r1) + Real.from_rat(eps) or x < Real.from_rat(r1) + Real.from_rat(eps)","not eps.is_positive or Real.from_rat(r1) < Real.from_rat(r1) + Real.from_rat(eps)","not x < Real.from_rat(r1 + eps)","Real.from_rat(r1) < Real.from_rat(r1) + Real.from_rat(eps)","not Real.from_rat(r1) < Real.from_rat(r1) + Real.from_rat(eps) or x < Real.from_rat(r1) + Real.from_rat(eps)","not x < Real.from_rat(r1) + Real.from_rat(eps)","x < Real.from_rat(r1) + Real.from_rat(eps)"]}
{"goal":"rat_upper","proof":["not x < Real.from_rat(r) or x.is_close(Real.from_rat(r), Real.from_rat(eps))","x.is_close(Real.from_rat(r), Real.from_rat(eps))"]}
{"goal":"exists(k0: Rat) { Real.from_rat(k0) < x }","proof":["let s0: (Real, Rat) -> Rat satisfy { forall(x0: Rat, x1: Real) { not x0.is_positive or Real.from_rat(s0(x1, x0)) < x1 } and forall(x2: Rat, x3: Real) { not x2.is_positive or x3 < Real.from_rat(s0(x3, x2) + x2) } }","not Real.from_rat(s0(x, eps)) < x","not eps.is_positive or Real.from_rat(s0(x, eps)) < x","not eps.is_positive"]}
{"goal":"Real.from_rat(r) + Real.from_rat(eps) < x","proof":["Real.from_rat(r1 - eps) + Real.from_rat(eps) = Real.from_rat(r1 - eps + eps)","r1 - eps + eps = r1","not Real.from_rat(r1 - eps) + Real.from_rat(eps) < x","not Real.from_rat(r1 - eps + eps) < x"]}
{"goal":"Real.from_rat(r + eps) < x","proof":["Real.from_rat(r) + Real.from_rat(eps) = Real.from_rat(r + eps)"]}
{"goal":"Real.from_rat(r1) < x","proof":[]}
{"goal":"false","proof":["not x.is_close(Real.from_rat(r), Real.from_rat(eps)) or x < Real.from_rat(r) + Real.from_rat(eps)","Real.from_rat(r) + Real.from_rat(eps) = Real.from_rat(r + eps)","not Real.from_rat(r + eps) < x or not x <= Real.from_rat(r + eps) or x < x","not x < Real.from_rat(r + eps) or x <= Real.from_rat(r + eps)","not x < x or x != x","not x < x","x < Real.from_rat(r) + Real.from_rat(eps)","x < Real.from_rat(r + eps)","not x <= Real.from_rat(r + eps) or x < x","x <= Real.from_rat(r + eps)","not x <= Real.from_rat(r + eps)"]}
{"goal":"r < r1","proof":["not eps.is_positive or r1 > r1 - eps","r < r1 = r1 > r","not r1 > r","not r1 > r1 - eps"]}
{"goal":"Real.from_rat(r) < x","proof":["not Real.from_rat(r1) < x or not Real.from_rat(r) <= Real.from_rat(r1) or Real.from_rat(r) < x","not r < r1 or Real.from_rat(r) < Real.from_rat(r1)","not Real.from_rat(r) < Real.from_rat(r1) or Real.from_rat(r) <= Real.from_rat(r1)","not Real.from_rat(r) <= Real.from_rat(r1) or not Real.from_rat(r1) < x","not Real.from_rat(r) <= Real.from_rat(r1)","Real.from_rat(r) < Real.from_rat(r1)","not Real.from_rat(r) < Real.from_rat(r1)"]}
{"goal":"rat_lower","proof":["not Real.from_rat(r) < x or x.is_close(Real.from_rat(r), Real.from_rat(eps))","x.is_close(Real.from_rat(r), Real.from_rat(eps))"]}
{"goal":"a < b + c","proof":["not a.is_close(b, c) or a < b + c"]}
{"goal":"a < d + e","proof":["not a.is_close(d, e) or a < d + e"]}
{"goal":"a < (b + c).min(d + e)","proof":["not a < b + c or not a < d + e or a < (b + c).min(d + e)"]}
{"goal":"exists(k0: Rat) { a < Real.from_rat(k0) and Real.from_rat(k0) < (b + c).min(d + e) }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(s0(a, (b + c).min(d + e))) < (b + c).min(d + e) or not a < Real.from_rat(s0(a, (b + c).min(d + e)))","not a < (b + c).min(d + e) or Real.from_rat(s0(a, (b + c).min(d + e))) < (b + c).min(d + e)","not a < (b + c).min(d + e) or a < Real.from_rat(s0(a, (b + c).min(d + e)))","a < Real.from_rat(s0(a, (b + c).min(d + e)))","Real.from_rat(s0(a, (b + c).min(d + e))) < (b + c).min(d + e)","not Real.from_rat(s0(a, (b + c).min(d + e))) < (b + c).min(d + e)"]}
{"goal":"Real.from_rat(r) < b + c","proof":["not Real.from_rat(r) < (b + c).min(d + e) or Real.from_rat(r) < b + c"]}
{"goal":"b - c < a","proof":["not a.is_close(b, c) or b - c < a"]}
{"goal":"b - c < Real.from_rat(r)","proof":["not b - c < a or not a <= Real.from_rat(r) or b - c < Real.from_rat(r)","not a < Real.from_rat(r) or a <= Real.from_rat(r)","a <= Real.from_rat(r)","not b - c < a or not a <= Real.from_rat(r)"]}
{"goal":"Real.from_rat(r).is_close(b, c)","proof":["not Real.from_rat(r) < b + c or not b - c < Real.from_rat(r) or Real.from_rat(r).is_close(b, c)"]}
{"goal":"Real.from_rat(r) < d + e","proof":["not Real.from_rat(r) < (b + c).min(d + e) or Real.from_rat(r) < d + e"]}
{"goal":"d - e < a","proof":["not a.is_close(d, e) or d - e < a"]}
{"goal":"d - e < Real.from_rat(r)","proof":["not d - e < a or not a <= Real.from_rat(r) or d - e < Real.from_rat(r)","not a < Real.from_rat(r) or a <= Real.from_rat(r)","a <= Real.from_rat(r)","not d - e < a or not a <= Real.from_rat(r)"]}
{"goal":"Real.from_rat(r).is_close(d, e)","proof":["not Real.from_rat(r) < d + e or not d - e < Real.from_rat(r) or Real.from_rat(r).is_close(d, e)"]}
{"goal":"rat_intersect","proof":["not Real.from_rat(r).is_close(d, e) or not Real.from_rat(r).is_close(b, c)","not Real.from_rat(r).is_close(b, c)"]}
{"goal":"swap_minus_plus","proof":["-c + (a + b) = -c + a + b","a + -c = a - c","a + b + -c = a + b - c","-c + (a + b) = a + b + -c","a + -c = -c + a"]}
