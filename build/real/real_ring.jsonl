{"goal":"x * y = limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y)))","proof":["limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y))) = x * y"]}
{"goal":"y * x = limit_rat(mul_rat_seq(rat_seq(y), rat_seq(x)))","proof":["limit_rat(mul_rat_seq(rat_seq(y), rat_seq(x))) = y * x"]}
{"goal":"mul_rat_seq(rat_seq(x), rat_seq(y)) = mul_rat_seq(rat_seq(y), rat_seq(x))","proof":["let s0: Nat satisfy { mul_rat_seq(rat_seq(y), rat_seq(x), s0) != mul_rat_seq(rat_seq(x), rat_seq(y), s0) }","mul_rat_seq(rat_seq(y), rat_seq(x), s0) = mul_rat_seq(rat_seq(x), rat_seq(y), s0)"]}
{"goal":"real_mul_comm","proof":[]}
{"goal":"x * y * z = limit_rat(mul_rat_seq(rat_seq(x * y), rat_seq(z)))","proof":["limit_rat(mul_rat_seq(rat_seq(x * y), rat_seq(z))) = x * y * z"]}
{"goal":"eq_seq(rat_seq(x * y), mul_rat_seq(rat_seq(x), rat_seq(y)))","proof":["not converges(lift_seq(rat_seq(x))) or not converges(lift_seq(rat_seq(y))) or converges(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y))))","not converges_to(lift_seq(rat_seq(limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y))))), limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y)))) or not converges(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y)))) or eq_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y)))))","limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y))) = x * y","not eq_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y))))) or eq_seq(rat_seq(limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y)))), mul_rat_seq(rat_seq(x), rat_seq(y)))","converges_to(lift_seq(rat_seq(limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y))))), limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y))))","converges(lift_seq(rat_seq(x)))","converges(lift_seq(rat_seq(y)))","not eq_seq(rat_seq(limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y)))), mul_rat_seq(rat_seq(x), rat_seq(y)))","not eq_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y)))))","not converges(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y))))"]}
{"goal":"eq_seq(mul_rat_seq(rat_seq(x * y), rat_seq(z)), mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z)))","proof":["not converges(lift_seq(rat_seq(z))) or not eq_seq(rat_seq(x * y), mul_rat_seq(rat_seq(x), rat_seq(y))) or eq_seq(mul_rat_seq(rat_seq(x * y), rat_seq(z)), mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z)))","not converges(lift_seq(rat_seq(z)))","converges(lift_seq(rat_seq(z)))"]}
{"goal":"converges(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z))))","proof":["not converges(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y)))) or not converges(lift_seq(rat_seq(z))) or converges(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z))))","not converges(lift_seq(rat_seq(x))) or not converges(lift_seq(rat_seq(y))) or converges(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y))))","converges(lift_seq(rat_seq(x)))","converges(lift_seq(rat_seq(y)))","converges(lift_seq(rat_seq(z)))","not converges(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y))))"]}
{"goal":"converges_to(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z))), x * y * z)","proof":["not eq_seq(mul_rat_seq(rat_seq(x * y), rat_seq(z)), mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z))) or converges_to(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z))), limit_rat(mul_rat_seq(rat_seq(x * y), rat_seq(z))))","not converges_to(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z))), limit_rat(mul_rat_seq(rat_seq(x * y), rat_seq(z))))","converges_to(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z))), limit_rat(mul_rat_seq(rat_seq(x * y), rat_seq(z))))"]}
{"goal":"limit(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z)))) = x * y * z","proof":["not converges_to(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z))), x * y * z) or not converges_to(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z))), limit(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z))))) or limit(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z)))) = x * y * z","not converges(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z)))) or converges_to(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z))), limit(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z)))))","not converges_to(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z))), limit(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z))))) or not converges_to(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z))), x * y * z)","converges_to(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z))), limit(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z)))))","not converges_to(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z))), limit(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z)))))"]}
{"goal":"mul3_as_seq","proof":["limit(lift_seq(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z)))) = limit_rat(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z)))"]}
{"goal":"mul_seq_assoc","proof":["let s0: Nat satisfy { mul_rat_seq(a, mul_rat_seq(b, c), s0) != mul_rat_seq(mul_rat_seq(a, b), c, s0) }","a(s0) * (b(s0) * c(s0)) = a(s0) * b(s0) * c(s0)","a(s0) * b(s0) = mul_rat_seq(a, b, s0)","a(s0) * mul_rat_seq(b, c, s0) = mul_rat_seq(a, mul_rat_seq(b, c), s0)","b(s0) * c(s0) = mul_rat_seq(b, c, s0)","mul_rat_seq(a, b, s0) * c(s0) = mul_rat_seq(mul_rat_seq(a, b), c, s0)"]}
{"goal":"mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z)) = mul_rat_seq(rat_seq(x), mul_rat_seq(rat_seq(y), rat_seq(z)))","proof":["let s0: Nat satisfy { mul_rat_seq(rat_seq(x), mul_rat_seq(rat_seq(y), rat_seq(z)), s0) != mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z), s0) }","mul_rat_seq(rat_seq(x), mul_rat_seq(rat_seq(y), rat_seq(z)), s0) = mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z), s0)"]}
{"goal":"x * y * z = limit_rat(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z)))","proof":["limit_rat(mul_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), rat_seq(z))) = x * y * z"]}
{"goal":"x * y * z = limit_rat(mul_rat_seq(rat_seq(x), mul_rat_seq(rat_seq(y), rat_seq(z))))","proof":[]}
{"goal":"y * z * x = limit_rat(mul_rat_seq(mul_rat_seq(rat_seq(y), rat_seq(z)), rat_seq(x)))","proof":["limit_rat(mul_rat_seq(mul_rat_seq(rat_seq(y), rat_seq(z)), rat_seq(x))) = y * z * x"]}
{"goal":"mul_rat_seq(rat_seq(x), mul_rat_seq(rat_seq(y), rat_seq(z))) = mul_rat_seq(mul_rat_seq(rat_seq(y), rat_seq(z)), rat_seq(x))","proof":["let s0: Nat satisfy { mul_rat_seq(rat_seq(x), mul_rat_seq(rat_seq(y), rat_seq(z)), s0) != mul_rat_seq(mul_rat_seq(rat_seq(y), rat_seq(z)), rat_seq(x), s0) }","mul_rat_seq(rat_seq(x), mul_rat_seq(rat_seq(y), rat_seq(z)), s0) = mul_rat_seq(mul_rat_seq(rat_seq(y), rat_seq(z)), rat_seq(x), s0)"]}
{"goal":"x * y * z = y * z * x","proof":[]}
{"goal":"mul_assoc","proof":["x * (y * z) = y * z * x"]}
{"goal":"limit_rat_rat_seq","proof":["not eq_seq(rat_seq(x), rat_seq(x)) or converges_to(lift_seq(rat_seq(x)), limit_rat(rat_seq(x)))","not converges_to(lift_seq(rat_seq(x)), limit_rat(rat_seq(x))) or not converges_to(lift_seq(rat_seq(x)), x) or limit_rat(rat_seq(x)) = x","not converges(lift_seq(rat_seq(x))) or eq_seq(rat_seq(x), rat_seq(x))","converges_to(lift_seq(rat_seq(x)), x)","converges(lift_seq(rat_seq(x)))","not converges_to(lift_seq(rat_seq(x)), limit_rat(rat_seq(x))) or not converges_to(lift_seq(rat_seq(x)), x)","not converges_to(lift_seq(rat_seq(x)), limit_rat(rat_seq(x)))","not eq_seq(rat_seq(x), rat_seq(x))"]}
{"goal":"converges_to(lift_seq(rat_seq(x)), x)","proof":["converges_to(lift_seq(rat_seq(x)), x)"]}
{"goal":"converges_to(lift_seq(rat_seq(y)), y)","proof":["converges_to(lift_seq(rat_seq(y)), y)"]}
{"goal":"converges_to(lift_seq(add_rat_seq(rat_seq(x), rat_seq(y))), limit_rat(rat_seq(x)) + limit_rat(rat_seq(y)))","proof":["not converges(lift_seq(rat_seq(x))) or not converges(lift_seq(rat_seq(y))) or converges_to(lift_seq(add_rat_seq(rat_seq(x), rat_seq(y))), limit_rat(rat_seq(x)) + limit_rat(rat_seq(y)))","converges(lift_seq(rat_seq(x)))","converges(lift_seq(rat_seq(y)))"]}
{"goal":"converges_to(lift_seq(add_rat_seq(rat_seq(x), rat_seq(y))), limit_rat(rat_seq(x)) + y)","proof":["limit_rat(rat_seq(y)) = y"]}
{"goal":"converges_to(lift_seq(add_rat_seq(rat_seq(x), rat_seq(y))), x + y)","proof":["limit_rat(rat_seq(x)) = x"]}
{"goal":"limit_definition_of_add","proof":["not converges_to(lift_seq(add_rat_seq(rat_seq(x), rat_seq(y))), x + y) or not converges_to(lift_seq(add_rat_seq(rat_seq(x), rat_seq(y))), limit_rat(add_rat_seq(rat_seq(x), rat_seq(y)))) or limit_rat(add_rat_seq(rat_seq(x), rat_seq(y))) = x + y","not converges(lift_seq(add_rat_seq(rat_seq(x), rat_seq(y)))) or converges_to(lift_seq(add_rat_seq(rat_seq(x), rat_seq(y))), limit(lift_seq(add_rat_seq(rat_seq(x), rat_seq(y)))))","limit(lift_seq(add_rat_seq(rat_seq(x), rat_seq(y)))) = limit_rat(add_rat_seq(rat_seq(x), rat_seq(y)))","not converges_to(lift_seq(add_rat_seq(rat_seq(x), rat_seq(y))), x + y) or converges(lift_seq(add_rat_seq(rat_seq(x), rat_seq(y))))","not converges_to(lift_seq(add_rat_seq(rat_seq(x), rat_seq(y))), limit_rat(add_rat_seq(rat_seq(x), rat_seq(y)))) or not converges_to(lift_seq(add_rat_seq(rat_seq(x), rat_seq(y))), x + y)","converges(lift_seq(add_rat_seq(rat_seq(x), rat_seq(y))))","not converges_to(lift_seq(add_rat_seq(rat_seq(x), rat_seq(y))), limit_rat(add_rat_seq(rat_seq(x), rat_seq(y))))","converges_to(lift_seq(add_rat_seq(rat_seq(x), rat_seq(y))), limit(lift_seq(add_rat_seq(rat_seq(x), rat_seq(y)))))","not converges_to(lift_seq(add_rat_seq(rat_seq(x), rat_seq(y))), limit(lift_seq(add_rat_seq(rat_seq(x), rat_seq(y)))))"]}
{"goal":"converges_to(lift_seq(a), limit_rat(a))","proof":["not eq_seq(a, a) or converges_to(lift_seq(a), limit_rat(a))","not eq_seq(a, a)","not converges(lift_seq(a)) or eq_seq(a, a)"]}
{"goal":"converges_to(lift_seq(rat_seq(limit_rat(a))), limit_rat(a))","proof":["converges_to(lift_seq(rat_seq(limit_rat(a))), limit_rat(a))"]}
{"goal":"limit(lift_seq(a)) = limit(lift_seq(rat_seq(limit_rat(a))))","proof":["limit(lift_seq(a)) = limit_rat(a)","limit(lift_seq(rat_seq(limit_rat(a)))) = limit_rat(rat_seq(limit_rat(a)))","limit_rat(rat_seq(limit_rat(a))) != limit(lift_seq(a))","limit_rat(rat_seq(limit_rat(a))) != limit_rat(a)","limit_rat(rat_seq(limit_rat(a))) = limit_rat(a)"]}
{"goal":"converges_to(lift_seq(rat_seq(limit_rat(a))), limit(lift_seq(rat_seq(limit_rat(a)))))","proof":["not converges_to(lift_seq(rat_seq(limit_rat(a))), limit(lift_seq(a)))","limit(lift_seq(a)) = limit_rat(a)"]}
{"goal":"eq_seq_rat_seq_limit","proof":["not converges_to(lift_seq(rat_seq(limit_rat(a))), limit_rat(a)) or not converges(lift_seq(a)) or eq_seq(a, rat_seq(limit_rat(a)))"]}
{"goal":"eq_seq_imp_limit_rat_eq","proof":["not eq_seq(b, a) or not eq_seq(a, b) or eq_seq(b, b)","not eq_seq(a, b) or converges_to(lift_seq(b), limit_rat(a))","not eq_seq(b, b) or converges_to(lift_seq(b), limit_rat(b))","not converges_to(lift_seq(b), limit_rat(a)) or not converges_to(lift_seq(b), limit_rat(b)) or limit_rat(b) = limit_rat(a)","not eq_seq(a, b) or eq_seq(b, a)","eq_seq(b, a)","not converges_to(lift_seq(b), limit_rat(b)) or not converges_to(lift_seq(b), limit_rat(a))","converges_to(lift_seq(b), limit_rat(a))","not eq_seq(b, a) or eq_seq(b, b)","not converges_to(lift_seq(b), limit_rat(b))","eq_seq(b, b)","not eq_seq(b, b)"]}
{"goal":"limit_rat_add","proof":["not converges(lift_seq(a)) or not converges(lift_seq(b)) or converges_to(lift_seq(add_rat_seq(a, b)), limit_rat(a) + limit_rat(b))","not converges_to(lift_seq(add_rat_seq(a, b)), limit_rat(rat_seq(limit_rat(a) + limit_rat(b)))) or not converges(lift_seq(rat_seq(limit_rat(a) + limit_rat(b)))) or eq_seq(rat_seq(limit_rat(a) + limit_rat(b)), add_rat_seq(a, b))","not eq_seq(rat_seq(limit_rat(a) + limit_rat(b)), add_rat_seq(a, b)) or limit_rat(rat_seq(limit_rat(a) + limit_rat(b))) = limit_rat(add_rat_seq(a, b))","limit_rat(rat_seq(limit_rat(a) + limit_rat(b))) = limit_rat(a) + limit_rat(b)","converges(lift_seq(rat_seq(limit_rat(a) + limit_rat(b))))","limit_rat(rat_seq(limit_rat(a) + limit_rat(b))) != limit_rat(add_rat_seq(a, b))","not converges(lift_seq(b)) or converges_to(lift_seq(add_rat_seq(a, b)), limit_rat(a) + limit_rat(b))","converges_to(lift_seq(add_rat_seq(a, b)), limit_rat(a) + limit_rat(b))","not eq_seq(rat_seq(limit_rat(a) + limit_rat(b)), add_rat_seq(a, b))","converges_to(lift_seq(add_rat_seq(a, b)), limit_rat(rat_seq(limit_rat(a) + limit_rat(b))))","not converges_to(lift_seq(add_rat_seq(a, b)), limit_rat(rat_seq(limit_rat(a) + limit_rat(b))))"]}
{"goal":"y + z = limit_rat(add_rat_seq(rat_seq(y), rat_seq(z)))","proof":["limit_rat(add_rat_seq(rat_seq(y), rat_seq(z))) = y + z"]}
{"goal":"x * (y + z) = limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y + z)))","proof":["limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y + z))) = x * (y + z)"]}
{"goal":"y + z = limit_rat(syz)","proof":["limit_rat(add_rat_seq(rat_seq(y), rat_seq(z))) != y + z"]}
{"goal":"converges(lift_seq(add_rat_seq(rat_seq(y), rat_seq(z))))","proof":["not converges(lift_seq(rat_seq(y))) or not converges(lift_seq(rat_seq(z))) or converges_to(lift_seq(add_rat_seq(rat_seq(y), rat_seq(z))), limit_rat(rat_seq(y)) + limit_rat(rat_seq(z)))","not converges_to(lift_seq(add_rat_seq(rat_seq(y), rat_seq(z))), limit_rat(rat_seq(y)) + limit_rat(rat_seq(z))) or converges(lift_seq(add_rat_seq(rat_seq(y), rat_seq(z))))","converges(lift_seq(rat_seq(y)))","converges(lift_seq(rat_seq(z)))","not converges_to(lift_seq(add_rat_seq(rat_seq(y), rat_seq(z))), limit_rat(rat_seq(y)) + limit_rat(rat_seq(z)))"]}
{"goal":"converges(lift_seq(syz))","proof":["not converges(lift_seq(add_rat_seq(rat_seq(y), rat_seq(z))))"]}
{"goal":"eq_seq(syz, rat_seq(y + z))","proof":["not eq_seq(syz, rat_seq(limit_rat(syz)))","not converges(lift_seq(syz)) or eq_seq(syz, rat_seq(limit_rat(syz)))"]}
{"goal":"eq_seq(add_rat_seq(rat_seq(y), rat_seq(z)), rat_seq(y + z))","proof":[]}
{"goal":"eq_seq(rat_seq(y + z), add_rat_seq(rat_seq(y), rat_seq(z)))","proof":["not eq_seq(add_rat_seq(rat_seq(y), rat_seq(z)), rat_seq(y + z)) or eq_seq(rat_seq(y + z), add_rat_seq(rat_seq(y), rat_seq(z)))"]}
{"goal":"eq_seq(mul_rat_seq(rat_seq(x), add_rat_seq(rat_seq(y), rat_seq(z))), mul_rat_seq(rat_seq(x), rat_seq(y + z)))","proof":["not converges(lift_seq(rat_seq(x))) or not eq_seq(add_rat_seq(rat_seq(y), rat_seq(z)), rat_seq(y + z)) or eq_seq(mul_rat_seq(rat_seq(x), add_rat_seq(rat_seq(y), rat_seq(z))), mul_rat_seq(rat_seq(x), rat_seq(y + z)))","not converges(lift_seq(rat_seq(x)))","converges(lift_seq(rat_seq(x)))"]}
{"goal":"limit_rat(mul_rat_seq(rat_seq(x), add_rat_seq(rat_seq(y), rat_seq(z)))) = limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y + z)))","proof":["not eq_seq(mul_rat_seq(rat_seq(x), add_rat_seq(rat_seq(y), rat_seq(z))), mul_rat_seq(rat_seq(x), rat_seq(y + z))) or limit_rat(mul_rat_seq(rat_seq(x), add_rat_seq(rat_seq(y), rat_seq(z)))) = limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y + z)))"]}
{"goal":"x * (y + z) = limit_rat(mul_rat_seq(rat_seq(x), add_rat_seq(rat_seq(y), rat_seq(z))))","proof":["limit_rat(mul_rat_seq(rat_seq(x), add_rat_seq(rat_seq(y), rat_seq(z)))) != limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y + z)))"]}
{"goal":"x * y = limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y)))","proof":["limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y))) = x * y"]}
{"goal":"x * z = limit_rat(mul_rat_seq(rat_seq(x), rat_seq(z)))","proof":["limit_rat(mul_rat_seq(rat_seq(x), rat_seq(z))) = x * z"]}
{"goal":"x * y = limit_rat(s1)","proof":["limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y))) != x * y"]}
{"goal":"x * z = limit_rat(s2)","proof":["limit_rat(mul_rat_seq(rat_seq(x), rat_seq(z))) != x * z"]}
{"goal":"converges(lift_seq(s1))","proof":["not converges(lift_seq(rat_seq(x))) or not converges(lift_seq(rat_seq(y))) or converges(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y))))","converges(lift_seq(rat_seq(x)))","converges(lift_seq(rat_seq(y)))","not converges(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y))))"]}
{"goal":"converges(lift_seq(s2))","proof":["not converges(lift_seq(rat_seq(x))) or not converges(lift_seq(rat_seq(z))) or converges(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(z))))","converges(lift_seq(rat_seq(x)))","converges(lift_seq(rat_seq(z)))","not converges(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(z))))"]}
{"goal":"limit_rat(s1) + limit_rat(s2) = limit_rat(add_rat_seq(s1, s2))","proof":["not converges(lift_seq(s1)) or not converges(lift_seq(s2)) or limit_rat(s1) + limit_rat(s2) = limit_rat(add_rat_seq(s1, s2))"]}
{"goal":"x * y + x * z = limit_rat(add_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), mul_rat_seq(rat_seq(x), rat_seq(z))))","proof":[]}
{"goal":"mul_rat_seq(rat_seq(x), add_rat_seq(rat_seq(y), rat_seq(z))) = add_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), mul_rat_seq(rat_seq(x), rat_seq(z)))","proof":["let s0: Nat satisfy { add_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), mul_rat_seq(rat_seq(x), rat_seq(z)), s0) != mul_rat_seq(rat_seq(x), add_rat_seq(rat_seq(y), rat_seq(z)), s0) }","add_rat_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), mul_rat_seq(rat_seq(x), rat_seq(z)), s0) = mul_rat_seq(rat_seq(x), add_rat_seq(rat_seq(y), rat_seq(z)), s0)"]}
{"goal":"mul_distrib_right","proof":[]}
{"goal":"mul_distrib_left","proof":["z * x + z * y = z * (x + y)","z * (x + y) = (x + y) * z","z * x = x * z","z * y = y * z"]}
{"goal":"converges_to(lift_seq(mul_rat_seq(a, b)), limit_rat(a) * limit_rat(b))","proof":["not eq_seq(rat_seq(limit_rat(a)), a) or not eq_seq(rat_seq(limit_rat(b)), b) or eq_seq(mul_rat_seq(rat_seq(limit_rat(a)), rat_seq(limit_rat(b))), mul_rat_seq(a, b))","limit_rat(mul_rat_seq(rat_seq(limit_rat(a)), rat_seq(limit_rat(b)))) = limit_rat(a) * limit_rat(b)","not converges(lift_seq(a)) or eq_seq(a, rat_seq(limit_rat(a)))","not converges(lift_seq(b)) or eq_seq(b, rat_seq(limit_rat(b)))","not eq_seq(mul_rat_seq(rat_seq(limit_rat(a)), rat_seq(limit_rat(b))), mul_rat_seq(a, b)) or converges_to(lift_seq(mul_rat_seq(a, b)), limit_rat(mul_rat_seq(rat_seq(limit_rat(a)), rat_seq(limit_rat(b)))))","not eq_seq(a, rat_seq(limit_rat(a))) or eq_seq(rat_seq(limit_rat(a)), a)","not eq_seq(b, rat_seq(limit_rat(b))) or eq_seq(rat_seq(limit_rat(b)), b)","eq_seq(b, rat_seq(limit_rat(b)))","eq_seq(a, rat_seq(limit_rat(a)))","not converges_to(lift_seq(mul_rat_seq(a, b)), limit_rat(mul_rat_seq(rat_seq(limit_rat(a)), rat_seq(limit_rat(b)))))","eq_seq(rat_seq(limit_rat(a)), a)","eq_seq(rat_seq(limit_rat(b)), b)","not eq_seq(mul_rat_seq(rat_seq(limit_rat(a)), rat_seq(limit_rat(b))), mul_rat_seq(a, b))"]}
{"goal":"converges_to(lift_seq(mul_rat_seq(a, b)), limit(lift_seq(mul_rat_seq(a, b))))","proof":["not converges(lift_seq(a)) or not converges(lift_seq(b)) or converges(lift_seq(mul_rat_seq(a, b)))","not converges(lift_seq(mul_rat_seq(a, b))) or converges_to(lift_seq(mul_rat_seq(a, b)), limit(lift_seq(mul_rat_seq(a, b))))","not converges(lift_seq(mul_rat_seq(a, b)))"]}
{"goal":"limit(lift_seq(mul_rat_seq(a, b))) = limit_rat(a) * limit_rat(b)","proof":["not converges_to(lift_seq(mul_rat_seq(a, b)), limit_rat(a) * limit_rat(b)) or not converges_to(lift_seq(mul_rat_seq(a, b)), limit(lift_seq(mul_rat_seq(a, b)))) or limit_rat(a) * limit_rat(b) = limit(lift_seq(mul_rat_seq(a, b)))","not converges_to(lift_seq(mul_rat_seq(a, b)), limit_rat(a) * limit_rat(b)) or not converges_to(lift_seq(mul_rat_seq(a, b)), limit(lift_seq(mul_rat_seq(a, b))))"]}
{"goal":"limit_rat_mul_rat_seq","proof":["limit(lift_seq(mul_rat_seq(a, b))) != limit_rat(mul_rat_seq(a, b))","limit(lift_seq(mul_rat_seq(a, b))) = limit_rat(mul_rat_seq(a, b))"]}
{"goal":"converges_to(lift_seq(const_rat_seq(r)), limit_rat(rat_seq(Real.from_rat(r))))","proof":["converges_to(lift_seq(const_rat_seq(r)), Real.from_rat(r))","limit_rat(rat_seq(Real.from_rat(r))) = Real.from_rat(r)"]}
{"goal":"eq_seq(rat_seq(Real.from_rat(r)), const_rat_seq(r))","proof":["not converges_to(lift_seq(const_rat_seq(r)), limit_rat(rat_seq(Real.from_rat(r)))) or not converges(lift_seq(rat_seq(Real.from_rat(r)))) or eq_seq(rat_seq(Real.from_rat(r)), const_rat_seq(r))","not converges(lift_seq(rat_seq(Real.from_rat(r))))","converges(lift_seq(rat_seq(Real.from_rat(r))))"]}
{"goal":"limit_rat(rat_seq(Real.from_rat(r))) = limit_rat(const_rat_seq(r))","proof":["not eq_seq(rat_seq(Real.from_rat(r)), const_rat_seq(r)) or limit_rat(rat_seq(Real.from_rat(r))) = limit_rat(const_rat_seq(r))"]}
{"goal":"limit_rat_const_rat_seq","proof":["limit_rat(rat_seq(Real.from_rat(r))) != Real.from_rat(r)","limit_rat(rat_seq(Real.from_rat(r))) = Real.from_rat(r)"]}
{"goal":"converges(lift_seq(const_rat_seq(Rat.1)))","proof":["converges_to(lift_seq(const_rat_seq(Rat.1)), Real.from_rat(Rat.1))","not converges_to(lift_seq(const_rat_seq(Rat.1)), Real.from_rat(Rat.1)) or converges(lift_seq(const_rat_seq(Rat.1)))","not converges_to(lift_seq(const_rat_seq(Rat.1)), Real.from_rat(Rat.1))"]}
{"goal":"limit_rat(rat_seq(x)) * limit_rat(const_rat_seq(Rat.1)) = limit_rat(mul_rat_seq(rat_seq(x), const_rat_seq(Rat.1)))","proof":["not converges(lift_seq(rat_seq(x))) or not converges(lift_seq(const_rat_seq(Rat.1))) or limit_rat(rat_seq(x)) * limit_rat(const_rat_seq(Rat.1)) = limit_rat(mul_rat_seq(rat_seq(x), const_rat_seq(Rat.1)))","not converges(lift_seq(rat_seq(x)))","converges(lift_seq(rat_seq(x)))"]}
{"goal":"mul_rat_seq(rat_seq(x), const_rat_seq(Rat.1)) = rat_seq(x)","proof":["let s0: Nat satisfy { mul_rat_seq(rat_seq(x), const_rat_seq(Rat.1), s0) != rat_seq(x, s0) }","rat_seq(x, s0) * const_rat_seq(Rat.1, s0) = mul_rat_seq(rat_seq(x), const_rat_seq(Rat.1), s0)","const_rat_seq(Rat.1, s0) = Rat.1","rat_seq(x, s0) * Rat.1 = rat_seq(x, s0)","rat_seq(x, s0) * const_rat_seq(Rat.1, s0) != rat_seq(x, s0)"]}
{"goal":"limit_rat(rat_seq(x)) = x","proof":["limit_rat(rat_seq(x)) = x"]}
{"goal":"x * limit_rat(const_rat_seq(Rat.1)) = x","proof":[]}
{"goal":"limit_rat(const_rat_seq(Rat.1)) = Real.from_rat(Rat.1)","proof":["limit_rat(const_rat_seq(Rat.1)) = Real.from_rat(Rat.1)"]}
{"goal":"mul_one_right","proof":["x * Real.from_rat(Rat.1) = x"]}
{"goal":"mul_one_left","proof":["x * Real.1 = Real.1 * x","x * Real.1 != x","x * Real.1 = x"]}
{"goal":"limit_rat(rat_seq(x)) * limit_rat(zero_rat_seq) = limit_rat(mul_rat_seq(rat_seq(x), zero_rat_seq))","proof":["not converges(lift_seq(rat_seq(x))) or not converges(lift_seq(zero_rat_seq)) or limit_rat(rat_seq(x)) * limit_rat(zero_rat_seq) = limit_rat(mul_rat_seq(rat_seq(x), zero_rat_seq))","not converges_to(lift_seq(zero_rat_seq), Real.0) or eq_seq(zero_rat_seq, zero_rat_seq)","not eq_seq(zero_rat_seq, zero_rat_seq) or converges(lift_seq(zero_rat_seq))","converges(lift_seq(rat_seq(x)))","not converges(lift_seq(zero_rat_seq))","not eq_seq(zero_rat_seq, zero_rat_seq)"]}
{"goal":"mul_rat_seq(rat_seq(x), zero_rat_seq) = zero_rat_seq","proof":["let s0: Nat satisfy { mul_rat_seq(rat_seq(x), zero_rat_seq, s0) != zero_rat_seq(s0) }","rat_seq(x, s0) * zero_rat_seq(s0) = mul_rat_seq(rat_seq(x), zero_rat_seq, s0)","const_rat_seq(Rat.0, s0) = zero_rat_seq(s0)","const_rat_seq(Rat.0, s0) = Rat.0","rat_seq(x, s0) * Rat.0 = Rat.0"]}
{"goal":"mul_zero_right","proof":["limit_rat(zero_rat_seq) * limit_rat(rat_seq(x)) = limit_rat(rat_seq(x)) * limit_rat(zero_rat_seq)","x * Real.0 = Real.0 * x","limit_rat(const_rat_seq(Rat.0)) = Real.from_rat(Rat.0)","limit_rat(rat_seq(x)) = x"]}
{"goal":"mul_zero_left","proof":["x * Real.0 = Real.0 * x","x * Real.0 != Real.0","x * Real.0 = Real.0"]}
{"goal":"(Real.1 + -Real.1) * x = Real.0","proof":["Real.1 + -Real.1 = Real.0","Real.0 * x != Real.0","Real.0 * x = Real.0"]}
{"goal":"Real.1 * x + -Real.1 * x = Real.0","proof":["Real.1 * x + -Real.1 * x = (Real.1 + -Real.1) * x"]}
{"goal":"x + -Real.1 * x = Real.0","proof":["Real.1 * x = x"]}
{"goal":"mul_neg_one_left","proof":["-Real.1 * x + x != Real.0 or -Real.1 * x = Real.0 - x","-x + x != Real.0 or Real.0 - x = -x","x + -Real.1 * x = -Real.1 * x + x","x + -x = -x + x","x + -x = Real.0","-Real.1 * x + x = Real.0","-Real.1 * x = Real.0 - x","Real.0 - x != -x","-x + x != Real.0"]}
{"goal":"mul_neg_one_right","proof":["-Real.1 * x = -x","x * -Real.1 = -Real.1 * x"]}
{"goal":"mul_neg_left","proof":["-Real.1 * x * y = -Real.1 * (x * y)","-Real.1 * (x * y) = -(x * y)","-Real.1 * x = -x","-Real.1 * x * y != -(x * y)"]}
{"goal":"mul_neg_right","proof":["-y * x = -(y * x)","x * -y = -y * x","y * x = x * y","-y * x != -(x * y)"]}
{"goal":"mul_sub_distrib_right","proof":["x * y + x * -z = x * (y + -z)","x * -z = -(x * z)","x * y + -(x * z) = x * y - x * z","y + -z = y - z"]}
{"goal":"mul_sub_distrib_left","proof":["z * x - z * y = z * (x - y)","(x - y) * z = z * (x - y)","z * x = x * z","z * y = y * z"]}
{"goal":"real_lte_imp_rat_lte","proof":["not Real.from_rat(p) <= Real.from_rat(q) or not Real.from_rat(p).gt_rat(q) or Real.from_rat(q).gt_rat(q)","not q <= p or not p < q or p < p","p > q or p < q or q = p","not p > q or Real.from_rat(p).gt_rat(q)","q <= p or p <= q","q <= p","q != p or p <= q","q != p","not Real.from_rat(q).gt_rat(q)","not p < p","not Real.from_rat(p).gt_rat(q) or Real.from_rat(q).gt_rat(q)","not Real.from_rat(p).gt_rat(q)","not p < q or p < p","not p < q","not p > q","p > q"]}
{"goal":"pos_lte_imp_pos","proof":["not x <= y or not x.gt_rat(Rat.0) or y.gt_rat(Rat.0)","x.gt_rat(Rat.0) = x.is_positive","y.gt_rat(Rat.0) = y.is_positive","not y.gt_rat(Rat.0)","x.gt_rat(Rat.0)","not x.gt_rat(Rat.0) or y.gt_rat(Rat.0)"]}
{"goal":"exists(k0: Rat) { k0.is_positive and Real.from_rat(k0) < x }","proof":["let s0: Real -> Rat satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or Real.from_rat(s0(x1)) < x1 } }","not Real.from_rat(s0(x)) < x or not s0(x).is_positive","not x.is_positive or Real.from_rat(s0(x)) < x","not x.is_positive or s0(x).is_positive","s0(x).is_positive","Real.from_rat(s0(x)) < x","not Real.from_rat(s0(x)) < x"]}
{"goal":"eventual_lb(lift_seq(rat_seq(x)), Real.from_rat(x_lb))","proof":["not Real.from_rat(x_lb) < limit(lift_seq(rat_seq(x))) or not converges(lift_seq(rat_seq(x))) or eventual_lb(lift_seq(rat_seq(x)), Real.from_rat(x_lb))","limit(lift_seq(rat_seq(x))) = limit_rat(rat_seq(x))","limit_rat(rat_seq(x)) = x","converges(lift_seq(rat_seq(x)))","not Real.from_rat(x_lb) < limit(lift_seq(rat_seq(x)))"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies Real.from_rat(x_lb) <= lift_seq(rat_seq(x))(x0) } }","proof":["let (s1: (Nat -> Real, Real) -> Nat, s2: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Nat) { not s1(x2, x3) <= x4 or not eventual_lb(x2, x3) or x3 <= x2(x4) } and forall(x5: Nat, x6: Nat -> Real, x7: Real) { x5 <= s2(x6, x7, x5) or eventual_lb(x6, x7) } and forall(x8: Real, x9: Nat -> Real, x10: Nat) { not x8 <= x9(s2(x9, x8, x10)) or eventual_lb(x9, x8) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not Real.from_rat(x_lb) <= lift_seq(rat_seq(x), s0(x1)) } }","not Real.from_rat(x_lb) <= lift_seq(rat_seq(x), s0(s1(lift_seq(rat_seq(x)), Real.from_rat(x_lb))))","s1(lift_seq(rat_seq(x)), Real.from_rat(x_lb)) <= s0(s1(lift_seq(rat_seq(x)), Real.from_rat(x_lb)))","not s1(lift_seq(rat_seq(x)), Real.from_rat(x_lb)) <= s0(s1(lift_seq(rat_seq(x)), Real.from_rat(x_lb))) or not eventual_lb(lift_seq(rat_seq(x)), Real.from_rat(x_lb)) or Real.from_rat(x_lb) <= lift_seq(rat_seq(x), s0(s1(lift_seq(rat_seq(x)), Real.from_rat(x_lb))))","not eventual_lb(lift_seq(rat_seq(x)), Real.from_rat(x_lb)) or Real.from_rat(x_lb) <= lift_seq(rat_seq(x), s0(s1(lift_seq(rat_seq(x)), Real.from_rat(x_lb))))"]}
{"goal":"exists(k0: Rat) { k0.is_positive and Real.from_rat(k0) < y }","proof":["let s0: Real -> Rat satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or Real.from_rat(s0(x1)) < x1 } }","not Real.from_rat(s0(y)) < y or not s0(y).is_positive","not y.is_positive or Real.from_rat(s0(y)) < y","not y.is_positive or s0(y).is_positive","s0(y).is_positive","Real.from_rat(s0(y)) < y","not Real.from_rat(s0(y)) < y"]}
{"goal":"eventual_lb(lift_seq(rat_seq(y)), Real.from_rat(y_lb))","proof":["not Real.from_rat(y_lb) < limit(lift_seq(rat_seq(y))) or not converges(lift_seq(rat_seq(y))) or eventual_lb(lift_seq(rat_seq(y)), Real.from_rat(y_lb))","limit(lift_seq(rat_seq(y))) = limit_rat(rat_seq(y))","limit_rat(rat_seq(y)) = y","converges(lift_seq(rat_seq(y)))","not Real.from_rat(y_lb) < limit(lift_seq(rat_seq(y)))"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies Real.from_rat(y_lb) <= lift_seq(rat_seq(y))(x0) } }","proof":["let (s1: (Nat -> Real, Real) -> Nat, s2: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Nat) { not s1(x2, x3) <= x4 or not eventual_lb(x2, x3) or x3 <= x2(x4) } and forall(x5: Nat, x6: Nat -> Real, x7: Real) { x5 <= s2(x6, x7, x5) or eventual_lb(x6, x7) } and forall(x8: Real, x9: Nat -> Real, x10: Nat) { not x8 <= x9(s2(x9, x8, x10)) or eventual_lb(x9, x8) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not Real.from_rat(y_lb) <= lift_seq(rat_seq(y), s0(x1)) } }","not Real.from_rat(y_lb) <= lift_seq(rat_seq(y), s0(s1(lift_seq(rat_seq(y)), Real.from_rat(y_lb))))","s1(lift_seq(rat_seq(y)), Real.from_rat(y_lb)) <= s0(s1(lift_seq(rat_seq(y)), Real.from_rat(y_lb)))","not s1(lift_seq(rat_seq(y)), Real.from_rat(y_lb)) <= s0(s1(lift_seq(rat_seq(y)), Real.from_rat(y_lb))) or not eventual_lb(lift_seq(rat_seq(y)), Real.from_rat(y_lb)) or Real.from_rat(y_lb) <= lift_seq(rat_seq(y), s0(s1(lift_seq(rat_seq(y)), Real.from_rat(y_lb))))","not eventual_lb(lift_seq(rat_seq(y)), Real.from_rat(y_lb)) or Real.from_rat(y_lb) <= lift_seq(rat_seq(y), s0(s1(lift_seq(rat_seq(y)), Real.from_rat(y_lb))))"]}
{"goal":"exists(k0: Nat) { nx <= k0 and ny <= k0 }","proof":["let s0: Nat satisfy { true }","let s1: (Nat, Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat, x2: Nat) { x0 <= s1(x0, x1, x2) } and forall(x3: Nat, x4: Nat, x5: Nat) { x3 <= s1(x4, x3, x5) } and forall(x6: Nat, x7: Nat, x8: Nat) { x6 <= s1(x7, x8, x6) } }","not ny <= s1(ny, s0, nx) or not nx <= s1(ny, s0, nx)","nx <= s1(ny, s0, nx)","ny <= s1(ny, s0, nx)","not nx <= s1(ny, s0, nx)"]}
{"goal":"nx <= i","proof":["not nx <= n or not n <= i or nx <= i","not n <= i or not nx <= n"]}
{"goal":"Real.from_rat(x_lb) <= lift_seq(rat_seq(x))(i)","proof":["not nx <= i or Real.from_rat(x_lb) <= lift_seq(rat_seq(x), i)"]}
{"goal":"Real.from_rat(x_lb) <= Real.from_rat(rat_seq(x)(i))","proof":["lift_seq(rat_seq(x), i) = Real.from_rat(rat_seq(x, i))"]}
{"goal":"x_lb <= rat_seq(x)(i)","proof":["not Real.from_rat(x_lb) <= Real.from_rat(rat_seq(x, i)) or x_lb <= rat_seq(x, i)"]}
{"goal":"ny <= i","proof":["not ny <= n or not n <= i or ny <= i","not n <= i or not ny <= n"]}
{"goal":"Real.from_rat(y_lb) <= lift_seq(rat_seq(y))(i)","proof":["not ny <= i or Real.from_rat(y_lb) <= lift_seq(rat_seq(y), i)"]}
{"goal":"y_lb <= rat_seq(y)(i)","proof":["not Real.from_rat(y_lb) <= Real.from_rat(rat_seq(y, i)) or y_lb <= rat_seq(y, i)","lift_seq(rat_seq(y), i) = Real.from_rat(rat_seq(y, i))","not Real.from_rat(y_lb) <= Real.from_rat(rat_seq(y, i))","Real.from_rat(y_lb) <= Real.from_rat(rat_seq(y, i))"]}
{"goal":"x_lb * y_lb <= rat_seq(x)(i) * rat_seq(y)(i)","proof":["not x_lb <= rat_seq(x, i) or not y_lb <= rat_seq(y, i) or x_lb * y_lb <= rat_seq(x, i) * rat_seq(y, i) or x_lb.is_negative or y_lb.is_negative","y_lb.is_negative or x_lb.is_negative","not x_lb.is_negative or not x_lb.is_positive","not y_lb.is_negative or not y_lb.is_positive","not y_lb.is_negative","not x_lb.is_negative","x_lb.is_negative"]}
{"goal":"x_lb * y_lb <= mul_rat_seq(rat_seq(x), rat_seq(y))(i)","proof":["rat_seq(x, i) * rat_seq(y, i) = mul_rat_seq(rat_seq(x), rat_seq(y), i)"]}
{"goal":"Real.from_rat(x_lb * y_lb) <= lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y)))(i)","proof":["not x_lb * y_lb <= mul_rat_seq(rat_seq(x), rat_seq(y), i) or Real.from_rat(x_lb * y_lb) <= Real.from_rat(mul_rat_seq(rat_seq(x), rat_seq(y), i))","lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), i) = Real.from_rat(mul_rat_seq(rat_seq(x), rat_seq(y), i))","Real.from_rat(x_lb * y_lb) <= Real.from_rat(mul_rat_seq(rat_seq(x), rat_seq(y), i))","not Real.from_rat(x_lb * y_lb) <= Real.from_rat(mul_rat_seq(rat_seq(x), rat_seq(y), i))"]}
{"goal":"eventual_lb(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y))), Real.from_rat(x_lb * y_lb))","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not s0(x0, x1) <= x2 or not eventual_lb(x0, x1) or x1 <= x0(x2) } and forall(x3: Nat, x4: Nat -> Real, x5: Real) { x3 <= s1(x4, x5, x3) or eventual_lb(x4, x5) } and forall(x6: Real, x7: Nat -> Real, x8: Nat) { not x6 <= x7(s1(x7, x6, x8)) or eventual_lb(x7, x6) } }","not n <= s1(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y))), Real.from_rat(x_lb * y_lb), n) or Real.from_rat(x_lb * y_lb) <= lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), s1(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y))), Real.from_rat(x_lb * y_lb), n))","not Real.from_rat(x_lb * y_lb) <= lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), s1(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y))), Real.from_rat(x_lb * y_lb), n)) or eventual_lb(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y))), Real.from_rat(x_lb * y_lb))","n <= s1(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y))), Real.from_rat(x_lb * y_lb), n) or eventual_lb(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y))), Real.from_rat(x_lb * y_lb))","n <= s1(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y))), Real.from_rat(x_lb * y_lb), n)","not Real.from_rat(x_lb * y_lb) <= lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y)), s1(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y))), Real.from_rat(x_lb * y_lb), n))"]}
{"goal":"Real.from_rat(x_lb * y_lb) <= limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y)))","proof":["not converges(lift_seq(rat_seq(x))) or not converges(lift_seq(rat_seq(y))) or converges(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y))))","not converges(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y)))) or not eventual_lb(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y))), Real.from_rat(x_lb * y_lb)) or Real.from_rat(x_lb * y_lb) <= limit(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y))))","limit(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y)))) = limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y)))","converges(lift_seq(rat_seq(x)))","converges(lift_seq(rat_seq(y)))","not Real.from_rat(x_lb * y_lb) <= limit(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y))))","not converges(lift_seq(mul_rat_seq(rat_seq(x), rat_seq(y))))"]}
{"goal":"Real.from_rat(x_lb * y_lb) <= x * y","proof":["limit_rat(mul_rat_seq(rat_seq(x), rat_seq(y))) = x * y"]}
{"goal":"(x_lb * y_lb).is_positive","proof":["not x_lb.is_positive or not y_lb.is_positive or (x_lb * y_lb).is_positive"]}
{"goal":"Real.from_rat(x_lb * y_lb).is_positive","proof":["not (x_lb * y_lb).is_positive or Real.from_rat(x_lb * y_lb).is_positive"]}
{"goal":"mul_pos_pos","proof":["not Real.from_rat(x_lb * y_lb).is_positive or not Real.from_rat(x_lb * y_lb) <= x * y or (x * y).is_positive"]}
{"goal":"mul_neg_pos","proof":["not (-x).is_positive or not y.is_positive or (-x * y).is_positive","--x * y = -(-x * y)","not (--x).is_negative or (-x).is_positive","not (-x * y).is_positive or (-(-x * y)).is_negative","--x = x","not (--x * y).is_negative","not (-(-x * y)).is_negative","(--x).is_negative","not (-x * y).is_positive","(-x).is_positive","not (-x).is_positive"]}
{"goal":"mul_pos_neg","proof":["not x.is_positive or not y.is_negative or (y * x).is_negative","y * x = x * y","not (y * x).is_negative"]}
{"goal":"mul_neg_neg","proof":["not (-x).is_positive or not y.is_negative or (-x * y).is_negative","-x * y = -(x * y)","not (-(x * y)).is_negative or (x * y).is_positive","not (--x).is_negative or (-x).is_positive","not (-(x * y)).is_negative","--x = x","(--x).is_negative","not (-x * y).is_negative","(-x).is_positive","not (-x).is_positive"]}
{"goal":"x * y = Real.0","proof":["Real.0 * y != Real.0","Real.0 * y = Real.0"]}
{"goal":"not (x * y).is_negative","proof":[]}
{"goal":"x.is_positive","proof":["x.is_positive or Real.0 = x or x.is_negative"]}
{"goal":"x * y = Real.0","proof":["x * Real.0 != Real.0","x * Real.0 = Real.0 * x","Real.0 * x != Real.0","Real.0 * x = Real.0"]}
{"goal":"not (x * y).is_negative","proof":[]}
{"goal":"(x * y).is_positive","proof":["not x.is_positive or not y.is_positive or (x * y).is_positive","not y.is_positive","y.is_positive or Real.0 = y or y.is_negative"]}
{"goal":"not (x * y).is_negative","proof":["not (x * y).is_positive or not (x * y).is_negative"]}
{"goal":"mul_nonneg_nonneg","proof":[]}
{"goal":"x * x = Real.0","proof":["Real.0 * x != Real.0","Real.0 * x = Real.0"]}
{"goal":"x * x >= Real.0","proof":["not Real.0 >= Real.0","let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x1.gt_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2.gt_rat(s0(x2, x3)) or not x2 < x3 } }","not Real.0.gt_rat(s0(Real.0, Real.0)) or not Real.0 < Real.0","not Real.0 < Real.0 or Real.0.gt_rat(s0(Real.0, Real.0))","Real.0 < Real.0 or Real.0 >= Real.0","Real.0 < Real.0","not Real.0.gt_rat(s0(Real.0, Real.0))","Real.0.gt_rat(s0(Real.0, Real.0))"]}
{"goal":"x.is_positive","proof":[]}
{"goal":"(x * x).is_positive","proof":["not x.is_positive or not x.is_positive or (x * x).is_positive"]}
{"goal":"x * x > Real.0","proof":["not x * x <= Real.0 or not (x * x).is_positive or Real.0.is_positive","x * x > Real.0 or x * x <= Real.0","x * x <= Real.0","Real.0.is_positive"]}
{"goal":"x * x >= Real.0","proof":["not x * x > Real.0 or not x * x <= Real.0","x * x >= Real.0 = Real.0 <= x * x","not Real.0 <= x * x","x * x <= Real.0 or Real.0 <= x * x","not x * x <= Real.0","x * x <= Real.0"]}
{"goal":"x.is_negative","proof":["x.is_positive or Real.0 = x or x.is_negative"]}
{"goal":"(x * x).is_positive","proof":["not x.is_negative or not x.is_negative or (x * x).is_positive"]}
{"goal":"x * x > Real.0","proof":["not x * x <= Real.0 or not (x * x).is_positive or Real.0.is_positive","x * x > Real.0 or x * x <= Real.0","x * x <= Real.0","Real.0.is_positive"]}
{"goal":"x * x >= Real.0","proof":["not x * x > Real.0 or not x * x <= Real.0","x * x >= Real.0 = Real.0 <= x * x","not Real.0 <= x * x","x * x <= Real.0 or Real.0 <= x * x","not x * x <= Real.0","x * x <= Real.0"]}
{"goal":"square_nonneg","proof":[]}
{"goal":"lt_mul_pos_right","proof":["y * z - x * z = (y - x) * z","not (y - x).is_positive or not z.is_positive or ((y - x) * z).is_positive","not (y * z - x * z).is_positive or x * z < y * z","not x < y or (y - x).is_positive","not (y * z - x * z).is_positive","not ((y - x) * z).is_positive","(y - x).is_positive","not (y - x).is_positive"]}
{"goal":"lt_mul_pos_left","proof":["z * y - z * x = z * (y - x)","not z.is_positive or not (y - x).is_positive or (z * (y - x)).is_positive","not (z * y - z * x).is_positive or z * x < z * y","not x < y or (y - x).is_positive","not (z * y - z * x).is_positive","not (z * (y - x)).is_positive","(y - x).is_positive","not (y - x).is_positive"]}
{"goal":"x * z = Real.0","proof":["x * z = z * x","z * x != Real.0","Real.0 * x != Real.0","Real.0 * x = Real.0"]}
{"goal":"y * z = Real.0","proof":["y * z = z * y","z * y != Real.0","Real.0 * y != Real.0","Real.0 * y = Real.0"]}
{"goal":"x * z = y * z","proof":["x * z != Real.0"]}
{"goal":"x * z <= y * z","proof":["not x * z <= Real.0","not Real.0 <= Real.0","not z <= Real.0","not z <= z","let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Rat, x2: Real) { not x0.gt_rat(x1) or not x0 <= x2 or x2.gt_rat(x1) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not z.gt_rat(s0(z, z)) or z <= z","z.gt_rat(s0(z, z)) or z <= z","not z.gt_rat(s0(z, z))","z.gt_rat(s0(z, z))"]}
{"goal":"z.is_positive","proof":["z.is_positive or Real.0 = z or z.is_negative"]}
{"goal":"x * z = y * z","proof":["y != x"]}
{"goal":"x * z <= y * z","proof":["not x * z <= x * z","let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Rat, x2: Real) { not x0.gt_rat(x1) or not x0 <= x2 or x2.gt_rat(x1) } and forall(x3: Real, x4: Real) { x3.gt_rat(s0(x3, x4)) or x3 <= x4 } and forall(x5: Real, x6: Real) { not x5.gt_rat(s0(x6, x5)) or x6 <= x5 } }","not (x * z).gt_rat(s0(x * z, x * z)) or x * z <= x * z","(x * z).gt_rat(s0(x * z, x * z)) or x * z <= x * z","not (x * z).gt_rat(s0(x * z, x * z))","(x * z).gt_rat(s0(x * z, x * z))"]}
{"goal":"x < y","proof":["not x <= y or x < y or y = x"]}
{"goal":"x * z < y * z","proof":["not x < y or not z.is_positive or x * z < y * z"]}
{"goal":"x * z <= y * z","proof":["not x * z < y * z or x * z <= y * z"]}
{"goal":"lte_mul_nonneg_right","proof":[]}
{"goal":"lte_mul_nonneg_left","proof":["not x <= y or x * z <= y * z or z.is_negative","x * z = z * x","y * z = z * y","not z * x <= y * z","x * z <= y * z or z.is_negative","not x * z <= y * z","x * z <= y * z"]}
{"goal":"not y < x","proof":["not x < y or not y < x or x < x","let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x1.gt_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2.gt_rat(s0(x2, x3)) or not x2 < x3 } }","not x.gt_rat(s0(x, x)) or not x < x","not x < x or x.gt_rat(s0(x, x))","not x < y or x < x","x < x","not x.gt_rat(s0(x, x))","x.gt_rat(s0(x, x))"]}
{"goal":"y != x","proof":["not x < x","not x < y"]}
{"goal":"x - y != Real.0","proof":["x - y != Real.0 or y = x"]}
{"goal":"(x - y).is_negative","proof":["not (x - y).is_positive or y < x","(x - y).is_positive or x - y = Real.0 or (x - y).is_negative","not (x - y).is_positive","(x - y).is_positive"]}
{"goal":"((x - y) * z).is_positive","proof":["not (x - y).is_negative or not z.is_negative or ((x - y) * z).is_positive"]}
{"goal":"lt_mul_neg_right","proof":["x * z - y * z = (x - y) * z","not (x * z - y * z).is_positive or y * z < x * z","(x * z - y * z).is_positive","not (x * z - y * z).is_positive"]}
{"goal":"lt_mul_neg_left","proof":["not x < y or not z.is_negative or y * z < x * z","x * z = z * x","y * z = z * y","not y * z < z * x","not z.is_negative or y * z < x * z","not y * z < x * z","y * z < x * z"]}
{"goal":"add_neg_neg","proof":["not x < Real.0 or not y < Real.0 or x + y < Real.0 + Real.0","not x + y < Real.0 or (x + y).is_negative","not x + y < Real.0","not x.is_negative or x < Real.0","not y.is_negative or y < Real.0","Real.0 + Real.0 = Real.0","y < Real.0","x < Real.0","not x + y < Real.0 + Real.0"]}
{"goal":"zero_lte_imp_non_neg","proof":["not x <= Real.0 or not Real.0 <= x or Real.0 = x","x <= Real.0 or x > Real.0","not x > Real.0 or x.is_positive","not x.is_negative or not x.is_positive","not x.is_positive","not x.is_negative or Real.0 != x","Real.0 != x","not x <= Real.0","not x > Real.0","x > Real.0"]}
{"goal":"non_neg_imp_zero_lte","proof":["not x <= Real.0 or not x.is_positive or Real.0.is_positive","x <= Real.0 or Real.0 <= x","x <= Real.0","x.is_negative or x.is_positive or Real.0 = x","x <= x","x.is_positive or Real.0 = x","not x.is_positive","Real.0 = x"]}
{"goal":"Real.from_rat(a) * Real.from_rat(b) = limit_rat(mr)","proof":["limit_rat(mul_rat_seq(rat_seq(Real.from_rat(a)), rat_seq(Real.from_rat(b)))) = Real.from_rat(a) * Real.from_rat(b)"]}
{"goal":"eq_seq(rat_seq(Real.from_rat(a)), const_rat_seq(a))","proof":["not converges_to(lift_seq(const_rat_seq(a)), limit_rat(rat_seq(Real.from_rat(a)))) or not converges(lift_seq(rat_seq(Real.from_rat(a)))) or eq_seq(rat_seq(Real.from_rat(a)), const_rat_seq(a))","converges_to(lift_seq(const_rat_seq(a)), Real.from_rat(a))","limit_rat(rat_seq(Real.from_rat(a))) = Real.from_rat(a)","converges(lift_seq(rat_seq(Real.from_rat(a))))","not converges_to(lift_seq(const_rat_seq(a)), limit_rat(rat_seq(Real.from_rat(a))))"]}
{"goal":"eq_seq(rat_seq(Real.from_rat(b)), const_rat_seq(b))","proof":["not converges_to(lift_seq(const_rat_seq(b)), limit_rat(rat_seq(Real.from_rat(b)))) or not converges(lift_seq(rat_seq(Real.from_rat(b)))) or eq_seq(rat_seq(Real.from_rat(b)), const_rat_seq(b))","converges_to(lift_seq(const_rat_seq(b)), Real.from_rat(b))","limit_rat(rat_seq(Real.from_rat(b))) = Real.from_rat(b)","converges(lift_seq(rat_seq(Real.from_rat(b))))","not converges_to(lift_seq(const_rat_seq(b)), limit_rat(rat_seq(Real.from_rat(b))))"]}
{"goal":"eq_seq(mul_rat_seq(const_rat_seq(a), const_rat_seq(b)), mr)","proof":["not eq_seq(const_rat_seq(a), rat_seq(Real.from_rat(a))) or not eq_seq(const_rat_seq(b), rat_seq(Real.from_rat(b))) or eq_seq(mul_rat_seq(const_rat_seq(a), const_rat_seq(b)), mul_rat_seq(rat_seq(Real.from_rat(a)), rat_seq(Real.from_rat(b))))","not eq_seq(rat_seq(Real.from_rat(a)), const_rat_seq(a)) or eq_seq(const_rat_seq(a), rat_seq(Real.from_rat(a)))","not eq_seq(rat_seq(Real.from_rat(b)), const_rat_seq(b)) or eq_seq(const_rat_seq(b), rat_seq(Real.from_rat(b)))","eq_seq(const_rat_seq(b), rat_seq(Real.from_rat(b)))","eq_seq(const_rat_seq(a), rat_seq(Real.from_rat(a)))","not eq_seq(mul_rat_seq(const_rat_seq(a), const_rat_seq(b)), mul_rat_seq(rat_seq(Real.from_rat(a)), rat_seq(Real.from_rat(b))))"]}
{"goal":"mul_rat_seq(const_rat_seq(a), const_rat_seq(b)) = const_rat_seq(a * b)","proof":["let s0: Nat satisfy { mul_rat_seq(const_rat_seq(a), const_rat_seq(b), s0) != const_rat_seq(a * b, s0) }","const_rat_seq(a, s0) * const_rat_seq(b, s0) = mul_rat_seq(const_rat_seq(a), const_rat_seq(b), s0)","const_rat_seq(a * b, s0) = a * b","const_rat_seq(a, s0) = a","const_rat_seq(b, s0) = b"]}
{"goal":"mul_from_rat","proof":["Real.from_rat(a * b) != limit_rat(mr)","not eq_seq(const_rat_seq(a * b), mr) or limit_rat(const_rat_seq(a * b)) = limit_rat(mr)","eq_seq(const_rat_seq(a * b), mr)","limit_rat(const_rat_seq(a * b)) = Real.from_rat(a * b)","limit_rat(const_rat_seq(a * b)) = limit_rat(mr)","limit_rat(const_rat_seq(a * b)) != limit_rat(mr)"]}
{"goal":"gt_pos_is_pos","proof":["let s0: Real satisfy { true }","not a < b or not s0.is_close(s0, a) or s0.is_close(s0, b)","not a.is_positive or s0.is_close(s0, a)","not s0.is_close(s0, b) or b.is_positive","not s0.is_close(s0, b)","not s0.is_close(s0, a)"]}
{"goal":"exists(k0: Rat) { a < Real.from_rat(k0) }","proof":["let s0: Nat satisfy { true }","let s1: (Real, Rat) -> Rat satisfy { forall(x0: Rat, x1: Real) { not x0.is_positive or Real.from_rat(s1(x1, x0)) < x1 } and forall(x2: Rat, x3: Real) { not x2.is_positive or x3 < Real.from_rat(s1(x3, x2) + x2) } }","not a < Real.from_rat(s1(a, rat.iop(s0)) + rat.iop(s0))","not rat.iop(s0).is_positive or a < Real.from_rat(s1(a, rat.iop(s0)) + rat.iop(s0))","not rat.iop(s0).is_positive","rat.iop(s0).is_positive"]}
{"goal":"Real.from_rat(a_ub).is_positive","proof":["not Real.from_rat(a_ub) <= a or not a <= Real.from_rat(a_ub) or Real.from_rat(a_ub) = a","not a < Real.from_rat(a_ub) or not a.is_positive or Real.from_rat(a_ub).is_positive","not a.is_positive","Real.from_rat(a_ub) <= a or Real.from_rat(a_ub) > a","not a < Real.from_rat(a_ub) or a <= Real.from_rat(a_ub)","a.is_negative or a.is_positive or Real.0 = a","Real.0 = a","not Real.from_rat(a_ub) > Real.0 or Real.from_rat(a_ub).is_positive","not Real.from_rat(a_ub) > Real.0","not a < Real.from_rat(a_ub) or Real.from_rat(a_ub) != a","Real.from_rat(a_ub) != a","not Real.from_rat(a_ub) > a","a <= Real.from_rat(a_ub)","Real.from_rat(a_ub) <= a","not Real.from_rat(a_ub) <= a"]}
{"goal":"a_ub.is_positive","proof":["Real.from_rat(a_ub).abs = Real.from_rat(a_ub.abs)","-Real.from_rat(a_ub) = Real.from_rat(-a_ub)","a_ub.abs = -a_ub or a_ub.is_positive","a_ub.abs = -a_ub","not Real.from_rat(a_ub).is_positive or Real.from_rat(a_ub).abs = Real.from_rat(a_ub)","not Real.from_rat(a_ub).is_positive or (-Real.from_rat(a_ub)).is_negative","not Real.from_rat(a_ub).is_negative or not Real.from_rat(a_ub).is_positive","not Real.from_rat(a_ub).is_negative","(-Real.from_rat(a_ub)).is_negative","Real.from_rat(a_ub).abs = Real.from_rat(a_ub)"]}
{"goal":"exists(k0: Rat) { k0.is_positive and Real.from_rat(k0) < b }","proof":["let s0: Real -> Rat satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or Real.from_rat(s0(x1)) < x1 } }","not Real.from_rat(s0(b)) < b or not s0(b).is_positive","not b.is_positive or Real.from_rat(s0(b)) < b","not b.is_positive or s0(b).is_positive","s0(b).is_positive","Real.from_rat(s0(b)) < b","not Real.from_rat(s0(b)) < b"]}
{"goal":"exists(k0: Rat) { a_ub * k0 = b_lb }","proof":["a_ub * (b_lb / a_ub) != b_lb","a_ub * (b_lb / a_ub) = b_lb or Rat.0 = a_ub","Rat.0 = a_ub","not a_ub.is_positive or Rat.0 != a_ub"]}
{"goal":"r.is_positive","proof":["not (a_ub * r).is_positive or not a_ub.is_positive or r.is_positive","not (a_ub * r).is_positive or not a_ub.is_positive","(a_ub * r).is_positive","not (a_ub * r).is_positive"]}
{"goal":"c.is_positive","proof":["not Real.from_rat(r).is_positive","not r.is_positive or Real.from_rat(r).is_positive"]}
{"goal":"Real.from_rat(a_ub) * Real.from_rat(r) = Real.from_rat(b_lb)","proof":["Real.from_rat(a_ub) * Real.from_rat(r) = Real.from_rat(a_ub * r)"]}
{"goal":"Real.from_rat(a_ub) * c = Real.from_rat(b_lb)","proof":["Real.from_rat(a_ub) * Real.from_rat(r) != Real.from_rat(b_lb)"]}
{"goal":"Real.from_rat(a_ub) * c < b","proof":[]}
{"goal":"a * c < Real.from_rat(a_ub) * c","proof":["not a < Real.from_rat(a_ub) or not c.is_positive or a * c < Real.from_rat(a_ub) * c"]}
{"goal":"a * c < b","proof":["not a * c < Real.from_rat(a_ub) * c or not Real.from_rat(a_ub) * c <= b or a * c < b","not Real.from_rat(a_ub) * c < b or Real.from_rat(a_ub) * c <= b","not a * c < Real.from_rat(a_ub) * c or not Real.from_rat(a_ub) * c <= b","Real.from_rat(a_ub) * c <= b","not Real.from_rat(a_ub) * c <= b"]}
{"goal":"exists_small_mul","proof":["not a * c < b or not c.is_positive","not a * c < b"]}
{"goal":"not a.abs.is_negative","proof":["not a.abs >= Real.0 or not a.abs < Real.0","not a.abs.is_negative or a.abs < Real.0","a.abs < Real.0","a.abs >= Real.0"]}
{"goal":"exists_small_mul_variant","proof":["let s0: (Real, Real) -> Real satisfy { forall(x0: Real, x1: Real) { not x0.is_positive or s0(x1, x0).is_positive or x1.is_negative } and forall(x2: Real, x3: Real) { not x2.is_positive or x3 * s0(x3, x2) < x2 or x3.is_negative } }","not a.abs * s0(a.abs, b) < b or not s0(a.abs, b).is_positive","not b.is_positive or a.abs * s0(a.abs, b) < b or a.abs.is_negative","not b.is_positive or s0(a.abs, b).is_positive or a.abs.is_negative","s0(a.abs, b).is_positive or a.abs.is_negative","s0(a.abs, b).is_positive","not b.is_positive or a.abs * s0(a.abs, b) < b","a.abs * s0(a.abs, b) < b"]}
{"goal":"not a.is_negative","proof":["not a < Real.0 or not a.is_positive or Real.0.is_positive","not a.is_negative or a < Real.0","a < Real.0","Real.0.is_positive"]}
{"goal":"exists_small_mul_variant_2","proof":["let s0: (Real, Real) -> Real satisfy { forall(x0: Real, x1: Real) { not x0.is_positive or s0(x1, x0).is_positive or x1.is_negative } and forall(x2: Real, x3: Real) { not x2.is_positive or x3 * s0(x3, x2) < x2 or x3.is_negative } }","not s0(a, b) * a < b or not s0(a, b).is_positive","not b.is_positive or a * s0(a, b) < b or a.is_negative","not b.is_positive or s0(a, b).is_positive or a.is_negative","s0(a, b) * a = a * s0(a, b)","not b.is_positive or s0(a, b).is_positive","s0(a, b).is_positive","a * s0(a, b) < b or a.is_negative","a * s0(a, b) < b","not s0(a, b) * a < b","s0(a, b) * a < b"]}
{"goal":"a.abs = -a","proof":["not a.is_negative or a.abs = -a"]}
{"goal":"b.abs = -b","proof":["not b.is_negative or b.abs = -b"]}
{"goal":"a.abs * b.abs = (a * b).abs","proof":["a.abs * -b != (a * b).abs","not a.is_negative or not b.is_negative or (a * b).is_positive","-a * -b = -(-a * b)","-a * b = -(a * b)","-a * -b != (a * b).abs","not (a * b).is_positive or (a * b).abs = a * b","--(a * b) = a * b","-(-a * b) != (a * b).abs","--(a * b) != (a * b).abs","(a * b).abs != a * b","not a.is_negative or (a * b).is_positive","not (a * b).is_positive","(a * b).is_positive"]}
{"goal":"b.abs = b","proof":["b.abs = b or b.is_negative"]}
{"goal":"not a.is_positive","proof":["not a <= a.abs or not a.is_positive or a.abs.is_positive","not a <= a.abs or a.abs.is_positive","not a.is_positive or (-a).is_negative","(-a).is_negative","a <= a.abs","a.abs.is_positive","(-a).is_positive","not (-a).is_negative or not (-a).is_positive"]}
{"goal":"not (-a).is_negative","proof":["not (-a).is_negative or a.is_positive"]}
{"goal":"(-a * b).abs = -a * b","proof":["not (-a * b).is_negative or (-a).is_negative or b.is_negative","(-a * b).abs = -a * b or (-a * b).is_negative","(-a * b).is_negative"]}
{"goal":"a.abs * b.abs = (a * b).abs","proof":["-a * b.abs = -(a * b.abs)","(-(a * b)).abs = (a * b).abs"]}
{"goal":"a.abs = a","proof":["a.abs = a or a.is_negative"]}
{"goal":"b.abs = -b","proof":["not b.is_negative or b.abs = -b"]}
{"goal":"not b.is_positive","proof":["not b <= b.abs or not b.is_positive or b.abs.is_positive","not b <= b.abs or b.abs.is_positive","not b.is_positive or (-b).is_negative","(-b).is_negative","b <= b.abs","b.abs.is_positive","(-b).is_positive","not (-b).is_negative or not (-b).is_positive"]}
{"goal":"not (-b).is_negative","proof":["not (-b).is_negative or b.is_positive"]}
{"goal":"(a * -b).abs = a * -b","proof":["not (a * -b).is_negative or a.is_negative or (-b).is_negative","(a * -b).abs = a * -b or (a * -b).is_negative","(a * -b).is_negative"]}
{"goal":"a.abs * b.abs = (a * b).abs","proof":["a.abs * -b = -(a.abs * b)","(-(a * b)).abs = (a * b).abs"]}
{"goal":"b.abs = b","proof":["b.abs = b or b.is_negative"]}
{"goal":"a.abs * b.abs = (a * b).abs","proof":["a.abs * b != (a * b).abs","(a * b).abs != a * b","not (a * b).is_negative or a.is_negative or b.is_negative","not (a * b).is_negative or a.is_negative","not (a * b).is_negative","(a * b).abs = a * b or (a * b).is_negative"]}
{"goal":"mul_abs","proof":[]}
{"goal":"(a * a).is_positive","proof":["not a.is_positive or not a.is_positive or (a * a).is_positive"]}
{"goal":"false","proof":["Real.0.is_positive"]}
{"goal":"(a * a).is_positive","proof":["not a.is_negative or not a.is_negative or (a * a).is_positive"]}
{"goal":"false","proof":["Real.0.is_positive"]}
{"goal":"square_zero_imp_zero","proof":["a.is_positive or Real.0 = a or a.is_negative"]}
{"goal":"forall(x0: Real, x1: Real, x2: Real) { x0 * (x1 * x2) = x0 * x1 * x2 }","proof":["let (s0: Real, s1: Real, s2: Real) satisfy { s0 * (s1 * s2) != s0 * s1 * s2 }","s0 * (s1 * s2) = s0 * s1 * s2"]}
{"goal":"forall(x0: Real) { Semigroup.mul[Real](Real.1, x0) = x0 } and forall(x1: Real) { Semigroup.mul[Real](x1, Real.1) = x1 }","proof":["let (s0: Real, s1: Real) satisfy { s1 * Real.1 != s1 or Real.1 * s0 != s0 }","s1 * Real.1 = Real.1 * s1","Real.1 * s0 = s0","Real.1 * s1 = s1","s1 * Real.1 != s1"]}
{"goal":"forall(x0: Real, x1: Real, x2: Real) { Semigroup.mul[Real](x0, lib(add_semigroup).AddSemigroup.add[Real](x1, x2)) = lib(add_semigroup).AddSemigroup.add[Real](Semigroup.mul[Real](x0, x1), Semigroup.mul[Real](x0, x2)) } and forall(x3: Real, x4: Real, x5: Real) { Semigroup.mul[Real](lib(add_semigroup).AddSemigroup.add[Real](x3, x4), x5) = lib(add_semigroup).AddSemigroup.add[Real](Semigroup.mul[Real](x3, x5), Semigroup.mul[Real](x4, x5)) } and forall(x6: Real) { Semigroup.mul[Real](x6, lib(add_monoid).AddMonoid.0[Real]) = lib(add_monoid).AddMonoid.0[Real] } and forall(x7: Real) { Semigroup.mul[Real](lib(add_monoid).AddMonoid.0[Real], x7) = lib(add_monoid).AddMonoid.0[Real] }","proof":["let (s0: Real, s1: Real, s2: Real, s3: Real, s4: Real, s5: Real, s6: Real, s7: Real) satisfy { s3 * s5 + s4 * s5 != (s3 + s4) * s5 or s0 * s1 + s0 * s2 != s0 * (s1 + s2) or Real.0 * s7 != Real.0 or s6 * Real.0 != Real.0 }","s3 * s5 + s4 * s5 = (s3 + s4) * s5","s0 * s1 + s0 * s2 = s0 * (s1 + s2)","s6 * Real.0 = Real.0 * s6","Real.0 * s6 = Real.0","Real.0 * s7 = Real.0","s6 * Real.0 != Real.0"]}
{"goal":"forall(x0: Real, x1: Real) { Semigroup.mul[Real](x0, x1) = Semigroup.mul[Real](x1, x0) }","proof":["let (s0: Real, s1: Real) satisfy { s1 * s0 != s0 * s1 }","s1 * s0 = s0 * s1"]}
