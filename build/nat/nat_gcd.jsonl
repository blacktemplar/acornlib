{"goal":"all_false_below","proof":["let s0: Nat satisfy { f(s0) }","let s1: Nat satisfy { true }","let s2: (Nat, Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat, x2: Nat) { x0 < s2(x0, x1, x2) } and forall(x3: Nat, x4: Nat, x5: Nat) { x3 < s2(x4, x3, x5) } and forall(x6: Nat, x7: Nat, x8: Nat) { x6 < s2(x7, x8, x6) } }","false_below(f, s2(s1, s1, s0))","not false_below(f, s2(s1, s1, s0)) or not s0 < s2(s1, s1, s0) or not f(s0)","not s0 < s2(s1, s1, s0)","s0 < s2(s1, s1, s0)"]}
{"goal":"is_min(f, k)","proof":["not false_below(f, k) or not f(k) or is_min(f, k)"]}
{"goal":"has_min(f, k)","proof":["not is_min(f, k) or has_min(f, k)","not is_min(f, k)"]}
{"goal":"exists(k0: Nat) { k0 < k and f(k0) }","proof":["let s0: (Nat -> Bool, Nat) -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat, x2: Nat) { not false_below(x0, x1) or not x2 < x1 or not x0(x2) } and forall(x3: Nat -> Bool, x4: Nat) { s0(x3, x4) < x4 or false_below(x3, x4) } and forall(x5: Nat -> Bool, x6: Nat) { false_below(x5, x6) or x5(s0(x5, x6)) } }","not s0(f, k) < k or not f(s0(f, k))","s0(f, k) < k or false_below(f, k)","false_below(f, k) or f(s0(f, k))","f(s0(f, k))","s0(f, k) < k","not s0(f, k) < k"]}
{"goal":"has_min(f, k)","proof":["let s0: Nat satisfy { s0 < k and f(s0) }","has_min(f, s0) = g(s0)","let s1: (Nat -> Bool, Nat) -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not has_min(x0, x1) or not x0(x1) or is_min(x0, s1(x0, x1)) } and forall(x2: Nat -> Bool, x3: Nat) { has_min(x2, x3) or x2(x3) } and forall(x4: Nat -> Bool, x5: Nat, x6: Nat) { not is_min(x4, x5) or has_min(x4, x6) } }","not is_min(f, s1(f, s0)) or has_min(f, k)","not has_min(f, s0) or not f(s0) or is_min(f, s1(f, s0))","not is_min(f, s1(f, s0))","not has_min(f, s0)","not g(s0)","not s0 < k or not true_below(g, k) or g(s0)","not s0 < k or g(s0)"]}
{"goal":"has_min(f, k)","proof":["has_min(f, k) or f(k)"]}
{"goal":"g(k)","proof":["has_min(f, k) = g(k)"]}
{"goal":"g(n)","proof":["let s0: Nat satisfy { forall(x0: Nat) { true_below(g, s0) or g(x0) } and forall(x1: Nat) { not g(s0) or g(x1) } }","not g(s0) or g(n)","not g(s0)","not true_below(g, s0) or g(s0)","true_below(g, s0) or g(s0)","not true_below(g, s0)","true_below(g, s0)"]}
{"goal":"has_min","proof":["let s0: (Nat -> Bool, Nat) -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not has_min(x0, x1) or not x0(x1) or is_min(x0, s0(x0, x1)) } and forall(x2: Nat -> Bool, x3: Nat) { has_min(x2, x3) or x2(x3) } and forall(x4: Nat -> Bool, x5: Nat, x6: Nat) { not is_min(x4, x5) or has_min(x4, x6) } }","not is_min(f, s0(f, n))","has_min(f, n) = g(n)","not has_min(f, n) or not f(n) or is_min(f, s0(f, n))","has_min(f, n)","not has_min(f, n)"]}
{"goal":"not f(x) <= f(x.suc)","proof":["not f(x) <= f(x.suc) or no_infinite_decreasing(f)"]}
{"goal":"0 + f(0) <= f(0)","proof":["nat_base.nat_mod(f(0), 0) <= f(0)","nat_base.nat_mod(f(0), 0) = f(0)","0 + f(0) = f(0)","not f(0) <= f(0)"]}
{"goal":"h(0)","proof":["0 + f(0) <= f(0) = h(0)"]}
{"goal":"x + f(x) <= f(0)","proof":["x + f(x) <= f(0) = h(x)"]}
{"goal":"not f(x) <= f(x.suc)","proof":["not f(x) <= f(x.suc)"]}
{"goal":"f(x.suc) < f(x)","proof":["not f(x) <= f(x.suc)","f(x.suc) < f(x) or f(x) <= f(x.suc)"]}
{"goal":"x + f(x.suc) < x + f(x)","proof":["not f(x.suc) < f(x) or x + f(x.suc) < x + f(x)"]}
{"goal":"(x + f(x.suc)).suc <= x + f(x)","proof":["not x + f(x.suc) < x + f(x) or (x + f(x.suc)).suc <= x + f(x)"]}
{"goal":"x.suc + f(x.suc) <= x + f(x)","proof":["(x + f(x.suc)).suc = x.suc + f(x.suc)"]}
{"goal":"x.suc + f(x.suc) <= f(0)","proof":["not x.suc + f(x.suc) <= f(x) + x or not f(x) + x <= f(0) or x.suc + f(x.suc) <= f(0)","x + f(x) = f(x) + x","f(x) + x <= f(0)","x.suc + f(x.suc) <= f(x) + x","not x.suc + f(x.suc) <= f(x) + x or not f(x) + x <= f(0)"]}
{"goal":"h(x.suc)","proof":["x.suc + f(x.suc) <= f(0) = h(x.suc)"]}
{"goal":"h(x)","proof":["let s0: Nat satisfy { forall(x0: Nat) { not h(0) or h(s0) or h(x0) } and forall(x1: Nat) { not h(s0.suc) or not h(0) or h(x1) } }","not h(0) or h(s0) or h(x)","h(s0) or h(x)","h(s0)","not h(s0.suc) or not h(0) or h(x)","not h(s0.suc) or h(x)","not h(s0.suc)","not h(s0) or h(s0.suc)"]}
{"goal":"h(f(0).suc)","proof":["h(f(0).suc)"]}
{"goal":"f(0).suc + f(f(0).suc) <= f(0)","proof":["h(f(0).suc)","f(0).suc + f(f(0).suc) <= f(0) = h(f(0).suc)"]}
{"goal":"f(0).suc <= f(0).suc + f(f(0).suc)","proof":["f(0).suc + f(f(0).suc) != f(0).suc + f(f(0).suc) or f(0).suc <= f(0).suc + f(f(0).suc)","f(0).suc <= f(0).suc + f(f(0).suc)"]}
{"goal":"z <= f(0)","proof":["not f(0).suc + f(f(0).suc) <= f(0)"]}
{"goal":"f(0).suc <= z","proof":["not f(0).suc <= f(0).suc + f(f(0).suc)"]}
{"goal":"f(0).suc <= f(0)","proof":["not f(0).suc <= f(0).suc + f(f(0).suc) or not f(0).suc + f(f(0).suc) <= f(0) or f(0).suc <= f(0)","not f(0).suc <= f(0).suc + f(f(0).suc) or not f(0).suc + f(f(0).suc) <= f(0)"]}
{"goal":"false","proof":["not f(0) < f(0).suc or not f(0).suc <= f(0)","f(0) < f(0).suc"]}
{"goal":"no_infinite_decreasing","proof":["let s0: Nat -> Nat -> Nat satisfy { forall(x0: Nat -> Nat) { not no_infinite_decreasing(x0) or x0(s0(x0)) <= x0(s0(x0).suc) } and forall(x1: Nat -> Nat, x2: Nat) { not x1(x2) <= x1(x2.suc) or no_infinite_decreasing(x1) } }","not f(s0(f)) <= f(s0(f).suc)","not no_infinite_decreasing(f) or f(s0(f)) <= f(s0(f).suc)"]}
{"goal":"exists(k0: Nat) { f(k0) <= f(k0.suc) }","proof":["let s0: Nat -> Nat -> Nat satisfy { forall(x0: Nat -> Nat) { x0(s0(x0)) <= x0(s0(x0).suc) } }","not f(s0(f)) <= f(s0(f).suc)","f(s0(f)) <= f(s0(f).suc)"]}
{"goal":"f(n) = 0 or f(n.suc) < f(n)","proof":["not decreasing_to_zero(f) or f(n.suc) < f(n) or f(n) = 0"]}
{"goal":"f(n) = 0","proof":["not f(n.suc) < f(n) or not f(n) <= f(n.suc)"]}
{"goal":"dtz_terminates","proof":["f(n) != 0"]}
{"goal":"gcd_step_n(p, x.suc) = gcd_step(gcd_step_n(p, x))","proof":["x.suc != x.suc or gcd_step_n(p, x.suc) = gcd_step(gcd_step_n(p, x))"]}
{"goal":"gcd_step_n(p, x.suc) = gcd_step(q)","proof":["gcd_step_n(p, x.suc) != gcd_step(gcd_step_n(p, x))"]}
{"goal":"f(x.suc) = gcd_step_n(p, x.suc).second","proof":["gcd_step_n(p, x.suc).second = f(x.suc)"]}
{"goal":"f(x.suc) = gcd_step(q).second","proof":["gcd_step_n(p, x.suc).second != f(x.suc)"]}
{"goal":"q.second != 0","proof":["gcd_step_n(p, x).second = f(x)"]}
{"goal":"gcd_step(q) = Pair.new(q.second, nat_base.nat_mod(q.first)(q.second))","proof":["Pair.new(q.second, nat_base.nat_mod(q.first, q.second)) = gcd_step(q) or q.second = 0"]}
{"goal":"nat_base.nat_mod(q.first)(q.second) = gcd_step(q).second","proof":["Pair.new(q.second, nat_base.nat_mod(q.first, q.second)).second = nat_base.nat_mod(q.first, q.second)"]}
{"goal":"f(x.suc) = nat_base.nat_mod(q.first)(q.second)","proof":["nat_base.nat_mod(q.first, q.second) != gcd_step(q).second"]}
{"goal":"f(x.suc) = nat_base.nat_mod(q.first)(f(x))","proof":["gcd_step_n(p, x).second = f(x)"]}
{"goal":"nat_base.nat_mod(q.first)(f(x)) < f(x)","proof":["nat_base.nat_mod(q.first, f(x)) < f(x) or f(x) = 0"]}
{"goal":"f(x.suc) < f(x)","proof":[]}
{"goal":"decreasing_to_zero(f)","proof":["let s0: Nat -> Nat -> Nat satisfy { forall(x0: Nat -> Nat, x1: Nat) { not decreasing_to_zero(x0) or x0(x1.suc) < x0(x1) or 0 = x0(x1) } and forall(x2: Nat -> Nat) { x2(s0(x2)) != 0 or decreasing_to_zero(x2) } and forall(x3: Nat -> Nat) { not x3(s0(x3).suc) < x3(s0(x3)) or decreasing_to_zero(x3) } }","f(s0(f).suc) < f(s0(f)) or f(s0(f)) = 0","not f(s0(f).suc) < f(s0(f)) or decreasing_to_zero(f)","f(s0(f)) != 0 or decreasing_to_zero(f)","f(s0(f)) != 0","not f(s0(f).suc) < f(s0(f))","f(s0(f).suc) < f(s0(f))"]}
{"goal":"gcd_terminates","proof":["let s0: Nat -> Nat -> Nat satisfy { forall(x0: Nat -> Nat) { not decreasing_to_zero(x0) or x0(s0(x0)) = 0 } }","gcd_step_n(p, s0(f)).second != 0","gcd_step_n(p, s0(f)).second = f(s0(f))","not decreasing_to_zero(f) or f(s0(f)) = 0","f(s0(f)) = 0"]}
{"goal":"exists(k0: Nat) { gcd_termination(p, k0) }","proof":["let s0: Pair<Nat, Nat> -> Nat satisfy { forall(x0: Pair<Nat, Nat>) { gcd_step_n(x0, s0(x0)).second = 0 } }","not gcd_termination(p, s0(p))","gcd_step_n(p, s0(p)).second != 0 or gcd_termination(p, s0(p))","gcd_step_n(p, s0(p)).second != 0","gcd_step_n(p, s0(p)).second = 0"]}
{"goal":"exists(k0: Nat) { is_min(gcd_termination(p), k0) }","proof":["let s0: Nat satisfy { gcd_termination(p, s0) }","let s1: (Nat -> Bool, Nat) -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(x1) or is_min(x0, s1(x0, x1)) } }","not is_min(gcd_termination(p), s1(gcd_termination(p), s0))","not gcd_termination(p, s0) or is_min(gcd_termination(p), s1(gcd_termination(p), s0))","not gcd_termination(p, s0)"]}
{"goal":"exists(k0: Nat) { is_min(gcd_termination(p), k0) }","proof":["not is_min(gcd_termination(p), num_gcd_steps(p))","is_min(gcd_termination(p), num_gcd_steps(p))"]}
{"goal":"is_min(f, num_gcd_steps(p))","proof":["not is_min(gcd_termination(p), num_gcd_steps(p))","is_min(gcd_termination(p), num_gcd_steps(p))"]}
{"goal":"gcd_termination(p)(num_gcd_steps(p))","proof":["gcd_termination(p, num_gcd_steps(p)) = f(num_gcd_steps(p))","not f(num_gcd_steps(p))","not is_min(f, num_gcd_steps(p)) or f(num_gcd_steps(p))"]}
{"goal":"num_gcd_steps_terminates","proof":["not gcd_termination(p, num_gcd_steps(p)) or gcd_step_n(p, num_gcd_steps(p)).second = 0"]}
{"goal":"a.divides(p.first)","proof":["not divides_both(a, p) or a.divides(p.first)"]}
{"goal":"a.divides(p.second)","proof":["not divides_both(a, p) or a.divides(p.second)"]}
{"goal":"a.divides(nat_base.nat_mod(p.first)(p.second))","proof":["not a.divides(p.first) or not a.divides(p.second) or a.divides(nat_base.nat_mod(p.first, p.second))"]}
{"goal":"gcd_step(p) = p","proof":["p.second != 0 or gcd_step(p) = p"]}
{"goal":"divides_both(a, gcd_step(p))","proof":["not divides_both(a, p)"]}
{"goal":"gcd_step(p) = Pair.new(p.second, nat_base.nat_mod(p.first)(p.second))","proof":["Pair.new(p.second, nat_base.nat_mod(p.first, p.second)) = gcd_step(p) or p.second = 0"]}
{"goal":"gcd_step(p).second = nat_base.nat_mod(p.first)(p.second)","proof":["Pair.new(p.second, nat_base.nat_mod(p.first, p.second)).second = nat_base.nat_mod(p.first, p.second)"]}
{"goal":"a.divides(gcd_step(p).second)","proof":[]}
{"goal":"gcd_step(p).first = p.second","proof":["Pair.new(p.second, nat_base.nat_mod(p.first, p.second)).first = p.second"]}
{"goal":"a.divides(gcd_step(p).first)","proof":[]}
{"goal":"divides_both(a, gcd_step(p))","proof":["not a.divides(gcd_step(p).first) or not a.divides(gcd_step(p).second) or divides_both(a, gcd_step(p))"]}
{"goal":"divides_both_step","proof":[]}
{"goal":"divides_both(d, gcd_step_n(p, 0))","proof":["0 != 0 or gcd_step_n(p, 0) = p","gcd_step_n(p, 0) = p"]}
{"goal":"f(0)","proof":["divides_both(d, gcd_step_n(p, 0)) = f(0)"]}
{"goal":"divides_both(d, gcd_step_n(p, x))","proof":["divides_both(d, gcd_step_n(p, x)) = f(x)"]}
{"goal":"divides_both(d, gcd_step(gcd_step_n(p, x)))","proof":["not divides_both(d, gcd_step_n(p, x)) or divides_both(d, gcd_step(gcd_step_n(p, x)))"]}
{"goal":"divides_both(d, gcd_step_n(p, x.suc))","proof":["x.suc != x.suc or gcd_step(gcd_step_n(p, x)) = gcd_step_n(p, x.suc)","gcd_step(gcd_step_n(p, x)) = gcd_step_n(p, x.suc)"]}
{"goal":"f(x.suc)","proof":["divides_both(d, gcd_step_n(p, x.suc)) = f(x.suc)"]}
{"goal":"divides_both(d, gcd_step_n(p, n))","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not f(s0(f)) or f(s0(f).suc)","divides_both(d, gcd_step_n(p, n)) = f(n)","not f(n)","not f(s0(f).suc) or not f(0) or f(n)","not f(s0(f).suc)","not f(0) or f(s0(f)) or f(n)","not f(s0(f))","f(s0(f))"]}
{"goal":"divides_gcd_step_n","proof":[]}
{"goal":"divides_both(d, gcd_step_n(p, num_gcd_steps(p)))","proof":["not divides_both(d, p) or divides_both(d, gcd_step_n(p, num_gcd_steps(p)))"]}
{"goal":"d.divides(gcd_step_n(p, num_gcd_steps(p)).first)","proof":["not divides_both(d, gcd_step_n(p, num_gcd_steps(p))) or d.divides(gcd_step_n(p, num_gcd_steps(p)).first)"]}
{"goal":"divides_gcd_pair","proof":["gcd_step_n(p, num_gcd_steps(p)).first = gcd_pair(p)"]}
{"goal":"d.divides(Pair.new(a, b).first)","proof":["Pair.new(a, b).first = a"]}
{"goal":"d.divides(Pair.new(a, b).second)","proof":["Pair.new(a, b).second = b"]}
{"goal":"divides_both(d, Pair.new(a, b))","proof":["not d.divides(Pair.new(a, b).second) or not d.divides(Pair.new(a, b).first) or divides_both(d, Pair.new(a, b))"]}
{"goal":"d.divides(gcd_pair(Pair.new(a, b)))","proof":[]}
{"goal":"d.divides(a.gcd(b))","proof":["gcd_pair(Pair.new(a, b)) = a.gcd(b)"]}
{"goal":"divides_gcd","proof":[]}
{"goal":"p = gcd_step(p)","proof":["p.second != 0 or gcd_step(p) = p"]}
{"goal":"divides_both(a, p)","proof":["not divides_both(a, gcd_step(p))"]}
{"goal":"gcd_step(p) = Pair.new(p.second, nat_base.nat_mod(p.first)(p.second))","proof":["Pair.new(p.second, nat_base.nat_mod(p.first, p.second)) = gcd_step(p) or p.second = 0"]}
{"goal":"a.divides(gcd_step(p).first)","proof":["not divides_both(a, gcd_step(p)) or a.divides(gcd_step(p).first)"]}
{"goal":"exists(k0: Nat) { a.divides(Pair.new(p.second, k0).first) }","proof":["not a.divides(Pair.new(p.second, nat_base.nat_mod(p.first, p.second)).first)"]}
{"goal":"a.divides(p.second)","proof":["let s0: Nat satisfy { a.divides(Pair.new(p.second, s0).first) }","Pair.new(p.second, s0).first = p.second"]}
{"goal":"a.divides(gcd_step(p).second)","proof":["not divides_both(a, gcd_step(p)) or a.divides(gcd_step(p).second)"]}
{"goal":"exists(k0: Nat) { a.divides(Pair.new(k0, nat_base.nat_mod(p.first)(p.second)).second) }","proof":["not a.divides(Pair.new(p.second, nat_base.nat_mod(p.first, p.second)).second)"]}
{"goal":"a.divides(nat_base.nat_mod(p.first)(p.second))","proof":["let s0: Nat satisfy { a.divides(Pair.new(s0, nat_base.nat_mod(p.first, p.second)).second) }","Pair.new(s0, nat_base.nat_mod(p.first, p.second)).second = nat_base.nat_mod(p.first, p.second)"]}
{"goal":"a.divides(p.first)","proof":["not a.divides(nat_base.nat_mod(p.first, p.second)) or not a.divides(p.second) or a.divides(p.first)"]}
{"goal":"divides_both(a, p)","proof":["not a.divides(p.first) or not a.divides(p.second) or divides_both(a, p)"]}
{"goal":"divides_both_unstep","proof":[]}
{"goal":"divides_both(d, p)","proof":["0 != 0 or gcd_step_n(p, 0) = p","gcd_step_n(p, 0) = p"]}
{"goal":"divides_gcd_step_n_converse(d, p, 0)","proof":["not divides_both(d, p) or divides_gcd_step_n_converse(d, p, 0)","divides_both(d, gcd_step_n(p, 0)) or divides_gcd_step_n_converse(d, p, 0)","not divides_both(d, p)","divides_both(d, gcd_step_n(p, 0))","not divides_both(d, gcd_step_n(p, 0))"]}
{"goal":"f(0)","proof":["divides_gcd_step_n_converse(d, p, 0) = f(0)"]}
{"goal":"divides_gcd_step_n_converse(d, p, x)","proof":["divides_gcd_step_n_converse(d, p, x) = f(x)"]}
{"goal":"divides_both(d, gcd_step_n(p, x))","proof":["x.suc != x.suc or gcd_step(gcd_step_n(p, x)) = gcd_step_n(p, x.suc)","not divides_both(d, gcd_step(gcd_step_n(p, x))) or divides_both(d, gcd_step_n(p, x))","not divides_both(d, gcd_step(gcd_step_n(p, x)))","gcd_step(gcd_step_n(p, x)) = gcd_step_n(p, x.suc)"]}
{"goal":"divides_both(d, p)","proof":["not divides_both(d, gcd_step_n(p, x)) or not divides_gcd_step_n_converse(d, p, x) or divides_both(d, p)"]}
{"goal":"divides_gcd_step_n_converse(d, p, x.suc)","proof":["not divides_both(d, p) or divides_gcd_step_n_converse(d, p, x.suc)","divides_both(d, gcd_step_n(p, x.suc)) or divides_gcd_step_n_converse(d, p, x.suc)","not divides_both(d, p)","divides_both(d, gcd_step_n(p, x.suc))","not divides_both(d, gcd_step_n(p, x.suc))"]}
{"goal":"f(x.suc)","proof":["divides_gcd_step_n_converse(d, p, x.suc) = f(x.suc)"]}
{"goal":"divides_gcd_step_n_converse","proof":["let s0: Nat satisfy { forall(x0: Nat) { not f(0) or f(s0) or f(x0) } and forall(x1: Nat) { not f(s0.suc) or not f(0) or f(x1) } }","not f(0) or f(s0) or f(s0)","f(s0) or f(s0)","not f(s0.suc) or not f(0) or f(n)","not f(s0.suc) or f(n)","not f(s0) or f(s0.suc)","divides_gcd_step_n_converse(d, p, n) = f(n)","not divides_both(d, gcd_step_n(p, n)) or not divides_gcd_step_n_converse(d, p, n) or divides_both(d, p)","f(s0)","not divides_gcd_step_n_converse(d, p, n)","not f(n)","f(s0.suc)","not f(s0.suc)"]}
{"goal":"gcd_pair(p) = gcd_step_n(p, num_gcd_steps(p)).first","proof":["gcd_step_n(p, num_gcd_steps(p)).first = gcd_pair(p)"]}
{"goal":"0 = gcd_step_n(p, num_gcd_steps(p)).second","proof":["gcd_step_n(p, num_gcd_steps(p)).second = 0"]}
{"goal":"d.divides(gcd_step_n(p, num_gcd_steps(p)).first)","proof":[]}
{"goal":"d.divides(gcd_step_n(p, num_gcd_steps(p)).second)","proof":["not d.divides(0)","d * 0 != 0 or d.divides(0)","d * 0 != 0","0 != 0 or d * 0 = 0","0 != 0"]}
{"goal":"divides_both(d, gcd_step_n(p, num_gcd_steps(p)))","proof":["not d.divides(gcd_step_n(p, num_gcd_steps(p)).first) or not d.divides(gcd_step_n(p, num_gcd_steps(p)).second) or divides_both(d, gcd_step_n(p, num_gcd_steps(p)))"]}
{"goal":"divides_both(d, p)","proof":["not divides_both(d, gcd_step_n(p, num_gcd_steps(p))) or divides_both(d, p)"]}
{"goal":"divides_gcd_pair_converse","proof":[]}
{"goal":"p.first = a","proof":["Pair.new(a, b).first != a","Pair.new(a, b).first = a"]}
{"goal":"p.second = b","proof":["Pair.new(a, b).second != b","Pair.new(a, b).second = b"]}
{"goal":"d.divides(gcd_pair(p))","proof":["gcd_pair(Pair.new(a, b)) = a.gcd(b)"]}
{"goal":"divides_both(d, p)","proof":["not d.divides(gcd_pair(p)) or divides_both(d, p)"]}
{"goal":"d.divides(p.first)","proof":["not divides_both(d, p) or d.divides(p.first)"]}
{"goal":"d.divides(a)","proof":["not d.divides(p.first)"]}
{"goal":"d.divides(p.second)","proof":["not divides_both(d, p) or d.divides(p.second)"]}
{"goal":"d.divides(b)","proof":["not d.divides(p.second)"]}
{"goal":"d.divides(a) and d.divides(b)","proof":["not d.divides(a)"]}
{"goal":"gcd_divides","proof":["not d.divides(a)"]}
{"goal":"a.gcd(b).divides(a.gcd(b))","proof":["a.gcd(b).divides(a.gcd(b))"]}
{"goal":"gcd_divides_left","proof":["not a.gcd(b).divides(a.gcd(b)) or a.gcd(b).divides(a)"]}
{"goal":"a.gcd(b).divides(a.gcd(b))","proof":["a.gcd(b).divides(a.gcd(b))"]}
{"goal":"gcd_divides_right","proof":["not a.gcd(b).divides(a.gcd(b)) or a.gcd(b).divides(b)"]}
{"goal":"not 0.divides(a)","proof":["not 0.divides(a) or a = 0"]}
{"goal":"a.gcd(b) != 0","proof":["not a.gcd(b).divides(a)","a.gcd(b).divides(a)"]}
{"goal":"d.divides(a.gcd(b))","proof":["not d.divides(a) or not d.divides(b) or d.divides(a.gcd(b))"]}
{"goal":"d <= a.gcd(b)","proof":["not d.divides(a.gcd(b)) or d <= a.gcd(b) or a.gcd(b) = 0"]}
{"goal":"gcd_is_gcd","proof":[]}
{"goal":"0.divides(a)","proof":["not a.gcd(b).divides(a)","a.gcd(b).divides(a)"]}
{"goal":"a = 0","proof":["not 0.divides(a) or a = 0"]}
{"goal":"false","proof":[]}
{"goal":"gcd_nonzero_left","proof":[]}
{"goal":"a.divides(a)","proof":["a * 1 != a or a.divides(a)","a * 1 != a","a * 1 = a"]}
{"goal":"a.divides(0)","proof":["a * 0 != 0 or a.divides(0)","a * 0 != 0","0 != 0 or a * 0 = 0","0 != 0"]}
{"goal":"a.divides(a.gcd(0))","proof":["not a.divides(a) or not a.divides(0) or a.divides(a.gcd(0))"]}
{"goal":"a.gcd(0).divides(a)","proof":["a.gcd(0).divides(a)"]}
{"goal":"gcd_zero_right","proof":["not a.gcd(0).divides(a) or not a.divides(a.gcd(0)) or a.gcd(0) = a"]}
{"goal":"a.gcd(0).divides(0.gcd(a))","proof":["not a.gcd(0).divides(0) or not a.gcd(0).divides(a) or a.gcd(0).divides(0.gcd(a))","a.gcd(0).divides(0)","not a.gcd(0).divides(a)","a.gcd(0).divides(a)"]}
{"goal":"a.divides(0.gcd(a))","proof":["a.gcd(0) = a"]}
{"goal":"0.gcd(a).divides(a)","proof":["0.gcd(a).divides(a)"]}
{"goal":"gcd_zero_left","proof":["not 0.gcd(a).divides(a) or not a.divides(0.gcd(a)) or 0.gcd(a) = a"]}
{"goal":"b.gcd(a).divides(a.gcd(b))","proof":["not b.gcd(a).divides(a) or not b.gcd(a).divides(b) or b.gcd(a).divides(a.gcd(b))","b.gcd(a).divides(a)","not b.gcd(a).divides(b)","b.gcd(a).divides(b)"]}
{"goal":"a.gcd(b).divides(b.gcd(a))","proof":["not a.gcd(b).divides(b) or not a.gcd(b).divides(a) or a.gcd(b).divides(b.gcd(a))","a.gcd(b).divides(b)","not a.gcd(b).divides(a)","a.gcd(b).divides(a)"]}
{"goal":"gcd_comm","proof":["not b.gcd(a).divides(a.gcd(b)) or not a.gcd(b).divides(b.gcd(a)) or a.gcd(b) = b.gcd(a)"]}
{"goal":"gcd_nonzero_right","proof":["a.gcd(b) = b.gcd(a)","b.gcd(a) = 0","b.gcd(a) != 0 or b = 0"]}
{"goal":"gcd_step_n(p, 0).first = a","proof":["0 != 0 or gcd_step_n(Pair.new(a, b), 0) = Pair.new(a, b)","Pair.new(a, b).first = a","gcd_step_n(Pair.new(a, b), 0).first != a","gcd_step_n(Pair.new(a, b), 0) = Pair.new(a, b)"]}
{"goal":"gcd_step_n(p, 0).second = b","proof":["0 != 0 or gcd_step_n(Pair.new(a, b), 0) = Pair.new(a, b)","Pair.new(a, b).second = b","gcd_step_n(Pair.new(a, b), 0).second != b","gcd_step_n(Pair.new(a, b), 0) = Pair.new(a, b)"]}
{"goal":"f(gcd_step_n(p, 0).second)","proof":[]}
{"goal":"f(gcd_step_n(p, 0).first)","proof":[]}
{"goal":"g(0)","proof":["not f(gcd_step_n(p, 0).first) or not f(gcd_step_n(p, 0).second) or g(0)"]}
{"goal":"gcd_step_n(p, x.suc) = gcd_step(gcd_step_n(p, x))","proof":["x.suc != x.suc or gcd_step(gcd_step_n(p, x)) = gcd_step_n(p, x.suc)"]}
{"goal":"f(gcd_step_n(p, x).first)","proof":["not g(x) or f(gcd_step_n(p, x).first)"]}
{"goal":"f(gcd_step_n(p, x).second)","proof":["not g(x) or f(gcd_step_n(p, x).second)"]}
{"goal":"gcd_step_n(p, x.suc) = gcd_step_n(p, x)","proof":["gcd_step_n(p, x).second != 0 or gcd_step(gcd_step_n(p, x)) = gcd_step_n(p, x)","gcd_step(gcd_step_n(p, x)) != gcd_step_n(p, x)","gcd_step(gcd_step_n(p, x)) = gcd_step_n(p, x)"]}
{"goal":"f(gcd_step_n(p, x.suc).first)","proof":[]}
{"goal":"f(gcd_step_n(p, x.suc).second)","proof":[]}
{"goal":"g(x.suc)","proof":["not f(gcd_step_n(p, x.suc).first) or not f(gcd_step_n(p, x.suc).second) or g(x.suc)"]}
{"goal":"Pair.new(gcd_step_n(p, x).second, nat_base.nat_mod(gcd_step_n(p, x).first)(gcd_step_n(p, x).second)) = gcd_step(gcd_step_n(p, x))","proof":["Pair.new(gcd_step_n(p, x).second, nat_base.nat_mod(gcd_step_n(p, x).first, gcd_step_n(p, x).second)) = gcd_step(gcd_step_n(p, x)) or gcd_step_n(p, x).second = 0"]}
{"goal":"gcd_step_n(p, x.suc).first = gcd_step_n(p, x).second","proof":["Pair.new(gcd_step_n(p, x).second, nat_base.nat_mod(gcd_step_n(p, x).first, gcd_step_n(p, x).second)).first = gcd_step_n(p, x).second","gcd_step(gcd_step_n(p, x)).first != gcd_step_n(p, x).second"]}
{"goal":"nat_base.nat_mod(gcd_step_n(p, x).first)(gcd_step_n(p, x).second) = gcd_step(gcd_step_n(p, x)).second","proof":["Pair.new(gcd_step_n(p, x).second, nat_base.nat_mod(gcd_step_n(p, x).first, gcd_step_n(p, x).second)).second = nat_base.nat_mod(gcd_step_n(p, x).first, gcd_step_n(p, x).second)"]}
{"goal":"gcd_step_n(p, x.suc).second = nat_base.nat_mod(gcd_step_n(p, x).first)(gcd_step_n(p, x).second)","proof":["nat_base.nat_mod(gcd_step_n(p, x).first, gcd_step_n(p, x).second) != gcd_step(gcd_step_n(p, x)).second"]}
{"goal":"f(gcd_step_n(p, x.suc).first)","proof":[]}
{"goal":"f(nat_base.nat_mod(gcd_step_n(p, x).first)(gcd_step_n(p, x).second))","proof":["not mod_maintains(f) or not f(gcd_step_n(p, x).first) or not f(gcd_step_n(p, x).second) or f(nat_base.nat_mod(gcd_step_n(p, x).first, gcd_step_n(p, x).second))"]}
{"goal":"f(gcd_step_n(p, x.suc).second)","proof":[]}
{"goal":"g(x.suc)","proof":["not f(gcd_step_n(p, x.suc).first) or not f(gcd_step_n(p, x.suc).second) or g(x.suc)"]}
{"goal":"g(num_gcd_steps(p))","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(0) or x2(x3) } }","not g(s0(g)) or g(s0(g).suc)","not g(num_gcd_steps(Pair.new(a, b)))","not g(s0(g).suc) or not g(0) or g(num_gcd_steps(p))","not g(s0(g).suc)","not g(0) or g(s0(g)) or g(num_gcd_steps(Pair.new(a, b)))","not g(s0(g))","g(s0(g))"]}
{"goal":"f(gcd_step_n(p, num_gcd_steps(p)).first)","proof":["not g(num_gcd_steps(p)) or f(gcd_step_n(p, num_gcd_steps(p)).first)"]}
{"goal":"f(a.gcd(b))","proof":["gcd_pair(Pair.new(a, b)) = a.gcd(b)","not f(gcd_pair(Pair.new(a, b)))","not f(gcd_pair(p))","gcd_step_n(p, num_gcd_steps(p)).first = gcd_pair(p)"]}
{"goal":"mod_maintains_imp_gcd","proof":[]}
{"goal":"gcd_one_right","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0.divides(x1) or x0 * s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat, x4: Nat) { x2 * x3 != x4 or x2.divides(x4) } }","not a.gcd(1).divides(1) or a.gcd(1) * s0(a.gcd(1), 1) = 1","a.gcd(1) * s0(a.gcd(1), 1) != 1 or a.gcd(1) = 1","a.gcd(1) * s0(a.gcd(1), 1) != 1","a.gcd(1).divides(1)"]}
{"goal":"gcd_one_left","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0.divides(x1) or x0 * s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat, x4: Nat) { x2 * x3 != x4 or x2.divides(x4) } }","not 1.gcd(a).divides(1) or 1.gcd(a) * s0(1.gcd(a), 1) = 1","1.gcd(a) * s0(1.gcd(a), 1) != 1 or 1.gcd(a) = 1","1.gcd(a) * s0(1.gcd(a), 1) != 1","1.gcd(a).divides(1)"]}
{"goal":"m.divides(m * a)","proof":["m * a != m * a or m.divides(m * a)","m * a != m * a"]}
{"goal":"m.divides(m * b)","proof":["m * b != m * b or m.divides(m * b)","m * b != m * b"]}
{"goal":"m.divides((m * a).gcd(m * b))","proof":["not m.divides(m * a) or not m.divides(m * b) or m.divides((m * a).gcd(m * b))"]}
{"goal":"exists(k0: Nat) { m * k0 = (m * a).gcd(m * b) }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0.divides(x1) or x0 * s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat, x4: Nat) { x2 * x3 != x4 or x2.divides(x4) } }","m * s0(m, (m * a).gcd(m * b)) != (m * a).gcd(m * b)","not m.divides((m * a).gcd(m * b)) or m * s0(m, (m * a).gcd(m * b)) = (m * a).gcd(m * b)"]}
{"goal":"(m * d).divides(m * a)","proof":["(m * a).gcd(m * b).divides(m * a)"]}
{"goal":"d.divides(a)","proof":["not (m * d).divides(m * a) or 0 = m or d.divides(a)"]}
{"goal":"(m * d).divides(m * b)","proof":["(m * a).gcd(m * b).divides(m * b)"]}
{"goal":"d.divides(b)","proof":["not (m * d).divides(m * b) or 0 = m or d.divides(b)"]}
{"goal":"d.divides(a.gcd(b))","proof":["not d.divides(a) or not d.divides(b) or d.divides(a.gcd(b))"]}
{"goal":"(m * d).divides(m * a.gcd(b))","proof":["not d.divides(a.gcd(b)) or (m * d).divides(m * a.gcd(b))"]}
{"goal":"(m * a).gcd(m * b).divides(m * a.gcd(b))","proof":[]}
{"goal":"(m * a.gcd(b)).divides(m * a)","proof":["not a.gcd(b).divides(a) or (m * a.gcd(b)).divides(m * a)","not a.gcd(b).divides(a)","b.gcd(a) = a.gcd(b)","b.gcd(a).divides(a)"]}
{"goal":"(m * a.gcd(b)).divides(m * b)","proof":["not a.gcd(b).divides(b) or (m * a.gcd(b)).divides(m * b)","not a.gcd(b).divides(b)","a.gcd(b).divides(b)"]}
{"goal":"(m * a.gcd(b)).divides((m * a).gcd(m * b))","proof":["not (m * a.gcd(b)).divides(m * a) or not (m * a.gcd(b)).divides(m * b) or (m * a.gcd(b)).divides((m * a).gcd(m * b))"]}
{"goal":"gcd_mult_left_nonzero","proof":["not (m * a.gcd(b)).divides((m * a).gcd(m * b)) or not (m * a).gcd(m * b).divides(m * a.gcd(b)) or (m * a).gcd(m * b) = m * a.gcd(b)"]}
{"goal":"m * a.gcd(b) = 0","proof":["m * a.gcd(b) = a.gcd(b) * m","a.gcd(b) * m != 0","a.gcd(b) * 0 != 0","0 != 0 or a.gcd(b) * 0 = 0"]}
{"goal":"(m * a).gcd(m * b) = 0","proof":["(0 * b).gcd(0 * a) = (0 * a).gcd(0 * b)","(0 * b).gcd(0) = 0 * b","0 * a = 0","0 * b = 0"]}
{"goal":"m * a.gcd(b) = (m * a).gcd(m * b)","proof":["(m * a).gcd(m * b) = m * a.gcd(b) or m = 0"]}
{"goal":"gcd_mult_left","proof":["nat_base.nat_mod(a.gcd(b) * m, m) = 0","m != 0 or nat_base.nat_mod(a.gcd(b) * m, m) = a.gcd(b) * m","nat_base.nat_mod(a.gcd(b) * m, m) = a.gcd(b) * m","m * a.gcd(b) = a.gcd(b) * m","(m * a).gcd(m * b) != a.gcd(b) * m","a.gcd(b) * m != 0"]}
{"goal":"gcd_mult_right","proof":["(b * m).gcd(a * m) = (a * m).gcd(b * m)","m * a = a * m","m * a.gcd(b) = a.gcd(b) * m","m * b = b * m"]}
{"goal":"af.gcd(bf).divides(af)","proof":["bf.gcd(af) = af.gcd(bf)","not bf.gcd(af).divides(af)","bf.gcd(af).divides(af)"]}
{"goal":"(a.gcd(b) * af.gcd(bf)).divides(a)","proof":["not af.gcd(bf).divides(af) or (a.gcd(b) * af.gcd(bf)).divides(a.gcd(b) * af)","af * a.gcd(b) = a.gcd(b) * af","not (a.gcd(b) * af.gcd(bf)).divides(af * a.gcd(b))","(a.gcd(b) * af.gcd(bf)).divides(a.gcd(b) * af)"]}
{"goal":"af.gcd(bf).divides(bf)","proof":["af.gcd(bf).divides(bf)"]}
{"goal":"(a.gcd(b) * af.gcd(bf)).divides(b)","proof":["not af.gcd(bf).divides(bf) or (a.gcd(b) * af.gcd(bf)).divides(a.gcd(b) * bf)","bf * a.gcd(b) = a.gcd(b) * bf","not (a.gcd(b) * af.gcd(bf)).divides(bf * a.gcd(b))","(a.gcd(b) * af.gcd(bf)).divides(a.gcd(b) * bf)"]}
{"goal":"(a.gcd(b) * af.gcd(bf)).divides(a.gcd(b))","proof":["not (a.gcd(b) * af.gcd(bf)).divides(a) or not (a.gcd(b) * af.gcd(bf)).divides(b) or (a.gcd(b) * af.gcd(bf)).divides(a.gcd(b))"]}
{"goal":"(a.gcd(b) * af.gcd(bf)).divides(a.gcd(b) * 1)","proof":["not (a.gcd(b) * af.gcd(bf)).divides(a.gcd(b)) or (a.gcd(b) * af.gcd(bf)).divides(a.gcd(b) * 1)"]}
{"goal":"af.gcd(bf).divides(1)","proof":["not (a.gcd(b) * af.gcd(bf)).divides(a.gcd(b) * 1) or af.gcd(bf).divides(1) or a.gcd(b) = 0"]}
{"goal":"af.gcd(bf) = 1","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0.divides(x1) or x0 * s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat, x4: Nat) { x2 * x3 != x4 or x2.divides(x4) } }","not af.gcd(bf).divides(1) or af.gcd(bf) * s0(af.gcd(bf), 1) = 1","af.gcd(bf) * s0(af.gcd(bf), 1) != 1 or af.gcd(bf) = 1","af.gcd(bf) * s0(af.gcd(bf), 1) != 1"]}
{"goal":"cofactor","proof":[]}
{"goal":"p.gcd(n).divides(p)","proof":["n.gcd(p) = p.gcd(n)","not n.gcd(p).divides(p)","n.gcd(p).divides(p)"]}
{"goal":"exists(k0: Nat) { k0 * p.gcd(n) = p }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0.divides(x1) or x0 * s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat, x4: Nat) { x2 * x3 != x4 or x2.divides(x4) } }","s0(p.gcd(n), p) * p.gcd(n) != p","not p.gcd(n).divides(p) or p.gcd(n) * s0(p.gcd(n), p) = p","s0(p.gcd(n), p) * p.gcd(n) = p.gcd(n) * s0(p.gcd(n), p)","p.gcd(n) * s0(p.gcd(n), p) = p"]}
{"goal":"d != 0","proof":["not 0.is_prime or 1 < 0","0 * p.gcd(n) = 0","not 1 < 0","(d * p.gcd(n)).is_prime","(0 * p.gcd(n)).is_prime","0.is_prime"]}
{"goal":"p.gcd(n) = p","proof":["1 * p.gcd(n) = p","1 * p.gcd(n) = p.gcd(n)"]}
{"goal":"p.divides(n)","proof":["p.divides(p)","not p.divides(p.gcd(n)) or p.divides(n)","not p.divides(p.gcd(n))"]}
{"goal":"d > 1","proof":["not d < 0.suc or d < 0 or d = 0","d < 1 or 1 < d or d = 1","1 < d = d > 1","not 1 < d","d < 1","not d < 0","not d < 0.suc","d < 0.suc"]}
{"goal":"p.is_composite","proof":["not 1 < d or not 1 < p.gcd(n) or d * p.gcd(n) != p or p.is_composite","d > 1 = 1 < d","p.gcd(n) > 1 = 1 < p.gcd(n)","1 < d","1 < p.gcd(n)","not 1 < p.gcd(n)"]}
{"goal":"false","proof":["not p.is_prime or not p.is_composite"]}
{"goal":"p.gcd(n) != 0","proof":["not 0 > 1","0 > 1 = 1 < 0","not 1 < 0","p.gcd(n) != 0 or p = 0","p = 0","0.is_prime","not 0.is_prime or 1 < 0"]}
{"goal":"p.gcd(n) = 1","proof":["not p.gcd(n) < 0.suc or p.gcd(n) < 0 or p.gcd(n) = 0","p.gcd(n) < 1 or 1 < p.gcd(n) or p.gcd(n) = 1","p.gcd(n) > 1 = 1 < p.gcd(n)","not 1 < p.gcd(n)","p.gcd(n) < 1","not p.gcd(n) < 0","not p.gcd(n) < 0.suc","p.gcd(n) < 0.suc"]}
{"goal":"gcd_of_prime","proof":[]}
