{"goal":"a.re + b.re = b.re + a.re","proof":["b.re + a.re = a.re + b.re"]}
{"goal":"a.im + b.im = b.im + a.im","proof":["b.im + a.im = a.im + b.im"]}
{"goal":"Complex.new(a.re + b.re, a.im + b.im) = Complex.new(b.re + a.re, b.im + a.im)","proof":[]}
{"goal":"a + b = b + a","proof":["Complex.new(a.re + b.re, a.im + b.im) = a + b","Complex.new(b.re + a.re, b.im + a.im) = b + a"]}
{"goal":"add_comm","proof":[]}
{"goal":"left_re2 = a.re + (b.re + c.re)","proof":["a.re + (b.re + c.re) = a.re + b.re + c.re"]}
{"goal":"right_re2 = a.re + (b.re + c.re)","proof":[]}
{"goal":"left_im2 = a.im + (b.im + c.im)","proof":["a.im + (b.im + c.im) = a.im + b.im + c.im"]}
{"goal":"right_im2 = a.im + (b.im + c.im)","proof":[]}
{"goal":"final_left.re = final_right.re","proof":["final_right != final_left"]}
{"goal":"final_left.im = final_right.im","proof":["final_right != final_left"]}
{"goal":"final_left = final_right","proof":[]}
{"goal":"add_assoc","proof":["Complex.new((a + b).re + c.re, (a + b).im + c.im) = a + b + c","Complex.new(a.re + (b + c).re, a.im + (b + c).im) = a + (b + c)","Complex.new(a.re + b.re, a.im + b.im) = a + b","Complex.new(b.re + c.re, b.im + c.im) = b + c","-(a + b).im + -c.im = -((a + b).im + c.im)","-(a + b).re + -c.re = -((a + b).re + c.re)","-(a.im + b.im) + -c.im = -(a.im + b.im + c.im)","-(a.re + b.re) + -c.re = -(a.re + b.re + c.re)","-a.im + -(b + c).im = -(a.im + (b + c).im)","-a.im + -(b.im + c.im) = -(a.im + (b.im + c.im))","-a.re + -(b + c).re = -(a.re + (b + c).re)","-a.re + -(b.re + c.re) = -(a.re + (b.re + c.re))","Complex.new(a.re + b.re, a.im + b.im).im = a.im + b.im","Complex.new(b.re + c.re, b.im + c.im).im = b.im + c.im","Complex.new(a.re + b.re, a.im + b.im).re = a.re + b.re","Complex.new(b.re + c.re, b.im + c.im).re = b.re + c.re","Real.new(lib(real.real_base).neg_gt((a + b).im)) = -(a + b).im","Real.new(lib(real.real_base).neg_gt((a + b).re)) = -(a + b).re","Real.new(lib(real.real_base).neg_gt((b + c).im)) = -(b + c).im","Real.new(lib(real.real_base).neg_gt((b + c).re)) = -(b + c).re","Real.new(lib(real.real_base).neg_gt(-left_im1)) = --left_im1","Real.new(lib(real.real_base).neg_gt(-left_re1)) = --left_re1","Real.new(lib(real.real_base).neg_gt(-right_im1)) = --right_im1","Real.new(lib(real.real_base).neg_gt(-right_im2)) = --right_im2","Real.new(lib(real.real_base).neg_gt(-right_re1)) = --right_re1","Real.new(lib(real.real_base).neg_gt(-right_re2)) = --right_re2","Real.new(lib(real.real_base).neg_gt(a.im + b.im)) = -(a.im + b.im)","Real.new(lib(real.real_base).neg_gt(a.re + b.re)) = -(a.re + b.re)","Real.new(lib(real.real_base).neg_gt(b.im + c.im)) = -(b.im + c.im)","Real.new(lib(real.real_base).neg_gt(b.re + c.re)) = -(b.re + c.re)","--((a + b).im + c.im) = (a + b).im + c.im","--((a + b).re + c.re) = (a + b).re + c.re","--(a.im + (b + c).im) = a.im + (b + c).im","--(a.im + b.im + c.im) = a.im + b.im + c.im","--(a.re + (b + c).re) = a.re + (b + c).re","--(a.re + b.re + c.re) = a.re + b.re + c.re"]}
{"goal":"a.re + Real.0 = a.re","proof":["Real.0 + a.re - a.re != Real.0 or Real.0 + a.re = a.re","Real.0 + a.re - a.re = Real.0","a.re + Real.0 = Real.0 + a.re","Real.0 + a.re != a.re"]}
{"goal":"a.im + Real.0 = a.im","proof":["Real.0 + a.im - a.im != Real.0 or Real.0 + a.im = a.im","Real.0 + a.im - a.im = Real.0","a.im + Real.0 = Real.0 + a.im","Real.0 + a.im != a.im"]}
{"goal":"Complex.new(a.re + Real.0, a.im + Real.0) = Complex.new(a.re, a.im)","proof":[]}
{"goal":"a + Complex.0 = a","proof":["Complex.new(a.re + Complex.0.re, a.im + Complex.0.im) = a + Complex.0","Real.new(lib(real.real_base).add_gt(Complex.0.im, a.im)) = Complex.0.im + a.im","Real.new(lib(real.real_base).add_gt(Complex.0.re, a.re)) = Complex.0.re + a.re","Real.new(lib(real.real_base).add_gt(Real.0, a.im)) = Real.0 + a.im","Real.new(lib(real.real_base).add_gt(Real.0, a.re)) = Real.0 + a.re","Complex.new(a.re, a.im) = a","a.im + Complex.0.im = Complex.0.im + a.im","a.im + Real.0 = Real.0 + a.im","a.re + Complex.0.re = Complex.0.re + a.re","a.re + Real.0 = Real.0 + a.re","Complex.new(Real.0, Real.0).im = Real.0","Complex.new(Real.0, Real.0).re = Real.0"]}
{"goal":"add_zero_right","proof":[]}
{"goal":"add_zero_left","proof":["a + Complex.0 = Complex.0 + a","a + Complex.0 != a","a + Complex.0 = a"]}
{"goal":"a.re * b.re - a.im * b.im = b.re * a.re - b.im * a.im","proof":["b.im * a.im = a.im * b.im","b.re * a.re = a.re * b.re"]}
{"goal":"a.re * b.im + a.im * b.re = b.re * a.im + b.im * a.re","proof":["a.im * b.re = b.re * a.im","b.im * a.re = a.re * b.im","b.re * a.im + a.re * b.im = a.re * b.im + b.re * a.im"]}
{"goal":"Complex.new(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re) = Complex.new(b.re * a.re - b.im * a.im, b.re * a.im + b.im * a.re)","proof":[]}
{"goal":"a * b = b * a","proof":["Complex.new(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re) = a * b","Complex.new(b.re * a.re - b.im * a.im, b.re * a.im + b.im * a.re) = b * a"]}
{"goal":"mul_comm","proof":[]}
{"goal":"left.re = a.re * (b + c).re - a.im * (b + c).im","proof":["Complex.new(a.re * (b + c).re - a.im * (b + c).im, a.re * (b + c).im + a.im * (b + c).re) = a * (b + c)","Complex.new(a.re * (b + c).re - a.im * (b + c).im, a.re * (b + c).im + a.im * (b + c).re).re = a.re * (b + c).re - a.im * (b + c).im","a.re * (b + c).re - a.im * (b + c).im != (a * (b + c)).re"]}
{"goal":"a.re * (b + c).re = a.re * b.re + a.re * c.re","proof":["Complex.new(b.re + c.re, b.im + c.im) = b + c","a.re * b.re + a.re * c.re = a.re * (b.re + c.re)","a.re * (b.re + c.re) != a.re * (b + c).re","b.re + c.re != (b + c).re","Complex.new(b.re + c.re, b.im + c.im).re = b.re + c.re"]}
{"goal":"a.im * (b + c).im = a.im * b.im + a.im * c.im","proof":["Complex.new(b.re + c.re, b.im + c.im) = b + c","a.im * b.im + a.im * c.im = a.im * (b.im + c.im)","a.im * (b.im + c.im) != a.im * (b + c).im","b.im + c.im != (b + c).im","Complex.new(b.re + c.re, b.im + c.im).im = b.im + c.im"]}
{"goal":"left.re = a.re * b.re + a.re * c.re - a.im * b.im - a.im * c.im","proof":["a.re * b.re + a.re * c.re - (a.im * b.im + a.im * c.im) = a.re * b.re + a.re * c.re - a.im * b.im - a.im * c.im"]}
{"goal":"left.im = a.re * (b + c).im + a.im * (b + c).re","proof":["Complex.new(a.re * (b + c).re - a.im * (b + c).im, a.re * (b + c).im + a.im * (b + c).re) = a * (b + c)","Complex.new(a.re * (b + c).re - a.im * (b + c).im, a.re * (b + c).im + a.im * (b + c).re).im = a.re * (b + c).im + a.im * (b + c).re","a.re * (b + c).im + a.im * (b + c).re != (a * (b + c)).im"]}
{"goal":"a.re * (b + c).im = a.re * b.im + a.re * c.im","proof":["Complex.new(b.re + c.re, b.im + c.im) = b + c","a.re * b.im + a.re * c.im = a.re * (b.im + c.im)","a.re * (b.im + c.im) != a.re * (b + c).im","b.im + c.im != (b + c).im","Complex.new(b.re + c.re, b.im + c.im).im = b.im + c.im"]}
{"goal":"a.im * (b + c).re = a.im * b.re + a.im * c.re","proof":["Complex.new(b.re + c.re, b.im + c.im) = b + c","a.im * b.re + a.im * c.re = a.im * (b.re + c.re)","a.im * (b.re + c.re) != a.im * (b + c).re","b.re + c.re != (b + c).re","Complex.new(b.re + c.re, b.im + c.im).re = b.re + c.re"]}
{"goal":"left.im = a.re * b.im + a.re * c.im + a.im * b.re + a.im * c.re","proof":["a.re * b.im + a.re * c.im + (a.im * b.re + a.im * c.re) = a.re * b.im + a.re * c.im + a.im * b.re + a.im * c.re"]}
{"goal":"right.re = (a * b).re + (a * c).re","proof":["Complex.new((a * b).re + (a * c).re, (a * b).im + (a * c).im) = a * b + a * c","Complex.new((a * b).re + (a * c).re, (a * b).im + (a * c).im).re = (a * b).re + (a * c).re","(a * b).re + (a * c).re != (a * b + a * c).re"]}
{"goal":"(a * b).re = a.re * b.re - a.im * b.im","proof":["Complex.new(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re) = a * b","Complex.new(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re).re = a.re * b.re - a.im * b.im"]}
{"goal":"(a * c).re = a.re * c.re - a.im * c.im","proof":["Complex.new(a.re * c.re - a.im * c.im, a.re * c.im + a.im * c.re) = a * c","Complex.new(a.re * c.re - a.im * c.im, a.re * c.im + a.im * c.re).re = a.re * c.re - a.im * c.im"]}
{"goal":"right.re = a.re * b.re - a.im * b.im + (a.re * c.re - a.im * c.im)","proof":[]}
{"goal":"right.re = left.re","proof":["a.re * b.re + a.re * c.re - a.im * b.im = a.re * b.re - a.im * b.im + a.re * c.re","a.re * c.re + (a.re * b.re - a.im * b.im) - a.im * c.im = a.re * c.re - a.im * c.im + (a.re * b.re - a.im * b.im)","(a * c).re + (a * b).re = (a * b).re + (a * c).re","a.re * b.re - a.im * b.im + a.re * c.re = a.re * c.re + (a.re * b.re - a.im * b.im)"]}
{"goal":"right.im = (a * b).im + (a * c).im","proof":["Complex.new((a * b).re + (a * c).re, (a * b).im + (a * c).im) = a * b + a * c","Complex.new((a * b).re + (a * c).re, (a * b).im + (a * c).im).im = (a * b).im + (a * c).im","(a * b).im + (a * c).im != (a * b + a * c).im"]}
{"goal":"(a * b).im = a.re * b.im + a.im * b.re","proof":["Complex.new(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re) = a * b","Complex.new(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re).im = a.re * b.im + a.im * b.re"]}
{"goal":"(a * c).im = a.re * c.im + a.im * c.re","proof":["Complex.new(a.re * c.re - a.im * c.im, a.re * c.im + a.im * c.re) = a * c","Complex.new(a.re * c.re - a.im * c.im, a.re * c.im + a.im * c.re).im = a.re * c.im + a.im * c.re"]}
{"goal":"right.im = a.re * b.im + a.im * b.re + (a.re * c.im + a.im * c.re)","proof":[]}
{"goal":"right.im = left.im","proof":["a.re * b.im + a.im * b.re + (a.re * c.im + a.im * c.re) = a.re * b.im + a.im * b.re + a.re * c.im + a.im * c.re","a.re * c.im + (a.re * b.im + a.im * b.re) = a.re * c.im + a.re * b.im + a.im * b.re","a.im * c.re + (a.re * b.im + a.im * b.re + a.re * c.im) = a.re * b.im + a.im * b.re + a.re * c.im + a.im * c.re","a.im * c.re + (a.re * b.im + a.re * c.im + a.im * b.re) = a.re * b.im + a.re * c.im + a.im * b.re + a.im * c.re","a.re * c.im + (a.re * b.im + a.im * b.re) = a.re * b.im + a.im * b.re + a.re * c.im","a.re * c.im + a.re * b.im = a.re * b.im + a.re * c.im"]}
{"goal":"distrib","proof":["Complex.new((a * b).re + (a * c).re, (a * b).im + (a * c).im) = a * b + a * c","Complex.new(a.re * (b + c).re - a.im * (b + c).im, a.re * (b + c).im + a.im * (b + c).re) = a * (b + c)"]}
{"goal":"(a * b * c).re = (a * b).re * c.re - (a * b).im * c.im","proof":["Complex.new((a * b).re * c.re - (a * b).im * c.im, (a * b).re * c.im + (a * b).im * c.re) = a * b * c","Complex.new((a * b).re * c.re - (a * b).im * c.im, (a * b).re * c.im + (a * b).im * c.re).re = (a * b).re * c.re - (a * b).im * c.im"]}
{"goal":"(a * b * c).re = (a.re * b.re - a.im * b.im) * c.re - (a.re * b.im + a.im * b.re) * c.im","proof":["Complex.new(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re) = a * b","-(a * b).im * c.im = -((a * b).im * c.im)","-(a * b).re * c.re = -((a * b).re * c.re)","-(a.re * b.im + a.im * b.re) * c.im = -((a.re * b.im + a.im * b.re) * c.im)","-(a.re * b.re - a.im * b.im) * c.re = -((a.re * b.re - a.im * b.im) * c.re)","Complex.new(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re).im = a.re * b.im + a.im * b.re","Complex.new(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re).re = a.re * b.re - a.im * b.im","Real.new(lib(real.real_base).neg_gt((a * b).im)) = -(a * b).im","Real.new(lib(real.real_base).neg_gt((a * b).re)) = -(a * b).re","Real.new(lib(real.real_base).neg_gt(-((a * b).im * c.im))) = --((a * b).im * c.im)","Real.new(lib(real.real_base).neg_gt(-((a * b).re * c.re))) = --((a * b).re * c.re)","Real.new(lib(real.real_base).neg_gt(-((a.re * b.im + a.im * b.re) * c.im))) = --((a.re * b.im + a.im * b.re) * c.im)","Real.new(lib(real.real_base).neg_gt(-((a.re * b.re - a.im * b.im) * c.re))) = --((a.re * b.re - a.im * b.im) * c.re)","Real.new(lib(real.real_base).neg_gt(a.re * b.im + a.im * b.re)) = -(a.re * b.im + a.im * b.re)","Real.new(lib(real.real_base).neg_gt(a.re * b.re - a.im * b.im)) = -(a.re * b.re - a.im * b.im)","--((a * b).im * c.im) = (a * b).im * c.im","--((a * b).re * c.re) = (a * b).re * c.re","--((a.re * b.im + a.im * b.re) * c.im) = (a.re * b.im + a.im * b.re) * c.im","--((a.re * b.re - a.im * b.im) * c.re) = (a.re * b.re - a.im * b.im) * c.re"]}
{"goal":"mul_three_re","proof":["a.re * b.im * c.im + a.im * b.re * c.im = (a.re * b.im + a.im * b.re) * c.im","a.re * b.re * c.re - a.im * b.im * c.re = (a.re * b.re - a.im * b.im) * c.re","a.re * b.re * c.re - (a.re * b.im * c.im + a.im * b.re * c.im) = a.re * b.re * c.re - a.re * b.im * c.im - a.im * b.re * c.im","a.re * b.re * c.re - a.im * b.im * c.re - (a.re * b.im * c.im + a.im * b.re * c.im) = a.re * b.re * c.re - (a.re * b.im * c.im + a.im * b.re * c.im) - a.im * b.im * c.re"]}
{"goal":"(a * b * c).im = (a * b).re * c.im + (a * b).im * c.re","proof":["Complex.new((a * b).re * c.re - (a * b).im * c.im, (a * b).re * c.im + (a * b).im * c.re) = a * b * c","Complex.new((a * b).re * c.re - (a * b).im * c.im, (a * b).re * c.im + (a * b).im * c.re).im = (a * b).re * c.im + (a * b).im * c.re"]}
{"goal":"(a * b * c).im = (a.re * b.re - a.im * b.im) * c.im + (a.re * b.im + a.im * b.re) * c.re","proof":["Complex.new(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re) = a * b","-((a * b).re * c.im) + -((a * b).im * c.re) = -((a * b).re * c.im + (a * b).im * c.re)","-((a.re * b.re - a.im * b.im) * c.im) + -((a.re * b.im + a.im * b.re) * c.re) = -((a.re * b.re - a.im * b.im) * c.im + (a.re * b.im + a.im * b.re) * c.re)","(a * b).im * -c.re = -((a * b).im * c.re)","(a.re * b.im + a.im * b.re) * -c.re = -((a.re * b.im + a.im * b.re) * c.re)","-(a * b).re * c.im = -((a * b).re * c.im)","-(a.re * b.re - a.im * b.im) * c.im = -((a.re * b.re - a.im * b.im) * c.im)","(a.re * b.re - a.im * b.im) * c.im + (a.re * b.im + a.im * b.re) * c.re = (a.re * b.im + a.im * b.re) * c.re + (a.re * b.re - a.im * b.im) * c.im","Complex.new(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re).im = a.re * b.im + a.im * b.re","Complex.new(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re).re = a.re * b.re - a.im * b.im","Real.new(lib(real.real_base).neg_gt((a * b).re)) = -(a * b).re","Real.new(lib(real.real_base).neg_gt(-((a.re * b.re - a.im * b.im) * c.im + (a.re * b.im + a.im * b.re) * c.re))) = --((a.re * b.re - a.im * b.im) * c.im + (a.re * b.im + a.im * b.re) * c.re)","Real.new(lib(real.real_base).neg_gt(-(a * b * c).im)) = --(a * b * c).im","Real.new(lib(real.real_base).neg_gt(a.re * b.re - a.im * b.im)) = -(a.re * b.re - a.im * b.im)","--((a * b).re * c.im + (a * b).im * c.re) = (a * b).re * c.im + (a * b).im * c.re","--((a.re * b.im + a.im * b.re) * c.re + (a.re * b.re - a.im * b.im) * c.im) = (a.re * b.im + a.im * b.re) * c.re + (a.re * b.re - a.im * b.im) * c.im"]}
{"goal":"(a * b * c).im = a.re * b.re * c.im - a.im * b.im * c.im + a.re * b.im * c.re + a.im * b.re * c.re","proof":["a.re * b.re * c.im - a.im * b.im * c.im = (a.re * b.re - a.im * b.im) * c.im","a.re * b.im * c.re + a.im * b.re * c.re = (a.re * b.im + a.im * b.re) * c.re","a.re * b.re * c.im - a.im * b.im * c.im + (a.re * b.im * c.re + a.im * b.re * c.re) = a.re * b.re * c.im - a.im * b.im * c.im + a.re * b.im * c.re + a.im * b.re * c.re"]}
{"goal":"(a * b * c).im = a.re * b.re * c.im + a.re * b.im * c.re - a.im * b.im * c.im + a.im * b.re * c.re","proof":["a.re * b.re * c.im + a.re * b.im * c.re - a.im * b.im * c.im = a.re * b.re * c.im - a.im * b.im * c.im + a.re * b.im * c.re","a.re * b.re * c.im - a.im * b.im * c.im + a.re * b.im * c.re + a.im * b.re * c.re != (a * b * c).im"]}
{"goal":"mul_three_im","proof":["a.re * b.re * c.im + a.re * b.im * c.re + a.im * b.re * c.re - a.im * b.im * c.im = a.re * b.re * c.im + a.re * b.im * c.re - a.im * b.im * c.im + a.im * b.re * c.re","a.re * b.re * c.im + a.re * b.im * c.re - a.im * b.im * c.im + a.im * b.re * c.re != (a * b * c).im"]}
{"goal":"(a * b * c).re = (a * (b * c)).re","proof":["a.im * (b.im * c.re) = a.im * b.im * c.re","a.im * (b.re * c.im) = a.im * b.re * c.im","a.re * (b.im * c.im) = a.re * b.im * c.im","a.re * (b.re * c.re) = a.re * b.re * c.re","a.re * b.re * c.re - a.im * b.re * c.im - a.re * b.im * c.im = a.re * b.re * c.re - a.re * b.im * c.im - a.im * b.re * c.im","b.re * c.re * a.re - b.re * c.im * a.im - b.im * c.im * a.re - b.im * c.re * a.im = b.re * c.re * a.re - b.re * c.im * a.im - b.im * c.re * a.im - b.im * c.im * a.re","a * (b * c) = b * c * a","a.im * (b.im * c.re) = b.im * c.re * a.im","a.im * (b.re * c.im) = b.re * c.im * a.im","a.im * b.re = b.re * a.im","a.re * (b.im * c.im) = b.im * c.im * a.re","a.re * (b.re * c.re) = b.re * c.re * a.re","b.im * a.re = a.re * b.im","b.re * a.re = a.re * b.re","a.re * b.re * c.re - a.re * b.im * c.im - a.im * b.re * c.im - a.im * b.im * c.re = (a * b * c).re","b.re * c.re * a.re - b.re * c.im * a.im - b.im * c.re * a.im - b.im * c.im * a.re = (b * c * a).re"]}
{"goal":"(a * b * c).im = (a * (b * c)).im","proof":["a.im * (b.im * c.im) = a.im * b.im * c.im","a.im * (b.re * c.re) = a.im * b.re * c.re","a.re * (b.im * c.re) = a.re * b.im * c.re","a.re * (b.re * c.im) = a.re * b.re * c.im","b.re * c.re * a.im + (b.re * c.im * a.re + b.im * c.re * a.re) = b.re * c.re * a.im + b.re * c.im * a.re + b.im * c.re * a.re","a * (b * c) = b * c * a","a.im * (b.im * c.im) = b.im * c.im * a.im","a.im * (b.re * c.re) = b.re * c.re * a.im","a.re * (b.im * c.re) = b.im * c.re * a.re","a.re * (b.re * c.im) = b.re * c.im * a.re","a.im * b.re * c.re + (a.re * b.re * c.im + a.re * b.im * c.re) = a.re * b.re * c.im + a.re * b.im * c.re + a.im * b.re * c.re","a.re * b.re * c.im + a.re * b.im * c.re + a.im * b.re * c.re - a.im * b.im * c.im = (a * b * c).im","b.re * c.re * a.im + b.re * c.im * a.re + b.im * c.re * a.re - b.im * c.im * a.im = (b * c * a).im"]}
{"goal":"mul_assoc","proof":["a * (b * c) = b * c * a","Complex.new((a * b * c).re, (a * b * c).im) = a * b * c","Complex.new((b * c * a).re, (b * c * a).im) = b * c * a"]}
{"goal":"(-Complex.1).re = -Real.1","proof":["Complex.new(-Complex.1.re, -Complex.1.im) = -Complex.1","Complex.new(-Complex.1.re, -Complex.1.im).re = -Complex.1.re","Complex.new(Real.1, Real.0).re = Real.1","Complex.new(-Complex.1.re, -Complex.1.im).re != -Real.1","-Complex.1.re != -Real.1","Complex.1.re != Real.1"]}
{"goal":"(-Complex.1).im = Real.0","proof":["Complex.new(-Complex.1.re, -Complex.1.im) = -Complex.1","Complex.new(-Complex.1.re, -Complex.1.im).im = -Complex.1.im","Complex.new(Real.1, Real.0).im = Real.0","Complex.new(-Complex.1.re, -Complex.1.im).im != Real.0","-Complex.1.im != Real.0","-Complex.1.im != -Real.0","Complex.1.im != Real.0"]}
{"goal":"neg_one","proof":["Complex.new((-Complex.1).re, (-Complex.1).im) = -Complex.1"]}
{"goal":"neg_re","proof":["Complex.new(-a.re, -a.im) = -a","Complex.new(-a.re, -a.im).re = -a.re"]}
{"goal":"neg_im","proof":["Complex.new(-a.re, -a.im) = -a","Complex.new(-a.re, -a.im).im = -a.im"]}
{"goal":"neg_one_lifts","proof":["Complex.new(-Real.1, Real.0) = Complex.from_real(-Real.1)"]}
{"goal":"Complex.i.re * Complex.i.re - Complex.i.im * Complex.i.im = Real.0 * Real.0 - Real.1 * Real.1","proof":["Complex.i.im * -Complex.i.im = -(Complex.i.im * Complex.i.im)","-Complex.i.re * Complex.i.re = -(Complex.i.re * Complex.i.re)","Complex.i.re * Complex.i.re + -(Complex.i.im * Complex.i.im) = Complex.i.re * Complex.i.re - Complex.i.im * Complex.i.im","Real.0 * Real.0 + -(Real.1 * Real.1) = Real.0 * Real.0 - Real.1 * Real.1","Real.1 * -Real.1 = -Real.1","Complex.new(Real.0, Real.1).im = Real.1","Complex.new(Real.0, Real.1).re = Real.0","Real.new(lib(real.real_base).neg_gt(-(Complex.i.re * Complex.i.re))) = --(Complex.i.re * Complex.i.re)","Real.new(lib(real.real_base).neg_gt(Complex.i.im)) = -Complex.i.im","Real.new(lib(real.real_base).neg_gt(Complex.i.re)) = -Complex.i.re","Real.new(lib(real.real_base).neg_gt(Real.0)) = -Real.0","Real.new(lib(real.real_base).neg_gt(Real.1)) = -Real.1","Real.0 * Real.0 = Real.0","Real.1 * Real.1 = Real.1","--(Complex.i.re * Complex.i.re) = Complex.i.re * Complex.i.re"]}
{"goal":"Complex.i.re * Complex.i.im + Complex.i.im * Complex.i.re = Real.0 * Real.1 + Real.1 * Real.0","proof":["Real.0 * Complex.i.im + Complex.i.re * Complex.i.im = (Real.0 + Complex.i.re) * Complex.i.im","Real.0 * Real.1 + Real.0 * Real.1 = (Real.0 + Real.0) * Real.1","Complex.i.im * -Complex.i.re = -(Complex.i.im * Complex.i.re)","Complex.i.re * -Complex.i.im = -(Complex.i.re * Complex.i.im)","-Complex.i.re * Complex.i.im = -(Complex.i.re * Complex.i.im)","Real.0 * -Real.1 = -Real.0","Complex.i.im * Complex.i.re = Complex.i.re * Complex.i.im","Real.1 * Real.0 = Real.0 * Real.1","Complex.new(Real.0, Real.1).im = Real.1","Complex.new(Real.0, Real.1).re = Real.0","Real.new(lib(real.real_base).neg_gt(Complex.i.im)) = -Complex.i.im","Real.new(lib(real.real_base).neg_gt(Complex.i.re)) = -Complex.i.re","Real.new(lib(real.real_base).neg_gt(Real.0)) = -Real.0","Real.new(lib(real.real_base).neg_gt(Real.1)) = -Real.1","Real.0 + Real.0 = Real.0","Real.1 * Real.0 = Real.0","Real.0 + Complex.i.re = Complex.i.re"]}
{"goal":"Complex.new(Real.0 * Real.0 - Real.1 * Real.1, Real.0 * Real.1 + Real.1 * Real.0) = Complex.new(-Real.1, Real.0)","proof":["Real.0 * Real.1 + Real.0 * Real.1 = (Real.0 + Real.0) * Real.1","Real.0 * Real.0 + -(Real.1 * Real.1) = Real.0 * Real.0 - Real.1 * Real.1","Real.1 * Real.0 = Real.0 * Real.1","Real.0 + Real.0 = Real.0","Real.0 * Real.0 = Real.0","Real.1 * Real.0 = Real.0","Real.1 * Real.1 = Real.1","Real.0 + -Real.1 = -Real.1"]}
{"goal":"Complex.i * Complex.i = Complex.new(-Real.1, Real.0)","proof":["Complex.new(Complex.i.re * Complex.i.re - Complex.i.im * Complex.i.im, Complex.i.re * Complex.i.im + Complex.i.im * Complex.i.re) = Complex.i * Complex.i"]}
{"goal":"i_squared","proof":[]}
{"goal":"(a * b).conj = Complex.new((a * b).re, -(a * b).im)","proof":["Complex.new((a * b).re, -(a * b).im) = (a * b).conj"]}
{"goal":"a.conj * b.conj = Complex.new(a.re, -a.im) * Complex.new(b.re, -b.im)","proof":["Complex.new(Complex.new(a.re, -a.im).re * Complex.new(b.re, -b.im).re - Complex.new(a.re, -a.im).im * Complex.new(b.re, -b.im).im, Complex.new(a.re, -a.im).re * Complex.new(b.re, -b.im).im + Complex.new(a.re, -a.im).im * Complex.new(b.re, -b.im).re) = Complex.new(a.re, -a.im) * Complex.new(b.re, -b.im)","Complex.new(a.conj.re * b.conj.re - a.conj.im * b.conj.im, a.conj.re * b.conj.im + a.conj.im * b.conj.re) = a.conj * b.conj","Complex.new(a.re, -a.im) = a.conj","Complex.new(b.re, -b.im) = b.conj"]}
{"goal":"real_part = a.re * b.re - a.im * b.im","proof":["a.im * -b.im = -(a.im * b.im)","-a.im * -b.im = -(a.im * -b.im)","--(a.im * b.im) = a.im * b.im"]}
{"goal":"imag_part = -(a.re * b.im + a.im * b.re)","proof":["-(a.re * b.im) + -(a.im * b.re) = -(a.re * b.im + a.im * b.re)","a.re * -b.im = -(a.re * b.im)","-a.im * b.re = -(a.im * b.re)"]}
{"goal":"Complex.new(real_part, imag_part) = Complex.new((a * b).re, -(a * b).im)","proof":["Complex.new(Complex.0.re + (a * b).conj.re, Complex.0.im + (a * b).conj.im) = Complex.0 + (a * b).conj","Complex.new(Complex.0.re + Complex.new(real_part, imag_part).re, Complex.0.im + Complex.new(real_part, imag_part).im) = Complex.0 + Complex.new(real_part, imag_part)","Complex.new(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re) = a * b","Complex.new((a * b).re, -(a * b).im).im = -(a * b).im","Complex.new(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re).im = a.re * b.im + a.im * b.re","Complex.new(real_part, imag_part).im = imag_part","Complex.new((a * b).re, -(a * b).im).re = (a * b).re","Complex.new(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re).re = a.re * b.re - a.im * b.im","Complex.new(real_part, imag_part).re = real_part","Real.new(lib(real.real_base).neg_gt((a * b).im)) = -(a * b).im","Real.new(lib(real.real_base).neg_gt(a.re * b.im + a.im * b.re)) = -(a.re * b.im + a.im * b.re)","Complex.0 + Complex.new((a * b).re, -(a * b).im) = Complex.new((a * b).re, -(a * b).im)","Complex.0 + Complex.new(real_part, imag_part) = Complex.new(real_part, imag_part)"]}
{"goal":"conj_mul","proof":["Complex.new(Complex.new(a.re, -a.im).re * Complex.new(b.re, -b.im).re - Complex.new(a.re, -a.im).im * Complex.new(b.re, -b.im).im, Complex.new(a.re, -a.im).re * Complex.new(b.re, -b.im).im + Complex.new(a.re, -a.im).im * Complex.new(b.re, -b.im).re) = Complex.new(a.re, -a.im) * Complex.new(b.re, -b.im)","lib(real.real_seq).limit_rat(lib(real.real_seq).mul_rat_seq(lib(real.real_seq).rat_seq(-a.im), lib(real.real_seq).rat_seq(-b.im))) = -a.im * -b.im","lib(real.real_seq).limit_rat(lib(real.real_seq).mul_rat_seq(lib(real.real_seq).rat_seq(-a.im), lib(real.real_seq).rat_seq(b.re))) = -a.im * b.re","lib(real.real_seq).limit_rat(lib(real.real_seq).mul_rat_seq(lib(real.real_seq).rat_seq(a.conj.im), lib(real.real_seq).rat_seq(b.conj.im))) = a.conj.im * b.conj.im","lib(real.real_seq).limit_rat(lib(real.real_seq).mul_rat_seq(lib(real.real_seq).rat_seq(a.conj.im), lib(real.real_seq).rat_seq(b.conj.re))) = a.conj.im * b.conj.re","lib(real.real_seq).limit_rat(lib(real.real_seq).mul_rat_seq(lib(real.real_seq).rat_seq(a.conj.re), lib(real.real_seq).rat_seq(b.conj.im))) = a.conj.re * b.conj.im","lib(real.real_seq).limit_rat(lib(real.real_seq).mul_rat_seq(lib(real.real_seq).rat_seq(a.conj.re), lib(real.real_seq).rat_seq(b.conj.re))) = a.conj.re * b.conj.re","lib(real.real_seq).limit_rat(lib(real.real_seq).mul_rat_seq(lib(real.real_seq).rat_seq(a.re), lib(real.real_seq).rat_seq(-b.im))) = a.re * -b.im","lib(real.real_seq).limit_rat(lib(real.real_seq).mul_rat_seq(lib(real.real_seq).rat_seq(a.re), lib(real.real_seq).rat_seq(b.re))) = a.re * b.re","Complex.new(a.re, -a.im) = a.conj","Complex.new(b.re, -b.im) = b.conj","Real.new(lib(real.real_base).add_gt(a.conj.re * b.conj.im, a.conj.im * b.conj.re)) = a.conj.re * b.conj.im + a.conj.im * b.conj.re","Real.new(lib(real.real_base).add_gt(a.re * -b.im, -a.im * b.re)) = a.re * -b.im + -a.im * b.re","Complex.new(a.re, -a.im).im = -a.im","Complex.new(b.re, -b.im).im = -b.im","Complex.new(a.re, -a.im).re = a.re","Complex.new(b.re, -b.im).re = b.re"]}
{"goal":"a.conj.conj = Complex.new(a.re, -a.im).conj","proof":["Complex.new(a.re, -a.im) != a.conj","Complex.new(a.re, -a.im) = a.conj"]}
{"goal":"a.conj.conj = Complex.new(a.re, --a.im)","proof":["Complex.new(Complex.new(a.re, -a.im).re, -Complex.new(a.re, -a.im).im) = Complex.new(a.re, -a.im).conj","Complex.new(a.re, -a.im) = a.conj","Complex.new(a.re, -a.im).im = -a.im","Complex.new(a.re, -a.im).re = a.re","Real.new(lib(real.real_base).neg_gt(-a.im)) = --a.im","Real.new(lib(real.real_base).neg_gt(a.conj.im)) = -a.conj.im","--a.im = a.im"]}
{"goal":"a.conj.conj = Complex.new(a.re, a.im)","proof":["--a.im = a.im"]}
{"goal":"a.conj.conj = a","proof":["Complex.new(a.re, a.im) = a"]}
{"goal":"conj_conj","proof":[]}
{"goal":"a * a.conj = Complex.new(a.re, a.im) * Complex.new(a.re, -a.im)","proof":["Complex.new(a.re, -a.im) = a.conj","Complex.new(a.re, a.im) * a.conj != a * a.conj","Complex.new(a.re, a.im) != a","Complex.new(a.re, a.im) = a"]}
{"goal":"a * a.conj = Complex.new(a.re * a.re - a.im * -a.im, a.re * -a.im + a.im * a.re)","proof":["Complex.new(Complex.new(a.re, a.im).re * Complex.new(a.re, -a.im).re - Complex.new(a.re, a.im).im * Complex.new(a.re, -a.im).im, Complex.new(a.re, a.im).re * Complex.new(a.re, -a.im).im + Complex.new(a.re, a.im).im * Complex.new(a.re, -a.im).re) = Complex.new(a.re, a.im) * Complex.new(a.re, -a.im)","a.im * -a.im = -(a.im * a.im)","a.re * -a.im = -(a.re * a.im)","Complex.new(a.re, -a.im) = a.conj","a.re * a.conj.re + -(a.im * a.conj.im) = a.re * a.conj.re - a.im * a.conj.im","a.re * a.re + --(a.im * a.im) = a.re * a.re - -(a.im * a.im)","Real.new(lib(real.real_base).add_gt(-(a.re * a.im), a.im * a.re)) = -(a.re * a.im) + a.im * a.re","Real.new(lib(real.real_base).add_gt(a.re * a.conj.im, a.im * a.conj.re)) = a.re * a.conj.im + a.im * a.conj.re","Complex.new(a.re, a.im) = a","a.conj.im * a.re = a.re * a.conj.im","a.im * -a.im = -a.im * a.im","a.im * a.conj.im = a.conj.im * a.im","a.im * a.conj.re = a.conj.re * a.im","a.im * a.re = a.re * a.im","a.re * -a.im = -a.im * a.re","a.re * a.conj.re = a.conj.re * a.re","Complex.new(a.re, -a.im).im = -a.im","Complex.new(a.re, -a.im).re = a.re"]}
{"goal":"a * a.conj = Complex.new(a.re * a.re + a.im * a.im, a.re * -a.im + a.im * a.re)","proof":["a.im * -a.im = -(a.im * a.im)","a.re * a.re + -(a.im * -a.im) = a.re * a.re - a.im * -a.im","--(a.im * a.im) = a.im * a.im"]}
{"goal":"a * a.conj = Complex.new(a.re * a.re + a.im * a.im, Real.0)","proof":["a.re * -a.im = -(a.re * a.im)","a.im * a.re = a.re * a.im","-(a.re * a.im) + --(a.re * a.im) = Real.0","--(a.re * a.im) = a.re * a.im","Complex.new(a.re * a.re + a.im * a.im, -(a.re * a.im) + a.im * a.re) = a * a.conj","Complex.new(a.re * a.re + a.im * a.im, -(a.re * a.im) + --(a.re * a.im)) != a * a.conj","Complex.new(a.re * a.re + a.im * a.im, -(a.re * a.im) + a.re * a.im) = a * a.conj"]}
{"goal":"a * a.conj = Complex.new(a.abs_squared, Real.0)","proof":["a.re * a.re + a.im * a.im = a.abs_squared"]}
{"goal":"abs_squared_conj","proof":[]}
{"goal":"a.abs_squared = a.re * a.re + a.im * a.im","proof":["a.re * a.re + a.im * a.im = a.abs_squared"]}
{"goal":"re_square >= Real.0","proof":["a.re * a.re >= Real.0"]}
{"goal":"im_square >= Real.0","proof":["a.im * a.im >= Real.0"]}
{"goal":"re_square = a.re * a.re","proof":[]}
{"goal":"im_square = a.im * a.im","proof":[]}
{"goal":"re_square >= Real.0","proof":[]}
{"goal":"im_square >= Real.0","proof":[]}
{"goal":"re_square + im_square >= Real.0","proof":["not Real.0 <= re_square or Real.0 + im_square <= re_square + im_square","not Real.0 <= Real.0 + im_square or not Real.0 + im_square <= re_square + im_square or Real.0 <= re_square + im_square","Real.0 + im_square >= Real.0 = Real.0 <= Real.0 + im_square","re_square + im_square >= Real.0 = Real.0 <= re_square + im_square","re_square >= Real.0 = Real.0 <= re_square","not Real.0 <= re_square + im_square","Real.0 <= re_square","Real.0 + im_square = im_square","Real.0 + im_square >= Real.0","not Real.0 + im_square <= re_square + im_square or not Real.0 <= Real.0 + im_square","Real.0 <= Real.0 + im_square","Real.0 + im_square <= re_square + im_square"]}
{"goal":"a.abs_squared >= Real.0","proof":[]}
{"goal":"abs_squared_nonneg","proof":[]}
{"goal":"a * Complex.1 = a * Complex.new(Real.1, Real.0)","proof":["Complex.new(Real.1, Real.0) != Complex.1"]}
{"goal":"a * Complex.1 = Complex.new(a.re * Real.1 - a.im * Real.0, a.re * Real.0 + a.im * Real.1)","proof":["Complex.new(a.re * Complex.new(Real.1, Real.0).re - a.im * Complex.new(Real.1, Real.0).im, a.re * Complex.new(Real.1, Real.0).im + a.im * Complex.new(Real.1, Real.0).re) = a * Complex.new(Real.1, Real.0)","a.re * Complex.1.re + -(a.im * Complex.1.im) = a.re * Complex.1.re - a.im * Complex.1.im","a.re * Real.1 + -(a.im * Real.0) = a.re * Real.1 - a.im * Real.0","a.im * Complex.1.re + a.re * Complex.1.im = a.re * Complex.1.im + a.im * Complex.1.re","a.im * Real.1 + a.re * Real.0 = a.re * Real.0 + a.im * Real.1","Complex.1.im * a.re = a.re * Complex.1.im","a.im * Complex.1.im = Complex.1.im * a.im","a.im * Complex.1.re = Complex.1.re * a.im","a.im * Real.0 = Real.0 * a.im","a.im * Real.1 = Real.1 * a.im","a.re * Complex.1.re = Complex.1.re * a.re","a.re * Real.0 = Real.0 * a.re","a.re * Real.1 = Real.1 * a.re","Complex.new(Real.1, Real.0).im = Real.0","Complex.new(Real.1, Real.0).re = Real.1","Real.0 * a.re + a.im * Real.1 + Real.0 = Real.0 * a.re + a.im * Real.1","Real.1 * a.im + Real.0 = Real.1 * a.im","Real.1 * a.re - a.im * Real.0 + Real.0 = Real.1 * a.re - a.im * Real.0","a.re + Real.0 = a.re","a.im * Real.0 = Real.0","a.re * Real.0 = Real.0","a.re * Real.1 = a.re","Real.1 * (a.re * Real.1 - Real.0) = a.re * Real.1 - Real.0"]}
{"goal":"a * Complex.1 = Complex.new(a.re, a.im)","proof":["a.re * Real.1 + -(a.im * Real.0) = a.re * Real.1 - a.im * Real.0","a.im * Real.1 + a.re * Real.0 = a.re * Real.0 + a.im * Real.1","a.im * Real.1 + Real.0 = a.im * Real.1","a.re + Real.0 = a.re","a.im * Real.0 = Real.0","a.re * Real.0 = Real.0","a.im * Real.1 = a.im","a.re * Real.1 = a.re"]}
{"goal":"a * Complex.1 = a","proof":["Complex.new(a.re, a.im) = a"]}
{"goal":"mul_one_right","proof":[]}
{"goal":"mul_one_left","proof":["a * Complex.1 = Complex.1 * a","a * Complex.1 != a","a * Complex.1 = a"]}
{"goal":"(a + b).conj = Complex.new(a.re + b.re, a.im + b.im).conj","proof":["Complex.new(a.re + b.re, a.im + b.im) != a + b","Complex.new(a.re + b.re, a.im + b.im) = a + b"]}
{"goal":"(a + b).conj = Complex.new(a.re + b.re, -(a.im + b.im))","proof":["Complex.new(Complex.new(a.re + b.re, -(a.im + b.im)).conj.re, -Complex.new(a.re + b.re, -(a.im + b.im)).conj.im) = Complex.new(a.re + b.re, -(a.im + b.im)).conj.conj","Complex.new(Complex.new(a.re + b.re, -(a.im + b.im)).re, -Complex.new(a.re + b.re, -(a.im + b.im)).im) = Complex.new(a.re + b.re, -(a.im + b.im)).conj","Complex.new(Complex.new(a.re + b.re, a.im + b.im).re, -Complex.new(a.re + b.re, a.im + b.im).im) = Complex.new(a.re + b.re, a.im + b.im).conj","Complex.new(a.re + b.re, -(a.im + b.im)).im = -(a.im + b.im)","Complex.new(a.re + b.re, -(a.im + b.im)).re = a.re + b.re","Complex.new(a.re + b.re, -(a.im + b.im)).conj.conj = Complex.new(a.re + b.re, -(a.im + b.im))","--(a.im + b.im) = a.im + b.im"]}
{"goal":"(a + b).conj = Complex.new(a.re + b.re, -a.im + -b.im)","proof":["-a.im + -b.im = -(a.im + b.im)"]}
{"goal":"a.conj + b.conj = Complex.new(a.re, -a.im) + Complex.new(b.re, -b.im)","proof":["Complex.new(Complex.new(a.re, -a.im).re + Complex.new(b.re, -b.im).re, Complex.new(a.re, -a.im).im + Complex.new(b.re, -b.im).im) = Complex.new(a.re, -a.im) + Complex.new(b.re, -b.im)","Complex.new(a.conj.re + b.conj.re, a.conj.im + b.conj.im) = a.conj + b.conj","Complex.new(a.re, -a.im) = a.conj","Complex.new(b.re, -b.im) = b.conj"]}
{"goal":"a.conj + b.conj = Complex.new(a.re + b.re, -a.im + -b.im)","proof":["Complex.new(Complex.new(a.re, -a.im).re + Complex.new(b.re, -b.im).re, Complex.new(a.re, -a.im).im + Complex.new(b.re, -b.im).im) = Complex.new(a.re, -a.im) + Complex.new(b.re, -b.im)","Complex.new(a.re, -a.im) = a.conj","Complex.new(b.re, -b.im) = b.conj","Real.new(lib(real.real_base).add_gt(-a.im, -b.im)) = -a.im + -b.im","Real.new(lib(real.real_base).add_gt(a.conj.im, b.conj.im)) = a.conj.im + b.conj.im","Real.new(lib(real.real_base).add_gt(a.conj.re, b.conj.re)) = a.conj.re + b.conj.re","Real.new(lib(real.real_base).add_gt(a.re, b.re)) = a.re + b.re","Complex.new(a.re, -a.im).im = -a.im","Complex.new(b.re, -b.im).im = -b.im","Complex.new(a.re, -a.im).re = a.re","Complex.new(b.re, -b.im).re = b.re"]}
{"goal":"(a + b).conj = a.conj + b.conj","proof":["Complex.new(a.re + b.re, -a.im + -b.im) != a.conj + b.conj"]}
{"goal":"conj_add","proof":[]}
{"goal":"c * Complex.from_real(r) = c * Complex.new(r, Real.0)","proof":["Complex.new(r, Real.0) != Complex.from_real(r)","Complex.new(r, Real.0) = Complex.from_real(r)"]}
{"goal":"c * Complex.new(r, Real.0) = Complex.new(c.re * r - c.im * Real.0, c.re * Real.0 + c.im * r)","proof":["Complex.new(Complex.new(r, Real.0).re * c.re - Complex.new(r, Real.0).im * c.im, Complex.new(r, Real.0).re * c.im + Complex.new(r, Real.0).im * c.re) = Complex.new(r, Real.0) * c","c.im * r + c.re * Real.0 = c.re * Real.0 + c.im * r","c * Complex.new(r, Real.0) = Complex.new(r, Real.0) * c","c.im * Real.0 = Real.0 * c.im","c.re * Real.0 = Real.0 * c.re","r * c.im = c.im * r","r * c.re = c.re * r","Complex.new(r, Real.0).im = Real.0","Complex.new(r, Real.0).re = r","Real.0 * c.re + c.im * r + Real.0 = Real.0 * c.re + c.im * r","c.im * r + Real.0 = c.im * r","c.re * Real.0 = Real.0"]}
{"goal":"c * Complex.from_real(r) = Complex.new(c.re * r, c.im * r)","proof":["c.re * r + -(c.im * Real.0) = c.re * r - c.im * Real.0","c.im * r + c.re * Real.0 = c.re * Real.0 + c.im * r","c.im * r + Real.0 = c.im * r","c.re * r + Real.0 = c.re * r","c.im * Real.0 = Real.0","c.re * Real.0 = Real.0"]}
{"goal":"mul_from_real","proof":[]}
{"goal":"Complex.from_real(a * b) = Complex.new(a * b, Real.0)","proof":["Complex.new(a * b, Real.0) = Complex.from_real(a * b)"]}
{"goal":"Complex.from_real(a) * Complex.from_real(b) = Complex.new(a, Real.0) * Complex.new(b, Real.0)","proof":["Complex.from_real(b) * Complex.from_real(a) = Complex.from_real(a) * Complex.from_real(b)","Complex.new(b, Real.0) * Complex.new(a, Real.0) = Complex.new(a, Real.0) * Complex.new(b, Real.0)","Complex.new(a, Real.0) = Complex.from_real(a)","Complex.new(b, Real.0) = Complex.from_real(b)"]}
{"goal":"real_mul_lifts","proof":["Complex.new(Complex.from_real(a).re * b, Complex.from_real(a).im * b) = Complex.from_real(a) * Complex.from_real(b)","Complex.new(Complex.new(a * b, Real.0).re, Complex.new(a * b, Real.0).im) = Complex.new(a * b, Real.0)","b * Complex.from_real(a).re = Complex.from_real(a).re * b","b * a = a * b","Complex.new(a, Real.0) = Complex.from_real(a)","Complex.new(a * b, Real.0).im = Real.0","Complex.new(a, Real.0).im = Real.0","Complex.new(a * b, Real.0).re = a * b","Complex.new(a, Real.0).re = a","Real.0 * b = Real.0"]}
{"goal":"Complex.from_real(a + b) = Complex.new(a + b, Real.0)","proof":["Complex.new(a + b, Real.0) = Complex.from_real(a + b)"]}
{"goal":"Complex.from_real(a) + Complex.from_real(b) = Complex.new(a, Real.0) + Complex.new(b, Real.0)","proof":["Complex.from_real(b) + Complex.from_real(a) = Complex.from_real(a) + Complex.from_real(b)","Complex.new(b, Real.0) + Complex.new(a, Real.0) = Complex.new(a, Real.0) + Complex.new(b, Real.0)","Complex.new(a, Real.0) = Complex.from_real(a)","Complex.new(b, Real.0) = Complex.from_real(b)"]}
{"goal":"Complex.from_real(a + b) = Complex.new(a + b, Real.0)","proof":[]}
{"goal":"real_add_lifts","proof":["Complex.new(Complex.new(a, Real.0).re + Complex.new(b, Real.0).re, Complex.new(a, Real.0).im + Complex.new(b, Real.0).im) = Complex.new(a, Real.0) + Complex.new(b, Real.0)","Real.new(lib(real.real_base).add_gt(Complex.from_real(a).re, Complex.from_real(b).re)) = Complex.from_real(a).re + Complex.from_real(b).re","Real.new(lib(real.real_base).add_gt(a, b)) = a + b","Complex.from_real(b).im + Complex.from_real(a).im = Complex.from_real(a).im + Complex.from_real(b).im","Complex.new(a, Real.0) = Complex.from_real(a)","Complex.new(b, Real.0) = Complex.from_real(b)","Complex.new(a, Real.0).im = Real.0","Complex.new(b, Real.0).im = Real.0","Complex.new(a, Real.0).re = a","Complex.new(b, Real.0).re = b","Real.0 + Complex.from_real(a).im = Complex.from_real(a).im"]}
{"goal":"neg_eq_mul_neg_one","proof":["Complex.new((-Complex.1).re * a.re - (-Complex.1).im * a.im, (-Complex.1).re * a.im + (-Complex.1).im * a.re) = -Complex.1 * a","Complex.new(Complex.1.re * (-a).re - Complex.1.im * (-a).im, Complex.1.re * (-a).im + Complex.1.im * (-a).re) = Complex.1 * -a","Complex.1.im * -a.im = -(Complex.1.im * a.im)","Complex.1.im * -a.re = -(Complex.1.im * a.re)","Complex.1.re * -a.im = -(Complex.1.re * a.im)","Complex.1.re * -a.re = -(Complex.1.re * a.re)","-Complex.1.im * a.im = -(Complex.1.im * a.im)","-Complex.1.im * a.re = -(Complex.1.im * a.re)","-Complex.1.re * a.im = -(Complex.1.re * a.im)","-Complex.1.re * a.re = -(Complex.1.re * a.re)","(-Complex.1).im = -Complex.1.im","(-a).im = -a.im","(-Complex.1).re = -Complex.1.re","(-a).re = -a.re","Complex.1 * -a = -a"]}
{"goal":"a.re * a.re + a.im * a.im = Real.0","proof":["a.re * a.re + a.im * a.im = a.abs_squared"]}
{"goal":"Real.0 <= a.re * a.re","proof":["not (a.re * a.re).is_negative or a.re.is_negative or a.re.is_negative","not a.re.is_negative or not a.re.is_negative or (a.re * a.re).is_positive","not a.re * a.re <= Real.0 or not (a.re * a.re).is_positive or Real.0.is_positive","a.re * a.re <= Real.0 or Real.0 <= a.re * a.re","Real.0 <= a.re * a.re or (a.re * a.re).is_negative","(a.re * a.re).is_negative","a.re * a.re <= Real.0","a.re.is_negative","not (a.re * a.re).is_positive"]}
{"goal":"Real.0 <= a.im * a.im","proof":["not (a.im * a.im).is_negative or a.im.is_negative or a.im.is_negative","not a.im.is_negative or not a.im.is_negative or (a.im * a.im).is_positive","not a.im * a.im <= Real.0 or not (a.im * a.im).is_positive or Real.0.is_positive","a.im * a.im <= Real.0 or Real.0 <= a.im * a.im","Real.0 <= a.im * a.im or (a.im * a.im).is_negative","(a.im * a.im).is_negative","a.im * a.im <= Real.0","a.im.is_negative","not (a.im * a.im).is_positive"]}
{"goal":"a.re * a.re <= Real.0","proof":["not Real.0 <= a.im * a.im or a.re * a.re + Real.0 <= a.re * a.re + a.im * a.im","a.re * a.re + Real.0 = a.re * a.re","not a.re * a.re <= a.re * a.re + a.im * a.im","a.re * a.re + Real.0 <= a.re * a.re + a.im * a.im"]}
{"goal":"a.im * a.im <= Real.0","proof":["not Real.0 <= a.re * a.re or not a.re * a.re <= Real.0 or a.re * a.re = Real.0","a.im * a.im + a.re * a.re = a.re * a.re + a.im * a.im","a.im * a.im + Real.0 = a.im * a.im","a.re * a.re = Real.0"]}
{"goal":"a.re * a.re = Real.0","proof":["not Real.0 <= a.re * a.re or not a.re * a.re <= Real.0 or a.re * a.re = Real.0"]}
{"goal":"a.im * a.im = Real.0","proof":["not Real.0 <= a.im * a.im or not a.im * a.im <= Real.0 or a.im * a.im = Real.0"]}
{"goal":"a.re = Real.0","proof":["a.re * a.re != Real.0 or a.re = Real.0"]}
{"goal":"a.im = Real.0","proof":["a.im * a.im != Real.0 or a.im = Real.0"]}
{"goal":"abs_sq_zero_imp_zero","proof":["Complex.new(a.re, a.im) = a"]}
{"goal":"a * a.reciprocal = a * a.conj * Complex.from_real(a.abs_squared.reciprocal)","proof":["a * (a.conj * Complex.from_real(a.abs_squared.reciprocal)) = a * a.conj * Complex.from_real(a.abs_squared.reciprocal)","a.conj * Complex.from_real(a.abs_squared.reciprocal) = a.reciprocal"]}
{"goal":"a * a.conj = Complex.from_real(a.abs_squared)","proof":["Complex.new(a.abs_squared, Real.0) = a * a.conj","Complex.new(a.abs_squared, Real.0) = Complex.from_real(a.abs_squared)"]}
{"goal":"a * a.reciprocal = Complex.from_real(a.abs_squared) * Complex.from_real(a.abs_squared.reciprocal)","proof":["a * a.conj * Complex.from_real(a.abs_squared.reciprocal) != a * a.reciprocal"]}
{"goal":"a * a.reciprocal = Complex.from_real(a.abs_squared * a.abs_squared.reciprocal)","proof":["Complex.from_real(a.abs_squared) * Complex.from_real(a.abs_squared.reciprocal) = Complex.from_real(a.abs_squared * a.abs_squared.reciprocal)"]}
{"goal":"a.abs_squared != Real.0","proof":["a.abs_squared != Real.0 or Complex.0 = a"]}
{"goal":"mul_reciprocal","proof":["a.abs_squared * a.abs_squared.reciprocal = Real.1 or a.abs_squared = Real.0","Complex.new(Real.1, Real.0) = Complex.from_real(Real.1)","a * a.reciprocal != Complex.new(Real.1, Real.0)","a * a.reciprocal != Complex.from_real(Real.1)","a.abs_squared * a.abs_squared.reciprocal = Real.1"]}
{"goal":"a * c * c.reciprocal = b * c * c.reciprocal","proof":["b * c != a * c"]}
{"goal":"a * (c * c.reciprocal) = b * (c * c.reciprocal)","proof":["a * (c * c.reciprocal) = a * c * c.reciprocal","b * (c * c.reciprocal) = b * c * c.reciprocal"]}
{"goal":"c * c.reciprocal = Complex.1","proof":["c * c.reciprocal = Complex.1 or Complex.0 = c"]}
{"goal":"mul_right_cancel","proof":["a * (c * c.reciprocal) = c * c.reciprocal * a","b * (c * c.reciprocal) = c * c.reciprocal * b","Complex.new(a.re, a.im) = a","Complex.new(b.re, b.im) = b","Complex.1 * Complex.new(a.re, a.im) = Complex.new(a.re, a.im)","Complex.1 * Complex.new(b.re, b.im) = Complex.new(b.re, b.im)"]}
{"goal":"mul_left_cancel","proof":["c * a != b * a or Complex.0 = a or c = b","b * a = a * b","c * a = a * c","c * a != b * a or Complex.0 = a","c * a != b * a"]}
{"goal":"Complex.from_real(a).reciprocal = Complex.0","proof":["Complex.from_real(a).re * Complex.from_real(a).re + Complex.from_real(a).im * Complex.from_real(a).im = Complex.from_real(a).abs_squared","a * Real.1 + a * Real.0 = a * (Real.1 + Real.0)","Complex.new(Complex.from_real(Complex.from_real(a).abs_squared.reciprocal).re * Complex.from_real(a).conj.re - Complex.from_real(Complex.from_real(a).abs_squared.reciprocal).im * Complex.from_real(a).conj.im, Complex.from_real(Complex.from_real(a).abs_squared.reciprocal).re * Complex.from_real(a).conj.im + Complex.from_real(Complex.from_real(a).abs_squared.reciprocal).im * Complex.from_real(a).conj.re) = Complex.from_real(Complex.from_real(a).abs_squared.reciprocal) * Complex.from_real(a).conj","Complex.new(Complex.from_real(a).re * Complex.from_real(Real.1).re - Complex.from_real(a).im * Complex.from_real(Real.1).im, Complex.from_real(a).re * Complex.from_real(Real.1).im + Complex.from_real(a).im * Complex.from_real(Real.1).re) = Complex.from_real(a) * Complex.from_real(Real.1)","Complex.from_real(a) * Complex.from_real(Real.1) = Complex.from_real(a * Real.1)","Complex.from_real(Real.0).conj * Complex.from_real(Complex.from_real(Real.0).abs_squared.reciprocal) = Complex.from_real(Real.0).reciprocal","Complex.new(Complex.from_real(a).re, -Complex.from_real(a).im) = Complex.from_real(a).conj","Complex.from_real(a).conj * Complex.from_real(Complex.from_real(a).abs_squared.reciprocal) = Complex.from_real(Complex.from_real(a).abs_squared.reciprocal) * Complex.from_real(a).conj","a * Real.1 = Real.1 * a","Complex.new(Complex.from_real(a).abs_squared.reciprocal, Real.0) = Complex.from_real(Complex.from_real(a).abs_squared.reciprocal)","Complex.new(Real.0, Real.0) = Complex.from_real(Real.0)","Complex.new(Real.1, Real.0) = Complex.from_real(Real.1)","Complex.new(Real.1, a).im = a","Complex.new(a, Real.0).im = Real.0","Complex.new(Real.1, a).re = Real.1","Complex.new(a, Real.0).re = a","Complex.new(a, Real.1).re = a","Real.1 * Real.0 = Real.0","Real.0 + Complex.i.re * Complex.i.re = Complex.i.re * Complex.i.re","Real.0 + Real.0 = Real.0","Complex.i.re * Complex.i.re + Real.0 = Complex.i.re * Complex.i.re","Real.1 + Real.0 = Real.1"]}
{"goal":"Complex.from_real(a.reciprocal) = Complex.0","proof":["Complex.new(Real.0, Real.0) = Complex.from_real(Real.0)","Real.0 != a or a.reciprocal = Real.0","Complex.new(Real.0, Real.0) != Complex.from_real(a.reciprocal)","Complex.from_real(a.reciprocal) != Complex.from_real(Real.0)","a.reciprocal = Real.0","a.reciprocal != Real.0"]}
{"goal":"Complex.from_real(a).reciprocal = Complex.from_real(a.reciprocal)","proof":["Complex.from_real(a).reciprocal != Complex.0"]}
{"goal":"Complex.from_real(a) != Complex.0","proof":["Complex.new(a, Real.0) = Complex.from_real(a)","Complex.new(Real.0, Real.0).re = Real.0","Complex.new(a, Real.0).re = a"]}
{"goal":"Complex.from_real(a) * Complex.from_real(a).reciprocal = Complex.1","proof":["Complex.from_real(a) * Complex.from_real(a).reciprocal = Complex.1 or Complex.from_real(a) = Complex.0"]}
{"goal":"Complex.from_real(a) * Complex.from_real(a.reciprocal) = Complex.1","proof":["Complex.from_real(a) * Complex.from_real(a.reciprocal) = Complex.from_real(a * a.reciprocal)","Complex.from_real(a * a.reciprocal) != Complex.1","a * a.reciprocal = Real.1 or Real.0 = a","Complex.new(a * a.reciprocal, Real.0) = Complex.from_real(a * a.reciprocal)","Complex.new(a * a.reciprocal, Real.0) != Complex.1","a * a.reciprocal = Real.1"]}
{"goal":"Complex.from_real(a) * Complex.from_real(a).reciprocal = Complex.from_real(a) * Complex.from_real(a.reciprocal)","proof":["Complex.from_real(a) * Complex.from_real(a).reciprocal != Complex.1"]}
{"goal":"Complex.from_real(a).reciprocal = Complex.from_real(a.reciprocal)","proof":["Complex.from_real(a) * Complex.from_real(a).reciprocal != Complex.from_real(a) * Complex.from_real(a.reciprocal) or Complex.from_real(a) = Complex.0 or Complex.from_real(a).reciprocal = Complex.from_real(a.reciprocal)"]}
{"goal":"reciprocal_lifts","proof":[]}
{"goal":"zero_reciprocal","proof":["Complex.from_real(Real.0).reciprocal = Complex.from_real(Real.0.reciprocal)","Complex.new(Real.0, Real.0) = Complex.from_real(Real.0)"]}
{"goal":"forall(x0: Complex, x1: Complex, x2: Complex) { x0 + (x1 + x2) = x0 + x1 + x2 }","proof":["let (s0: Complex, s1: Complex, s2: Complex) satisfy { s0 + (s1 + s2) != s0 + s1 + s2 }","s0 + (s1 + s2) = s0 + s1 + s2"]}
{"goal":"forall(x0: Complex, x1: Complex) { AddSemigroup.add[Complex](x0, x1) = AddSemigroup.add[Complex](x1, x0) }","proof":["let (s0: Complex, s1: Complex) satisfy { s1 + s0 != s0 + s1 }","s1 + s0 = s0 + s1"]}
{"goal":"forall(x0: Complex) { AddSemigroup.add[Complex](Complex.0, x0) = x0 } and forall(x1: Complex) { AddSemigroup.add[Complex](x1, Complex.0) = x1 }","proof":["let (s0: Complex, s1: Complex) satisfy { s1 + Complex.0 != s1 or Complex.0 + s0 != s0 }","s1 + Complex.0 = Complex.0 + s1","Complex.0 + s0 = s0","Complex.0 + s1 = s1","s1 + Complex.0 != s1"]}
{"goal":"forall(x0: Complex, x1: Complex, x2: Complex) { x0 * (x1 * x2) = x0 * x1 * x2 }","proof":["let (s0: Complex, s1: Complex, s2: Complex) satisfy { s0 * (s1 * s2) != s0 * s1 * s2 }","s0 * (s1 * s2) = s0 * s1 * s2"]}
{"goal":"forall(x0: Complex) { Semigroup.mul[Complex](Complex.1, x0) = x0 } and forall(x1: Complex) { Semigroup.mul[Complex](x1, Complex.1) = x1 }","proof":["let (s0: Complex, s1: Complex) satisfy { s1 * Complex.1 != s1 or Complex.1 * s0 != s0 }","s1 * Complex.1 = Complex.1 * s1","Complex.1 * s0 = s0","Complex.1 * s1 = s1","s1 * Complex.1 != s1"]}
{"goal":"a * Complex.0 = a * Complex.new(Real.0, Real.0)","proof":["Complex.new(Real.0, Real.0) != Complex.0"]}
{"goal":"a * Complex.new(Real.0, Real.0) = Complex.new(a.re * Real.0 - a.im * Real.0, a.re * Real.0 + a.im * Real.0)","proof":["Complex.new(a.re * Real.0, a.im * Real.0) = a * Complex.from_real(Real.0)","a.re * Real.0 + a.im * Real.0 = (a.re + a.im) * Real.0","a.re * Real.0 - a.im * Real.0 = (a.re - a.im) * Real.0","a.im * Real.0 + a.re * Real.0 = a.re * Real.0 + a.im * Real.0","a.im * Real.0 = Real.0 * a.im","Complex.new(Real.0, Real.0) = Complex.from_real(Real.0)","Real.0 * a.im + Real.0 = Real.0 * a.im","(a.re + a.im) * Real.0 = Real.0","(a.re - a.im) * Real.0 = Real.0","a.re * Real.0 = Real.0"]}
{"goal":"a.re * Real.0 = Real.0","proof":["a.re * Real.0 = Real.0"]}
{"goal":"a.im * Real.0 = Real.0","proof":["a.im * Real.0 = Real.0"]}
{"goal":"a * Complex.new(Real.0, Real.0) = Complex.new(Real.0, Real.0)","proof":["Complex.new(a.re * Real.0, a.im * Real.0) = a * Complex.from_real(Real.0)","Complex.new(Real.0, Real.0) = Complex.from_real(Real.0)"]}
{"goal":"a * Complex.0 = Complex.0","proof":["a * Complex.new(Real.0, Real.0) != Complex.0","Complex.new(Real.0, Real.0) != Complex.0"]}
{"goal":"mul_zero_right","proof":[]}
{"goal":"Complex.0 * a = Complex.new(Real.0, Real.0) * a","proof":["Complex.new(Real.0, Real.0) != Complex.0"]}
{"goal":"Complex.new(Real.0, Real.0) * a = Complex.new(Real.0 * a.re - Real.0 * a.im, Real.0 * a.im + Real.0 * a.re)","proof":["Real.0 * a.re - Real.0 * a.im = Real.0 * (a.re - a.im)","Complex.new(Real.0 * (a.re - a.im), Real.0 * a.im + Real.0 * a.re) != Complex.new(Real.0, Real.0) * a","a * Complex.0 = Complex.0 * a","a * Complex.0 = Complex.0","Real.0 * (a.re - a.im) = Real.0","Real.0 * a.im = Real.0","Real.0 * a.re = Real.0","Real.0 + Real.0 = Real.0","Complex.new(Real.0 * (a.re - a.im), Real.0 * a.im + Real.0) != Complex.new(Real.0, Real.0) * a","Complex.new(Real.0, Real.0 * a.im + Real.0) != Complex.new(Real.0, Real.0) * a","Complex.new(Real.0, Real.0 + Real.0) != Complex.new(Real.0, Real.0) * a","Complex.new(Real.0, Real.0) * a != Complex.new(Real.0, Real.0)","Complex.new(Real.0, Real.0) * a != Complex.0","Complex.0 * a != Complex.0"]}
{"goal":"Real.0 * a.re = Real.0","proof":["a.re * Real.0 = Real.0 * a.re","a.re * Real.0 != Real.0","a.re * Real.0 = Real.0"]}
{"goal":"Real.0 * a.im = Real.0","proof":["a.im * Real.0 = Real.0 * a.im","a.im * Real.0 != Real.0","a.im * Real.0 = Real.0"]}
{"goal":"Complex.new(Real.0, Real.0) * a = Complex.new(Real.0, Real.0)","proof":["a * Complex.0 = Complex.0 * a","a * Complex.0 = Complex.0","Complex.new(Real.0, Real.0) * a != Complex.0","Complex.0 * a != Complex.0"]}
{"goal":"Complex.0 * a = Complex.0","proof":["Complex.new(Real.0, Real.0) * a != Complex.0","Complex.new(Real.0, Real.0) != Complex.0"]}
{"goal":"mul_zero_left","proof":[]}
{"goal":"forall(x0: Complex, x1: Complex, x2: Complex) { Semigroup.mul[Complex](x0, AddSemigroup.add[Complex](x1, x2)) = AddSemigroup.add[Complex](Semigroup.mul[Complex](x0, x1), Semigroup.mul[Complex](x0, x2)) } and forall(x3: Complex, x4: Complex, x5: Complex) { Semigroup.mul[Complex](AddSemigroup.add[Complex](x3, x4), x5) = AddSemigroup.add[Complex](Semigroup.mul[Complex](x3, x5), Semigroup.mul[Complex](x4, x5)) } and forall(x6: Complex) { Semigroup.mul[Complex](x6, add_monoid.AddMonoid.0[Complex]) = add_monoid.AddMonoid.0[Complex] } and forall(x7: Complex) { Semigroup.mul[Complex](add_monoid.AddMonoid.0[Complex], x7) = add_monoid.AddMonoid.0[Complex] }","proof":["let (s0: Complex, s1: Complex, s2: Complex, s3: Complex, s4: Complex, s5: Complex, s6: Complex, s7: Complex) satisfy { s3 * s5 + s4 * s5 != (s3 + s4) * s5 or s0 * s1 + s0 * s2 != s0 * (s1 + s2) or Complex.0 * s7 != Complex.0 or s6 * Complex.0 != Complex.0 }","s0 * s1 + s0 * s2 = s0 * (s1 + s2)","s5 * s3 + s5 * s4 = s5 * (s3 + s4)","s5 * (s3 + s4) = (s3 + s4) * s5","s5 * s3 = s3 * s5","s5 * s4 = s4 * s5","Complex.0 * s7 = Complex.0","s6 * Complex.0 = Complex.0","s3 * s5 + s4 * s5 != (s3 + s4) * s5"]}
{"goal":"forall(x0: Complex) { AddSemigroup.add[Complex](x0, -x0) = add_monoid.AddMonoid.0[Complex] }","proof":["let s0: Complex satisfy { s0 + -s0 != Complex.0 }","Complex.new(s0.re + (-s0).re, s0.im + (-s0).im) = s0 + -s0","(-s0).im = -s0.im","(-s0).re = -s0.re","s0.im + -s0.im = Real.0","s0.re + -s0.re = Real.0","Complex.new(s0.re + (-s0).re, s0.im + (-s0).im) != Complex.0","Complex.new(s0.re + (-s0).re, s0.im + -s0.im) != Complex.0","Complex.new(s0.re + (-s0).re, Real.0) != Complex.0","Complex.new(s0.re + -s0.re, Real.0) != Complex.0"]}
{"goal":"forall(x0: Complex, x1: Complex) { Semigroup.mul[Complex](x0, x1) = Semigroup.mul[Complex](x1, x0) }","proof":["let (s0: Complex, s1: Complex) satisfy { s1 * s0 != s0 * s1 }","s1 * s0 = s0 * s1"]}
{"goal":"forall(x0: Complex) { x0 != add_monoid.AddMonoid.0[Complex] implies Semigroup.mul[Complex](x0, x0.reciprocal) = monoid.Monoid.1[Complex] } and add_monoid.AddMonoid.0[Complex].reciprocal = add_monoid.AddMonoid.0[Complex]","proof":["let s0: Complex satisfy { Complex.0.reciprocal != Complex.0 or Complex.0 != s0 and (s0 * s0.reciprocal != Complex.1 or Complex.0.reciprocal != Complex.0) }","s0 * s0.reciprocal = Complex.1 or Complex.0 = s0","Complex.0 != s0","s0 * s0.reciprocal != Complex.1","s0 * s0.reciprocal = Complex.1"]}
