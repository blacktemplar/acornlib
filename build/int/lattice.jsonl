{"goal":"abs(Int.from_nat(j) * Int.from_nat(k)) = abs(Int.from_nat(j)) * abs(Int.from_nat(k))","proof":["abs(Int.from_nat(j)) * abs(Int.from_nat(k)) = abs(Int.from_nat(j) * Int.from_nat(k))"]}
{"goal":"Int.from_nat(abs(Int.from_nat(j) * Int.from_nat(k))) = Int.from_nat(abs(Int.from_nat(j)) * abs(Int.from_nat(k)))","proof":["abs(Int.from_nat(j)) * abs(Int.from_nat(k)) != abs(Int.from_nat(j) * Int.from_nat(k))"]}
{"goal":"not Int.from_nat(j).is_negative","proof":["Int.from_nat(abs(Int.from_nat(j))) != Int.from_nat(j) or not Int.from_nat(j).is_negative","Int.from_nat(j) != Int.from_nat(j) or abs(Int.from_nat(j)) = j","Int.from_nat(abs(Int.from_nat(j))) != Int.from_nat(j)","abs(Int.from_nat(j)) != j"]}
{"goal":"not Int.from_nat(k).is_negative","proof":["Int.from_nat(abs(Int.from_nat(k))) != Int.from_nat(k) or not Int.from_nat(k).is_negative","Int.from_nat(k) != Int.from_nat(k) or abs(Int.from_nat(k)) = k","Int.from_nat(abs(Int.from_nat(k))) != Int.from_nat(k)","abs(Int.from_nat(k)) != k"]}
{"goal":"not (Int.from_nat(j) * Int.from_nat(k)).is_negative","proof":["not (Int.from_nat(j) * Int.from_nat(k)).is_negative or Int.from_nat(j).is_negative or Int.from_nat(k).is_negative"]}
{"goal":"Int.from_nat(abs(Int.from_nat(j) * Int.from_nat(k))) = Int.from_nat(j) * Int.from_nat(k)","proof":["Int.from_nat(abs(Int.from_nat(j) * Int.from_nat(k))) = Int.from_nat(j) * Int.from_nat(k) or (Int.from_nat(j) * Int.from_nat(k)).is_negative"]}
{"goal":"Int.from_nat(j) * Int.from_nat(k) = Int.from_nat(abs(Int.from_nat(j)) * abs(Int.from_nat(k)))","proof":["Int.from_nat(abs(Int.from_nat(j)) * abs(Int.from_nat(k))) != Int.from_nat(abs(Int.from_nat(j) * Int.from_nat(k)))"]}
{"goal":"mul_from_nat","proof":["Int.from_nat(j).mul_nat(k) = Int.from_nat(j * k)","Int.from_nat(j) * Int.from_nat(k) = Int.from_nat(j).mul_nat(k)"]}
{"goal":"Int.from_nat(abs(a)) != a","proof":["Int.from_nat(abs(a)) != a or not a.is_negative"]}
{"goal":"not a.is_positive","proof":["sub_nat(a.pos_part, a.neg_part) = a","not a.is_positive or a.pos_part = abs(a)","a.pos_part = abs(a)","not a.is_positive or a.neg_part = Nat.0","a.neg_part = Nat.0","sub_nat(Nat.0, Nat.0) = Int.from_nat(Nat.0)"]}
{"goal":"a.pos_part = Nat.0","proof":["a.pos_part = Nat.0 or a.is_positive"]}
{"goal":"a.neg_part = abs(a)","proof":["a.neg_part = abs(a) or a.is_positive"]}
{"goal":"sub_nat(Int.from_nat(Nat.0).pos_part, Int.from_nat(Nat.0).neg_part) = Int.from_nat(Nat.0)","proof":["sub_nat(Int.from_nat(Nat.0).pos_part, Int.from_nat(Nat.0).neg_part) = Int.from_nat(Nat.0)"]}
{"goal":"Int.from_nat(Nat.0).pos_part = Nat.0","proof":["sub_nat(a.pos_part, a.neg_part) = a","-Int.from_nat(Nat.0) = sub_nat(Nat.0, Nat.0)","(-Int.from_nat(Nat.0)).neg_part = Int.from_nat(Nat.0).pos_part"]}
{"goal":"(-Int.from_nat(Nat.0)).neg_part = Int.from_nat(Nat.0).pos_part","proof":["sub_nat(a.pos_part, a.neg_part) = a","-Int.from_nat(Nat.0) = sub_nat(Nat.0, Nat.0)"]}
{"goal":"sub_nat(a.pos_part, a.neg_part) = a","proof":["sub_nat(a.pos_part, a.neg_part) = a"]}
{"goal":"false","proof":["-sub_nat(Int.from_nat(Nat.0).neg_part, Int.from_nat(Nat.0).pos_part) = sub_nat(Int.from_nat(Nat.0).pos_part, Int.from_nat(Nat.0).neg_part)","-sub_nat(a.neg_part, Nat.0) = sub_nat(Nat.0, a.neg_part)","-Int.from_nat(Nat.0) = sub_nat(Nat.0, Nat.0)","(-Int.from_nat(Nat.0)).pos_part = Int.from_nat(Nat.0).neg_part"]}
{"goal":"not a.is_positive","proof":["-sub_nat(a.neg_part, a.pos_part) = sub_nat(a.pos_part, a.neg_part)","sub_nat(a.pos_part, a.neg_part) = a","not a.is_positive or a.pos_part = abs(a)","a.pos_part = abs(a)","not a.is_positive or a.neg_part = Nat.0","a.neg_part = Nat.0","(-sub_nat(a.pos_part, a.neg_part)).is_negative = sub_nat(a.pos_part, a.neg_part).is_positive"]}
{"goal":"abs_zero_imp_zero","proof":["a.is_positive or a.is_negative or 0 = a"]}
{"goal":"abs(a) * abs(b) = Nat.0","proof":["abs(a) * abs(b) = abs(a * b)","abs(a * b) != Nat.0","abs(0) != Nat.0"]}
{"goal":"abs(a) = Nat.0 or abs(b) = Nat.0","proof":["abs(a) * abs(b) != Nat.0 or abs(a) = Nat.0 or abs(b) = Nat.0"]}
{"goal":"a = 0","proof":["abs(a) != Nat.0 or 0 = a"]}
{"goal":"b = 0","proof":["abs(b) != Nat.0 or 0 = b"]}
{"goal":"mul_zero_imp_factor_zero","proof":[]}
{"goal":"not a.is_negative","proof":["not a.is_positive or not a.is_negative"]}
{"goal":"not b.is_negative","proof":["not b.is_positive or not b.is_negative"]}
{"goal":"not (a * b).is_negative","proof":["not (a * b).is_negative or a.is_negative or b.is_negative"]}
{"goal":"not a.is_positive","proof":["0.is_positive"]}
{"goal":"false","proof":[]}
{"goal":"b = 0","proof":["a * b != 0 or 0 = a or 0 = b"]}
{"goal":"not b.is_positive","proof":["0.is_positive"]}
{"goal":"false","proof":[]}
{"goal":"(a * b).is_positive","proof":["(a * b).is_positive or (a * b).is_negative or a * b = 0"]}
{"goal":"mul_pos_pos","proof":[]}
{"goal":"mul_pos_neg","proof":["not a.is_positive or not (-b).is_positive or (a * -b).is_positive","a * --b = -(a * -b)","(-(a * -b)).is_negative = (a * -b).is_positive","(--b).is_negative = (-b).is_positive","--b = b","not (a * --b).is_negative","not (-(a * -b)).is_negative","not (a * -b).is_positive","(--b).is_negative","not (-b).is_positive","(-b).is_positive"]}
{"goal":"mul_neg_pos","proof":["not b.is_positive or not a.is_negative or (b * a).is_negative","b * a = a * b","not (b * a).is_negative"]}
{"goal":"(-a).is_positive","proof":["sub_nat((--a).pos_part, (--a).neg_part) = --a","sub_nat(a.pos_part, a.neg_part) = a","(--a).neg_part = (-a).pos_part","(-a).neg_part = a.pos_part","(--a).pos_part = (-a).neg_part","(-a).pos_part = a.neg_part","(--a).is_negative = (-a).is_positive"]}
{"goal":"(-a * b).is_negative","proof":["not (-a).is_positive or not b.is_negative or (-a * b).is_negative"]}
{"goal":"(-(a * b)).is_negative","proof":["-a * b = -(a * b)"]}
{"goal":"(a * b).is_positive","proof":["(-(a * b)).is_negative = (a * b).is_positive"]}
{"goal":"mul_neg_neg","proof":[]}
{"goal":"a = -Int.from_nat(abs(a))","proof":["-Int.from_nat(abs(a)) = a or Int.from_nat(abs(a)) = a","Int.from_nat(abs(a)) = a","Int.from_nat(abs(a)) != a or not a.is_negative"]}
{"goal":"a.mul_nat(j * k) = -Int.from_nat(abs(a) * (j * k))","proof":["not a.is_negative or -Int.from_nat(abs(a) * (j * k)) = a.mul_nat(j * k)"]}
{"goal":"a.mul_nat(j * k) = -Int.from_nat(abs(a) * j * k)","proof":["abs(a) * (j * k) = abs(a) * j * k"]}
{"goal":"a.mul_nat(j) = -Int.from_nat(abs(a) * j)","proof":["not a.is_negative or -Int.from_nat(abs(a) * j) = a.mul_nat(j)"]}
{"goal":"a.mul_nat(j).mul_nat(k) = (-Int.from_nat(abs(a) * j)).mul_nat(k)","proof":["-Int.from_nat(abs(a) * j) != a.mul_nat(j)"]}
{"goal":"a.mul_nat(j).mul_nat(k) = -Int.from_nat(abs(a) * j).mul_nat(k)","proof":["(-Int.from_nat(abs(a) * j)).mul_nat(k) = -Int.from_nat(abs(a) * j).mul_nat(k)"]}
{"goal":"a.mul_nat(j).mul_nat(k) = -Int.from_nat(abs(a) * j * k)","proof":["Int.from_nat(abs(a) * j).mul_nat(k) = Int.from_nat(abs(a) * j * k)"]}
{"goal":"a.mul_nat(j * k) = a.mul_nat(j).mul_nat(k)","proof":["-Int.from_nat(abs(a) * j * k) != a.mul_nat(j * k)"]}
{"goal":"a.mul_nat(j * k) = Int.from_nat(abs(a) * (j * k))","proof":["Int.from_nat(abs(a) * (j * k)) = a.mul_nat(j * k) or a.is_negative"]}
{"goal":"a.mul_nat(j * k) = Int.from_nat(abs(a) * j * k)","proof":["abs(a) * (j * k) = abs(a) * j * k"]}
{"goal":"a.mul_nat(j) = Int.from_nat(abs(a) * j)","proof":["Int.from_nat(abs(a) * j) = a.mul_nat(j) or a.is_negative"]}
{"goal":"a.mul_nat(j).mul_nat(k) = Int.from_nat(abs(a) * j).mul_nat(k)","proof":["Int.from_nat(abs(a) * j) != a.mul_nat(j)"]}
{"goal":"a.mul_nat(j).mul_nat(k) = Int.from_nat(abs(a) * j * k)","proof":["Int.from_nat(abs(a) * j).mul_nat(k) = Int.from_nat(abs(a) * j * k)"]}
{"goal":"a.mul_nat(j * k) = a.mul_nat(j).mul_nat(k)","proof":["Int.from_nat(abs(a) * j * k) != a.mul_nat(j * k)"]}
{"goal":"mul_int_nat_nat_assoc","proof":[]}
{"goal":"b = -Int.from_nat(abs(b))","proof":["-Int.from_nat(abs(b)) = b or Int.from_nat(abs(b)) = b","Int.from_nat(abs(b)) = b","Int.from_nat(abs(b)) != b or not b.is_negative"]}
{"goal":"(a * b).mul_nat(n) = (a * -Int.from_nat(abs(b))).mul_nat(n)","proof":[]}
{"goal":"(a * b).mul_nat(n) = (-a.mul_nat(abs(b))).mul_nat(n)","proof":["-a.mul_nat(abs(b)) != a * b","a * -Int.from_nat(abs(b)) = -(a * Int.from_nat(abs(b)))","a * Int.from_nat(abs(b)) = a.mul_nat(abs(b))"]}
{"goal":"(a * b).mul_nat(n) = -a.mul_nat(abs(b)).mul_nat(n)","proof":["(-a.mul_nat(abs(b))).mul_nat(n) = -a.mul_nat(abs(b)).mul_nat(n)"]}
{"goal":"(a * b).mul_nat(n) = -a.mul_nat(abs(b) * n)","proof":["a.mul_nat(abs(b)).mul_nat(n) = a.mul_nat(abs(b) * n)"]}
{"goal":"(a * b).mul_nat(n) = -(a * Int.from_nat(abs(b) * n))","proof":["a * Int.from_nat(abs(b) * n) = a.mul_nat(abs(b) * n)"]}
{"goal":"(a * b).mul_nat(n) = a * -Int.from_nat(abs(b) * n)","proof":["a * -Int.from_nat(abs(b) * n) = -(a * Int.from_nat(abs(b) * n))"]}
{"goal":"(a * b).mul_nat(n) = a * (-Int.from_nat(abs(b))).mul_nat(n)","proof":["Int.from_nat(abs(b)).mul_nat(n) = Int.from_nat(abs(b) * n)","(-Int.from_nat(abs(b))).mul_nat(n) = -Int.from_nat(abs(b)).mul_nat(n)"]}
{"goal":"(a * b).mul_nat(n) = a * b.mul_nat(n)","proof":["a * (-Int.from_nat(abs(b))).mul_nat(n) != (a * b).mul_nat(n)"]}
{"goal":"a * b = a.mul_nat(abs(b))","proof":["a.mul_nat(abs(b)) = a * b or b.is_negative"]}
{"goal":"a.mul_nat(abs(b) * n) = (a * b).mul_nat(n)","proof":["a.mul_nat(abs(b)).mul_nat(n) = a.mul_nat(abs(b) * n)"]}
{"goal":"Int.from_nat(abs(b) * n) = b.mul_nat(n)","proof":["Int.from_nat(abs(b) * n) = b.mul_nat(n) or b.is_negative"]}
{"goal":"a.mul_nat(abs(b) * n) = a * b.mul_nat(n)","proof":["a * Int.from_nat(abs(b) * n) = a.mul_nat(abs(b) * n)"]}
{"goal":"(a * b).mul_nat(n) = a * b.mul_nat(n)","proof":["a.mul_nat(abs(b) * n) != (a * b).mul_nat(n)"]}
{"goal":"mul_int_int_nat_assoc","proof":[]}
{"goal":"c = -Int.from_nat(abs(c))","proof":["-Int.from_nat(abs(c)) = c or Int.from_nat(abs(c)) = c","Int.from_nat(abs(c)) = c","Int.from_nat(abs(c)) != c or not c.is_negative"]}
{"goal":"a * b * c = a * b * -Int.from_nat(abs(c))","proof":["-Int.from_nat(abs(c)) != c"]}
{"goal":"a * b * c = -(a * b * Int.from_nat(abs(c)))","proof":["a * b * -Int.from_nat(abs(c)) = -(a * b * Int.from_nat(abs(c)))"]}
{"goal":"a * b * c = -(a * b).mul_nat(abs(c))","proof":["a * b * Int.from_nat(abs(c)) = (a * b).mul_nat(abs(c))"]}
{"goal":"a * b * c = -(a * b.mul_nat(abs(c)))","proof":["a * b.mul_nat(abs(c)) = (a * b).mul_nat(abs(c))"]}
{"goal":"a * b * c = a * -b.mul_nat(abs(c))","proof":["a * -b.mul_nat(abs(c)) = -(a * b.mul_nat(abs(c)))"]}
{"goal":"a * b * c = a * -(b * Int.from_nat(abs(c)))","proof":["b * Int.from_nat(abs(c)) = b.mul_nat(abs(c))"]}
{"goal":"a * b * c = a * (b * -Int.from_nat(abs(c)))","proof":["b * -Int.from_nat(abs(c)) = -(b * Int.from_nat(abs(c)))"]}
{"goal":"a * b * c = a * (b * c)","proof":["a * (b * -Int.from_nat(abs(c))) != a * b * c"]}
{"goal":"c = Int.from_nat(abs(c))","proof":["Int.from_nat(abs(c)) = c or c.is_negative"]}
{"goal":"a * b * c = a * b * Int.from_nat(abs(c))","proof":["Int.from_nat(abs(c)) != c"]}
{"goal":"a * b * c = (a * b).mul_nat(abs(c))","proof":["(a * b).mul_nat(abs(c)) = a * b * c or c.is_negative"]}
{"goal":"a * b * c = a * b.mul_nat(abs(c))","proof":["a * b.mul_nat(abs(c)) = (a * b).mul_nat(abs(c))"]}
{"goal":"a * b * c = a * (b * Int.from_nat(abs(c)))","proof":["b * Int.from_nat(abs(c)) = b.mul_nat(abs(c))"]}
{"goal":"a * b * c = a * (b * c)","proof":["a * (b * Int.from_nat(abs(c))) != a * b * c"]}
{"goal":"mul_assoc","proof":[]}
{"goal":"int_is_reflexive","proof":["let s0: (Int, Int) -> Bool -> Int satisfy { forall(x0: (Int, Int) -> Bool, x1: Int) { not is_reflexive[Int](x0) or x0(x1, x1) } and forall(x2: (Int, Int) -> Bool) { not x2(s0(x2), s0(x2)) or is_reflexive[Int](x2) } }","not s0(Int.lte) <= s0(Int.lte) or is_reflexive[Int](Int.lte)","not s0(Int.lte) <= s0(Int.lte)","s0(Int.lte) != s0(Int.lte) or s0(Int.lte) <= s0(Int.lte)"]}
{"goal":"a <= c","proof":[]}
{"goal":"(b - a).is_positive","proof":["not a <= b or (b - a).is_positive or b = a"]}
{"goal":"a <= c","proof":[]}
{"goal":"(c - b).is_positive","proof":["not b <= c or (c - b).is_positive or c = b"]}
{"goal":"(b - a).is_positive","proof":[]}
{"goal":"(c - b + (b - a)).is_positive","proof":["not (c - b).is_positive or (c - b + (b - a)).is_positive or (b - a).is_negative","(b - a).is_negative","not (b - a).is_positive or not (b - a).is_negative"]}
{"goal":"(c - a).is_positive","proof":["c - b + (b + -a) = c - b + b + -a","c - b != c - b or b + (c - b) = c","b + -a = b - a","c - b + b + -a = c - b + b - a","c - b + b = b + (c - b)","b + (c - b) = c","not (b + (c - b) - a).is_positive","(c - b + (b + -a)).is_positive","(c - b + b + -a).is_positive","(c - b + b - a).is_positive"]}
{"goal":"a <= c","proof":["not (c - a).is_positive or a <= c"]}
{"goal":"lte_trans","proof":[]}
{"goal":"int_is_transitive","proof":["let (s0: (Int, Int) -> Bool -> Int, s1: (Int, Int) -> Bool -> Int, s2: (Int, Int) -> Bool -> Int) satisfy { forall(x0: (Int, Int) -> Bool, x1: Int, x2: Int, x3: Int) { not is_transitive[Int](x0) or not x0(x1, x2) or not x0(x2, x3) or x0(x1, x3) } and forall(x4: (Int, Int) -> Bool) { x4(s0(x4), s1(x4)) or is_transitive[Int](x4) } and forall(x5: (Int, Int) -> Bool) { x5(s1(x5), s2(x5)) or is_transitive[Int](x5) } and forall(x6: (Int, Int) -> Bool) { not x6(s0(x6), s2(x6)) or is_transitive[Int](x6) } }","not s0(Int.lte) <= s1(Int.lte) or not s1(Int.lte) <= --s2(Int.lte) or s0(Int.lte) <= --s2(Int.lte)","not s0(Int.lte) <= s2(Int.lte) or is_transitive[Int](Int.lte)","not s0(Int.lte) <= s2(Int.lte)","s1(Int.lte) <= s2(Int.lte) or is_transitive[Int](Int.lte)","s1(Int.lte) <= s2(Int.lte)","s0(Int.lte) <= s1(Int.lte) or is_transitive[Int](Int.lte)","s0(Int.lte) <= s1(Int.lte)","--s2(Int.lte) = s2(Int.lte)","s1(Int.lte) <= --s2(Int.lte)","not s0(Int.lte) <= --s2(Int.lte)","not s1(Int.lte) <= --s2(Int.lte) or s0(Int.lte) <= --s2(Int.lte)"]}
{"goal":"int_is_antisymmetric","proof":["let (s0: (Int, Int) -> Bool -> Int, s1: (Int, Int) -> Bool -> Int) satisfy { forall(x0: (Int, Int) -> Bool, x1: Int, x2: Int) { not is_antisymmetric[Int](x0) or not x0(x1, x2) or not x0(x2, x1) or x1 = x2 } and forall(x3: (Int, Int) -> Bool) { x3(s0(x3), s1(x3)) or is_antisymmetric[Int](x3) } and forall(x4: (Int, Int) -> Bool) { x4(s1(x4), s0(x4)) or is_antisymmetric[Int](x4) } and forall(x5: (Int, Int) -> Bool) { s1(x5) != s0(x5) or is_antisymmetric[Int](x5) } }","not s0(Int.lte) <= s1(Int.lte) or (s1(Int.lte) - s0(Int.lte)).is_positive or s1(Int.lte) = s0(Int.lte)","not s1(Int.lte) <= s0(Int.lte) or (s0(Int.lte) - s1(Int.lte)).is_positive or s1(Int.lte) = s0(Int.lte)","s1(Int.lte) <= s0(Int.lte) or is_antisymmetric[Int](Int.lte)","s1(Int.lte) <= s0(Int.lte)","s0(Int.lte) <= s1(Int.lte) or is_antisymmetric[Int](Int.lte)","s0(Int.lte) <= s1(Int.lte)","-(s0(Int.lte) - s1(Int.lte)) = s1(Int.lte) - s0(Int.lte)","s1(Int.lte) != s0(Int.lte) or is_antisymmetric[Int](Int.lte)","s1(Int.lte) != s0(Int.lte)","(-(s1(Int.lte) - s0(Int.lte))).is_negative = (s1(Int.lte) - s0(Int.lte)).is_positive","not (s0(Int.lte) - s1(Int.lte)).is_positive or not (s0(Int.lte) - s1(Int.lte)).is_negative","--(s0(Int.lte) - s1(Int.lte)) = s0(Int.lte) - s1(Int.lte)","(s1(Int.lte) - s0(Int.lte)).is_positive","(s0(Int.lte) - s1(Int.lte)).is_positive","not (s0(Int.lte) - s1(Int.lte)).is_negative"]}
{"goal":"is_antisymmetric[Int](Int.lte) and is_reflexive[Int](Int.lte) and is_transitive[Int](Int.lte)","proof":["not is_transitive[Int](Int.lte) or not is_reflexive[Int](Int.lte)","not is_reflexive[Int](Int.lte)"]}
{"goal":"(a - a).is_positive","proof":["not a < a or a != a"]}
{"goal":"0.is_positive","proof":["a + -a = a - a","a + -a = 0","not (a + -a).is_positive"]}
{"goal":"false","proof":[]}
{"goal":"lt_not_ref","proof":[]}
{"goal":"lte_ref","proof":["a != a or a <= a"]}
{"goal":"zero_lt_pos","proof":["not 0 <= a or 0 < a or 0 = a","not 0 <= a or 0 = a","not (a - 0).is_positive or 0 <= a","a - 0 = a","(a - 0).is_positive","0 <= a","0 = a"]}
{"goal":"a != 0","proof":["0.is_negative"]}
{"goal":"a <= 0","proof":["not (0 - a).is_positive or a <= 0","not (0 - a).is_positive","-(0 - a) = a - 0","0 - a = -a","(--a).is_negative = (-a).is_positive","1 * a = a","1 * a - 0 = 1 * a"]}
{"goal":"neg_lt_zero","proof":["not a <= 0 or a < 0 or 0 = a"]}
{"goal":"(b - a).is_positive","proof":["not b.is_positive or (b + -a).is_positive or (-a).is_negative","b + -a = b - a","not (b + -a).is_positive","(-a).is_negative = a.is_positive","(-a).is_negative","not (-a).is_negative"]}
{"goal":"nonpos_lt_pos","proof":["not a <= b or a < b or b = a","not a <= b or b = a","not (b - a).is_positive or a <= b","a <= b","b = a"]}
{"goal":"neg_lt_nonneg","proof":["not b.is_positive or a.is_positive or a < b","not b.is_positive or a.is_positive","b.is_positive or b.is_negative or 0 = b","not a.is_negative or a < 0","not a.is_positive or not a.is_negative","not a.is_positive","not b.is_positive","0 = b","a < 0","not a < 0"]}
{"goal":"b != a","proof":["b != a or a <= b"]}
{"goal":"not a < b","proof":["not a < b or a <= b"]}
{"goal":"not a.is_negative","proof":["not a.is_negative or b.is_negative or a < b"]}
{"goal":"not b.is_positive","proof":["not b.is_positive or a.is_positive or a < b"]}
{"goal":"false","proof":["a.is_positive or a.is_negative or 0 = a","b.is_positive or b.is_negative or 0 = b","0 = b","0 = a","0 != a"]}
{"goal":"nonpos_lte_nonneg","proof":[]}
{"goal":"not a.is_positive","proof":["not a.is_positive or not a.is_negative or (a * a).is_negative","not a.is_positive or not a.is_positive or (a * a).is_positive","not a.is_positive or (a * a).is_positive","(a * a).is_positive","not a.is_negative or (a * a).is_negative","(a * a).is_negative","not (a * a).is_positive or not (a * a).is_negative"]}
{"goal":"a <= Int.from_nat(abs(a))","proof":["a <= Int.from_nat(abs(a)) or a.is_positive or Int.from_nat(abs(a)).is_negative","Int.from_nat(abs(a)).is_negative","sub_nat((-a).pos_part, (-a).neg_part) = -a","a.neg_part = abs(a) or a.is_positive","(-a).neg_part = a.pos_part","(-a).pos_part = a.neg_part","a.pos_part = Nat.0 or a.is_positive","(-a).is_negative = a.is_positive","sub_nat(abs(a), Nat.0) = Int.from_nat(abs(a))","a.pos_part = Nat.0","a.neg_part = abs(a)"]}
{"goal":"a <= Int.from_nat(abs(a))","proof":["Int.from_nat(abs(a)) = a or a.is_negative","Int.from_nat(abs(a)) = a","Int.from_nat(abs(a)) != a or a <= Int.from_nat(abs(a))"]}
{"goal":"lte_abs","proof":[]}
{"goal":"(c - b).is_positive","proof":["not b <= c or (c - b).is_positive or c = b","not b < c or b <= c","not b < c or c != b","c != b","b <= c","not b <= c"]}
{"goal":"a + c - (a + b) = c - b","proof":["a + c - (a + b) = c - b"]}
{"goal":"(a + c - (a + b)).is_positive","proof":[]}
{"goal":"lt_add_left","proof":["a + c != a + b or c = b","not a + b <= a + c or a + b < a + c or a + c = a + b","not (a + c - (a + b)).is_positive or a + b <= a + c","not b < c or c != b","c != b","not a + b <= a + c or a + c = a + b","a + b <= a + c","a + c = a + b"]}
{"goal":"lte_add_left","proof":["a + c - (a + b) = c - b","not b <= c or (c - b).is_positive or c = b","not (a + c - (a + b)).is_positive or a + b <= a + c","a + c != a + b or a + b <= a + c","a + c != a + b","c != b","(c - b).is_positive","not (a + c - (a + b)).is_positive"]}
{"goal":"n = m","proof":["Int.from_nat(m) != Int.from_nat(n) or m = n"]}
{"goal":"Int.from_nat(n) < Int.from_nat(m)","proof":["not Int.from_nat(n) <= Int.from_nat(m) or Int.from_nat(n) < Int.from_nat(m) or Int.from_nat(m) = Int.from_nat(n)"]}
{"goal":"(Int.from_nat(m) - Int.from_nat(n)).is_positive","proof":["not Int.from_nat(n) <= Int.from_nat(m) or (Int.from_nat(m) - Int.from_nat(n)).is_positive or Int.from_nat(m) = Int.from_nat(n)"]}
{"goal":"Int.from_nat(m) - Int.from_nat(n) = sub_nat(m, n)","proof":["sub_nat(Nat.0, n) + Int.from_nat(m) = sub_nat(Nat.0 + m, n)","Int.from_nat(m) + -Int.from_nat(n) = Int.from_nat(m) - Int.from_nat(n)","-Int.from_nat(n) + Int.from_nat(m) = Int.from_nat(m) + -Int.from_nat(n)","-Int.from_nat(n) = sub_nat(Nat.0, n)","Nat.0 + m = m"]}
{"goal":"lte_nonnegative_ints_implies_nats","proof":["let s0: Nat satisfy { true }","not s0 <= s0 or s0 + m != s0 + n or n <= m","not Int.from_nat(n) <= Int.from_nat(m) or (Int.from_nat(m) - Int.from_nat(n)).is_positive or Int.from_nat(m) = Int.from_nat(n)","Int.from_nat(abs(sub_nat(m, n))) != sub_nat(m, n) or n + abs(sub_nat(m, n)) = m","n + abs(sub_nat(m, n)) != m or n <= m","n + abs(sub_nat(m, n)) != m","Int.from_nat(abs(sub_nat(m, n))) = sub_nat(m, n) or sub_nat(m, n).is_negative","not sub_nat(m, n).is_positive or not sub_nat(m, n).is_negative","s0 <= s0","s0 + m != s0 + n or not s0 <= s0","s0 + m != s0 + n","m != n","Int.from_nat(m) != Int.from_nat(n)","(Int.from_nat(m) - Int.from_nat(n)).is_positive","Int.from_nat(m) - Int.from_nat(n) = sub_nat(m, n)","sub_nat(m, n).is_positive","Int.from_nat(abs(sub_nat(m, n))) != sub_nat(m, n)","not sub_nat(m, n).is_negative","sub_nat(m, n).is_negative"]}
{"goal":"Int.from_nat(abs(a)) = a","proof":["Int.from_nat(abs(a)) = a or a.is_negative"]}
{"goal":"Int.from_nat(abs(b)) = b","proof":["Int.from_nat(abs(b)) = b or b.is_negative"]}
{"goal":"Int.from_nat(abs(a)) + Int.from_nat(abs(b)) = Int.from_nat(abs(a) + abs(b))","proof":["Int.from_nat(abs(a)) + Int.from_nat(abs(b)) = Int.from_nat(abs(a) + abs(b))"]}
{"goal":"a + Int.from_nat(abs(b)) = Int.from_nat(abs(a) + abs(b))","proof":["Int.from_nat(abs(a)) + Int.from_nat(abs(b)) != Int.from_nat(abs(a) + abs(b))"]}
{"goal":"a + b = Int.from_nat(abs(a) + abs(b))","proof":["Int.from_nat(abs(a) + abs(b)) != a + Int.from_nat(abs(b))"]}
{"goal":"abs_add_nonneg","proof":["Int.from_nat(abs(a) + abs(b)) != a + b or abs(a) + abs(b) = abs(a + b)"]}
{"goal":"not (-a).is_negative","proof":["(-a).is_negative = a.is_positive"]}
{"goal":"not (-b).is_negative","proof":["(-b).is_negative = b.is_positive"]}
{"goal":"abs(-a + -b) = abs(-a) + abs(-b)","proof":["abs(-a) + abs(-b) = abs(-a + -b) or (-a).is_negative or (-b).is_negative"]}
{"goal":"abs(-(a + b)) = abs(-a) + abs(-b)","proof":["-a + -b = -(a + b)"]}
{"goal":"abs(-(a + b)) = abs(a) + abs(b)","proof":["abs(-b) + abs(-a) = abs(-a) + abs(-b)","abs(b) + abs(a) = abs(a) + abs(b)","abs(-a) = abs(a)","abs(-b) = abs(b)"]}
{"goal":"abs_add_nonpos","proof":["abs(-(a + b)) = abs(a + b)"]}
{"goal":"exists(k0: Nat) { k0 + abs(b) = abs(a) }","proof":["abs(a) - abs(b) + abs(b) != abs(a)","not abs(b) <= abs(a) or abs(a) - abs(b) + abs(b) = abs(a)"]}
{"goal":"Int.from_nat(n) + Int.from_nat(abs(b)) = Int.from_nat(abs(a))","proof":["Int.from_nat(n) + Int.from_nat(abs(b)) = Int.from_nat(n + abs(b))"]}
{"goal":"Int.from_nat(n) + -b = Int.from_nat(abs(a))","proof":["-b + Int.from_nat(n) = Int.from_nat(n) + -b","Int.from_nat(n) + Int.from_nat(abs(b)) = Int.from_nat(abs(b)) + Int.from_nat(n)","sub_nat((-b).pos_part, (-b).neg_part) = -b","b.neg_part = abs(b) or b.is_positive","(-b).neg_part = b.pos_part","(-b).pos_part = b.neg_part","b.pos_part = Nat.0 or b.is_positive","sub_nat(abs(b), Nat.0) = Int.from_nat(abs(b))","b.pos_part = Nat.0","b.neg_part = abs(b)"]}
{"goal":"Int.from_nat(n) + -b = a","proof":["Int.from_nat(abs(a)) != a","Int.from_nat(abs(a)) = a or a.is_negative"]}
{"goal":"a - Int.from_nat(n) = -b","proof":["-b + Int.from_nat(n) = Int.from_nat(n) + -b","-b + Int.from_nat(n) - Int.from_nat(n) = -b","Int.from_nat(n) + -b - Int.from_nat(n) != -b"]}
{"goal":"a + b = Int.from_nat(n)","proof":["a - Int.from_nat(n) != -b or a + b = Int.from_nat(n)"]}
{"goal":"abs(a + b) = n","proof":["a + b != Int.from_nat(n) or abs(a + b) = n"]}
{"goal":"n <= abs(a)","proof":["n + abs(b) != abs(a) or n <= abs(a)"]}
{"goal":"abs(a) <= abs(a) + abs(b)","proof":["abs(a) + abs(b) != abs(a) + abs(b) or abs(a) <= abs(a) + abs(b)","abs(a) <= abs(a) + abs(b)"]}
{"goal":"n <= abs(a) + abs(b)","proof":["n + (abs(b) + abs(b)) = n + abs(b) + abs(b)","n + (abs(b) + abs(b)) != n + (abs(b) + abs(b)) or n <= n + (abs(b) + abs(b))","n <= n + (abs(b) + abs(b))","not n <= n + abs(b) + abs(b)"]}
{"goal":"triangle_nonpos_lte_nonneg","proof":["not n <= abs(a) + abs(b)"]}
{"goal":"abs(a + b) <= abs(a) + abs(b)","proof":["not abs(b) <= abs(a) or abs(a + b) <= abs(a) + abs(b) or b.is_positive or a.is_negative"]}
{"goal":"abs(a) <= abs(b)","proof":["abs(a) <= abs(b) or abs(b) < abs(a)","abs(b) <= abs(a) or abs(a) < abs(b)","abs(b) < abs(a)","not abs(a) < abs(b) or not abs(b) < abs(a)","abs(a) < abs(b)","not abs(a) < abs(b)"]}
{"goal":"abs(-a) <= abs(-b)","proof":["abs(-a) = abs(a)","abs(-b) = abs(b)"]}
{"goal":"not (-b).is_negative","proof":["(-b).is_negative = b.is_positive"]}
{"goal":"not (-a).is_positive","proof":["sub_nat((--a).pos_part, (--a).neg_part) = --a","sub_nat(a.pos_part, a.neg_part) = a","(--a).neg_part = (-a).pos_part","(-a).neg_part = a.pos_part","(--a).pos_part = (-a).neg_part","(-a).pos_part = a.neg_part","(--a).is_negative = (-a).is_positive"]}
{"goal":"abs(-b + -a) <= abs(-b) + abs(-a)","proof":["not abs(-a) <= abs(-b) or abs(-b + -a) <= abs(-b) + abs(-a) or (-a).is_positive or (-b).is_negative"]}
{"goal":"abs(-(b + a)) <= abs(-b) + abs(-a)","proof":["-b + -a = -(b + a)"]}
{"goal":"abs(b + a) <= abs(-b) + abs(-a)","proof":["abs(-(b + a)) = abs(b + a)"]}
{"goal":"abs(b + a) <= abs(b) + abs(a)","proof":["abs(-b) + abs(-a) = abs(-a) + abs(-b)","abs(b) + abs(a) = abs(a) + abs(b)","abs(-a) = abs(a)","abs(-b) = abs(b)"]}
{"goal":"abs(a + b) <= abs(b) + abs(a)","proof":["b + a = a + b"]}
{"goal":"abs(a + b) <= abs(a) + abs(b)","proof":["abs(b) + abs(a) = abs(a) + abs(b)"]}
{"goal":"triangle_nonneg_nonpos","proof":[]}
{"goal":"abs(a + b) = abs(a) + abs(b)","proof":["abs(a) + abs(b) = abs(a + b) or a.is_positive or b.is_positive","b.is_positive or a.is_positive","not a.is_positive or not a.is_negative","not b.is_positive or not b.is_negative","not b.is_positive","not a.is_positive","a.is_positive"]}
{"goal":"abs(a + b) <= abs(a) + abs(b)","proof":["not abs(a + b) <= abs(a + b)","lib(nat.nat_base).nat_mod(abs(a + b), Nat.0) <= abs(a + b)","lib(nat.nat_base).nat_mod(abs(a + b), Nat.0) = abs(a + b)"]}
{"goal":"abs(b + a) <= abs(b) + abs(a)","proof":["abs(b + a) <= abs(b) + abs(a) or a.is_positive or b.is_negative","a.is_positive","not a.is_positive or not a.is_negative"]}
{"goal":"abs(b + a) <= abs(a) + abs(b)","proof":["abs(b) + abs(a) = abs(a) + abs(b)"]}
{"goal":"abs(a + b) <= abs(a) + abs(b)","proof":["b + a = a + b"]}
{"goal":"abs(a + b) <= abs(a) + abs(b)","proof":["abs(a + b) <= abs(a) + abs(b) or b.is_positive or a.is_negative","b.is_positive","not b.is_positive or not b.is_negative"]}
{"goal":"abs(a + b) = abs(a) + abs(b)","proof":["abs(a) + abs(b) = abs(a + b) or a.is_negative or b.is_negative"]}
{"goal":"abs(a + b) <= abs(a) + abs(b)","proof":["not abs(a + b) <= abs(a + b)","lib(nat.nat_base).nat_mod(abs(a + b), Nat.0) <= abs(a + b)","lib(nat.nat_base).nat_mod(abs(a + b), Nat.0) = abs(a + b)"]}
{"goal":"triangle_ineq","proof":[]}
{"goal":"b * c - a * c = (b - a) * c","proof":["b * c - a * c = (b - a) * c"]}
{"goal":"b * c - a * c = c * (b - a)","proof":["(b - a) * c != c * (b - a)","(b - a) * c = c * (b - a)"]}
{"goal":"(b - a).is_positive","proof":["not a <= b or (b - a).is_positive or b = a","not a < b or a <= b","not a < b or b != a","b != a","a <= b","not a <= b"]}
{"goal":"(b * c - a * c).is_positive","proof":["not (c * (b - a)).is_positive","not c.is_positive or not (b - a).is_positive or (c * (b - a)).is_positive"]}
{"goal":"lt_mul_pos","proof":["not a * c <= b * c or a * c < b * c or b * c = a * c","not (b * c - a * c).is_positive or a * c <= b * c","-(a * c - b * c) = b * c - a * c","((b - a) * c).is_positive","(-(c * (b - a))).is_negative = (c * (b - a)).is_positive","not ((b - a) * c).is_positive or not ((b - a) * c).is_negative","not a * c <= b * c or b * c = a * c","a * c <= b * c","b * c = a * c","not ((b - a) * c).is_negative"]}
{"goal":"a * c - b * c = c * (a - b)","proof":["a * c - b * c = (a - b) * c","(a - b) * c != c * (a - b)","(a - b) * c = c * (a - b)"]}
{"goal":"(b - a).is_positive","proof":["not a <= b or (b - a).is_positive or b = a","not a < b or a <= b","not a < b or b != a","b != a","a <= b","not a <= b"]}
{"goal":"(a - b).is_negative","proof":["-(b - a) = a - b","not (-(b - a)).is_negative","(-(b - a)).is_negative = (b - a).is_positive"]}
{"goal":"(c * (a - b)).is_positive","proof":["not c.is_negative or not (a - b).is_negative or (c * (a - b)).is_positive"]}
{"goal":"(a * c - b * c).is_positive","proof":[]}
{"goal":"lt_mul_neg","proof":["not b * c <= a * c or b * c < a * c or b * c = a * c","not (a * c - b * c).is_positive or b * c <= a * c","-(b * c - a * c) = a * c - b * c","sub_nat((-(c * (a - b))).pos_part, (-(c * (a - b))).neg_part) = -(c * (a - b))","(-(c * (a - b))).pos_part = (c * (a - b)).neg_part","not (c * (a - b)).is_positive or (c * (a - b)).neg_part = Nat.0","sub_nat(Nat.0, Nat.0) = Int.from_nat(Nat.0)","not b * c <= a * c or b * c = a * c","(c * (a - b)).neg_part = Nat.0","b * c <= a * c","b * c = a * c"]}
{"goal":"(b - a).is_positive","proof":["not a <= b or (b - a).is_positive or b = a","not a < b or a <= b","not a < b or b != a","b != a","a <= b","not a <= b"]}
{"goal":"(c - b).is_positive","proof":["not b <= c or (c - b).is_positive or c = b","not b < c or b <= c","not b < c or c != b","c != b","b <= c","not b <= c"]}
{"goal":"(c + -b).is_positive","proof":["c + -b = c - b"]}
{"goal":"not (b - a).is_negative","proof":["not (b - a).is_positive or not (b - a).is_negative"]}
{"goal":"--(b - a) = b - a","proof":["-(a - b) = b - a","-(b - a) = a - b"]}
{"goal":"-(b - a) = a - b","proof":["-(b - a) = a - b"]}
{"goal":"a + -b = a - b","proof":["a + -b = a - b"]}
{"goal":"(-(a + -b)).is_negative = (a + -b).is_positive","proof":["(-(a + -b)).is_negative = (a + -b).is_positive"]}
{"goal":"not (a + -b).is_positive","proof":[]}
{"goal":"exists(k0: Int) { a + k0 < c + k0 }","proof":["not a + -b < c + -b","not (c + -b).is_positive or (a + -b).is_positive or a + -b < c + -b","not (c + -b).is_positive or (a + -b).is_positive"]}
{"goal":"(c - a).is_positive","proof":["let s0: Int satisfy { a + s0 < c + s0 }","c + s0 - (a + s0) = c - a","not a + s0 <= c + s0 or (c + s0 - (a + s0)).is_positive or c + s0 = a + s0","not a + s0 < c + s0 or a + s0 <= c + s0","not a + s0 < c + s0 or c + s0 != a + s0","not (c + s0 - (a + s0)).is_positive","c + s0 != a + s0","a + s0 <= c + s0","not a + s0 <= c + s0"]}
{"goal":"lt_trans","proof":["not (a - b).is_positive","not a <= c or a < c or c = a","not a <= c or c = a","not (c - a).is_positive or a <= c","a <= c","c = a"]}
{"goal":"a < c","proof":[]}
{"goal":"a < c","proof":["not a < b or not b < c or a < c","not b <= c or b < c or c = b","b < c","not b < c or not a < b"]}
{"goal":"lt_and_lte","proof":[]}
{"goal":"a < c","proof":[]}
{"goal":"a < c","proof":["not a < b or not b < c or a < c","not a <= b or a < b or b = a","a < b","not b < c or not a < b"]}
{"goal":"lte_and_lt","proof":[]}
{"goal":"exists(k0: Nat) { j + k0 = k and k0 != Nat.0 }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or x0 + s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat) { s0(x2, x3) != Nat.0 or not x2 < x3 } }","j + s0(j, k) != k or s0(j, k) = Nat.0","not j < k or j + s0(j, k) = k","s0(j, k) != Nat.0 or not j < k","s0(j, k) != Nat.0","j + s0(j, k) = k","j + s0(j, k) != k"]}
{"goal":"Int.from_nat(d) + Int.from_nat(j) = Int.from_nat(k)","proof":["Int.from_nat(j) + Int.from_nat(d) = Int.from_nat(j + d)","Int.from_nat(d) + Int.from_nat(j) = Int.from_nat(j) + Int.from_nat(d)","Int.from_nat(j) + Int.from_nat(d) != Int.from_nat(k)"]}
{"goal":"Int.from_nat(k) - Int.from_nat(j) = Int.from_nat(d)","proof":["Int.from_nat(d) + Int.from_nat(j) - Int.from_nat(j) = Int.from_nat(d)"]}
{"goal":"Int.from_nat(d).is_positive","proof":["Int.from_nat(d).pos_part = Nat.0 or Int.from_nat(d).is_positive","Int.from_nat(d).pos_part = Nat.0","Int.from_nat(d).pos_part = d"]}
{"goal":"Int.from_nat(j) != Int.from_nat(k)","proof":["not j < j or j <= j","Int.from_nat(k) != Int.from_nat(j) or k = j","k = j","j < j","not j <= j or not j < j","j <= j","not j <= j"]}
{"goal":"Int.from_nat(j) <= Int.from_nat(k)","proof":["not (Int.from_nat(k) - Int.from_nat(j)).is_positive or Int.from_nat(j) <= Int.from_nat(k)","(Int.from_nat(k) - Int.from_nat(j)).is_positive","not (Int.from_nat(k) - Int.from_nat(j)).is_positive"]}
{"goal":"lt_from_nat","proof":["not Int.from_nat(j) <= Int.from_nat(k) or Int.from_nat(j) < Int.from_nat(k) or Int.from_nat(k) = Int.from_nat(j)"]}
{"goal":"Int.from_nat(j) = Int.from_nat(k)","proof":["k != j"]}
{"goal":"Int.from_nat(j) <= Int.from_nat(k)","proof":["Int.from_nat(k) != Int.from_nat(j) or Int.from_nat(j) <= Int.from_nat(k)"]}
{"goal":"j < k","proof":["not j <= k or j < k or k = j"]}
{"goal":"Int.from_nat(j) < Int.from_nat(k)","proof":["not j < k or Int.from_nat(j) < Int.from_nat(k)"]}
{"goal":"Int.from_nat(j) <= Int.from_nat(k)","proof":["not Int.from_nat(j) < Int.from_nat(k) or Int.from_nat(j) <= Int.from_nat(k)"]}
{"goal":"lte_from_nat","proof":[]}
{"goal":"abs(u) = Nat.1","proof":["not is_unit(u) or abs(u) = Nat.1"]}
{"goal":"u = 1","proof":["Int.from_nat(abs(u)) != 1","Int.from_nat(Nat.1) != 1"]}
{"goal":"u = -1","proof":["-Int.from_nat(abs(u)) = u or Int.from_nat(abs(u)) = u","-Int.from_nat(Nat.1) != u","-Int.from_nat(abs(u)) = u","-Int.from_nat(abs(u)) != u"]}
{"goal":"two_units","proof":[]}
{"goal":"u * u = 1","proof":["1 * u != 1","1 * u != u","1 * u = u"]}
{"goal":"u * u = 1","proof":["u * --u = -(u * -u)","not is_unit(u) or -1 = u or 1 = u","-1 = u","-sub_nat(1.neg_part, 1.pos_part) = sub_nat(1.pos_part, 1.neg_part)","u * 1 = 1 * u","sub_nat((-1).pos_part, (-1).neg_part) = -1","sub_nat(1.pos_part, 1.neg_part) = 1","(-1).neg_part = 1.pos_part","(-1).pos_part = 1.neg_part","1 * -1 = -1"]}
{"goal":"unit_squared","proof":[]}
{"goal":"abs(u * v) = abs(u) * abs(v)","proof":["abs(u) * abs(v) = abs(u * v)"]}
{"goal":"abs(u) = Nat.1","proof":["not is_unit(u) or abs(u) = Nat.1"]}
{"goal":"abs(v) = Nat.1","proof":["not is_unit(v) or abs(v) = Nat.1"]}
{"goal":"abs(u * v) = Nat.1","proof":["Nat.1 * Nat.1 = Nat.1"]}
{"goal":"mul_units","proof":["abs(u * v) != Nat.1 or is_unit(u * v)"]}
{"goal":"unit_sign(a) = -1","proof":["not a.is_negative or -1 = unit_sign(a)"]}
{"goal":"abs(-1) = Nat.1","proof":["Int.from_nat(Nat.1) != 1 or abs(1) = Nat.1","abs(-1) = abs(1)","abs(1) != Nat.1","Int.from_nat(Nat.1) != 1"]}
{"goal":"is_unit(unit_sign(a))","proof":["not is_unit(-1)","abs(-1) != Nat.1 or is_unit(-1)"]}
{"goal":"unit_sign(a) = 1","proof":["unit_sign(a) = 1 or a.is_negative"]}
{"goal":"abs(1) = Nat.1","proof":["Int.from_nat(Nat.1) != 1 or abs(1) = Nat.1","Int.from_nat(Nat.1) != 1"]}
{"goal":"is_unit(unit_sign(a))","proof":["not is_unit(1)","abs(1) != Nat.1 or is_unit(1)"]}
{"goal":"unit_sign_is_unit","proof":[]}
{"goal":"unit_sign(a) = -1","proof":["not a.is_negative or -1 = unit_sign(a)"]}
{"goal":"unit_sign(a) * Int.from_nat(abs(a)) = -1 * Int.from_nat(abs(a))","proof":["-1 != unit_sign(a)"]}
{"goal":"unit_sign(a) * Int.from_nat(abs(a)) = -Int.from_nat(abs(a))","proof":["-1 * Int.from_nat(abs(a)) = -(1 * Int.from_nat(abs(a)))","1 * Int.from_nat(abs(a)) = Int.from_nat(abs(a))"]}
{"goal":"unit_sign(a) * Int.from_nat(abs(a)) = a","proof":["-Int.from_nat(abs(a)) != a","-Int.from_nat(abs(a)) = a or Int.from_nat(abs(a)) = a","Int.from_nat(abs(a)) = a","Int.from_nat(abs(a)) != a or not a.is_negative"]}
{"goal":"unit_sign(a) = 1","proof":["unit_sign(a) = 1 or a.is_negative"]}
{"goal":"unit_sign(a) * Int.from_nat(abs(a)) = 1 * Int.from_nat(abs(a))","proof":["unit_sign(a) != 1"]}
{"goal":"unit_sign(a) * Int.from_nat(abs(a)) = Int.from_nat(abs(a))","proof":["1 * Int.from_nat(abs(a)) != Int.from_nat(abs(a))","1 * Int.from_nat(abs(a)) = Int.from_nat(abs(a))"]}
{"goal":"unit_sign(a) * Int.from_nat(abs(a)) = a","proof":["Int.from_nat(abs(a)) != a","Int.from_nat(abs(a)) = a or a.is_negative"]}
{"goal":"abs_decomp","proof":[]}
{"goal":"unit_sign(a) * a = unit_sign(a) * (unit_sign(a) * Int.from_nat(abs(a)))","proof":["unit_sign(a) * Int.from_nat(abs(a)) != a","unit_sign(a) * Int.from_nat(abs(a)) = a"]}
{"goal":"unit_sign(a) * a = unit_sign(a) * unit_sign(a) * Int.from_nat(abs(a))","proof":["unit_sign(a) * (unit_sign(a) * Int.from_nat(abs(a))) = unit_sign(a) * unit_sign(a) * Int.from_nat(abs(a))"]}
{"goal":"unit_sign(a) * unit_sign(a) = 1","proof":["not is_unit(unit_sign(a)) or unit_sign(a) * unit_sign(a) = 1","not is_unit(unit_sign(a))","is_unit(unit_sign(a))"]}
{"goal":"unit_sign(a) * a = 1 * Int.from_nat(abs(a))","proof":["unit_sign(a) * unit_sign(a) * Int.from_nat(abs(a)) != unit_sign(a) * a"]}
{"goal":"abs_alt_decomp","proof":["1 * Int.from_nat(abs(a)) = Int.from_nat(abs(a))"]}
{"goal":"exists(k0: Int) { k0 * a = b }","proof":["let s0: (Int, Int) -> Int satisfy { forall(x0: Int, x1: Int) { not x0.divides(x1) or s0(x0, x1) * x0 = x1 } and forall(x2: Int, x3: Int, x4: Int) { x2 * x3 != x4 or x3.divides(x4) } }","s0(a, b) * a != b","not a.divides(b) or s0(a, b) * a = b"]}
{"goal":"exists(k0: Int) { k0 * b = c }","proof":["let s0: (Int, Int) -> Int satisfy { forall(x0: Int, x1: Int) { not x0.divides(x1) or s0(x0, x1) * x0 = x1 } and forall(x2: Int, x3: Int, x4: Int) { x2 * x3 != x4 or x3.divides(x4) } }","s0(b, c) * b != c","not b.divides(c) or s0(b, c) * b = c"]}
{"goal":"e * (d * a) = c","proof":[]}
{"goal":"e * d * a = c","proof":["e * (d * a) = e * d * a"]}
{"goal":"a.divides(c)","proof":["e * d * a != c or a.divides(c)"]}
{"goal":"div_trans","proof":[]}
{"goal":"exists(k0: Int) { k0 * a = b }","proof":["let s0: (Int, Int) -> Int satisfy { forall(x0: Int, x1: Int) { not x0.divides(x1) or s0(x0, x1) * x0 = x1 } and forall(x2: Int, x3: Int, x4: Int) { x2 * x3 != x4 or x3.divides(x4) } }","s0(a, b) * a != b","not a.divides(b) or s0(a, b) * a = b"]}
{"goal":"abs(d) * abs(a) = abs(b)","proof":["abs(d) * abs(a) = abs(d * a)"]}
{"goal":"abs(a).divides(abs(b))","proof":["abs(a) * abs(d) != abs(b) or abs(a).divides(abs(b))","abs(d) * abs(a) = abs(a) * abs(d)","abs(a) * abs(d) != abs(b)"]}
{"goal":"div_imp_div_abs","proof":[]}
{"goal":"exists(k0: Nat) { k0 * j = k }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0.divides(x1) or x0 * s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat, x4: Nat) { x2 * x3 != x4 or x2.divides(x4) } }","s0(j, k) * j != k","not j.divides(k) or j * s0(j, k) = k","s0(j, k) * j = j * s0(j, k)","j * s0(j, k) = k"]}
{"goal":"Int.from_nat(n) * Int.from_nat(j) = Int.from_nat(k)","proof":["Int.from_nat(n) * Int.from_nat(j) = Int.from_nat(n * j)"]}
{"goal":"Int.from_nat(j).divides(Int.from_nat(k))","proof":["Int.from_nat(n) * Int.from_nat(j) != Int.from_nat(k) or Int.from_nat(j).divides(Int.from_nat(k))"]}
{"goal":"div_from_nat","proof":[]}
{"goal":"Int.from_nat(abs(a)) = a * unit_sign(a)","proof":["unit_sign(a) * a = Int.from_nat(abs(a))","a * unit_sign(a) = unit_sign(a) * a"]}
{"goal":"div_abs","proof":["unit_sign(a) * a = Int.from_nat(abs(a))","unit_sign(a) * a != Int.from_nat(abs(a)) or a.divides(Int.from_nat(abs(a)))","unit_sign(a) * a != Int.from_nat(abs(a))"]}
{"goal":"Int.from_nat(abs(a)).divides(Int.from_nat(abs(b)))","proof":["not abs(a).divides(abs(b)) or Int.from_nat(abs(a)).divides(Int.from_nat(abs(b)))"]}
{"goal":"a.divides(Int.from_nat(abs(a)))","proof":["unit_sign(a) * a = Int.from_nat(abs(a))","unit_sign(a) * a != Int.from_nat(abs(a)) or a.divides(Int.from_nat(abs(a)))","unit_sign(a) * a != Int.from_nat(abs(a))"]}
{"goal":"a.divides(Int.from_nat(abs(b)))","proof":["not a.divides(Int.from_nat(abs(a))) or not Int.from_nat(abs(a)).divides(Int.from_nat(abs(b))) or a.divides(Int.from_nat(abs(b)))","a.divides(Int.from_nat(abs(a)))","not Int.from_nat(abs(a)).divides(Int.from_nat(abs(b))) or not a.divides(Int.from_nat(abs(a)))"]}
{"goal":"Int.from_nat(abs(b)).divides(b)","proof":["unit_sign(b) * Int.from_nat(abs(b)) = b","unit_sign(b) * Int.from_nat(abs(b)) != b or Int.from_nat(abs(b)).divides(b)","unit_sign(b) * Int.from_nat(abs(b)) != b"]}
{"goal":"div_abs_imp_div","proof":["not a.divides(Int.from_nat(abs(b))) or not Int.from_nat(abs(b)).divides(b) or a.divides(b)","not Int.from_nat(abs(b)).divides(b) or not a.divides(Int.from_nat(abs(b)))"]}
{"goal":"Int.from_nat(abs(a)) = Int.from_nat(abs(b))","proof":["abs(b) != abs(a)"]}
{"goal":"unit_sign(a) * a = Int.from_nat(abs(a))","proof":["unit_sign(a) * a = Int.from_nat(abs(a))"]}
{"goal":"b = unit_sign(b) * Int.from_nat(abs(b))","proof":["unit_sign(b) * Int.from_nat(abs(b)) = b"]}
{"goal":"b = unit_sign(b) * Int.from_nat(abs(a))","proof":["unit_sign(b) * Int.from_nat(abs(b)) != b"]}
{"goal":"b = unit_sign(b) * unit_sign(a) * a","proof":["unit_sign(b) * (unit_sign(a) * a) = unit_sign(b) * unit_sign(a) * a"]}
{"goal":"b = unit_sign(b) * unit_sign(a) * a","proof":[]}
{"goal":"is_unit(unit_sign(b))","proof":["--b = b","not is_unit(unit_sign(--b))","is_unit(unit_sign(--b))"]}
{"goal":"is_unit(unit_sign(a))","proof":["--a = a","not is_unit(unit_sign(--a))","is_unit(unit_sign(--a))"]}
{"goal":"is_unit(unit_sign(b) * unit_sign(a))","proof":["not is_unit(unit_sign(b)) or not is_unit(unit_sign(a)) or is_unit(unit_sign(b) * unit_sign(a))"]}
{"goal":"abs_eq_imp_unit","proof":["unit_sign(b) * unit_sign(a) * a != b or not is_unit(unit_sign(b) * unit_sign(a))","unit_sign(b) * unit_sign(a) * a != b"]}
{"goal":"exists(k0: Int) { is_unit(k0) and k0 * a = b }","proof":["let s0: (Int, Int) -> Int satisfy { forall(x0: Int, x1: Int) { abs(x0) != abs(x1) or is_unit(s0(x0, x1)) } and forall(x2: Int, x3: Int) { abs(x2) != abs(x3) or s0(x2, x3) * x2 = x3 } }","s0(a, b) * a != b or not is_unit(s0(a, b))","abs(b) != abs(a) or s0(a, b) * a = b","abs(b) != abs(a) or is_unit(s0(a, b))","is_unit(s0(a, b))","s0(a, b) * a = b","s0(a, b) * a != b"]}
{"goal":"abs_eq_imp_div","proof":["let s0: Int satisfy { is_unit(s0) and s0 * a = b }","s0 * a != b or a.divides(b)"]}
{"goal":"abs(a).divides(abs(b))","proof":["not a.divides(b) or abs(a).divides(abs(b))"]}
{"goal":"Int.from_nat(abs(a)) <= Int.from_nat(abs(b))","proof":["not abs(a) <= abs(b) or Int.from_nat(abs(a)) <= Int.from_nat(abs(b))","not abs(a) <= abs(b)","not abs(a).divides(abs(b)) or abs(a) <= abs(b) or abs(b) = Nat.0","abs(b) = Nat.0","sub_nat(b.pos_part, b.neg_part) = b","not b.is_positive or b.pos_part = abs(b)","0 - b = -b","not b.is_positive or b.neg_part = Nat.0","(-0).is_negative = 0.is_positive","(-b).is_negative = b.is_positive","sub_nat(abs(b), Nat.0) = Int.from_nat(abs(b))","-Int.from_nat(Nat.0) = int_base.neg_nat(Nat.0)","0 - 0 = 0","--Int.from_nat(abs(b)) = Int.from_nat(abs(b))","b.neg_part = Nat.0","b.pos_part = abs(b)"]}
{"goal":"Int.from_nat(abs(a)) <= b","proof":["not Int.from_nat(abs(a)) <= Int.from_nat(abs(b)) or not Int.from_nat(abs(b)) <= b or Int.from_nat(abs(a)) <= b","Int.from_nat(abs(b)) = b or b.is_negative","Int.from_nat(abs(b)) != b or Int.from_nat(abs(b)) <= b","not b.is_positive or not b.is_negative","not b.is_negative","not Int.from_nat(abs(a)) <= Int.from_nat(abs(b)) or not Int.from_nat(abs(b)) <= b","not Int.from_nat(abs(b)) <= b","Int.from_nat(abs(b)) = b","Int.from_nat(abs(b)) != b"]}
{"goal":"a <= Int.from_nat(abs(a))","proof":["a <= Int.from_nat(abs(a))"]}
{"goal":"a <= b","proof":["not a <= Int.from_nat(abs(a)) or not Int.from_nat(abs(a)) <= b or a <= b","not Int.from_nat(abs(a)) <= b or not a <= Int.from_nat(abs(a))"]}
{"goal":"div_pos_imp_lte","proof":[]}
{"goal":"gcd_nonneg","proof":["Int.from_nat(abs(a).gcd(abs(b))) = a.gcd(b)","Int.from_nat(abs(a.gcd(b))) != a.gcd(b) or not a.gcd(b).is_negative","abs(Int.from_nat(abs(a).gcd(abs(b)))) = abs(a).gcd(abs(b))","Int.from_nat(abs(a.gcd(b))) != a.gcd(b)"]}
{"goal":"Int.from_nat(abs(a).gcd(abs(b))) = Int.from_nat(abs(b).gcd(abs(a)))","proof":["abs(b).gcd(abs(a)) != abs(a).gcd(abs(b))","abs(b).gcd(abs(a)) = abs(a).gcd(abs(b))"]}
{"goal":"gcd_comm","proof":["Int.from_nat(abs(a).gcd(abs(b))) = a.gcd(b)","Int.from_nat(abs(b).gcd(abs(a))) = b.gcd(a)"]}
{"goal":"Int.from_nat(abs(a).gcd(abs(b))).divides(a)","proof":["not abs(Int.from_nat(abs(a).gcd(abs(b)))).divides(abs(a)) or Int.from_nat(abs(a).gcd(abs(b))).divides(a)","abs(a).gcd(abs(b)).divides(abs(a))","abs(Int.from_nat(abs(a).gcd(abs(b)))) = abs(a).gcd(abs(b))","not abs(Int.from_nat(abs(a).gcd(abs(b)))).divides(abs(a))"]}
{"goal":"gcd_div_left","proof":["Int.from_nat(abs(a).gcd(abs(b))) = a.gcd(b)"]}
{"goal":"gcd_div_right","proof":["b.gcd(a) = a.gcd(b)","not b.gcd(a).divides(b)","b.gcd(a).divides(b)"]}
{"goal":"abs(d).divides(abs(a))","proof":["not d.divides(a) or abs(d).divides(abs(a))"]}
{"goal":"abs(d).divides(abs(b))","proof":["not d.divides(b) or abs(d).divides(abs(b))"]}
{"goal":"abs(d).divides(abs(a).gcd(abs(b)))","proof":["not abs(d).divides(abs(a)) or not abs(d).divides(abs(b)) or abs(d).divides(abs(a).gcd(abs(b)))"]}
{"goal":"d.divides(Int.from_nat(abs(a).gcd(abs(b))))","proof":["not abs(d).divides(abs(Int.from_nat(abs(a).gcd(abs(b))))) or d.divides(Int.from_nat(abs(a).gcd(abs(b))))","abs(Int.from_nat(abs(a).gcd(abs(b)))) = abs(a).gcd(abs(b))","not abs(d).divides(abs(Int.from_nat(abs(a).gcd(abs(b)))))","abs(d).divides(abs(Int.from_nat(abs(a).gcd(abs(b)))))"]}
{"goal":"d.divides(a.gcd(b))","proof":["Int.from_nat(abs(a).gcd(abs(b))) = a.gcd(b)"]}
{"goal":"divides_gcd","proof":[]}
{"goal":"abs(a) != Nat.0","proof":["abs(a) != Nat.0 or 0 = a"]}
{"goal":"abs(b) != Nat.0","proof":["abs(b) != Nat.0 or 0 = b"]}
{"goal":"abs(a).gcd(abs(b)) != Nat.0","proof":["abs(a).gcd(abs(b)) != Nat.0 or abs(b) = Nat.0"]}
{"goal":"a.gcd(b) != 0","proof":["Int.from_nat(abs(a).gcd(abs(b))) = a.gcd(b)","abs(Int.from_nat(abs(a).gcd(abs(b)))) = abs(a).gcd(abs(b))"]}
{"goal":"gcd_pos","proof":["a.gcd(b).is_positive or a.gcd(b).is_negative or a.gcd(b) = 0","a.gcd(b).is_negative","not a.gcd(b).is_negative"]}
{"goal":"a.gcd(b).is_positive","proof":["a.gcd(b).is_positive or 0 = a or 0 = b"]}
{"goal":"d.divides(a.gcd(b))","proof":["not d.divides(a) or not d.divides(b) or d.divides(a.gcd(b))"]}
{"goal":"gcd_is_gcd","proof":["not d.divides(a.gcd(b)) or not a.gcd(b).is_positive or d <= a.gcd(b)"]}
{"goal":"0 * a + 0 * b = 0","proof":["0 * a + 0 * b = 0 * (a + b)","0 * (a + b) != 0","0 * (a + b) = 0"]}
{"goal":"spans_zero","proof":["0 * a + 0 * b != 0 or spans(a, b, 0)"]}
{"goal":"1 * a + 0 * b = a","proof":["0 - a != -a or 0 + a = a","a + 0 = 0 + a","0 - a = -a","1 * a = a","0 * b = 0","1 * a + 0 != a","a + 0 != a","0 + a != a"]}
{"goal":"spans_left","proof":["1 * a + 0 * b != a or spans(a, b, a)"]}
{"goal":"exists(k0: Int, k1: Int) { k0 * a + k1 * b = c }","proof":["let (s0: (Int, Int, Int) -> Int, s1: (Int, Int, Int) -> Int) satisfy { forall(x0: Int, x1: Int, x2: Int) { not spans(x0, x1, x2) or s0(x0, x1, x2) * x0 + s1(x0, x1, x2) * x1 = x2 } and forall(x3: Int, x4: Int, x5: Int, x6: Int, x7: Int) { x3 * x4 + x5 * x6 != x7 or spans(x4, x6, x7) } }","s0(a, b, c) * a + s1(a, b, c) * b != c","not spans(a, b, c) or s0(a, b, c) * a + s1(a, b, c) * b = c"]}
{"goal":"e * b + d * a = c","proof":["e * b + d * a = d * a + e * b"]}
{"goal":"spans_comm","proof":["e * b + d * a != c or spans(b, a, c)"]}
{"goal":"0 * a + 1 * b = b","proof":["0 - b != -b or 0 + b = b","0 - b = -b","1 * b = b","0 * a = 0","0 + 1 * b != b","0 + b != b"]}
{"goal":"spans_right","proof":["0 * a + 1 * b != b or spans(a, b, b)"]}
{"goal":"c * a + 0 * b = c * a","proof":["0 - c * a != -(c * a) or 0 + c * a = c * a","c * a + 0 = 0 + c * a","0 - c * a = -(c * a)","0 * b = 0","c * a + 0 != c * a","0 + c * a != c * a"]}
{"goal":"spans_mul_left","proof":["c * a + 0 * b != c * a or spans(a, b, c * a)"]}
{"goal":"spans_div_left","proof":["let s0: (Int, Int) -> Int satisfy { forall(x0: Int, x1: Int) { not x0.divides(x1) or s0(x0, x1) * x0 = x1 } and forall(x2: Int, x3: Int, x4: Int) { x2 * x3 != x4 or x3.divides(x4) } }","not a.divides(c) or s0(a, c) * a = c","spans(a, b, s0(a, c) * a)","s0(a, c) * a = c"]}
{"goal":"spans_mul_right","proof":["not spans(b, a, c * b) or spans(a, b, c * b)","spans(b, a, c * b)"]}
{"goal":"spans(b, a, c)","proof":["not b.divides(c) or spans(b, a, c)"]}
{"goal":"spans_div_right","proof":["not spans(b, a, c) or spans(a, b, c)"]}
{"goal":"exists(k0: Int, k1: Int) { k0 * a + k1 * b = c }","proof":["let (s0: (Int, Int, Int) -> Int, s1: (Int, Int, Int) -> Int) satisfy { forall(x0: Int, x1: Int, x2: Int) { not spans(x0, x1, x2) or s0(x0, x1, x2) * x0 + s1(x0, x1, x2) * x1 = x2 } and forall(x3: Int, x4: Int, x5: Int, x6: Int, x7: Int) { x3 * x4 + x5 * x6 != x7 or spans(x4, x6, x7) } }","s0(a, b, c) * a + s1(a, b, c) * b != c","not spans(a, b, c) or s0(a, b, c) * a + s1(a, b, c) * b = c"]}
{"goal":"d * c = d * (e * a + f * b)","proof":["e * a + f * b != c"]}
{"goal":"d * c = d * (e * a) + d * (f * b)","proof":["d * (e * a) + d * (f * b) = d * (e * a + f * b)"]}
{"goal":"d * c = d * e * a + d * f * b","proof":["sub_nat((d * (e * a)).pos_part + (d * (f * b)).pos_part, (d * (e * a)).neg_part + (d * (f * b)).neg_part) = d * (e * a) + d * (f * b)","sub_nat((d * e * a).pos_part + (d * f * b).pos_part, (d * e * a).neg_part + (d * f * b).neg_part) = d * e * a + d * f * b","d * (e * a) = d * e * a","d * (f * b) = d * f * b"]}
{"goal":"spans_mul","proof":["d * e * a + d * f * b != d * c or spans(a, b, d * c)"]}
{"goal":"exists(k0: Int, k1: Int) { k0 * a + k1 * b = c }","proof":["let (s0: (Int, Int, Int) -> Int, s1: (Int, Int, Int) -> Int) satisfy { forall(x0: Int, x1: Int, x2: Int) { not spans(x0, x1, x2) or s0(x0, x1, x2) * x0 + s1(x0, x1, x2) * x1 = x2 } and forall(x3: Int, x4: Int, x5: Int, x6: Int, x7: Int) { x3 * x4 + x5 * x6 != x7 or spans(x4, x6, x7) } }","s0(a, b, c) * a + s1(a, b, c) * b != c","not spans(a, b, c) or s0(a, b, c) * a + s1(a, b, c) * b = c"]}
{"goal":"exists(k0: Int, k1: Int) { k0 * a + k1 * b = d }","proof":["let (s0: (Int, Int, Int) -> Int, s1: (Int, Int, Int) -> Int) satisfy { forall(x0: Int, x1: Int, x2: Int) { not spans(x0, x1, x2) or s0(x0, x1, x2) * x0 + s1(x0, x1, x2) * x1 = x2 } and forall(x3: Int, x4: Int, x5: Int, x6: Int, x7: Int) { x3 * x4 + x5 * x6 != x7 or spans(x4, x6, x7) } }","s0(a, b, d) * a + s1(a, b, d) * b != d","not spans(a, b, d) or s0(a, b, d) * a + s1(a, b, d) * b = d"]}
{"goal":"c + d = e * a + f * b + (g * a + h * b)","proof":[]}
{"goal":"c + d = e * a + g * a + (f * b + h * b)","proof":["e * a + g * a + (f * b + h * b) = e * a + f * b + (g * a + h * b)"]}
{"goal":"c + d = (e + g) * a + (f + h) * b","proof":["sub_nat(((e + g) * a).pos_part + ((f + h) * b).pos_part, ((e + g) * a).neg_part + ((f + h) * b).neg_part) = (e + g) * a + (f + h) * b","sub_nat((e * a + g * a).pos_part + (f * b + h * b).pos_part, (e * a + g * a).neg_part + (f * b + h * b).neg_part) = e * a + g * a + (f * b + h * b)","e * a + g * a = (e + g) * a","f * b + h * b = (f + h) * b"]}
{"goal":"spans_add","proof":["(e + g) * a + (f + h) * b != c + d or spans(a, b, c + d)"]}
{"goal":"-1 * c = -c","proof":["-1 * c = -(1 * c)","-(1 * c) != -c","1 * c != c","1 * c = c"]}
{"goal":"spans(a, b, -1 * c)","proof":["not spans(a, b, c) or spans(a, b, -1 * c)"]}
{"goal":"spans_negate","proof":["not spans(a, b, -1 * c)"]}
{"goal":"exists(k0: Nat) { k0 * m + mod(k, m) = k }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { s0(x0, x1) * x1 + mod(x0, x1) = x0 } }","s0(k, m) * m + mod(k, m) != k","s0(k, m) * m + mod(k, m) = k"]}
{"goal":"Int.from_nat(d * m) + Int.from_nat(mod(k, m)) = Int.from_nat(k)","proof":["Int.from_nat(d * m) + Int.from_nat(mod(k, m)) = Int.from_nat(d * m + mod(k, m))"]}
{"goal":"Int.from_nat(d) * Int.from_nat(m) + Int.from_nat(mod(k, m)) = Int.from_nat(k)","proof":["Int.from_nat(d) * Int.from_nat(m) = Int.from_nat(d * m)"]}
{"goal":"--(Int.from_nat(d) * Int.from_nat(m)) = Int.from_nat(k) - Int.from_nat(mod(k, m))","proof":["Int.from_nat(d) * Int.from_nat(m) + Int.from_nat(mod(k, m)) - Int.from_nat(mod(k, m)) = Int.from_nat(d) * Int.from_nat(m)","--(Int.from_nat(d) * Int.from_nat(m)) = Int.from_nat(d) * Int.from_nat(m)","Int.from_nat(k) - Int.from_nat(mod(k, m)) != Int.from_nat(d) * Int.from_nat(m)"]}
{"goal":"Int.from_nat(mod(k, m)) = Int.from_nat(k) + -(Int.from_nat(d) * Int.from_nat(m))","proof":["--(Int.from_nat(d) * Int.from_nat(m)) != Int.from_nat(k) - Int.from_nat(mod(k, m)) or Int.from_nat(k) + -(Int.from_nat(d) * Int.from_nat(m)) = Int.from_nat(mod(k, m))"]}
{"goal":"spans(a, b, Int.from_nat(d) * Int.from_nat(m))","proof":["not spans(a, b, Int.from_nat(m)) or spans(a, b, Int.from_nat(d) * Int.from_nat(m))"]}
{"goal":"spans(a, b, -(Int.from_nat(d) * Int.from_nat(m)))","proof":["not spans(a, b, Int.from_nat(d) * Int.from_nat(m)) or spans(a, b, -(Int.from_nat(d) * Int.from_nat(m)))"]}
{"goal":"spans(a, b, Int.from_nat(k) + -(Int.from_nat(d) * Int.from_nat(m)))","proof":["not spans(a, b, Int.from_nat(k)) or not spans(a, b, -(Int.from_nat(d) * Int.from_nat(m))) or spans(a, b, Int.from_nat(k) + -(Int.from_nat(d) * Int.from_nat(m)))"]}
{"goal":"spans(a, b, Int.from_nat(mod(k, m)))","proof":[]}
{"goal":"spans_nat_mod","proof":[]}
{"goal":"f(mod(m, n))","proof":["spans(a, b, Int.from_nat(m)) = f(m)","spans(a, b, Int.from_nat(mod(m, n))) = f(mod(m, n))","spans(a, b, Int.from_nat(n)) = f(n)","not spans(a, b, Int.from_nat(m)) or not spans(a, b, Int.from_nat(n)) or spans(a, b, Int.from_nat(mod(m, n)))","not spans(a, b, Int.from_nat(mod(m, n)))","spans(a, b, Int.from_nat(n))","spans(a, b, Int.from_nat(m))","not spans(a, b, Int.from_nat(m))"]}
{"goal":"mod_maintains(f)","proof":["let (s0: Nat -> Bool -> Nat, s1: Nat -> Bool -> Nat) satisfy { forall(x0: Nat -> Bool, x1: Nat, x2: Nat) { not mod_maintains(x0) or not x0(x1) or not x0(x2) or x0(mod(x1, x2)) } and forall(x3: Nat -> Bool) { mod_maintains(x3) or x3(s0(x3)) } and forall(x4: Nat -> Bool) { mod_maintains(x4) or x4(s1(x4)) } and forall(x5: Nat -> Bool) { not x5(mod(s0(x5), s1(x5))) or mod_maintains(x5) } }","not f(s0(f)) or not f(s1(f)) or f(mod(s0(f), s1(f)))","not f(mod(s0(f), s1(f))) or mod_maintains(f)","not f(mod(s0(f), s1(f)))","mod_maintains(f) or f(s1(f))","f(s1(f))","mod_maintains(f) or f(s0(f))","not f(s0(f))","f(s0(f))"]}
{"goal":"f(abs(a))","proof":["spans(a, b, Int.from_nat(abs(a))) = f(abs(a))","unit_sign(a) * a = Int.from_nat(abs(a))","spans(a, b, unit_sign(a) * a)","not spans(a, b, Int.from_nat(abs(a)))"]}
{"goal":"f(abs(b))","proof":["spans(a, b, Int.from_nat(abs(b))) = f(abs(b))","unit_sign(b) * b = Int.from_nat(abs(b))","spans(a, b, unit_sign(b) * b)","not spans(a, b, Int.from_nat(abs(b)))"]}
{"goal":"spans(a, b, Int.from_nat(abs(a).gcd(abs(b))))","proof":["spans(a, b, Int.from_nat(abs(a).gcd(abs(b)))) = f(abs(a).gcd(abs(b)))","not f(abs(a).gcd(abs(b)))","not mod_maintains(f) or not f(abs(a)) or not f(abs(b)) or f(abs(a).gcd(abs(b)))"]}
{"goal":"spans_gcd","proof":["Int.from_nat(abs(a).gcd(abs(b))) = a.gcd(b)"]}
{"goal":"abs(n).gcd(Nat.1) = Nat.1","proof":["abs(n).gcd(Nat.1) = Nat.1.gcd(abs(n))","Nat.1.gcd(abs(n)) != Nat.1","Nat.1.gcd(abs(n)) = Nat.1"]}
{"goal":"gcd_one_right","proof":["Int.from_nat(abs(1).gcd(abs(n))) = 1.gcd(n)","n.gcd(1) = 1.gcd(n)","abs(n).gcd(Nat.1) = Nat.1.gcd(abs(n))","abs(Int.from_nat(Nat.1)) = Nat.1"]}
{"goal":"gcd_one_left","proof":["n.gcd(1) = 1.gcd(n)","n.gcd(1) != 1","n.gcd(1) = 1"]}
{"goal":"gcd_mult_left","proof":["(abs(m) * abs(a)).gcd(abs(m) * abs(b)) = abs(m) * abs(a).gcd(abs(b))","Int.from_nat(abs(a).gcd(abs(b))) = a.gcd(b)","Int.from_nat(abs(m * a).gcd(abs(m * b))) = (m * a).gcd(m * b)","Int.from_nat(abs(m)) * Int.from_nat(abs(a).gcd(abs(b))) = Int.from_nat(abs(m) * abs(a).gcd(abs(b)))","abs(Int.from_nat(abs(m))) * abs(a.gcd(b)) = abs(Int.from_nat(abs(m)) * a.gcd(b))","abs(m) * abs(a) = abs(m * a)","abs(m) * abs(b) = abs(m * b)","sub_nat(abs(Int.from_nat(abs(m)) * a.gcd(b)), Nat.0) = Int.from_nat(abs(Int.from_nat(abs(m)) * a.gcd(b)))","sub_nat(abs(m * a).gcd(abs(m * b)), Nat.0) = Int.from_nat(abs(m * a).gcd(abs(m * b)))","abs(Int.from_nat(abs(a).gcd(abs(b)))) = abs(a).gcd(abs(b))","abs(Int.from_nat(abs(m))) = abs(m)"]}
{"goal":"gcd_mult_right","proof":["Int.from_nat(abs(m)) * a.gcd(b) = (m * a).gcd(m * b)","a.gcd(b) * Int.from_nat(abs(m)) = Int.from_nat(abs(m)) * a.gcd(b)","m * a = a * m","m * b = b * m"]}
{"goal":"abs(a).gcd(abs(b)) != Nat.0","proof":["Int.from_nat(abs(a).gcd(abs(b))) = a.gcd(b)","abs(a).gcd(abs(b)) != Nat.0 or abs(b) = Nat.0","abs(b) = Nat.0","-Int.from_nat(Nat.0) = int_base.neg_nat(Nat.0)","--a.gcd(b) = a.gcd(b)"]}
{"goal":"abs(af) * abs(a).gcd(abs(b)) = abs(a)","proof":["Int.from_nat(abs(a).gcd(abs(b))) = a.gcd(b)","abs(af) * abs(Int.from_nat(abs(a).gcd(abs(b)))) = abs(af * Int.from_nat(abs(a).gcd(abs(b))))","abs(Int.from_nat(abs(a).gcd(abs(b)))) = abs(a).gcd(abs(b))"]}
{"goal":"abs(bf) * abs(a).gcd(abs(b)) = abs(b)","proof":["Int.from_nat(abs(a).gcd(abs(b))) = a.gcd(b)","abs(bf) * abs(Int.from_nat(abs(a).gcd(abs(b)))) = abs(bf * Int.from_nat(abs(a).gcd(abs(b))))","abs(Int.from_nat(abs(a).gcd(abs(b)))) = abs(a).gcd(abs(b))"]}
{"goal":"abs(af).gcd(abs(bf)) = Nat.1","proof":["abs(af) * abs(a).gcd(abs(b)) != abs(a) or abs(bf) * abs(a).gcd(abs(b)) != abs(b) or abs(af).gcd(abs(bf)) = Nat.1 or abs(a).gcd(abs(b)) = Nat.0","abs(af) * abs(a).gcd(abs(b)) != abs(a) or abs(bf) * abs(a).gcd(abs(b)) != abs(b) or abs(a).gcd(abs(b)) = Nat.0 or abs(af).gcd(abs(bf)) = Nat.1","abs(bf) * abs(a).gcd(abs(b)) != abs(b) or abs(af) * abs(a).gcd(abs(b)) != abs(a) or abs(a).gcd(abs(b)) = Nat.0"]}
{"goal":"cofactor","proof":["Int.from_nat(abs(af).gcd(abs(bf))) = af.gcd(bf)"]}
{"goal":"abs(a) != Nat.0","proof":["abs(a) != Nat.0 or 0 = a"]}
{"goal":"abs(a).gcd(abs(b)) != Nat.0","proof":["abs(a).gcd(abs(b)) != Nat.0 or abs(a) = Nat.0"]}
{"goal":"a.gcd(b) != 0","proof":["Int.from_nat(abs(a).gcd(abs(b))) = a.gcd(b)","abs(Int.from_nat(abs(a).gcd(abs(b)))) = abs(a).gcd(abs(b))"]}
{"goal":"gcd_nonzero_left","proof":[]}
{"goal":"gcd_nonzero_right","proof":["b.gcd(a) != 0 or 0 = b","a.gcd(b) = b.gcd(a)","b.gcd(a) = 0"]}
{"goal":"lt_mul_both","proof":["not a.is_positive or not b < c or b * a < c * a","b * a = a * b","c * a = a * c","not a * b < c * a","not a.is_positive or b * a < c * a","not b * a < c * a","b * a < c * a"]}
{"goal":"lte_mul_both","proof":["a * c - a * b = a * (c - b)","not b <= c or (c - b).is_positive or c = b","not a.is_positive or not (c - b).is_positive or (a * (c - b)).is_positive","not (a * c - a * b).is_positive or a * b <= a * c","a * c != a * b or a * b <= a * c","a * c != a * b","c != b","(c - b).is_positive","not (a * c - a * b).is_positive","not (a * (c - b)).is_positive"]}
{"goal":"a * c < b * a","proof":["not a.is_negative or not b < c or c * a < b * a","c * a = a * c","not c * a < b * a"]}
{"goal":"lt_mul_both_neg","proof":["a * b > a * c = a * c < a * b","not a * c < a * b","b * a = a * b"]}
{"goal":"lte_mul_both_neg","proof":["not a.is_negative or not b < c or a * b > a * c","not b <= c or b < c or c = b","a * c <= a * b = a * b >= a * c","not a * c < a * b or a * c <= a * b","a * b > a * c = a * c < a * b","a * c != a * b or a * c <= a * b","not a * c <= a * b","not a * b > a * c or a * c < a * b","b < c or c = b","not b < c or a * b > a * c","a * c != a * b","c != b","not a * c < a * b","b < c","not a * b > a * c","a * b > a * c"]}
{"goal":"b != c","proof":["a * b < a * b","not a * b < a * b or a * b != a * b"]}
{"goal":"b <= c","proof":["not c <= b or not a.is_positive or a * c <= a * b","not a * c <= a * b or not a * b < a * c or a * b < a * b","not (b - c).is_positive or c <= b","not (c - b).is_positive or b <= c","not (c - b).is_positive","-(c - b) = b - c","b - c != 0 or c = b","(b - c).is_positive or (b - c).is_negative or b - c = 0","(-(c - b)).is_negative = (c - b).is_positive","not a * b < a * b","b - c != 0","not a * c <= a * b or a * b < a * b","not a * c <= a * b","not (-(c - b)).is_negative","not (b - c).is_negative","(b - c).is_positive","not c <= b","c <= b"]}
{"goal":"lt_cancel_mul","proof":["not b <= c or b < c or c = b"]}
{"goal":"not a * c < a * b","proof":["not is_antisymmetric[Int](Int.lte) or not a * c <= a * b or not a * b <= a * c or a * c = a * b","not a * c < a * b or a * c <= a * b","not a * c < a * b or a * c != a * b","a * c != a * b","a * c <= a * b","not a * c <= a * b"]}
{"goal":"not c < b","proof":["not a.is_positive or not c < b or a * c < a * b"]}
{"goal":"not b < c","proof":["not b < c or b <= c"]}
{"goal":"not (c - b).is_positive","proof":["not (c - b).is_positive or b <= c"]}
{"goal":"not (b - c).is_negative","proof":["-(c - b) = b - c","(-(c - b)).is_negative","(-(c - b)).is_negative = (c - b).is_positive"]}
{"goal":"c != b","proof":["not c <= c","not is_reflexive[Int](Int.lte) or c <= c","not is_reflexive[Int](Int.lte)"]}
{"goal":"b - c != 0","proof":["b - c != 0 or c = b"]}
{"goal":"false","proof":["not c <= b or c < b or c = b","not (b - c).is_positive or c <= b","(b - c).is_positive or (b - c).is_negative or b - c = 0","not c <= b","(b - c).is_positive","not (b - c).is_positive"]}
{"goal":"lte_cancel_mul","proof":[]}
{"goal":"c < b","proof":["not a * a * c < a * a * b or not (a * a).is_positive or c < b","not a.is_negative or not a * b < a * c or a * (a * b) > a * (a * c)","a * (a * b) = a * a * b","a * (a * c) = a * a * c","not a.is_negative or not a.is_negative or (a * a).is_positive","a * a * b > a * (a * c) = a * (a * c) < a * a * b","not a * a * c < a * a * b or not (a * a).is_positive","not a.is_negative or (a * a).is_positive","(a * a).is_positive","not a.is_negative or a * (a * b) > a * (a * c)","a * (a * b) > a * (a * c)","a * a * b > a * (a * c)","a * (a * c) < a * a * b","not a * a * c < a * a * b","a * a * c < a * a * b"]}
{"goal":"lt_cancel_mul_neg","proof":["b > c = c < b"]}
{"goal":"lte_cancel_mul_neg","proof":["not a * a * c <= a * a * b or not (a * a).is_positive or c <= b","not a * b <= a * c or not a.is_negative or a * (a * b) >= a * (a * c)","a * (a * b) = a * a * b","a * (a * c) = a * a * c","not a.is_negative or not a.is_negative or (a * a).is_positive","a * a * c <= a * a * b = a * a * b >= a * a * c","c <= b = b >= c","not c <= b","not a * a * b >= a * a * c or a * a * c <= a * a * b","not a.is_negative or (a * a).is_positive","(a * a).is_positive","not a.is_negative or a * (a * b) >= a * (a * c)","a * (a * b) >= a * (a * c)","a * a * b >= a * (a * c)","a * a * b >= a * a * c","not a * a * c <= a * a * b or not (a * a).is_positive","a * a * c <= a * a * b","not a * a * c <= a * a * b"]}
{"goal":"a * b < a * c","proof":["not a.is_positive or not b < c or a * b < a * c"]}
{"goal":"false","proof":["not a * b < a * c or a * c != a * b"]}
{"goal":"c < b","proof":["not a * c <= a * b or not a.is_positive or c <= b","not c <= b or c < b or c = b","not c <= b","a * c != a * b or a * c <= a * b","a * c <= a * b"]}
{"goal":"a * c < a * b","proof":["not a.is_positive or not c < b or a * c < a * b"]}
{"goal":"false","proof":["not a * c < a * b or a * c != a * b"]}
{"goal":"mul_pos_cancel_left","proof":[]}
{"goal":"mul_pos_cancel_right","proof":["a * c != a * b or not a.is_positive or c = b","b * a = a * b","c * a = a * c","a * c = b * a","a * c != a * b or not a.is_positive","a * c = a * b","a * c != a * b"]}
{"goal":"(-a).is_positive","proof":["sub_nat((--a).pos_part, (--a).neg_part) = --a","sub_nat(a.pos_part, a.neg_part) = a","(--a).neg_part = (-a).pos_part","(-a).neg_part = a.pos_part","(--a).pos_part = (-a).neg_part","(-a).pos_part = a.neg_part","(--a).is_negative = (-a).is_positive"]}
{"goal":"-a * b = -a * c","proof":["-a * b = -(a * b)","-a * c = -(a * c)"]}
{"goal":"b = c","proof":["-a * c != -a * b or not (-a).is_positive or c = b"]}
{"goal":"mul_neg_cancel_left","proof":[]}
{"goal":"mul_neg_cancel_right","proof":["a * c != a * b or not a.is_negative or c = b","b * a = a * b","c * a = a * c","a * c = b * a","a * c != a * b or not a.is_negative","a * c = a * b","a * c != a * b"]}
{"goal":"b = c","proof":["a * c != a * b or not a.is_positive or c = b"]}
{"goal":"a.is_negative","proof":["a.is_positive or a.is_negative or 0 = a"]}
{"goal":"b = c","proof":["a * c != a * b or not a.is_negative or c = b"]}
{"goal":"mul_cancel_left","proof":[]}
{"goal":"mul_cancel_right","proof":["c * a != b * a or not a.is_negative or c = b","not a.is_negative","c * a != b * a or not a.is_positive or c = b","not a.is_positive","a.is_positive or a.is_negative or 0 = a"]}
{"goal":"exists(k0: Int) { a * b * k0 = a * c }","proof":["let s0: (Int, Int) -> Int satisfy { forall(x0: Int, x1: Int) { not x0.divides(x1) or s0(x0, x1) * x0 = x1 } and forall(x2: Int, x3: Int, x4: Int) { x2 * x3 != x4 or x3.divides(x4) } }","a * b * s0(a * b, a * c) != a * c","not (a * b).divides(a * c) or s0(a * b, a * c) * (a * b) = a * c","s0(a * b, a * c) * (a * b) = a * b * s0(a * b, a * c)","s0(a * b, a * c) * (a * b) = a * c"]}
{"goal":"a * (b * d) = a * c","proof":["a * (b * d) = a * b * d"]}
{"goal":"b * d = c","proof":["a * (b * d) != a * c or 0 = a or b * d = c"]}
{"goal":"divides_cancel_left","proof":["d * b != c or b.divides(c)","d * b != c","d * b = b * d"]}
{"goal":"divides_cancel_right","proof":["not (a * b).divides(a * c) or b.divides(c) or 0 = a","b * a = a * b","c * a = a * c","(b * a).divides(a * c)","not (a * b).divides(a * c) or 0 = a","(a * b).divides(a * c)","not (a * b).divides(a * c)"]}
{"goal":"exists(k0: Int) { k0 * a = b }","proof":["let s0: (Int, Int) -> Int satisfy { forall(x0: Int, x1: Int) { not x0.divides(x1) or s0(x0, x1) * x0 = x1 } and forall(x2: Int, x3: Int, x4: Int) { x2 * x3 != x4 or x3.divides(x4) } }","s0(a, b) * a != b","not a.divides(b) or s0(a, b) * a = b"]}
{"goal":"m * d * a = m * b","proof":["m * (d * a) = m * d * a"]}
{"goal":"divides_mul_left","proof":["d * (m * a) = d * m * a","d * (m * a) != m * b or (m * a).divides(m * b)","m * d = d * m","d * m * a = m * b","d * (m * a) != m * b"]}
{"goal":"divides_mul_right","proof":["not a.divides(b) or (m * a).divides(m * b)","m * a = a * m","m * b = b * m","not (m * a).divides(b * m)","(m * a).divides(m * b)"]}
{"goal":"abs(p).gcd(abs(n)) = Nat.1 or abs(p).divides(abs(n))","proof":["not abs(p).is_prime or abs(p).gcd(abs(n)) = Nat.1 or abs(p).divides(abs(n))","not abs(p).is_prime","abs(p).is_prime = is_prime(p)"]}
{"goal":"p.gcd(n) = 1","proof":["Int.from_nat(abs(p).gcd(abs(n))) = p.gcd(n)"]}
{"goal":"abs(p).divides(abs(n))","proof":[]}
{"goal":"p.divides(n)","proof":["not abs(p).divides(abs(n)) or p.divides(n)"]}
{"goal":"gcd_of_prime","proof":[]}
{"goal":"spans(a, b, 1)","proof":["spans(a, b, a.gcd(b))"]}
{"goal":"exists(k0: Int, k1: Int) { k0 * a + k1 * b = 1 }","proof":["let (s0: (Int, Int, Int) -> Int, s1: (Int, Int, Int) -> Int) satisfy { forall(x0: Int, x1: Int, x2: Int) { not spans(x0, x1, x2) or s0(x0, x1, x2) * x0 + s1(x0, x1, x2) * x1 = x2 } and forall(x3: Int, x4: Int, x5: Int, x6: Int, x7: Int) { x3 * x4 + x5 * x6 != x7 or spans(x4, x6, x7) } }","s0(a, b, 1) * a + s1(a, b, 1) * b != 1","not spans(a, b, 1) or s0(a, b, 1) * a + s1(a, b, 1) * b = 1"]}
{"goal":"x * a * c + y * b * c = c","proof":["x * a * c + y * b * c = (x * a + y * b) * c","(x * a + y * b) * c != c","1 * c != c","1 * c = c"]}
{"goal":"exists(k0: Int) { k0 * a = b * c }","proof":["let s0: (Int, Int) -> Int satisfy { forall(x0: Int, x1: Int) { not x0.divides(x1) or s0(x0, x1) * x0 = x1 } and forall(x2: Int, x3: Int, x4: Int) { x2 * x3 != x4 or x3.divides(x4) } }","s0(a, b * c) * a != b * c","not a.divides(b * c) or s0(a, b * c) * a = b * c"]}
{"goal":"x * a * c + y * d * a = c","proof":["sub_nat((x * a * c).pos_part + (y * b * c).pos_part, (x * a * c).neg_part + (y * b * c).neg_part) = x * a * c + y * b * c","sub_nat((x * a * c).pos_part + (y * d * a).pos_part, (x * a * c).neg_part + (y * d * a).neg_part) = x * a * c + y * d * a","y * (b * c) = y * b * c","y * (d * a) = y * d * a"]}
{"goal":"a * x * c + a * y * d = c","proof":["sub_nat((a * x * c).pos_part + (a * y * d).pos_part, (a * x * c).neg_part + (a * y * d).neg_part) = a * x * c + a * y * d","sub_nat((x * a * c).pos_part + (y * d * a).pos_part, (x * a * c).neg_part + (y * d * a).neg_part) = x * a * c + y * d * a","a * (y * d) = a * y * d","a * (y * d) = y * d * a","c * (a * x) = a * x * c","c * (x * a) = x * a * c","x * a = a * x"]}
{"goal":"a * (x * c + y * d) = c","proof":["a * (x * c) + a * (y * d) = a * (x * c + y * d)","a * (x * c) = a * x * c","a * (y * d) = a * y * d"]}
{"goal":"a.divides(c)","proof":["(x * c + y * d) * a != c or a.divides(c)","(x * c + y * d) * a != c","a * (x * c + y * d) = (x * c + y * d) * a"]}
{"goal":"euclids_lemma","proof":[]}
{"goal":"a.divides(b)","proof":[]}
{"goal":"a.gcd(b) = 1","proof":["not is_prime(a) or a.gcd(b) = 1 or a.divides(b)"]}
{"goal":"a.divides(c)","proof":["not a.divides(b * c) or a.gcd(b) != 1 or a.divides(c)"]}
{"goal":"euclids_lemma_prime","proof":[]}
{"goal":"2 = Int.from_nat(Nat.1 + Nat.1)","proof":["Int.from_nat(Nat.2) != 2"]}
{"goal":"one_plus_one","proof":["Int.from_nat(Nat.1) + Int.from_nat(Nat.1) = Int.from_nat(Nat.1 + Nat.1)"]}
{"goal":"2 = 1 + 1","proof":[]}
{"goal":"2 * a = (1 + 1) * a","proof":["1 + 1 != 2"]}
{"goal":"2 * a = 1 * a + 1 * a","proof":["1 * a + 1 * a = (1 + 1) * a"]}
{"goal":"times_two","proof":["sub_nat((1 * a).pos_part + (1 * a).pos_part, (1 * a).neg_part + (1 * a).neg_part) = 1 * a + 1 * a","sub_nat(a.pos_part + a.pos_part, a.neg_part + a.neg_part) = a + a","1 * a = a"]}
{"goal":"exists(k0: Nat, k1: Nat) { k1 < abs(n) and abs(m) = k0 * abs(n) + k1 }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { s0(x0, x1) * x1 + mod(x0, x1) = x0 } }","s0(abs(m), abs(n)) * abs(n) + mod(abs(m), abs(n)) != abs(m) or not mod(abs(m), abs(n)) < abs(n)","n * 1 != n * 0 or not n.is_positive or 1 = 0","s0(abs(m), abs(n)) * abs(n) + mod(abs(m), abs(n)) = abs(m)","mod(abs(m), abs(n)) < abs(n) or abs(n) = Nat.0","abs(n) != Nat.0 or 0 = n","n * 1 = n","n * 0 = 0","not mod(abs(m), abs(n)) < abs(n)","n * 1 != n * 0 or 1 = 0","n * 1 != n * 0","n * 1 != 0","0 != n","abs(n) = Nat.0","abs(n) != Nat.0"]}
{"goal":"0 <= Int.from_nat(r)","proof":["not q * abs(n) <= abs(m) or q * abs(n) + r != abs(m) + Nat.0 or Nat.0 <= r","not Nat.0 <= r or Int.from_nat(Nat.0) <= Int.from_nat(r)","q * abs(n) + r != abs(m) or q * abs(n) <= abs(m)","abs(m) + Nat.0 = abs(m)","not Int.from_nat(Nat.0) <= Int.from_nat(r)","q * abs(n) <= abs(m)","q * abs(n) + r = abs(m) + Nat.0","not Nat.0 <= r","Nat.0 <= r"]}
{"goal":"Int.from_nat(r) < n","proof":["not r < abs(n) or Int.from_nat(r) < Int.from_nat(abs(n))","sub_nat(n.pos_part, n.neg_part) = n","not n.is_positive or n.pos_part = abs(n)","not n.is_positive or n.neg_part = Nat.0","sub_nat(n.pos_part, Nat.0) = Int.from_nat(n.pos_part)","n.neg_part = Nat.0","not Int.from_nat(r) < sub_nat(n.pos_part, n.neg_part)","n.pos_part = abs(n)","not Int.from_nat(r) < sub_nat(n.pos_part, Nat.0)","not Int.from_nat(r) < Int.from_nat(n.pos_part)","Int.from_nat(r) < Int.from_nat(abs(n))","not Int.from_nat(r) < Int.from_nat(abs(n))"]}
{"goal":"Int.from_nat(abs(m)) = Int.from_nat(q * abs(n) + r)","proof":["q * abs(n) + r != abs(m)"]}
{"goal":"m = Int.from_nat(q * abs(n) + r)","proof":["Int.from_nat(abs(m)) != m","not 0 <= m or not m < 0 or m < m","Int.from_nat(abs(m)) = m or m.is_negative","m.is_negative","not m.is_negative or m < 0","not m < m","not m < 0 or m < m","m < 0","not m < 0"]}
{"goal":"m = Int.from_nat(q) * Int.from_nat(abs(n)) + Int.from_nat(r)","proof":["Int.from_nat(q) * Int.from_nat(abs(n)) = Int.from_nat(q * abs(n))","Int.from_nat(q * abs(n)) + Int.from_nat(r) != m","Int.from_nat(q * abs(n)) + Int.from_nat(r) = Int.from_nat(q * abs(n) + r)"]}
{"goal":"positive_division_theorem","proof":["Int.from_nat(q) * n + Int.from_nat(r) != m or not 0 <= Int.from_nat(r) or not Int.from_nat(r) < n","not n.is_positive or Int.from_nat(q).mul_nat(abs(n)) = Int.from_nat(q) * n","Int.from_nat(q) * Int.from_nat(abs(n)) = Int.from_nat(q).mul_nat(abs(n))","Int.from_nat(q) * n + Int.from_nat(r) != m","Int.from_nat(q).mul_nat(abs(n)) + Int.from_nat(r) = m","Int.from_nat(q).mul_nat(abs(n)) = Int.from_nat(q) * n"]}
{"goal":"0 <= -m","proof":["not (-m - 0).is_positive or 0 <= -m","not (-m - 0).is_positive","-(0 - m) = m - 0","0 - m = -m","(-(-m - 0)).is_negative = (-m - 0).is_positive","1 * m = m","-m - 0 = -m","1 * m - 0 = 1 * m"]}
{"goal":"exists(k0: Int, k1: Int) { 0 <= k1 and k1 < n and -m = k0 * n + k1 }","proof":["let (s0: (Int, Int) -> Int, s1: (Int, Int) -> Int) satisfy { forall(x0: Int, x1: Int) { not 0 <= x0 or not x1.is_positive or 0 <= s1(x0, x1) } and forall(x2: Int, x3: Int) { not 0 <= x2 or not x3.is_positive or s1(x2, x3) < x3 } and forall(x4: Int, x5: Int) { not 0 <= x4 or not x5.is_positive or s0(x4, x5) * x5 + s1(x4, x5) = x4 } }","s0(-m, n) * n + s1(-m, n) != -m or not 0 <= s1(-m, n) or not s1(-m, n) < n","not 0 <= -m or not n.is_positive or s0(-m, n) * n + s1(-m, n) = -m","not 0 <= -m or not n.is_positive or s1(-m, n) < n","not 0 <= -m or not n.is_positive or 0 <= s1(-m, n)","not 0 <= -m or 0 <= s1(-m, n)","0 <= s1(-m, n)","not 0 <= -m or s1(-m, n) < n","s1(-m, n) < n","not n.is_positive or s0(-m, n) * n + s1(-m, n) = -m","s0(-m, n) * n + s1(-m, n) = -m"]}
{"goal":"m = -qn * n + -rn","proof":["-(qn * n) + -rn = -(qn * n + rn)","-qn * n = -(qn * n)","-(qn * n) + -rn != m","-(qn * n + rn) != m","--m != m","m + -m != 0 or --m = m","m + -m = 0"]}
{"goal":"negative_division_theorem(m, n)","proof":["-qn * n + -rn != m or not 0 <= -rn or not -rn < n or negative_division_theorem(m, n)","-rn != 0 or 0 <= -rn","0 - rn = -rn","0 - 0 = 0","-rn = 0","not 0 <= -rn or not -rn < n","0 <= -rn","not -rn < n"]}
{"goal":"rn > 0","proof":["not 0 <= rn or 0 < rn or 0 = rn","rn > 0 = 0 < rn","0 < rn","not 0 < rn"]}
{"goal":"(-qn + -1) * n = -qn * n + -n","proof":["qn * n + 1 * n = (qn + 1) * n","-(qn * n) + -n = -(qn * n + n)","-qn + -1 = -(qn + 1)","-(qn + 1) * n = -((qn + 1) * n)","-qn * n = -(qn * n)","1 * n = n"]}
{"goal":"-qn * n = (-qn + -1) * n + n","proof":["-qn * n + -n + n != -qn * n","-n + -qn * n - -qn * n != -n or -n + -qn * n + n = -qn * n","-n + -qn * n - -qn * n = -n","-qn * n + -n = -n + -qn * n","-n + -qn * n + n != -qn * n"]}
{"goal":"m = -qn * n + -rn","proof":[]}
{"goal":"m = (-qn + -1) * n + (n + -rn)","proof":["-qn * n + -n + (n + -rn) = -qn * n + -n + n + -rn"]}
{"goal":"rn < n","proof":[]}
{"goal":"0 < n + -rn","proof":["not --rn < n or -rn + --rn < -rn + n","n + -rn = -rn + n","not 0 < -rn + n","-rn + --rn = 0","--rn = rn","--rn < n","not -rn + --rn < -rn + n"]}
{"goal":"0 <= n + -rn","proof":["not 0 < n + -rn or 0 <= n + -rn"]}
{"goal":"-rn < 0","proof":["not 0 <= rn or (rn - 0).is_positive or 0 = rn","not (-rn).is_negative or -rn < 0","not (-rn).is_negative","(-rn).is_negative = rn.is_positive","not rn.is_positive","rn - 0 = rn","(rn - 0).is_positive","not (rn - 0).is_positive"]}
{"goal":"n + -rn < n","proof":["not -rn < 0 or n + -rn < n + 0","n + 0 = n","not n + -rn < n + 0"]}
{"goal":"negative_division_theorem(m, n)","proof":["(-qn + -1) * n + (n + -rn) != m or not 0 <= n + -rn or not n + -rn < n or negative_division_theorem(m, n)"]}
{"goal":"negative_division_theorem","proof":["let (s0: (Int, Int) -> Int, s1: (Int, Int) -> Int) satisfy { forall(x0: Int, x1: Int) { not x0.is_positive or not x1.is_negative or not negative_division_theorem(x1, x0) or 0 <= s1(x1, x0) } and forall(x2: Int, x3: Int) { not x2.is_positive or not x3.is_negative or not negative_division_theorem(x3, x2) or s1(x3, x2) < x2 } and forall(x4: Int, x5: Int) { not x4.is_positive or not x5.is_negative or not negative_division_theorem(x5, x4) or s0(x5, x4) * x4 + s1(x5, x4) = x5 } and forall(x6: Int, x7: Int) { x6.is_negative or negative_division_theorem(x6, x7) } and forall(x8: Int, x9: Int) { x8.is_positive or negative_division_theorem(x9, x8) } and forall(x10: Int, x11: Int, x12: Int, x13: Int) { x10 * x11 + x12 != x13 or not 0 <= x12 or not x12 < x11 or negative_division_theorem(x13, x11) } }","s0(m, n) * n + s1(m, n) != m or not 0 <= s1(m, n) or not s1(m, n) < n","not n.is_positive or not m.is_negative or not negative_division_theorem(m, n) or s1(m, n) < n","not n.is_positive or not m.is_negative or not negative_division_theorem(m, n) or 0 <= s1(m, n)","not n.is_positive or not m.is_negative or not negative_division_theorem(m, n) or s0(m, n) * n + s1(m, n) = m","0 <= s1(m, n)","s1(m, n) < n","s0(m, n) * n + s1(m, n) = m"]}
{"goal":"division_theorem(m, n)","proof":["let (s0: (Int, Int) -> Int, s1: (Int, Int) -> Int) satisfy { forall(x0: Int, x1: Int) { not x0.is_positive or not x1.is_negative or 0 <= s1(x1, x0) } and forall(x2: Int, x3: Int) { not x2.is_positive or not x3.is_negative or s1(x3, x2) < x2 } and forall(x4: Int, x5: Int) { not x4.is_positive or not x5.is_negative or s0(x5, x4) * x4 + s1(x5, x4) = x5 } }","s0(m, n) * n + s1(m, n) != m or not 0 <= s1(m, n) or not s1(m, n) < n or division_theorem(m, n)","not n.is_positive or not m.is_negative or s0(m, n) * n + s1(m, n) = m","not n.is_positive or not m.is_negative or s1(m, n) < n","not n.is_positive or not m.is_negative or 0 <= s1(m, n)","s0(m, n) * n + s1(m, n) != m or not 0 <= s1(m, n) or not s1(m, n) < n","not n.is_positive or 0 <= s1(m, n)","0 <= s1(m, n)","not n.is_positive or s1(m, n) < n","s1(m, n) < n","not m.is_negative or s0(m, n) * n + s1(m, n) = m","s0(m, n) * n + s1(m, n) = m"]}
{"goal":"0 <= m","proof":["0 <= m or 0.is_positive or m.is_negative","0.is_positive"]}
{"goal":"division_theorem(m, n)","proof":["let (s0: (Int, Int) -> Int, s1: (Int, Int) -> Int) satisfy { forall(x0: Int, x1: Int) { not 0 <= x0 or not x1.is_positive or 0 <= s1(x0, x1) } and forall(x2: Int, x3: Int) { not 0 <= x2 or not x3.is_positive or s1(x2, x3) < x3 } and forall(x4: Int, x5: Int) { not 0 <= x4 or not x5.is_positive or s0(x4, x5) * x5 + s1(x4, x5) = x4 } }","s0(m, n) * n + s1(m, n) != m or not 0 <= s1(m, n) or not s1(m, n) < n or division_theorem(m, n)","not 0 <= m or not n.is_positive or s0(m, n) * n + s1(m, n) = m","not 0 <= m or not n.is_positive or s1(m, n) < n","not 0 <= m or not n.is_positive or 0 <= s1(m, n)","s0(m, n) * n + s1(m, n) != m or not 0 <= s1(m, n) or not s1(m, n) < n","not n.is_positive or 0 <= s1(m, n)","0 <= s1(m, n)","not n.is_positive or s1(m, n) < n","s1(m, n) < n","not 0 <= m or s0(m, n) * n + s1(m, n) = m","s0(m, n) * n + s1(m, n) = m"]}
{"goal":"division_theorem","proof":["let (s0: (Int, Int) -> Int, s1: (Int, Int) -> Int) satisfy { forall(x0: Int, x1: Int) { not x0.is_positive or not division_theorem(x1, x0) or 0 <= s1(x1, x0) } and forall(x2: Int, x3: Int) { not x2.is_positive or not division_theorem(x3, x2) or s1(x3, x2) < x2 } and forall(x4: Int, x5: Int) { not x4.is_positive or not division_theorem(x5, x4) or s0(x5, x4) * x4 + s1(x5, x4) = x5 } and forall(x6: Int, x7: Int) { x6.is_positive or division_theorem(x7, x6) } and forall(x8: Int, x9: Int, x10: Int, x11: Int) { x8 * x9 + x10 != x11 or not 0 <= x10 or not x10 < x9 or division_theorem(x11, x9) } }","s0(m, n) * n + s1(m, n) != m or not 0 <= s1(m, n) or not s1(m, n) < n","not n.is_positive or not division_theorem(m, n) or s1(m, n) < n","not n.is_positive or not division_theorem(m, n) or 0 <= s1(m, n)","not n.is_positive or not division_theorem(m, n) or s0(m, n) * n + s1(m, n) = m","0 <= s1(m, n)","s1(m, n) < n","s0(m, n) * n + s1(m, n) = m"]}
{"goal":"x0 + a <= x0 + b","proof":["not a <= b or x0 + a <= x0 + b"]}
{"goal":"x0 + c <= x0 + d","proof":["not c <= d or x0 + c <= x0 + d"]}
{"goal":"c + b <= b + d","proof":["b + c <= b + d","c + b = b + c"]}
{"goal":"c + a <= b + d","proof":["c + a <= c + b","not c + a <= c + b or not c + b <= b + d or c + a <= b + d","not c + b <= b + d or not c + a <= c + b"]}
{"goal":"add_lte","proof":["c + a = a + c"]}
{"goal":"Int.from_nat(abs(n)) = -n","proof":["Int.from_nat(abs(-n)) = -n or (-n).is_negative","(-n).is_negative = n.is_positive","abs(-n) = abs(n)","Int.from_nat(abs(-n)) != -n","not n.is_positive or not n.is_negative","not n.is_positive","(-n).is_negative","not (-n).is_negative"]}
{"goal":"n + Int.from_nat(abs(n)) = 0","proof":["Int.from_nat(abs(n)) != 0 - n or n + Int.from_nat(abs(n)) = 0","Int.from_nat(abs(n)) != 0 - n","0 - n = -n"]}
{"goal":"n + Int.from_nat(abs(n)) = n + n","proof":["Int.from_nat(abs(n)) != n","Int.from_nat(abs(n)) = n or n.is_negative"]}
{"goal":"n + Int.from_nat(abs(n)) >= 0","proof":["not n + n >= 0","not (n + n).is_negative or n.is_negative or n.is_negative","0 <= n + n or 0.is_positive or (n + n).is_negative","0 <= n + n = n + n >= 0","not 0 <= n + n","not (n + n).is_negative or n.is_negative","(n + n).is_negative","not (n + n).is_negative"]}
{"goal":"plus_abs_gte_zero","proof":["not 0 >= 0","0 <= 0 = 0 >= 0","not 0 <= 0","not is_reflexive[Int](Int.lte) or 0 <= 0","not is_reflexive[Int](Int.lte)"]}
{"goal":"a * a.exp(Nat.0) = a","proof":["Nat.0 != Nat.0 or a.exp(Nat.0) = 1","a * 1 = a","a * a.exp(Nat.0) != a * 1","a.exp(Nat.0) != 1"]}
{"goal":"a.exp(Nat.0.suc) = a","proof":["Nat.0.suc != Nat.0.suc or a * a.exp(Nat.0) = a.exp(Nat.0.suc)","a * a.exp(Nat.0) != a.exp(Nat.0.suc)"]}
{"goal":"exp_one","proof":["Nat.0 + Nat.1 = Nat.0.suc","Nat.0 + Nat.1 = Nat.1"]}
{"goal":"exp_zero","proof":["Nat.0 != Nat.0 or a.exp(Nat.0) = 1"]}
{"goal":"f(Nat.0)","proof":["a.exp(b) * a.exp(Nat.0) != a.exp(b + Nat.0) or f(Nat.0)","a.exp(Nat.0) = 1","a.exp(b) * 1 = a.exp(b)","b + Nat.0 = b","a.exp(b) * a.exp(Nat.0) != a.exp(b + Nat.0)"]}
{"goal":"a.exp(b + x) = a.exp(b) * a.exp(x)","proof":["not f(x) or a.exp(b) * a.exp(x) = a.exp(b + x)"]}
{"goal":"a.exp(b + x.suc) = a.exp(b) * a.exp(x.suc)","proof":["(b + x).suc != (b + x).suc or a * a.exp(b + x) = a.exp((b + x).suc)","x.suc != x.suc or a * a.exp(x) = a.exp(x.suc)","a * (a.exp(x) * a.exp(b)) = a * a.exp(x) * a.exp(b)","b + x.suc = (b + x).suc","a.exp(b) * a.exp(x.suc) = a.exp(x.suc) * a.exp(b)","a.exp(x) * a.exp(b) = a.exp(b) * a.exp(x)","a * a.exp(b + x) = a.exp((b + x).suc)","a * a.exp(x) = a.exp(x.suc)"]}
{"goal":"f(x.suc)","proof":["a.exp(b) * a.exp(x.suc) != a.exp(b + x.suc) or f(x.suc)"]}
{"goal":"f(c)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(Nat.0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(Nat.0) or x2(x3) } }","not f(s0(f)) or f(s0(f).suc)","not f(s0(f).suc) or not f(Nat.0) or f(c)","not f(s0(f).suc)","not f(Nat.0) or f(s0(f)) or f(c)","not f(s0(f))","f(s0(f))"]}
{"goal":"exp_add","proof":["not f(c) or a.exp(b) * a.exp(c) = a.exp(b + c)"]}
{"goal":"f(Nat.0)","proof":["a.exp(b).exp(Nat.0) != a.exp(b * Nat.0) or f(Nat.0)","b * Nat.0 != Nat.0 or a.exp(b * Nat.0) = 1","a.exp(b).exp(Nat.0) = 1","b * Nat.0 = Nat.0","a.exp(b).exp(Nat.0) != a.exp(b * Nat.0)","a.exp(b * Nat.0) != 1"]}
{"goal":"a.exp(b * x) = a.exp(b).exp(x)","proof":["not f(x) or a.exp(b).exp(x) = a.exp(b * x)"]}
{"goal":"a.exp(b * x.suc) = a.exp(b).exp(x.suc)","proof":["a.exp(b) * a.exp(b * x) = a.exp(b + b * x)","x.suc != x.suc or a.exp(b) * a.exp(b).exp(x) = a.exp(b).exp(x.suc)","b + b * x = b * x.suc","a.exp(b) * a.exp(b).exp(x) = a.exp(b).exp(x.suc)"]}
{"goal":"f(x.suc)","proof":["a.exp(b).exp(x.suc) != a.exp(b * x.suc) or f(x.suc)"]}
{"goal":"f(c)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(Nat.0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(Nat.0) or x2(x3) } }","not f(s0(f)) or f(s0(f).suc)","not f(s0(f).suc) or not f(Nat.0) or f(c)","not f(s0(f).suc)","not f(Nat.0) or f(s0(f)) or f(c)","not f(s0(f))","f(s0(f))"]}
{"goal":"exp_mul","proof":["not f(c) or a.exp(b).exp(c) = a.exp(b * c)"]}
{"goal":"exists(k0: Nat) { n = k0.suc }","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat) { s0(x0).suc = x0 or Nat.0 = x0 } }","s0(n).suc != n","s0(n).suc = n or n = Nat.0"]}
{"goal":"zero_exp","proof":["b.suc != b.suc or 0 * 0.exp(b) = 0.exp(b.suc)","0.exp(b.suc) != 0","0 * 0.exp(b) = 0","0 * 0.exp(b) = 0.exp(b.suc)"]}
{"goal":"one_exp(Nat.0)","proof":["1.exp(Nat.0) != 1 or one_exp(Nat.0)","1.exp(Nat.0) != 1","Nat.0 != Nat.0 or 1.exp(Nat.0) = 1"]}
{"goal":"one_exp(n)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(Nat.0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(Nat.0) or x2(x3) } }","1.exp(s0(one_exp).suc) != 1 or one_exp(s0(one_exp).suc)","not one_exp(s0(one_exp)) or 1.exp(s0(one_exp)) = 1","s0(one_exp).suc != s0(one_exp).suc or 1 * 1.exp(s0(one_exp)) = 1.exp(s0(one_exp).suc)","not one_exp(s0(one_exp).suc) or not one_exp(Nat.0) or one_exp(n)","not one_exp(s0(one_exp).suc)","not one_exp(Nat.0) or one_exp(s0(one_exp)) or one_exp(n)","one_exp(s0(one_exp))","1 * 1 = 1","1 * 1.exp(s0(one_exp)) = 1.exp(s0(one_exp).suc)","1.exp(s0(one_exp)) = 1","1.exp(s0(one_exp).suc) != 1"]}
{"goal":"one_exp","proof":["not one_exp(n) or 1.exp(n) = 1"]}
{"goal":"f(Nat.0)","proof":["a.exp(Nat.0).is_positive = f(Nat.0)","not a.exp(Nat.0).is_positive","a.exp(Nat.0) = 1","not 1.is_positive"]}
{"goal":"f(n)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(Nat.0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(Nat.0) or x2(x3) } }","a.exp(s0(f)).is_positive = f(s0(f))","a.exp(s0(f).suc).is_positive = f(s0(f).suc)","s0(f).suc != s0(f).suc or a * a.exp(s0(f)) = a.exp(s0(f).suc)","not a.is_positive or not a.exp(s0(f)).is_positive or (a * a.exp(s0(f))).is_positive","not f(s0(f).suc) or not f(Nat.0) or f(n)","not f(s0(f).suc)","not f(Nat.0) or f(s0(f)) or f(n)","f(s0(f))","a * a.exp(s0(f)) = a.exp(s0(f).suc)","not a.exp(s0(f)).is_positive or (a * a.exp(s0(f))).is_positive","a.exp(s0(f)).is_positive","not a.exp(s0(f).suc).is_positive","(a * a.exp(s0(f))).is_positive","not (a * a.exp(s0(f))).is_positive"]}
{"goal":"pos_exp","proof":["a.exp(n).is_positive = f(n)"]}
{"goal":"sq_eq_mul","proof":["a.exp(Nat.1) * a.exp(Nat.1) = a.exp(Nat.1 + Nat.1)","a.exp(Nat.1) = a"]}
{"goal":"sq_pos","proof":["not a.is_negative or not a.is_negative or (a * a).is_positive","not a.is_positive or not a.is_positive or (a * a).is_positive","a.exp(Nat.2) = a * a","not (a * a).is_positive","not a.is_positive","not a.is_negative","a.is_positive or a.is_negative or 0 = a"]}
{"goal":"f(Nat.0)","proof":["abs(a.exp(Nat.0)) != abs(a).exp(Nat.0) or f(Nat.0)","a.exp(Nat.0) = 1","abs(Int.from_nat(Nat.1)) = Nat.1","abs(a).exp(Nat.0) = Nat.1","abs(a.exp(Nat.0)) != abs(a).exp(Nat.0)"]}
{"goal":"abs(a.exp(x)) = abs(a).exp(x)","proof":["not f(x) or abs(a.exp(x)) = abs(a).exp(x)"]}
{"goal":"abs(a.exp(x.suc)) = abs(a).exp(x.suc)","proof":["x.suc != x.suc or a * a.exp(x) = a.exp(x.suc)","x.suc != x.suc or abs(a) * abs(a).exp(x) = abs(a).exp(x.suc)","abs(a) * abs(a.exp(x)) = abs(a * a.exp(x))","abs(a) * abs(a).exp(x) = abs(a).exp(x.suc)","a * a.exp(x) = a.exp(x.suc)"]}
{"goal":"f(x.suc)","proof":["abs(a.exp(x.suc)) != abs(a).exp(x.suc) or f(x.suc)"]}
{"goal":"f(n)","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(Nat.0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(Nat.0) or x2(x3) } }","not f(s0(f)) or f(s0(f).suc)","not f(s0(f).suc) or not f(Nat.0) or f(n)","not f(s0(f).suc)","not f(Nat.0) or f(s0(f)) or f(n)","not f(s0(f))","f(s0(f))"]}
{"goal":"exp_abs_eq_abs_exp","proof":["not f(n) or abs(a.exp(n)) = abs(a).exp(n)"]}
{"goal":"member_abs_neg","proof":["-Int.from_nat(abs(a)) = a or a.is_positive","Int.from_nat(abs(a)) = a.abs","not a.is_positive or not a.is_negative","not a.is_positive","--a.abs = a.abs","--a.abs != -a","-a.abs != a","-Int.from_nat(abs(a)) = a","-Int.from_nat(abs(a)) != a"]}
{"goal":"member_abs_nonneg","proof":["Int.from_nat(abs(a)) = a or a.is_negative","Int.from_nat(abs(a)) = a.abs","Int.from_nat(abs(a)) = a","Int.from_nat(abs(a)) != a"]}
{"goal":"member_abs_pos","proof":["a.abs = a or a.is_negative","a.is_negative","not a.is_positive or not a.is_negative"]}
{"goal":"member_abs_nonpos","proof":["-Int.from_nat(abs(a)) = a or a.is_positive","Int.from_nat(abs(a)) = a.abs","--a.abs = a.abs","--a.abs != -a","-a.abs != a","-Int.from_nat(abs(a)) = a","-Int.from_nat(abs(a)) != a"]}
{"goal":"abs(a + b) <= abs(a) + abs(b)","proof":["abs(a + b) <= abs(a) + abs(b)"]}
{"goal":"member_triangle","proof":["Int.from_nat(abs(a)) + Int.from_nat(abs(b)) = Int.from_nat(abs(a) + abs(b))","not abs(a + b) <= abs(a) + abs(b) or Int.from_nat(abs(a + b)) <= Int.from_nat(abs(a) + abs(b))","Int.from_nat(abs(a + b)) = (a + b).abs","Int.from_nat(abs(a)) = a.abs","Int.from_nat(abs(b)) = b.abs","Int.from_nat(abs(a + b)) <= Int.from_nat(abs(a) + abs(b))"]}
{"goal":"forall(x0: Int, x1: Int, x2: Int) { x0 * (x1 * x2) = x0 * x1 * x2 }","proof":["let (s0: Int, s1: Int, s2: Int) satisfy { s0 * (s1 * s2) != s0 * s1 * s2 }","s0 * (s1 * s2) = s0 * s1 * s2"]}
{"goal":"forall(x0: Int) { Semigroup.mul[Int](1, x0) = x0 } and forall(x1: Int) { Semigroup.mul[Int](x1, 1) = x1 }","proof":["let (s0: Int, s1: Int) satisfy { s1 * 1 != s1 or 1 * s0 != s0 }","s1 * 1 = 1 * s1","1 * s0 = s0","1 * s1 = s1","s1 * 1 != s1"]}
{"goal":"forall(x0: Int, x1: Int, x2: Int) { Semigroup.mul[Int](x0, lib(add_semigroup).AddSemigroup.add[Int](x1, x2)) = lib(add_semigroup).AddSemigroup.add[Int](Semigroup.mul[Int](x0, x1), Semigroup.mul[Int](x0, x2)) } and forall(x3: Int, x4: Int, x5: Int) { Semigroup.mul[Int](lib(add_semigroup).AddSemigroup.add[Int](x3, x4), x5) = lib(add_semigroup).AddSemigroup.add[Int](Semigroup.mul[Int](x3, x5), Semigroup.mul[Int](x4, x5)) } and forall(x6: Int) { Semigroup.mul[Int](x6, lib(add_monoid).AddMonoid.0[Int]) = lib(add_monoid).AddMonoid.0[Int] } and forall(x7: Int) { Semigroup.mul[Int](lib(add_monoid).AddMonoid.0[Int], x7) = lib(add_monoid).AddMonoid.0[Int] }","proof":["let (s0: Int, s1: Int, s2: Int, s3: Int, s4: Int, s5: Int, s6: Int, s7: Int) satisfy { s3 * s5 + s4 * s5 != (s3 + s4) * s5 or s0 * s1 + s0 * s2 != s0 * (s1 + s2) or 0 * s7 != 0 or s6 * 0 != 0 }","s0 * s1 + s0 * s2 = s0 * (s1 + s2)","s3 * s5 + s4 * s5 = (s3 + s4) * s5","s6 * 0 = 0 * s6","0 * s6 = 0","0 * s7 = 0","s6 * 0 != 0"]}
{"goal":"forall(x0: Int, x1: Int) { Semigroup.mul[Int](x0, x1) = Semigroup.mul[Int](x1, x0) }","proof":["let (s0: Int, s1: Int) satisfy { s1 * s0 != s0 * s1 }","s1 * s0 = s0 * s1"]}
{"goal":"a <= b","proof":["b != a or a <= b"]}
{"goal":"false","proof":[]}
{"goal":"b < a","proof":["not b <= a or b < a or b = a","not b <= a","not (a - b).is_positive or b <= a"]}
{"goal":"b <= a","proof":["not (a - b).is_positive or b <= a"]}
{"goal":"(a - b).is_negative","proof":["a - b = 0"]}
{"goal":"a - b < 0","proof":[]}
{"goal":"0 - (a - b) = -(a - b)","proof":["0 - (a - b) = -(a - b)"]}
{"goal":"(b - a).is_positive","proof":["-(b - a) = a - b","(--(a - b)).is_negative = (-(a - b)).is_positive"]}
{"goal":"a < b","proof":["not a <= b or a < b or b = a","not a <= b","not (b - a).is_positive or a <= b"]}
{"goal":"a <= b","proof":["not (b - a).is_positive or a <= b"]}
{"goal":"int_total","proof":["not (a - b).is_positive or b <= a","not (a - b).is_positive","a - b = 0","a - b != 0 or b = a"]}
{"goal":"forall(x0: Int, x1: Int) { PartialOrder.lte[Int](x0, x1) or PartialOrder.lte[Int](x1, x0) }","proof":["let (s0: Int, s1: Int) satisfy { not s0 <= s1 and not s1 <= s0 }","s0 <= s1 or s1 <= s0"]}
