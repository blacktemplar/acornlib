{"goal":"abs_from_nat","proof":["Int.from_nat(n) != Int.from_nat(n) or abs(Int.from_nat(n)) = n"]}
{"goal":"neg_nat_zero","proof":["Nat.0 != Nat.0 or neg_nat(Nat.0) = 0"]}
{"goal":"n.suc != Nat.0","proof":["n.suc != Nat.0 or Nat.0 * n.factorial = Nat.0.factorial","Nat.0 * n.factorial = Nat.0.factorial","Nat.0 * n.factorial = Nat.0","Nat.0.factorial = Nat.0","Nat.1 = Nat.0","Nat.0.suc != Nat.0"]}
{"goal":"neg_nat(n.suc) = Int.neg_suc(n.suc - Nat.1)","proof":["Int.neg_suc(n.suc - Nat.1) = neg_nat(n.suc) or n.suc = Nat.0"]}
{"goal":"n.suc - Nat.1 = n","proof":["n + Nat.1 != n.suc or n.suc - Nat.1 = n","n + Nat.1 != n.suc","n + Nat.1 = Nat.1 + n","Nat.1 + n = n.suc"]}
{"goal":"neg_nat_suc","proof":["Int.neg_suc(n.suc - Nat.1) != neg_nat(n.suc)"]}
{"goal":"abs(neg_nat(n)) = n","proof":["neg_nat(n) != Int.from_nat(n) or abs(neg_nat(n)) = n","neg_nat(n) != Int.from_nat(n)"]}
{"goal":"Int.neg_suc(n - Nat.1) = neg_nat(n)","proof":["Int.neg_suc(n - Nat.1) = neg_nat(n) or Nat.0 = n"]}
{"goal":"Int.from_nat(abs(neg_nat(n))) != neg_nat(n)","proof":["Int.from_nat(abs(neg_nat(n))) != Int.neg_suc(n - Nat.1)"]}
{"goal":"exists(k0: Nat) { neg_nat(n) = Int.neg_suc(k0) and abs(neg_nat(n)) = k0.suc }","proof":["(n - Nat.1).suc != abs(neg_nat(n)) or Int.neg_suc(n - Nat.1) != neg_nat(n)","Int.neg_suc(n - Nat.1) != neg_nat(n) or (n - Nat.1).suc = abs(neg_nat(n))","(n - Nat.1).suc != abs(neg_nat(n))","(n - Nat.1).suc = abs(neg_nat(n))"]}
{"goal":"neg_nat(n) = Int.neg_suc(n - Nat.1)","proof":[]}
{"goal":"k = n - Nat.1","proof":["Int.neg_suc(n - Nat.1) = Int.neg_suc(k)","Int.neg_suc(n - Nat.1) != Int.neg_suc(k) or n - Nat.1 = k"]}
{"goal":"n = (n - Nat.1).suc","proof":["lib(nat.nat_base).bounded_sub(n, Nat.1) + Nat.1 = n or n < Nat.1","not n < Nat.0.suc or n < Nat.0 or n = Nat.0","n - Nat.1 = lib(nat.nat_base).bounded_sub(n, Nat.1)","n - Nat.1 + Nat.1 = (n - Nat.1).suc","n - Nat.1 + Nat.1 != n","not n < Nat.0","lib(nat.nat_base).bounded_sub(n, Nat.1) + Nat.1 != n","not n < Nat.0.suc","n < Nat.1","not n < Nat.1"]}
{"goal":"k.suc = n","proof":["(n - Nat.1).suc != n"]}
{"goal":"abs(neg_nat(n)) = n","proof":["abs(neg_nat(n)) != k.suc"]}
{"goal":"abs_neg_nat","proof":[]}
{"goal":"neg_zero","proof":["Int.from_nat(Nat.0) != 0 or -0 = neg_nat(Nat.0)","-0 != neg_nat(Nat.0)","Int.from_nat(Nat.0) != 0"]}
{"goal":"neg_neg_suc","proof":["Int.neg_suc(n) != Int.neg_suc(n) or Int.from_nat(n.suc) = -Int.neg_suc(n)"]}
{"goal":"neg_from_nat","proof":["Int.from_nat(n) != Int.from_nat(n) or -Int.from_nat(n) = neg_nat(n)"]}
{"goal":"--a = a","proof":["-Int.from_nat(n) = neg_nat(n)"]}
{"goal":"exists(k0: Nat) { n = k0.suc }","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat) { s0(x0).suc = x0 or Nat.0 = x0 } }","s0(n).suc != n","s0(n).suc = n or Nat.0 = n"]}
{"goal":"-a = Int.neg_suc(n - Nat.1)","proof":["Int.neg_suc(n - Nat.1) = neg_nat(n) or Nat.0 = n","-Int.from_nat(n) = neg_nat(n)","Int.neg_suc(n - Nat.1) != -Int.from_nat(n)","Int.neg_suc(n - Nat.1) = neg_nat(n)","Int.neg_suc(n - Nat.1) != neg_nat(n)"]}
{"goal":"n - Nat.1 = pred","proof":["pred + Nat.1 != n or n - Nat.1 = pred","pred + Nat.1 != n","pred + Nat.1 = Nat.1 + pred","Nat.1 + pred != n","Nat.1 + pred = pred.suc"]}
{"goal":"-a = Int.neg_suc(pred)","proof":["Int.neg_suc(n - Nat.1) != -a"]}
{"goal":"-Int.neg_suc(pred) = Int.from_nat(pred.suc)","proof":["--a != Int.from_nat(pred.suc)","Int.neg_suc(pred) != -a or --a = Int.from_nat(pred.suc)"]}
{"goal":"--a = a","proof":[]}
{"goal":"-Int.from_nat(n.suc) = neg_nat(n.suc)","proof":["Int.from_nat(n.suc) != Int.from_nat(n.suc) or -Int.from_nat(n.suc) = neg_nat(n.suc)"]}
{"goal":"--a = a","proof":["-Int.neg_suc(n) = Int.from_nat(n.suc)","neg_nat(n.suc) = Int.neg_suc(n)"]}
{"goal":"neg_neg","proof":[]}
{"goal":"n = Nat.0","proof":["Int.neg_suc(n - Nat.1) = neg_nat(n) or n = Nat.0","Int.from_nat(n) != a or -a = neg_nat(n)","Int.neg_suc(n - Nat.1) = neg_nat(n)","Int.neg_suc(n - Nat.1) != Int.from_nat(n)","-a = neg_nat(n)","-a = Int.from_nat(n)","neg_nat(n) = Int.from_nat(n)"]}
{"goal":"a = 0","proof":["Int.from_nat(n) != 0","Int.from_nat(Nat.0) != 0"]}
{"goal":"false","proof":["Int.neg_suc(n) != a or Int.from_nat(n.suc) = -a","Int.from_nat(n.suc) != Int.neg_suc(n)","-a = Int.neg_suc(n)","Int.from_nat(n.suc) = -a"]}
{"goal":"a = 0","proof":[]}
{"goal":"fix_neg","proof":[]}
{"goal":"abs(neg_nat(n)) = abs(Int.from_nat(n))","proof":["Int.from_nat(abs(neg_nat(n))) != Int.from_nat(n) or abs(neg_nat(n)) = abs(Int.from_nat(n))","Int.from_nat(abs(neg_nat(n))) != Int.from_nat(n)","abs(neg_nat(n)) != n","abs(neg_nat(n)) = n"]}
{"goal":"abs(neg_nat(n)) = n","proof":["abs(Int.from_nat(n)) != n","abs(a) != n","Int.from_nat(n) != a or abs(a) = n"]}
{"goal":"abs(Int.from_nat(n)) = n","proof":["abs(neg_nat(n)) != abs(Int.from_nat(n))"]}
{"goal":"abs(-a) = abs(a)","proof":["abs(neg_nat(n)) = abs(a)","abs(-Int.from_nat(n)) != abs(a)","-Int.from_nat(n) = neg_nat(n)"]}
{"goal":"abs(Int.from_nat(n.suc)) = abs(Int.neg_suc(n))","proof":["neg_nat(n.suc) = Int.neg_suc(n)","abs(neg_nat(n.suc)) = n.suc","abs(Int.from_nat(n.suc)) = n.suc"]}
{"goal":"abs(Int.from_nat(n.suc)) = n.suc","proof":["abs(Int.neg_suc(n)) != n.suc","n.suc != abs(a)","Int.neg_suc(n) != a or n.suc = abs(a)"]}
{"goal":"abs(-a) = abs(a)","proof":["-Int.neg_suc(n) = Int.from_nat(n.suc)"]}
{"goal":"abs_neg","proof":[]}
{"goal":"a = Int.from_nat(abs(a))","proof":["Int.from_nat(abs(a)) != Int.from_nat(n)","abs(a) != n","Int.from_nat(n) != a or abs(a) = n"]}
{"goal":"a = -Int.from_nat(abs(a))","proof":["-Int.from_nat(abs(a)) = neg_nat(abs(a))","neg_nat(n.suc) = Int.neg_suc(n)","abs(neg_nat(n.suc)) = n.suc"]}
{"goal":"neg_or_pos","proof":[]}
{"goal":"abs(Int.from_nat(p)) = abs(-Int.from_nat(q))","proof":["-Int.from_nat(q) != Int.from_nat(p)"]}
{"goal":"abs(Int.from_nat(p)) = abs(Int.from_nat(q))","proof":["abs(-Int.from_nat(q)) = abs(Int.from_nat(q))"]}
{"goal":"p = q","proof":["neg_nat(q) != Int.from_nat(p) or abs(neg_nat(q)) = p","-Int.from_nat(q) = neg_nat(q)","neg_nat(q) = Int.from_nat(p)","abs(neg_nat(q)) = q","abs(neg_nat(q)) = p","abs(neg_nat(q)) != p"]}
{"goal":"Int.from_nat(p) = -Int.from_nat(p)","proof":["-Int.from_nat(q) != Int.from_nat(p)"]}
{"goal":"Int.from_nat(p) = 0","proof":["-Int.from_nat(p) != Int.from_nat(p) or Int.from_nat(p) = 0"]}
{"goal":"from_eq_neg_from","proof":["abs(Int.from_nat(q)) = abs(0)","Int.from_nat(Nat.0) != Int.from_nat(p) or Nat.0 = p","abs(Int.from_nat(Nat.0)) = Nat.0","abs(Int.from_nat(q)) = q","Int.from_nat(Nat.0) = Int.from_nat(p)","abs(Int.from_nat(q)) = abs(Int.from_nat(Nat.0))","abs(Int.from_nat(q)) = Nat.0","q = Nat.0","Nat.0 = p","Nat.0 != p"]}
{"goal":"abs_zero","proof":["Int.from_nat(Nat.0) != 0 or abs(0) = Nat.0","Int.from_nat(Nat.0) != 0"]}
{"goal":"abs(Int.from_nat(Nat.1)) != Nat.0","proof":["Nat.0 + Nat.1 = Nat.0.suc","abs(Int.from_nat(Nat.0 + Nat.1)) = Nat.0 + Nat.1","Nat.0 + Nat.1 = Nat.1","abs(Int.from_nat(Nat.0 + Nat.1)) = Nat.0","Nat.0 + Nat.1 = Nat.0","Nat.0.suc = Nat.0","Nat.0.suc != Nat.0"]}
{"goal":"one_neq_zero","proof":["abs(1) = Nat.0"]}
{"goal":"Nat.0 <= n","proof":["Nat.0 + n != n or Nat.0 <= n","Nat.0 + n != n","Nat.0 + n = n"]}
{"goal":"Int.from_nat(n - Nat.0) = sub_nat(n, Nat.0)","proof":["not Nat.0 <= n or Int.from_nat(n - Nat.0) = sub_nat(n, Nat.0)"]}
{"goal":"sub_nat_zero_right","proof":["Int.from_nat(n - Nat.0) != Int.from_nat(n)","n - Nat.0 != n","n - Nat.0 = n"]}
{"goal":"sub_nat(Nat.0, n) = 0","proof":["sub_nat(Nat.0, Nat.0) != 0","sub_nat(Nat.0, Nat.0) = Int.from_nat(Nat.0)","Int.from_nat(Nat.0) != 0"]}
{"goal":"sub_nat(Nat.0, n) = -0","proof":["-0 != 0"]}
{"goal":"sub_nat(Nat.0, n) = -Int.from_nat(n)","proof":["-Int.from_nat(n) != -0","Int.from_nat(n) != 0","Int.from_nat(Nat.0) != 0"]}
{"goal":"sub_nat(Nat.0, n) = -Int.from_nat(n)","proof":["-Int.from_nat(n - Nat.0) = sub_nat(Nat.0, n) or n <= Nat.0","not n <= Nat.0 or n = Nat.0","not n <= Nat.0","n - Nat.0 = n","-Int.from_nat(n - Nat.0) = sub_nat(Nat.0, n)","-Int.from_nat(n - Nat.0) != sub_nat(Nat.0, n)"]}
{"goal":"sub_nat_zero_left","proof":[]}
{"goal":"sub_nat(n, n) = Int.from_nat(Nat.0)","proof":["not n <= n or Int.from_nat(n - n) = sub_nat(n, n)","n - n = Nat.0","Int.from_nat(n - n) != sub_nat(n, n)","not n <= n","n <= n"]}
{"goal":"sub_nat_self","proof":["Int.from_nat(Nat.0) != 0"]}
{"goal":"q <= p + q","proof":["p + q != q + p or q <= p + q","p + q = q + p","p + q != q + p"]}
{"goal":"sub_nat_add_left","proof":["not q <= p + q or Int.from_nat(p + q - q) = sub_nat(p + q, q)","p + q - q = p","Int.from_nat(p + q - q) != sub_nat(p + q, q)"]}
{"goal":"sub_nat(m, n) = 0","proof":["sub_nat(m, m) != 0","sub_nat(m, m) = 0"]}
{"goal":"sub_nat(m, n) = -0","proof":["-0 != 0"]}
{"goal":"sub_nat(m, n) = -sub_nat(n, m)","proof":[]}
{"goal":"not m <= n","proof":["m < n or n < m or n = m","not m < n or not n <= m","not n < m or not m <= n","not n < m","not m < n","m < n"]}
{"goal":"sub_nat(m, n) = -sub_nat(n, m)","proof":["-Int.from_nat(m - n) = sub_nat(n, m) or m <= n","not n <= m or Int.from_nat(m - n) = sub_nat(m, n)","--sub_nat(m, n) = sub_nat(m, n)","--sub_nat(m, n) != -sub_nat(n, m)","-sub_nat(m, n) != sub_nat(n, m)","Int.from_nat(m - n) = sub_nat(m, n)","-Int.from_nat(m - n) = sub_nat(n, m)","-Int.from_nat(m - n) != sub_nat(n, m)"]}
{"goal":"-Int.from_nat(n - m) = sub_nat(m, n)","proof":["-Int.from_nat(n - m) = sub_nat(m, n) or n <= m"]}
{"goal":"not n < m","proof":["not n.suc <= m.suc or n <= m","not n < m or n < m.suc","n < m.suc","not n < m.suc or n.suc <= m.suc","not n.suc <= m.suc","n.suc <= m.suc"]}
{"goal":"m <= n","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or x0 + s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat) { Nat.0 != s0(x2, x3) or not x2 < x3 } }","not m < n or m + s0(m, n) = n","n < m or m < n or n = m","m + s0(m, n) != n or m <= n","m + s0(m, n) != n","m < n","not m < n"]}
{"goal":"-Int.from_nat(n - m) = -sub_nat(n, m)","proof":["Int.from_nat(n - m) != sub_nat(n, m)","not m <= n or Int.from_nat(n - m) = sub_nat(n, m)"]}
{"goal":"sub_nat(m, n) = -sub_nat(n, m)","proof":["-Int.from_nat(n - m) != -sub_nat(n, m)"]}
{"goal":"neg_sub_nat","proof":[]}
{"goal":"sub_nat_add_right","proof":["-sub_nat(p + q, p) = sub_nat(p, p + q)","sub_nat(q + p, p) = Int.from_nat(q)","q + p = p + q","-sub_nat(p + q, p) != -Int.from_nat(q)","sub_nat(p + q, p) != Int.from_nat(q)"]}
{"goal":"exists(k0: Nat) { p + k0 = m }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 <= x1 or x0 + s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat, x4: Nat) { x2 + x3 != x4 or x2 <= x4 } }","p + s0(p, m) != m","not p <= m or p + s0(p, m) = m"]}
{"goal":"sub_nat(m, p) = Int.from_nat(d)","proof":["sub_nat(d + p, p) = Int.from_nat(d)","d + p = p + d","sub_nat(p + d, p) != Int.from_nat(d)"]}
{"goal":"m + n = p + d + n","proof":["p + d != m"]}
{"goal":"p + q = p + d + n","proof":["p + q != m + n"]}
{"goal":"p + q = p + (d + n)","proof":["p + (d + n) = p + d + n"]}
{"goal":"q = d + n","proof":["p + (d + n) != p + q or d + n = q"]}
{"goal":"sub_nat(q, n) = Int.from_nat(d)","proof":["sub_nat(d + n, n) = Int.from_nat(d)"]}
{"goal":"sub_nat(m, p) = sub_nat(q, n)","proof":["sub_nat(m, p) != Int.from_nat(d)"]}
{"goal":"sub_nat_eq_helper","proof":[]}
{"goal":"sub_nat(m, p) = sub_nat(q, n)","proof":["p + q != m + n or not p <= m or sub_nat(q, n) = sub_nat(m, p)"]}
{"goal":"m <= p","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or x0 + s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat) { Nat.0 != s0(x2, x3) or not x2 < x3 } }","not m < p or m + s0(m, p) = p","m + s0(m, p) != p or m <= p","m + s0(m, p) != p","m < p or p <= m","not m < p","m < p"]}
{"goal":"sub_nat(m, p) = sub_nat(q, n)","proof":["p + q != m + n or not m <= p or sub_nat(n, q) = sub_nat(p, m)","-sub_nat(n, q) = sub_nat(q, n)","-sub_nat(p, m) = sub_nat(m, p)","-sub_nat(n, q) != sub_nat(m, p)","sub_nat(n, q) = sub_nat(p, m)"]}
{"goal":"sub_nat_eq","proof":[]}
{"goal":"exists(k0: Nat) { j + k0 = i }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 <= x1 or x0 + s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat, x4: Nat) { x2 + x3 != x4 or x2 <= x4 } }","j + s0(j, i) != i","not j <= i or j + s0(j, i) = i"]}
{"goal":"sub_nat(i, j) = Int.from_nat(d)","proof":["not j <= i or j + d != i + Nat.0 or sub_nat(d, Nat.0) = sub_nat(i, j)","sub_nat(d, Nat.0) = Int.from_nat(d)","sub_nat(d, Nat.0) != sub_nat(i, j)","i + Nat.0 = i","j + d != i + Nat.0","j + d = i + Nat.0"]}
{"goal":"d = k","proof":["Int.from_nat(d) = Int.from_nat(k)","Int.from_nat(d) != Int.from_nat(k) or d = k"]}
{"goal":"j + k = i","proof":["j + d != i"]}
{"goal":"exists(k0: Nat) { i + k0 = j }","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or x0 + s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat) { not x2 < x3 or s0(x2, x3) != Nat.0 } }","i + s0(i, j) != j","not i < j or i + s0(i, j) = j","not i < j","i < j or j <= i"]}
{"goal":"sub_nat(i, j) = -Int.from_nat(d)","proof":["sub_nat(i, i + d) = -Int.from_nat(d)"]}
{"goal":"Int.from_nat(k) = -Int.from_nat(d)","proof":["-Int.from_nat(d) != sub_nat(i, j)"]}
{"goal":"k = Nat.0","proof":["-Int.from_nat(d) != Int.from_nat(k) or k = Nat.0"]}
{"goal":"d = Nat.0","proof":["-Int.from_nat(d) != Int.from_nat(k) or d = Nat.0"]}
{"goal":"i = j","proof":["i + d != i","i + Nat.0 != i","Nat.0 != Nat.0 or i + Nat.0 = i"]}
{"goal":"false","proof":["not i <= i","i + d = i","i + d != i or i <= i"]}
{"goal":"sub_nat_imp_add","proof":[]}
{"goal":"exists(k0: Nat) { j + k0 = i }","proof":["j + (i - j) != i","not j <= i or Int.from_nat(i - j) = sub_nat(i, j)","Int.from_nat(i - j) != sub_nat(i, j) or j + (i - j) = i","Int.from_nat(i - j) != sub_nat(i, j)"]}
{"goal":"sub_nat(i, j) = Int.from_nat(d)","proof":["not j <= i or j + d != i + Nat.0 or sub_nat(d, Nat.0) = sub_nat(i, j)","sub_nat(d, Nat.0) = Int.from_nat(d)","sub_nat(d, Nat.0) != sub_nat(i, j)","i + Nat.0 = i","j + d != i + Nat.0","j + d = i + Nat.0"]}
{"goal":"Int.from_nat(d) = -Int.from_nat(k)","proof":["-Int.from_nat(k) != sub_nat(i, j)"]}
{"goal":"d = Nat.0","proof":["-Int.from_nat(k) != Int.from_nat(d) or d = Nat.0"]}
{"goal":"k = Nat.0","proof":["-Int.from_nat(k) != Int.from_nat(d) or k = Nat.0"]}
{"goal":"i = j","proof":["j + d != j","j + Nat.0 != j","Nat.0 != Nat.0 or j + Nat.0 = j"]}
{"goal":"i + k = j","proof":[]}
{"goal":"i <= j","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or x0 + s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat) { not x2 < x3 or s0(x2, x3) != Nat.0 } }","not i < j or i + s0(i, j) = j","i + s0(i, j) != j or i <= j","i + s0(i, j) != j","i < j or j <= i","not i < j","i < j"]}
{"goal":"exists(k0: Nat) { i + k0 = j }","proof":["i + (j - i) != j","not i <= j or Int.from_nat(j - i) = sub_nat(j, i)","Int.from_nat(j - i) != sub_nat(j, i) or i + (j - i) = j","Int.from_nat(j - i) != sub_nat(j, i)"]}
{"goal":"sub_nat(j, i) = Int.from_nat(d)","proof":["not i <= j or i + d != j + Nat.0 or sub_nat(d, Nat.0) = sub_nat(j, i)","sub_nat(d, Nat.0) = Int.from_nat(d)","sub_nat(d, Nat.0) != sub_nat(j, i)","j + Nat.0 = j","i + d != j + Nat.0","i + d = j + Nat.0"]}
{"goal":"sub_nat(i, j) = -Int.from_nat(d)","proof":["sub_nat(i, i + d) = -Int.from_nat(d)"]}
{"goal":"abs(sub_nat(j, i)) = d","proof":["sub_nat(j, i) != Int.from_nat(d) or abs(sub_nat(j, i)) = d"]}
{"goal":"abs(-sub_nat(i, j)) = d","proof":["-sub_nat(i, j) = sub_nat(j, i)"]}
{"goal":"abs(Int.from_nat(k)) = d","proof":["-sub_nat(Nat.0, k) = sub_nat(k, Nat.0)","-sub_nat(i, j) = sub_nat(j, i)","-Int.from_nat(k) = sub_nat(Nat.0, k)","Int.from_nat(d) != Int.from_nat(k) or abs(Int.from_nat(k)) = d","Int.from_nat(d) != Int.from_nat(k)","sub_nat(k, Nat.0) = Int.from_nat(k)"]}
{"goal":"k = d","proof":["abs(Int.from_nat(k)) != k","Int.from_nat(k) != Int.from_nat(k) or abs(Int.from_nat(k)) = k"]}
{"goal":"i + k = j","proof":["i + d != j"]}
{"goal":"sub_nat_negate_imp_add","proof":[]}
{"goal":"exists(k0: Nat) { k + k0 = i }","proof":["k + (i - k) != i","not k <= i or Int.from_nat(i - k) = sub_nat(i, k)","Int.from_nat(i - k) != sub_nat(i, k) or k + (i - k) = i","Int.from_nat(i - k) != sub_nat(i, k)"]}
{"goal":"sub_nat(i, k) = Int.from_nat(d)","proof":["not k <= i or k + d != i + Nat.0 or sub_nat(d, Nat.0) = sub_nat(i, k)","sub_nat(d, Nat.0) = Int.from_nat(d)","sub_nat(d, Nat.0) != sub_nat(i, k)","i + Nat.0 = i","k + d != i + Nat.0","k + d = i + Nat.0"]}
{"goal":"sub_nat(j, k) = Int.from_nat(d)","proof":["sub_nat(j, k) != sub_nat(i, k)"]}
{"goal":"k + d = j","proof":["sub_nat(j, k) != Int.from_nat(d) or k + d = j"]}
{"goal":"i = j","proof":["k + d != i"]}
{"goal":"i <= k","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or x0 + s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat) { not x2 < x3 or s0(x2, x3) != Nat.0 } }","not i < k or i + s0(i, k) = k","i + s0(i, k) != k or i <= k","i + s0(i, k) != k","i < k or k <= i","not i < k","i < k"]}
{"goal":"exists(k0: Nat) { i + k0 = k }","proof":["i + (k - i) != k","not i <= k or Int.from_nat(k - i) = sub_nat(k, i)","Int.from_nat(k - i) != sub_nat(k, i) or i + (k - i) = k","Int.from_nat(k - i) != sub_nat(k, i)"]}
{"goal":"sub_nat(k, i) = Int.from_nat(d)","proof":["not i <= k or i + d != k + Nat.0 or sub_nat(d, Nat.0) = sub_nat(k, i)","sub_nat(d, Nat.0) = Int.from_nat(d)","sub_nat(d, Nat.0) != sub_nat(k, i)","k + Nat.0 = k","i + d != k + Nat.0","i + d = k + Nat.0"]}
{"goal":"sub_nat(i, k) = -Int.from_nat(d)","proof":["sub_nat(i, i + d) = -Int.from_nat(d)"]}
{"goal":"sub_nat(j, k) = -Int.from_nat(d)","proof":["sub_nat(j, k) != sub_nat(i, k)"]}
{"goal":"sub_nat(k, j) = Int.from_nat(d)","proof":["-sub_nat(i, k) = sub_nat(k, i)","-sub_nat(j, k) = sub_nat(k, j)"]}
{"goal":"j + d = k","proof":["-Int.from_nat(d) != sub_nat(j, k) or j + d = k"]}
{"goal":"i = j","proof":["j + d != i + d or j = i","j + d != i + d"]}
{"goal":"sub_nat_cancel_right","proof":[]}
{"goal":"sub_nat(i, k) = sub_nat(j, k)","proof":["-sub_nat(k, i) = sub_nat(i, k)","-sub_nat(k, j) = sub_nat(j, k)"]}
{"goal":"sub_nat_cancel_left","proof":["sub_nat(j, k) != sub_nat(i, k) or j = i"]}
{"goal":"m + (n + k) = n + (m + k)","proof":["m + (n + k) = m + n + k","n + (m + k) = n + m + k","n + (m + k) != m + n + k","n + m = m + n"]}
{"goal":"sub_nat_add_cancel_right","proof":["n + (m + k) != m + (n + k) or sub_nat(m + k, n + k) = sub_nat(m, n)"]}
{"goal":"sub_nat_add_cancel_left","proof":["sub_nat(m + k, n + k) = sub_nat(m, n)","k + m = m + k","k + n = n + k","sub_nat(k + m, n + k) != sub_nat(m, n)"]}
{"goal":"exists(k0: Nat) { p + k0 = m }","proof":["p + (m - p) != m","not p <= m or Int.from_nat(m - p) = sub_nat(m, p)","Int.from_nat(m - p) != sub_nat(m, p) or p + (m - p) = m","Int.from_nat(m - p) != sub_nat(m, p)"]}
{"goal":"sub_nat(m, p) = Int.from_nat(d)","proof":["not p <= m or p + d != m + Nat.0 or sub_nat(d, Nat.0) = sub_nat(m, p)","sub_nat(d, Nat.0) = Int.from_nat(d)","sub_nat(d, Nat.0) != sub_nat(m, p)","m + Nat.0 = m","p + d != m + Nat.0","p + d = m + Nat.0"]}
{"goal":"sub_nat(q, n) = Int.from_nat(d)","proof":["sub_nat(q, n) != sub_nat(m, p)"]}
{"goal":"n + d = q","proof":["sub_nat(q, n) != Int.from_nat(d) or n + d = q"]}
{"goal":"m + n + d = p + q + d","proof":["d + (p + q) = d + p + q","m + (n + d) = m + n + d","d + (p + q) = p + q + d","d + p = p + d"]}
{"goal":"sub_nat_imp_add_eq_helper","proof":["p + q + d != m + n + d or p + q = m + n"]}
{"goal":"m + n = p + q","proof":["sub_nat(q, n) != sub_nat(m, p) or not p <= m or p + q = m + n"]}
{"goal":"m <= p","proof":["let s0: (Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat) { not x0 < x1 or x0 + s0(x0, x1) = x1 } and forall(x2: Nat, x3: Nat) { Nat.0 != s0(x2, x3) or not x2 < x3 } }","not m < p or m + s0(m, p) = p","m + s0(m, p) != p or m <= p","m + s0(m, p) != p","m < p or p <= m","not m < p","m < p"]}
{"goal":"m + n = p + q","proof":["sub_nat(n, q) != sub_nat(p, m) or not m <= p or p + q = m + n","-sub_nat(m, p) = sub_nat(p, m)","-sub_nat(q, n) = sub_nat(n, q)","sub_nat(n, q) != sub_nat(p, m)"]}
{"goal":"sub_nat_imp_add_eq","proof":[]}
{"goal":"p + t + s = q + (r + t)","proof":["sub_nat(r + t, s) != sub_nat(p + t, q) or q + (r + t) = p + t + s"]}
{"goal":"p + s + t = q + r + t","proof":["q + (r + t) = q + r + t","s + (p + t) = s + p + t","s + (p + t) = p + t + s","s + p = p + s"]}
{"goal":"p + s = q + r","proof":["q + r + t != p + s + t or q + r = p + s"]}
{"goal":"sub_nat_double_cancel_left","proof":["q + r != p + s or sub_nat(r, s) = sub_nat(p, q)"]}
{"goal":"p + (s + t) = q + t + r","proof":["sub_nat(r, s + t) != sub_nat(p, q + t) or p + (s + t) = q + t + r"]}
{"goal":"p + s + t = q + r + t","proof":["p + (s + t) = p + s + t","r + (q + t) = r + q + t","r + (q + t) = q + t + r","r + q = q + r"]}
{"goal":"p + s = q + r","proof":["q + r + t != p + s + t or q + r = p + s"]}
{"goal":"sub_nat_double_cancel_right","proof":["q + r != p + s or sub_nat(r, s) = sub_nat(p, q)"]}
{"goal":"zero_not_neg","proof":["Int.from_nat(abs(0)) != 0 or not 0.is_negative","Int.from_nat(abs(0)) != 0","Int.from_nat(Nat.0) != 0"]}
{"goal":"-0 = 0","proof":[]}
{"goal":"not 0.is_negative","proof":[]}
{"goal":"not (-0).is_negative","proof":["0.is_negative"]}
{"goal":"zero_not_pos","proof":["(-0).is_negative = 0.is_positive"]}
{"goal":"(-Int.from_nat(Nat.1)).is_negative","proof":["Int.from_nat(abs(Int.neg_suc(Nat.0))) = Int.neg_suc(Nat.0) or Int.neg_suc(Nat.0).is_negative","-Int.from_nat(Nat.0.suc) = neg_nat(Nat.0.suc)","neg_nat(Nat.0.suc) = Int.neg_suc(Nat.0)","Int.from_nat(abs(Int.neg_suc(Nat.0))) != Int.neg_suc(Nat.0)","not (-Int.from_nat(Nat.0.suc)).is_negative","not neg_nat(Nat.0.suc).is_negative","not Int.neg_suc(Nat.0).is_negative"]}
{"goal":"(-1).is_negative","proof":[]}
{"goal":"one_pos","proof":["(-1).is_negative = 1.is_positive"]}
{"goal":"-a != a","proof":["-a != a or 0 = a"]}
{"goal":"not (-a).is_negative","proof":["(-a).is_negative = a.is_positive"]}
{"goal":"Int.from_nat(abs(-a)) = -a","proof":["Int.from_nat(abs(-a)) = -a or (-a).is_negative"]}
{"goal":"Int.from_nat(abs(a)) = -a","proof":["abs(-a) = abs(a)"]}
{"goal":"Int.from_nat(abs(a)) != a","proof":["Int.from_nat(abs(a)) != -a"]}
{"goal":"a.is_negative","proof":["Int.from_nat(abs(a)) = a or a.is_negative"]}
{"goal":"nonzero_pos_or_neg","proof":[]}
{"goal":"-Int.from_nat(abs(-a)) = -a","proof":["-Int.from_nat(abs(-a)) = -a or Int.from_nat(abs(-a)) = -a","Int.from_nat(abs(-a)) != -a or not (-a).is_negative","Int.from_nat(abs(-a)) = -a","(-a).is_negative = a.is_positive","not (-a).is_negative","(-a).is_negative"]}
{"goal":"-Int.from_nat(abs(--a)) = -a","proof":["abs(--a) = abs(-a)"]}
{"goal":"pos_is_not_neg","proof":["Int.from_nat(abs(a)) != a or not a.is_negative","Int.from_nat(abs(a)) != a","sub_nat(abs(-a), Nat.0) = Int.from_nat(abs(-a))","sub_nat(abs(a), Nat.0) = Int.from_nat(abs(a))","abs(-a) = abs(a)","--Int.from_nat(abs(-a)) = Int.from_nat(abs(-a))","--a = a"]}
{"goal":"Int.from_nat(abs(a)) = -a","proof":["Int.from_nat(abs(-a)) = -a or (-a).is_negative","(-a).is_negative = a.is_positive","abs(-a) = abs(a)","Int.from_nat(abs(-a)) != -a","not (-a).is_negative","(-a).is_negative"]}
{"goal":"non_pos_is_neg_abs","proof":["-Int.from_nat(abs(a)) = a or Int.from_nat(abs(a)) = a","Int.from_nat(abs(a)) = a"]}
{"goal":"sub_nat(abs(a), Nat.0) = a","proof":["Int.from_nat(abs(a)) = a or a.is_negative","sub_nat(abs(a), Nat.0) = Int.from_nat(abs(a))","Int.from_nat(abs(a)) != a","a.is_negative","not a.is_positive or not a.is_negative"]}
{"goal":"sub_nat(a.pos_part, a.neg_part) = a","proof":["not a.is_positive or a.pos_part = abs(a)","not a.is_positive or a.neg_part = Nat.0","a.neg_part = Nat.0","sub_nat(a.pos_part, Nat.0) != a","a.pos_part = abs(a)"]}
{"goal":"sub_nat(Nat.0, abs(a)) = a","proof":["-Int.from_nat(abs(a)) = a or a.is_positive","-Int.from_nat(abs(a)) = sub_nat(Nat.0, abs(a))","-Int.from_nat(abs(a)) = a","-Int.from_nat(abs(a)) != a"]}
{"goal":"sub_nat(a.pos_part, a.neg_part) = a","proof":["-sub_nat(a.neg_part, a.pos_part) = sub_nat(a.pos_part, a.neg_part)","-sub_nat(abs(a), Nat.0) = sub_nat(Nat.0, abs(a))","a.neg_part = abs(a) or a.is_positive","a.neg_part = abs(a)","a.pos_part = Nat.0 or a.is_positive","a.pos_part = Nat.0"]}
{"goal":"sub_nat_parts","proof":[]}
{"goal":"a.neg_part = Nat.0","proof":["not a.is_positive or a.neg_part = Nat.0"]}
{"goal":"not (-a).is_positive","proof":["(-a).is_negative = a.is_positive","not (-a).is_negative or not (-a).is_positive","(-a).is_negative","not (-a).is_negative"]}
{"goal":"(-a).pos_part = Nat.0","proof":["(-a).pos_part = Nat.0 or (-a).is_positive"]}
{"goal":"(-a).pos_part = a.neg_part","proof":["(-a).pos_part != Nat.0"]}
{"goal":"a.neg_part = abs(a)","proof":["a.neg_part = abs(a) or a.is_positive"]}
{"goal":"not (-a).is_negative","proof":["(-a).is_negative = a.is_positive"]}
{"goal":"(-a).pos_part = abs(-a)","proof":["sub_nat(a.pos_part, a.neg_part) = a","not (-a).is_positive or (-a).pos_part = abs(-a)","not (-a).is_positive","(-a).is_negative or (-a).is_positive or -a = 0","-a = 0","Int.from_nat((-a).pos_part) != -a or (-a).pos_part = abs(-a)","Int.from_nat((-a).pos_part) != -a","sub_nat((-a).pos_part, Nat.0) = Int.from_nat((-a).pos_part)","abs(-a) = abs(a)","--a = a"]}
{"goal":"(-a).pos_part = abs(a)","proof":["abs(-a) != abs(a)","abs(-a) = abs(a)"]}
{"goal":"(-a).pos_part = a.neg_part","proof":["(-a).pos_part != abs(a)"]}
{"goal":"pos_part_neg","proof":[]}
{"goal":"Int.from_nat(n).pos_part = n","proof":["Int.from_nat(n).pos_part != Nat.0","not Int.from_nat(n).is_positive or Int.from_nat(n).pos_part = abs(Int.from_nat(n))","Int.from_nat(n).pos_part = Nat.0 or Int.from_nat(n).is_positive","abs(Int.from_nat(n)) = n","Int.from_nat(n).pos_part != abs(Int.from_nat(n))","Int.from_nat(n).is_positive","not Int.from_nat(n).is_positive"]}
{"goal":"Int.from_nat(n).pos_part = abs(Int.from_nat(n))","proof":["-Int.from_nat(abs(Int.from_nat(n))) = Int.from_nat(n) or Int.from_nat(n).is_positive","-Int.from_nat(abs(Int.from_nat(n))) != Int.from_nat(n) or Nat.0 = n","not Int.from_nat(n).is_positive or Int.from_nat(n).pos_part = abs(Int.from_nat(n))","not Int.from_nat(n).is_positive","-Int.from_nat(abs(Int.from_nat(n))) != Int.from_nat(n)"]}
{"goal":"Int.from_nat(n).pos_part = n","proof":["abs(Int.from_nat(n)) != n","Int.from_nat(n) != Int.from_nat(n) or abs(Int.from_nat(n)) = n"]}
{"goal":"pos_part_from","proof":[]}
{"goal":"Int.from_nat(n).neg_part = Nat.0","proof":["not Int.from_nat(n).is_positive or Int.from_nat(n).neg_part = Nat.0"]}
{"goal":"Int.from_nat(n).neg_part = abs(Int.from_nat(n))","proof":["Int.from_nat(n).neg_part = abs(Int.from_nat(n)) or Int.from_nat(n).is_positive"]}
{"goal":"Int.from_nat(n).neg_part = Nat.0","proof":["abs(Int.from_nat(n)) != Nat.0","Int.from_nat(Nat.0) != Int.from_nat(n) or abs(Int.from_nat(n)) = Nat.0","Int.from_nat(Nat.0) != Int.from_nat(n)","Nat.0 != n","Int.from_nat(n).is_positive or Int.from_nat(n).pos_part = Nat.0","Int.from_nat(n).pos_part = Nat.0","Int.from_nat(n).pos_part = n"]}
{"goal":"neg_part_from","proof":[]}
{"goal":"neg_part_neg","proof":["(--a).pos_part = (-a).neg_part","(--a).pos_part != a.pos_part","--a != a","--a = a"]}
{"goal":"parts_sub_nat","proof":["sub_nat(sub_nat(j, k).pos_part, sub_nat(j, k).neg_part) != sub_nat(j, k) or sub_nat(j, k).neg_part + j = sub_nat(j, k).pos_part + k","sub_nat(sub_nat(j, k).pos_part, sub_nat(j, k).neg_part) = sub_nat(j, k)"]}
{"goal":"add_part_sub_nat","proof":["sub_nat(sub_nat(r, s).pos_part, sub_nat(r, s).neg_part) != sub_nat(r, s) or s + sub_nat(r, s).pos_part = r + sub_nat(r, s).neg_part","sub_nat(sub_nat(r, s).pos_part, sub_nat(r, s).neg_part) = sub_nat(r, s)"]}
{"goal":"0.pos_part = Nat.0","proof":["0.pos_part = Nat.0 or 0.is_positive","0.is_positive"]}
{"goal":"0.neg_part = Nat.0","proof":["Int.from_nat(abs(0)) = 0 or 0.is_negative","Int.from_nat(abs(0)).neg_part = Nat.0","Int.from_nat(abs(0)).neg_part != 0.neg_part","Int.from_nat(abs(0)) != 0","0.is_negative"]}
{"goal":"0.pos_part + a.pos_part = a.pos_part","proof":["Nat.0 + a.pos_part != a.pos_part","-Int.from_nat(a.pos_part) != sub_nat(Nat.0, a.pos_part) or Nat.0 + a.pos_part = a.pos_part","-Int.from_nat(a.pos_part) = sub_nat(Nat.0, a.pos_part)"]}
{"goal":"0.neg_part + a.neg_part = a.neg_part","proof":["Nat.0 + a.neg_part != a.neg_part","-Int.from_nat(a.neg_part) != sub_nat(Nat.0, a.neg_part) or Nat.0 + a.neg_part = a.neg_part","-Int.from_nat(a.neg_part) = sub_nat(Nat.0, a.neg_part)"]}
{"goal":"0 + a = sub_nat(a.pos_part, a.neg_part)","proof":["sub_nat(0.pos_part + a.pos_part, 0.neg_part + a.neg_part) = 0 + a"]}
{"goal":"add_zero_left","proof":["sub_nat(a.pos_part, a.neg_part) = a"]}
{"goal":"0.pos_part = Nat.0","proof":["0.pos_part = Nat.0 or 0.is_positive","0.is_positive"]}
{"goal":"0.neg_part = Nat.0","proof":["Int.from_nat(abs(0)) = 0 or 0.is_negative","Int.from_nat(abs(0)).neg_part = Nat.0","Int.from_nat(abs(0)).neg_part != 0.neg_part","Int.from_nat(abs(0)) != 0","0.is_negative"]}
{"goal":"a.pos_part + 0.pos_part = a.pos_part","proof":["-Int.from_nat(a.pos_part) != sub_nat(Nat.0, a.pos_part) or Nat.0 + a.pos_part = a.pos_part","-Int.from_nat(a.pos_part) = sub_nat(Nat.0, a.pos_part)","a.pos_part + 0.pos_part = 0.pos_part + a.pos_part","0.pos_part + a.pos_part != a.pos_part","Nat.0 + a.pos_part != a.pos_part"]}
{"goal":"a.neg_part + 0.neg_part = a.neg_part","proof":["-Int.from_nat(a.neg_part) != sub_nat(Nat.0, a.neg_part) or Nat.0 + a.neg_part = a.neg_part","-Int.from_nat(a.neg_part) = sub_nat(Nat.0, a.neg_part)","a.neg_part + 0.neg_part = 0.neg_part + a.neg_part","0.neg_part + a.neg_part != a.neg_part","Nat.0 + a.neg_part != a.neg_part"]}
{"goal":"a + 0 = sub_nat(a.pos_part, a.neg_part)","proof":["sub_nat(a.pos_part + 0.pos_part, a.neg_part + 0.neg_part) = a + 0"]}
{"goal":"add_zero_right","proof":["sub_nat(a.pos_part, a.neg_part) = a"]}
{"goal":"a + b = sub_nat(b.pos_part + a.pos_part, a.neg_part + b.neg_part)","proof":["sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part) = a + b","b.pos_part + a.pos_part = a.pos_part + b.pos_part"]}
{"goal":"add_comm","proof":["sub_nat(b.pos_part + a.pos_part, b.neg_part + a.neg_part) = b + a","b.neg_part + a.neg_part = a.neg_part + b.neg_part"]}
{"goal":"(-a).pos_part + (-b).pos_part = a.neg_part + b.neg_part","proof":["(-b).pos_part + (-a).pos_part = (-a).pos_part + (-b).pos_part","b.neg_part + a.neg_part = a.neg_part + b.neg_part","(-a).pos_part = a.neg_part","(-b).pos_part = b.neg_part"]}
{"goal":"(-a).neg_part + (-b).neg_part = a.pos_part + b.pos_part","proof":["(-b).neg_part + (-a).neg_part = (-a).neg_part + (-b).neg_part","b.pos_part + a.pos_part = a.pos_part + b.pos_part","(-a).neg_part = a.pos_part","(-b).neg_part = b.pos_part"]}
{"goal":"-a + -b = sub_nat((-a).pos_part + (-b).pos_part, (-a).neg_part + (-b).neg_part)","proof":["sub_nat((-a).pos_part + (-b).pos_part, (-a).neg_part + (-b).neg_part) = -a + -b"]}
{"goal":"-a + -b = sub_nat(a.neg_part + b.neg_part, (-a).neg_part + (-b).neg_part)","proof":["sub_nat((-a).pos_part + (-b).pos_part, (-a).neg_part + (-b).neg_part) != -a + -b"]}
{"goal":"-a + -b = sub_nat(a.neg_part + b.neg_part, a.pos_part + b.pos_part)","proof":["sub_nat(a.neg_part + b.neg_part, (-a).neg_part + (-b).neg_part) != -a + -b"]}
{"goal":"-a + -b = -sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part)","proof":["-sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part) = sub_nat(a.neg_part + b.neg_part, a.pos_part + b.pos_part)"]}
{"goal":"neg_distrib","proof":["sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part) = a + b"]}
{"goal":"a + b = sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part)","proof":["sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part) = a + b"]}
{"goal":"a + b = sub_nat(j, k)","proof":[]}
{"goal":"a.pos_part + b.pos_part + (a + b).neg_part = j + sub_nat(j, k).neg_part","proof":[]}
{"goal":"a.neg_part + b.neg_part + (a + b).pos_part = k + sub_nat(j, k).pos_part","proof":[]}
{"goal":"sub_nat(j, k).pos_part + k = sub_nat(j, k).neg_part + j","proof":["sub_nat(j, k).neg_part + j = sub_nat(j, k).pos_part + k"]}
{"goal":"a.pos_part + b.pos_part + (a + b).neg_part = sub_nat(j, k).pos_part + k","proof":["j + sub_nat(j, k).neg_part != sub_nat(j, k).pos_part + k","j + sub_nat(j, k).neg_part = k + sub_nat(j, k).pos_part","k + sub_nat(j, k).pos_part = sub_nat(j, k).pos_part + k"]}
{"goal":"a.neg_part + b.neg_part + (a + b).pos_part = sub_nat(j, k).neg_part + j","proof":["j + sub_nat(j, k).neg_part = k + sub_nat(j, k).pos_part"]}
{"goal":"a.pos_part + b.pos_part + (a + b).neg_part = sub_nat(j, k).neg_part + j","proof":["a.pos_part + b.pos_part + (a + b).neg_part != sub_nat(j, k).pos_part + k"]}
{"goal":"parts_of_add","proof":["a.neg_part + b.neg_part + (a + b).pos_part != sub_nat(j, k).neg_part + j"]}
{"goal":"a + -a = sub_nat(a.pos_part + (-a).pos_part, a.neg_part + (-a).neg_part)","proof":["sub_nat(a.pos_part + (-a).pos_part, a.neg_part + (-a).neg_part) = a + -a"]}
{"goal":"a + -a = sub_nat(a.pos_part + a.neg_part, a.neg_part + a.pos_part)","proof":["-sub_nat(a.neg_part + (-a).neg_part, a.pos_part + (-a).pos_part) = sub_nat(a.pos_part + (-a).pos_part, a.neg_part + (-a).neg_part)","-sub_nat(a.neg_part + a.pos_part, a.pos_part + a.neg_part) = sub_nat(a.pos_part + a.neg_part, a.neg_part + a.pos_part)","a.neg_part + (-a).neg_part = (-a).neg_part + a.neg_part","a.neg_part + a.pos_part = a.pos_part + a.neg_part","a.pos_part + (-a).pos_part = (-a).pos_part + a.pos_part","(-a).neg_part = a.pos_part","(-a).pos_part = a.neg_part"]}
{"goal":"a + -a = 0","proof":["a.neg_part + a.pos_part = a.pos_part + a.neg_part","sub_nat(a.pos_part + a.neg_part, a.pos_part + a.neg_part) = 0","sub_nat(a.pos_part + a.neg_part, a.pos_part + a.neg_part) != a + -a"]}
{"goal":"add_neg","proof":[]}
{"goal":"sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part) = 0","proof":["sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part) = a + b"]}
{"goal":"a.neg_part + b.neg_part + Nat.0 = a.pos_part + b.pos_part","proof":["sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part) != Int.from_nat(Nat.0) or a.neg_part + b.neg_part + Nat.0 = a.pos_part + b.pos_part","sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part) != Int.from_nat(Nat.0)","sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part) = Int.from_nat(Nat.0)"]}
{"goal":"a.pos_part + b.pos_part = a.neg_part + b.neg_part","proof":["a.neg_part + b.neg_part + Nat.0 != a.pos_part + b.pos_part or a.pos_part + b.pos_part - Nat.0 = a.neg_part + b.neg_part","a.pos_part + b.pos_part - Nat.0 = a.pos_part + b.pos_part","a.pos_part + b.pos_part - Nat.0 = a.neg_part + b.neg_part","a.pos_part + b.pos_part - Nat.0 != a.neg_part + b.neg_part"]}
{"goal":"a.pos_part + (-b).neg_part = a.neg_part + (-b).pos_part","proof":["(-b).neg_part = b.pos_part","a.neg_part + (-b).pos_part != a.pos_part + b.pos_part","(-b).pos_part = b.neg_part"]}
{"goal":"sub_nat(a.pos_part, a.neg_part) = sub_nat((-b).pos_part, (-b).neg_part)","proof":["a.neg_part + (-b).pos_part != a.pos_part + (-b).neg_part or sub_nat((-b).pos_part, (-b).neg_part) = sub_nat(a.pos_part, a.neg_part)"]}
{"goal":"a = -b","proof":["sub_nat((-b).pos_part, (-b).neg_part) = -b","sub_nat(a.pos_part, a.neg_part) = a"]}
{"goal":"add_eq_zero","proof":[]}
{"goal":"sub_nat(a.pos_part + c.pos_part, a.neg_part + c.neg_part) = sub_nat(b.pos_part + c.pos_part, b.neg_part + c.neg_part)","proof":["sub_nat(a.pos_part + c.pos_part, a.neg_part + c.neg_part) = a + c","sub_nat(b.pos_part + c.pos_part, b.neg_part + c.neg_part) = b + c"]}
{"goal":"sub_nat(a.pos_part, a.neg_part + c.neg_part) = sub_nat(b.pos_part, b.neg_part + c.neg_part)","proof":["sub_nat(b.pos_part + c.pos_part, b.neg_part + c.neg_part) != sub_nat(a.pos_part + c.pos_part, a.neg_part + c.neg_part) or sub_nat(b.pos_part, b.neg_part + c.neg_part) = sub_nat(a.pos_part, a.neg_part + c.neg_part)"]}
{"goal":"sub_nat(a.pos_part, a.neg_part) = sub_nat(b.pos_part, b.neg_part)","proof":["sub_nat(b.pos_part, b.neg_part + c.neg_part) != sub_nat(a.pos_part, a.neg_part + c.neg_part) or sub_nat(b.pos_part, b.neg_part) = sub_nat(a.pos_part, a.neg_part)"]}
{"goal":"add_right_cancel","proof":["sub_nat(a.pos_part, a.neg_part) = a","sub_nat(b.pos_part, b.neg_part) = b"]}
{"goal":"a + c = b + c","proof":["a + c = c + a","b + c = c + b"]}
{"goal":"add_left_cancel","proof":["b + c != a + c or b = a"]}
{"goal":"sub_nat(p, q) + Int.from_nat(r) = sub_nat(sub_nat(p, q).pos_part + Int.from_nat(r).pos_part, sub_nat(p, q).neg_part + Int.from_nat(r).neg_part)","proof":["sub_nat(sub_nat(p, q).pos_part + Int.from_nat(r).pos_part, sub_nat(p, q).neg_part + Int.from_nat(r).neg_part) = sub_nat(p, q) + Int.from_nat(r)"]}
{"goal":"sub_nat(p, q) + Int.from_nat(r) = sub_nat(sub_nat(p, q).pos_part + r, sub_nat(p, q).neg_part + Int.from_nat(r).neg_part)","proof":["Int.from_nat(r).pos_part = r"]}
{"goal":"sub_nat(p, q) + Int.from_nat(r) = sub_nat(sub_nat(p, q).pos_part + r, sub_nat(p, q).neg_part + Nat.0)","proof":["Int.from_nat(r).neg_part = Nat.0"]}
{"goal":"sub_nat(p, q) + Int.from_nat(r) = sub_nat(sub_nat(p, q).pos_part + r, sub_nat(p, q).neg_part)","proof":["-sub_nat(sub_nat(p, q).neg_part + Nat.0, sub_nat(p, q).pos_part + r) = sub_nat(sub_nat(p, q).pos_part + r, sub_nat(p, q).neg_part + Nat.0)","-sub_nat(sub_nat(p, q).neg_part, sub_nat(p, q).pos_part + r) = sub_nat(sub_nat(p, q).pos_part + r, sub_nat(p, q).neg_part)","Int.from_nat(r).neg_part + sub_nat(p, q).neg_part = sub_nat(p, q).neg_part + Int.from_nat(r).neg_part","sub_nat(p, q).neg_part + Nat.0 = Nat.0 + sub_nat(p, q).neg_part","Int.from_nat(r).neg_part = Nat.0","Nat.0 + sub_nat(p, q).neg_part = sub_nat(p, q).neg_part"]}
{"goal":"p + r + sub_nat(p, q).neg_part = q + (sub_nat(p, q).pos_part + r)","proof":["p + sub_nat(p, q).neg_part = q + sub_nat(p, q).pos_part","q + (sub_nat(p, q).pos_part + r) = q + sub_nat(p, q).pos_part + r","r + (p + sub_nat(p, q).neg_part) = r + p + sub_nat(p, q).neg_part","r + (q + sub_nat(p, q).pos_part) = q + sub_nat(p, q).pos_part + r","r + p = p + r"]}
{"goal":"sub_nat(p + r, q) = sub_nat(sub_nat(p, q).pos_part + r, sub_nat(p, q).neg_part)","proof":["p + r + sub_nat(p, q).neg_part != q + (sub_nat(p, q).pos_part + r) or sub_nat(sub_nat(p, q).pos_part + r, sub_nat(p, q).neg_part) = sub_nat(p + r, q)"]}
{"goal":"add_sub_nat_left_pos","proof":["sub_nat(sub_nat(p, q).pos_part + r, sub_nat(p, q).neg_part) != sub_nat(p, q) + Int.from_nat(r)"]}
{"goal":"sub_nat(p, q) + -Int.from_nat(r) = -(-sub_nat(p, q) + Int.from_nat(r))","proof":["--sub_nat(p, q) + -Int.from_nat(r) = -(-sub_nat(p, q) + Int.from_nat(r))","-sub_nat(p, q) = sub_nat(q, p)","-sub_nat(q, p) = sub_nat(p, q)"]}
{"goal":"sub_nat(p, q) + -Int.from_nat(r) = -(sub_nat(q, p) + Int.from_nat(r))","proof":["-sub_nat(p, q) = sub_nat(q, p)"]}
{"goal":"sub_nat(p, q) + -Int.from_nat(r) = -sub_nat(q + r, p)","proof":["sub_nat(q, p) + Int.from_nat(r) = sub_nat(q + r, p)"]}
{"goal":"add_sub_nat_left_neg","proof":["-sub_nat(q + r, p) != sub_nat(p, q + r)","-sub_nat(q + r, p) = sub_nat(p, q + r)"]}
{"goal":"sub_nat(p, q) + a = sub_nat(p, q) + Int.from_nat(abs(a))","proof":["Int.from_nat(abs(a)) != a","Int.from_nat(abs(a)) = a or a.is_negative","a.is_negative","not a.is_positive or not a.is_negative"]}
{"goal":"sub_nat(p, q) + a = sub_nat(p + abs(a), q)","proof":["sub_nat(p, q) + Int.from_nat(abs(a)) = sub_nat(p + abs(a), q)"]}
{"goal":"sub_nat(p, q) + a = sub_nat(p + a.pos_part, q)","proof":["not a.is_positive or a.pos_part = abs(a)","a.pos_part = abs(a)"]}
{"goal":"sub_nat(p, q) + a = sub_nat(p + a.pos_part, q + a.neg_part)","proof":["-sub_nat(q + a.neg_part, p + a.pos_part) = sub_nat(p + a.pos_part, q + a.neg_part)","-sub_nat(q, p + a.pos_part) = sub_nat(p + a.pos_part, q)","q + a.neg_part = a.neg_part + q","not a.is_positive or a.neg_part = Nat.0","Nat.0 + q = q","a.neg_part = Nat.0"]}
{"goal":"sub_nat(p, q) + a = sub_nat(p, q) + -Int.from_nat(abs(a))","proof":["-Int.from_nat(abs(a)) != a","-Int.from_nat(abs(a)) = a or a.is_positive"]}
{"goal":"sub_nat(p, q) + a = sub_nat(p, q + abs(a))","proof":["sub_nat(p, q) + -Int.from_nat(abs(a)) = sub_nat(p, q + abs(a))"]}
{"goal":"sub_nat(p, q) + a = sub_nat(p, q + a.neg_part)","proof":["a.neg_part = abs(a) or a.is_positive","a.neg_part = abs(a)"]}
{"goal":"sub_nat(p, q) + a = sub_nat(p + a.pos_part, q + a.neg_part)","proof":["-sub_nat(q + a.neg_part, p + a.pos_part) = sub_nat(p + a.pos_part, q + a.neg_part)","-sub_nat(q + abs(a), p) = sub_nat(p, q + abs(a))","a.neg_part = abs(a) or a.is_positive","a.neg_part = abs(a)","p + a.pos_part = a.pos_part + p","a.pos_part = Nat.0 or a.is_positive","a.pos_part = Nat.0","Nat.0 + p = p"]}
{"goal":"add_sub_nat_left","proof":[]}
{"goal":"a + sub_nat(p, q) = sub_nat(p, q) + a","proof":["a + sub_nat(p, q) = sub_nat(p, q) + a"]}
{"goal":"a + sub_nat(p, q) = sub_nat(p + a.pos_part, q + a.neg_part)","proof":["sub_nat(p + a.pos_part, q + a.neg_part) != sub_nat(p, q) + a","sub_nat(p + a.pos_part, q + a.neg_part) = sub_nat(p, q) + a"]}
{"goal":"a + sub_nat(p, q) = sub_nat(a.pos_part + p, q + a.neg_part)","proof":["p + a.pos_part = a.pos_part + p"]}
{"goal":"add_sub_nat_right","proof":["q + a.neg_part = a.neg_part + q"]}
{"goal":"sub_nat(p, q) + sub_nat(r, s) = sub_nat(p + sub_nat(r, s).pos_part, q + sub_nat(r, s).neg_part)","proof":["sub_nat(p + sub_nat(r, s).pos_part, q + sub_nat(r, s).neg_part) = sub_nat(p, q) + sub_nat(r, s)"]}
{"goal":"p + q + (r + sub_nat(r, s).neg_part) = p + q + (s + sub_nat(r, s).pos_part)","proof":["s + sub_nat(r, s).pos_part != r + sub_nat(r, s).neg_part","s + sub_nat(r, s).pos_part = r + sub_nat(r, s).neg_part"]}
{"goal":"p + (q + (r + sub_nat(r, s).neg_part)) = p + q + (s + sub_nat(r, s).pos_part)","proof":["p + (q + (r + sub_nat(r, s).neg_part)) != p + q + (r + sub_nat(r, s).neg_part)","p + (q + (r + sub_nat(r, s).neg_part)) = p + q + (r + sub_nat(r, s).neg_part)"]}
{"goal":"p + (q + r + sub_nat(r, s).neg_part) = p + q + (s + sub_nat(r, s).pos_part)","proof":["q + (r + sub_nat(r, s).neg_part) = q + r + sub_nat(r, s).neg_part"]}
{"goal":"p + (r + q + sub_nat(r, s).neg_part) = p + q + (s + sub_nat(r, s).pos_part)","proof":["r + q = q + r"]}
{"goal":"p + (r + (q + sub_nat(r, s).neg_part)) = p + q + (s + sub_nat(r, s).pos_part)","proof":["p + (r + (q + sub_nat(r, s).neg_part)) != p + q + (r + sub_nat(r, s).neg_part)","p + r + (q + sub_nat(r, s).neg_part) = p + q + (r + sub_nat(r, s).neg_part)","p + (r + (q + sub_nat(r, s).neg_part)) = p + r + (q + sub_nat(r, s).neg_part)"]}
{"goal":"p + r + (q + sub_nat(r, s).neg_part) = p + q + (s + sub_nat(r, s).pos_part)","proof":["p + r + (q + sub_nat(r, s).neg_part) != p + q + (r + sub_nat(r, s).neg_part)","p + r + (q + sub_nat(r, s).neg_part) = p + q + (r + sub_nat(r, s).neg_part)"]}
{"goal":"p + r + (q + sub_nat(r, s).neg_part) = q + p + (s + sub_nat(r, s).pos_part)","proof":["q + p = p + q"]}
{"goal":"p + r + (q + sub_nat(r, s).neg_part) = q + p + (s + sub_nat(r, s).pos_part)","proof":[]}
{"goal":"p + r + (q + sub_nat(r, s).neg_part) = q + (p + s + sub_nat(r, s).pos_part)","proof":["p + (s + sub_nat(r, s).pos_part) = p + s + sub_nat(r, s).pos_part","q + (p + (s + sub_nat(r, s).pos_part)) = q + p + (s + sub_nat(r, s).pos_part)"]}
{"goal":"p + r + (q + sub_nat(r, s).neg_part) = q + (s + p + sub_nat(r, s).pos_part)","proof":["s + p = p + s"]}
{"goal":"p + r + (q + sub_nat(r, s).neg_part) = q + s + (p + sub_nat(r, s).pos_part)","proof":["q + s + (p + sub_nat(r, s).pos_part) = q + p + (s + sub_nat(r, s).pos_part)"]}
{"goal":"p + r + (q + sub_nat(r, s).neg_part) = q + s + (p + sub_nat(r, s).pos_part)","proof":[]}
{"goal":"sub_nat(p + r, q + s) = sub_nat(p + sub_nat(r, s).pos_part, q + sub_nat(r, s).neg_part)","proof":["q + s + (p + sub_nat(r, s).pos_part) != p + r + (q + sub_nat(r, s).neg_part) or sub_nat(p + sub_nat(r, s).pos_part, q + sub_nat(r, s).neg_part) = sub_nat(p + r, q + s)"]}
{"goal":"add_sub_nat","proof":["sub_nat(p + sub_nat(r, s).pos_part, q + sub_nat(r, s).neg_part) != sub_nat(p, q) + sub_nat(r, s)"]}
{"goal":"lhs = sub_nat(p + r, q + s) + sub_nat(t, u)","proof":["sub_nat(p, q) + sub_nat(r, s) = sub_nat(p + r, q + s)"]}
{"goal":"lhs = sub_nat(p + r + t, q + s + u)","proof":["sub_nat(p + r, q + s) + sub_nat(t, u) = sub_nat(p + r + t, q + s + u)"]}
{"goal":"add_sub_nat_3_left","proof":["sub_nat(p, q) + sub_nat(r, s) + sub_nat(t, u) != lhs"]}
{"goal":"lhs = sub_nat(p, q) + sub_nat(r + t, s + u)","proof":["sub_nat(r, s) + sub_nat(t, u) = sub_nat(r + t, s + u)"]}
{"goal":"lhs = sub_nat(p + (r + t), q + (s + u))","proof":["sub_nat(p, q) + sub_nat(r + t, s + u) = sub_nat(p + (r + t), q + (s + u))"]}
{"goal":"add_sub_nat_3_right","proof":["sub_nat(p, q) + (sub_nat(r, s) + sub_nat(t, u)) != lhs"]}
{"goal":"lhs = sub_nat(p + r + t, q + s + u)","proof":["sub_nat(p + r, q + s) + sub_nat(t, u) = sub_nat(p + r + t, q + s + u)","sub_nat(p, q) + sub_nat(r, s) = sub_nat(p + r, q + s)"]}
{"goal":"lhs = sub_nat(p + (r + t), q + s + u)","proof":["p + (r + t) = p + r + t"]}
{"goal":"lhs = sub_nat(p + (r + t), q + (s + u))","proof":["q + (s + u) = q + s + u"]}
{"goal":"lhs = sub_nat(p, q) + (sub_nat(r, s) + sub_nat(t, u))","proof":["sub_nat(p, q) + sub_nat(r + t, s + u) = sub_nat(p + (r + t), q + (s + u))","sub_nat(r, s) + sub_nat(t, u) = sub_nat(r + t, s + u)"]}
{"goal":"add_sub_nat_assoc","proof":["sub_nat(p, q) + sub_nat(r, s) + sub_nat(t, u) != lhs"]}
{"goal":"add_assoc(sub_nat(a.pos_part, a.neg_part), b, sub_nat(c.pos_part, c.neg_part))","proof":["sub_nat(a.pos_part, a.neg_part) + sub_nat(b.pos_part, b.neg_part) + sub_nat(c.pos_part, c.neg_part) != sub_nat(a.pos_part, a.neg_part) + (sub_nat(b.pos_part, b.neg_part) + sub_nat(c.pos_part, c.neg_part)) or add_assoc(sub_nat(a.pos_part, a.neg_part), sub_nat(b.pos_part, b.neg_part), sub_nat(c.pos_part, c.neg_part))","sub_nat(b.pos_part, b.neg_part) = b","add_assoc(sub_nat(a.pos_part, a.neg_part), sub_nat(b.pos_part, b.neg_part), sub_nat(c.pos_part, c.neg_part))","not add_assoc(sub_nat(a.pos_part, a.neg_part), sub_nat(b.pos_part, b.neg_part), sub_nat(c.pos_part, c.neg_part))"]}
{"goal":"add_assoc(sub_nat(a.pos_part, a.neg_part), b, c)","proof":["sub_nat(c.pos_part, c.neg_part) = c"]}
{"goal":"add_assoc","proof":["sub_nat(a.pos_part, a.neg_part) + sub_nat(b.pos_part, b.neg_part) = sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part)","sub_nat(b.pos_part, b.neg_part) + sub_nat(c.pos_part, c.neg_part) = sub_nat(b.pos_part + c.pos_part, b.neg_part + c.neg_part)","sub_nat((sub_nat(a.pos_part, a.neg_part) + sub_nat(b.pos_part, b.neg_part)).pos_part + c.pos_part, (sub_nat(a.pos_part, a.neg_part) + sub_nat(b.pos_part, b.neg_part)).neg_part + c.neg_part) = sub_nat(a.pos_part, a.neg_part) + sub_nat(b.pos_part, b.neg_part) + sub_nat(c.pos_part, c.neg_part)","sub_nat(a.pos_part + (sub_nat(b.pos_part, b.neg_part) + sub_nat(c.pos_part, c.neg_part)).pos_part, a.neg_part + (sub_nat(b.pos_part, b.neg_part) + sub_nat(c.pos_part, c.neg_part)).neg_part) = sub_nat(a.pos_part, a.neg_part) + (sub_nat(b.pos_part, b.neg_part) + sub_nat(c.pos_part, c.neg_part))","sub_nat((a + b).pos_part + c.pos_part, (a + b).neg_part + c.neg_part) = a + b + c","sub_nat(a.pos_part + (b + c).pos_part, a.neg_part + (b + c).neg_part) = a + (b + c)","sub_nat(a.pos_part + b.pos_part, a.neg_part + b.neg_part) = a + b","sub_nat(b.pos_part + c.pos_part, b.neg_part + c.neg_part) = b + c"]}
{"goal":"add_from_nat","proof":["sub_nat(a, Nat.0) + Int.from_nat(b) = sub_nat(a + b, Nat.0)","sub_nat(a + b, Nat.0) = Int.from_nat(a + b)","sub_nat(a, Nat.0) = Int.from_nat(a)","sub_nat(a, Nat.0) + Int.from_nat(b) != Int.from_nat(a + b)"]}
{"goal":"a + b = a","proof":["a + 0 != a","a + 0 = a"]}
{"goal":"(a + b).is_positive","proof":[]}
{"goal":"b.is_positive","proof":["b.is_positive or b.is_negative or 0 = b"]}
{"goal":"a = Int.from_nat(abs(a))","proof":["Int.from_nat(abs(a)) = a or a.is_negative","a.is_negative","not a.is_positive or not a.is_negative"]}
{"goal":"b = Int.from_nat(abs(b))","proof":["Int.from_nat(abs(b)) = b or b.is_negative"]}
{"goal":"a + b = Int.from_nat(abs(a) + abs(b))","proof":["Int.from_nat(abs(a)) + Int.from_nat(abs(b)) = Int.from_nat(abs(a) + abs(b))"]}
{"goal":"abs(a) + abs(b) != Nat.0","proof":["let s0: Nat satisfy { true }","sub_nat(abs(a) + abs(b) + s0, s0) = Int.from_nat(abs(a) + abs(b))","sub_nat(abs(b) + s0, s0) = Int.from_nat(abs(b))","abs(a) + abs(b) != Nat.0 or abs(b) = Nat.0","abs(b) = Nat.0","-Int.from_nat(Nat.0) = neg_nat(Nat.0)","--Int.from_nat(abs(a) + abs(b)) = Int.from_nat(abs(a) + abs(b))"]}
{"goal":"Int.from_nat(abs(a) + abs(b)).is_positive","proof":["Int.from_nat(abs(a) + abs(b)).pos_part = Nat.0 or Int.from_nat(abs(a) + abs(b)).is_positive","Int.from_nat(abs(a) + abs(b)).pos_part = abs(a) + abs(b)","Int.from_nat(abs(a) + abs(b)).pos_part = Nat.0","Int.from_nat(abs(a) + abs(b)).pos_part != Nat.0"]}
{"goal":"(a + b).is_positive","proof":[]}
{"goal":"add_pos_nonneg","proof":[]}
{"goal":"(-a).is_positive","proof":["(--a).is_negative = (-a).is_positive","not (--a).is_negative","--a = a"]}
{"goal":"not (-b).is_negative","proof":["(-b).is_negative = b.is_positive"]}
{"goal":"(-a + -b).is_positive","proof":["not (-a).is_positive or (-a + -b).is_positive or (-b).is_negative"]}
{"goal":"(-(a + b)).is_positive","proof":["-a + -b = -(a + b)"]}
{"goal":"add_neg_nonpos","proof":["(--(a + b)).is_negative = (-(a + b)).is_positive","a + b + 0 = a + b","--(a + b + 0) = a + b + 0"]}
{"goal":"not (0 + b).is_negative","proof":["b + 0 = 0 + b","(b + 0).is_negative","b + 0 = b"]}
{"goal":"not (a + b).is_positive","proof":["not (a + b).is_negative or not (a + b).is_positive"]}
{"goal":"not a.is_positive","proof":["not a.is_positive or (a + b).is_positive or b.is_negative"]}
{"goal":"false","proof":["a.is_negative or a.is_positive or 0 = a","0 = a"]}
{"goal":"add_nonneg_nonneg","proof":["a.is_negative"]}
{"goal":"not (0 + b).is_positive","proof":["b + 0 = 0 + b","(b + 0).is_positive","b + 0 = b"]}
{"goal":"not (a + b).is_negative","proof":["not (a + b).is_negative or not (a + b).is_positive"]}
{"goal":"not a.is_negative","proof":["not a.is_negative or (a + b).is_negative or b.is_positive"]}
{"goal":"false","proof":["a.is_negative or a.is_positive or 0 = a","0 = a"]}
{"goal":"add_nonpos_nonpos","proof":["a.is_positive"]}
{"goal":"a + (b + c) = a + c + b","proof":["a + (c + b) = a + c + b","c + b = b + c"]}
{"goal":"add_comm_4","proof":["a + (b + c) = a + b + c","a + b + (c + d) = a + b + c + d","a + c + (b + d) = a + c + b + d"]}
{"goal":"forall(x0: Int, x1: Int, x2: Int) { x0 + (x1 + x2) = x0 + x1 + x2 }","proof":["let (s0: Int, s1: Int, s2: Int) satisfy { s0 + (s1 + s2) != s0 + s1 + s2 }","s0 + (s1 + s2) = s0 + s1 + s2"]}
{"goal":"forall(x0: Int, x1: Int) { AddSemigroup.add[Int](x0, x1) = AddSemigroup.add[Int](x1, x0) }","proof":["let (s0: Int, s1: Int) satisfy { s1 + s0 != s0 + s1 }","s1 + s0 = s0 + s1"]}
{"goal":"forall(x0: Int) { AddSemigroup.add[Int](0, x0) = x0 } and forall(x1: Int) { AddSemigroup.add[Int](x1, 0) = x1 }","proof":["let (s0: Int, s1: Int) satisfy { s1 + 0 != s1 or 0 + s0 != s0 }","s0 + 0 = 0 + s0","s0 + 0 = s0","s1 + 0 = s1","0 + s0 != s0"]}
{"goal":"forall(x0: Int) { AddSemigroup.add[Int](x0, -x0) = add_monoid.AddMonoid.0[Int] }","proof":["let s0: Int satisfy { s0 + -s0 != 0 }","s0 + -s0 = 0"]}
{"goal":"a - 0 = a + -0","proof":["a + -0 = a - 0"]}
{"goal":"a - 0 = a + 0","proof":[]}
{"goal":"a - 0 = a","proof":["a + 0 != a","a + 0 = a"]}
{"goal":"sub_zero_right","proof":[]}
{"goal":"0 - a = 0 + -a","proof":["0 + -a = 0 - a"]}
{"goal":"0 - a = -a","proof":["0 + -a = 0 - a","-a + 0 = 0 + -a","0 + -a != -a","-a + 0 = -a"]}
{"goal":"sub_zero_left","proof":[]}
{"goal":"-(b - a) = -(b + -a)","proof":["b + -a != b - a","b + -a = b - a"]}
{"goal":"-(b - a) = -b + --a","proof":["-b + --a = -(b + -a)"]}
{"goal":"-(b - a) = -b + a","proof":["--a = a"]}
{"goal":"-(b - a) = a + -b","proof":["a + -b = -b + a"]}
{"goal":"sub_anticomm","proof":["a + -b = a - b"]}
{"goal":"sub_self","proof":["a + -a = a - a","a + -a != 0","a + -a = 0"]}
{"goal":"sub_eq_zero","proof":["a + -b = a - b","a + -b != 0 or --b = a","--b = b","--b != a","a + -b = 0","a + -b != 0"]}
{"goal":"a + (b + -b) = a","proof":["b + -b = 0","a + 0 != a","a + 0 = a"]}
{"goal":"a + b + -b = a","proof":["a + (b + -b) = a + b + -b"]}
{"goal":"sub_add_left","proof":["a + b + -b = a + b - b"]}
{"goal":"neg_sub","proof":["-(a - b) = b - a"]}
{"goal":"sub_add_right","proof":["-(a + b - a) = a - (a + b)","b + a = a + b","b + a - a = b","-(a + b - a) != -b","a + b - a != b"]}
{"goal":"b + (a + -b) = a","proof":["b + (a + -b) = b + a + -b","b + a + -b != a","a + b + -b = a + b - b","b + a = a + b","a + b + -b != a","a + b - b != a","a + b - b = a"]}
{"goal":"b + (a - b) = a","proof":["a + -b = a - b"]}
{"goal":"sub_imp_add","proof":["b + (a - b) != a"]}
{"goal":"sub_negate_imp_add","proof":["b - a != c or a + c = b","b - a != c","-(a - b) = b - a","c + 0 = c","--(c + 0) = c + 0"]}
{"goal":"sub_cancel_right","proof":["b - c != a - c or c + (b - c) = a","b - c != b - c or c + (b - c) = b","c + (b - c) = b","c + (b - c) != a"]}
{"goal":"sub_cancel_left","proof":["-(c - a) != a - b or a + (c - a) = b","c - a != c - a or a + (c - a) = c","-(c - a) = a - c","a + (c - a) = c","a + (c - a) != b","-(c - a) = a - b"]}
{"goal":"b + a + -(a + c) = b - c","proof":["b + (a + -(a + c)) = b + a + -(a + c)","a + -(a + c) = a - (a + c)","b + -c = b - c","a - (a + c) = -c","b + (a + -(a + c)) != b - c","b + (a - (a + c)) != b - c"]}
{"goal":"a + b + -(a + c) = b - c","proof":["a + b = b + a"]}
{"goal":"sub_add_cancel_left","proof":["a + b + -(a + c) = a + b - (a + c)"]}
{"goal":"sub_add_cancel_right","proof":["c + a - (c + b) = a - b","b + c = c + b","c + a = a + c","a + c - (c + b) != a - b"]}
{"goal":"-Int.from_nat(abs(a) * Nat.0) = a.mul_nat(Nat.0)","proof":["not a.is_negative or -Int.from_nat(abs(a) * Nat.0) = a.mul_nat(Nat.0)"]}
{"goal":"abs(a) * Nat.0 = Nat.0","proof":["Nat.0 != Nat.0 or abs(a) * Nat.0 = Nat.0"]}
{"goal":"a.mul_nat(Nat.0) = 0","proof":["-Int.from_nat(Nat.0) = a.mul_nat(Nat.0)","-Int.from_nat(Nat.0) = sub_nat(Nat.0, Nat.0)","sub_nat(Nat.0, Nat.0) = 0","a.mul_nat(Nat.0) != sub_nat(Nat.0, Nat.0)"]}
{"goal":"Int.from_nat(abs(a) * Nat.0) = 0","proof":["abs(a) * Nat.0 = Nat.0 * abs(a)","Int.from_nat(Nat.0 * abs(a)) != 0","Nat.0 * abs(a) = Nat.0","Int.from_nat(Nat.0) != 0"]}
{"goal":"a.mul_nat(Nat.0) = 0","proof":["Int.from_nat(abs(a) * Nat.0) = a.mul_nat(Nat.0) or a.is_negative","Int.from_nat(abs(a) * Nat.0) = a.mul_nat(Nat.0)"]}
{"goal":"mul_nat_zero_right","proof":[]}
{"goal":"not 0.is_positive","proof":[]}
{"goal":"Int.from_nat(Nat.0 * n) = 0","proof":["sub_nat(Nat.0 * n, Nat.0) = Int.from_nat(Nat.0 * n)","sub_nat(Nat.0 * n, Nat.0) != 0","sub_nat(Nat.0, Nat.0) = 0","Nat.0 * n = Nat.0"]}
{"goal":"Int.from_nat(abs(0) * n) = 0.mul_nat(n)","proof":["Int.from_nat(abs(0) * n) = 0.mul_nat(n) or 0.is_negative","0.is_negative"]}
{"goal":"Int.from_nat(Nat.0 * n) = 0.mul_nat(n)","proof":["n * Nat.0 = Nat.0 * n","n * abs(0) = abs(0) * n","sub_nat(Nat.0 * n, Nat.0) = Int.from_nat(Nat.0 * n)","sub_nat(abs(0) * n, Nat.0) = Int.from_nat(abs(0) * n)","abs(Int.from_nat(Nat.0 * n)) = Nat.0 * n","Nat.0 * n = Nat.0"]}
{"goal":"mul_nat_zero_left","proof":["Int.from_nat(Nat.0 * n) != 0.mul_nat(n)"]}
{"goal":"a.mul_nat(n) = -Int.from_nat(abs(a) * n)","proof":["let s0: Nat satisfy { true }","-Int.from_nat(abs(a)) = sub_nat(s0, s0 + abs(a))","-Int.from_nat(n * abs(a)) = sub_nat(s0, s0 + n * abs(a))","n * abs(a) = abs(a) * n","0.mul_nat(n) = 0","Nat.0 * n = Nat.0"]}
{"goal":"a.mul_nat(n) = -Int.from_nat(abs(a) * n)","proof":["not a.is_negative or -Int.from_nat(abs(a) * n) = a.mul_nat(n)","not a.is_negative","a.is_negative or a.is_positive or 0 = a"]}
{"goal":"mul_nat_nonpos_left","proof":[]}
{"goal":"(-a).is_negative","proof":["(-a).is_negative = a.is_positive"]}
{"goal":"(-a).mul_nat(n) = -Int.from_nat(abs(-a) * n)","proof":["not (-a).is_negative or -Int.from_nat(abs(-a) * n) = (-a).mul_nat(n)"]}
{"goal":"(-a).mul_nat(n) = -Int.from_nat(abs(a) * n)","proof":["abs(-a) = abs(a)"]}
{"goal":"(-a).mul_nat(n) = -a.mul_nat(n)","proof":["Int.from_nat(abs(a) * n) = a.mul_nat(n) or a.is_negative","not a.is_negative or not a.is_positive","not a.is_negative","-Int.from_nat(abs(a) * n) != -a.mul_nat(n)","Int.from_nat(abs(a) * n) != a.mul_nat(n)"]}
{"goal":"not (-a).is_negative","proof":["(-a).is_negative = a.is_positive"]}
{"goal":"(-a).mul_nat(n) = -a.mul_nat(n)","proof":["-Int.from_nat(abs(a) * n) = a.mul_nat(n) or a.is_positive","Int.from_nat(abs(-a) * (Nat.0 + n)) = (-a).mul_nat(Nat.0 + n) or (-a).is_negative","abs(-a) = abs(a)","--(-a).mul_nat(n) = (-a).mul_nat(n)","Nat.0 + n = n","-Int.from_nat(abs(a) * n) = a.mul_nat(n)","--(-a).mul_nat(n) != -a.mul_nat(n)","-(-a).mul_nat(n) != a.mul_nat(n)","Int.from_nat(abs(-a) * (Nat.0 + n)) = (-a).mul_nat(Nat.0 + n)"]}
{"goal":"mul_nat_negate_left","proof":[]}
{"goal":"a.mul_nat(n.suc) = Int.from_nat(abs(a) * n.suc)","proof":["Int.from_nat(abs(a) * n.suc) = a.mul_nat(n.suc) or a.is_negative"]}
{"goal":"a.mul_nat(n.suc) = Int.from_nat(abs(a) * n + abs(a))","proof":["abs(a) + abs(a) * n = abs(a) * n.suc","let s0: Nat satisfy { true }","sub_nat(abs(a) * n + abs(a) + s0, s0) = Int.from_nat(abs(a) * n + abs(a))","sub_nat(abs(a) * n.suc + s0, s0) = Int.from_nat(abs(a) * n.suc)","abs(a) + abs(a) * n = abs(a) * n + abs(a)"]}
{"goal":"a.mul_nat(n.suc) = Int.from_nat(abs(a) * n) + Int.from_nat(abs(a))","proof":["Int.from_nat(abs(a) * n) + Int.from_nat(abs(a)) = Int.from_nat(abs(a) * n + abs(a))"]}
{"goal":"a.mul_nat(n.suc) = a.mul_nat(n) + a","proof":["Int.from_nat(abs(a) * n) = a.mul_nat(n) or a.is_negative","Int.from_nat(abs(a)) + Int.from_nat(abs(a) * n) = Int.from_nat(abs(a) * n) + Int.from_nat(abs(a))","a + a.mul_nat(n) = a.mul_nat(n) + a","Int.from_nat(abs(a)) = a or a.is_negative","Int.from_nat(abs(a)) = a","Int.from_nat(abs(a) * n) = a.mul_nat(n)"]}
{"goal":"mul_nat_nonneg_suc","proof":[]}
{"goal":"(-a).is_positive","proof":["(--a).is_negative = (-a).is_positive","not (--a).is_negative","--a = a"]}
{"goal":"a.mul_nat(n.suc) = -(-a).mul_nat(n.suc)","proof":["(-a).mul_nat(n.suc) = -a.mul_nat(n.suc)","--a.mul_nat(n.suc) != a.mul_nat(n.suc)","a.mul_nat(n.suc) + -a.mul_nat(n.suc) != 0 or --a.mul_nat(n.suc) = a.mul_nat(n.suc)","a.mul_nat(n.suc) + -a.mul_nat(n.suc) = 0"]}
{"goal":"a.mul_nat(n.suc) = -((-a).mul_nat(n) + -a)","proof":["(-a).mul_nat(n) + -a = (-a).mul_nat(n.suc) or (-a).is_negative","not (-a).is_negative or not (-a).is_positive","not (-a).is_negative","-((-a).mul_nat(n) + -a) != -(-a).mul_nat(n.suc)","(-a).mul_nat(n) + -a != (-a).mul_nat(n.suc)"]}
{"goal":"a.mul_nat(n.suc) = -(-a.mul_nat(n) + -a)","proof":["(-a).mul_nat(n) = -a.mul_nat(n)"]}
{"goal":"a.mul_nat(n.suc) = --(a.mul_nat(n) + a)","proof":["-a.mul_nat(n) + -a = -(a.mul_nat(n) + a)"]}
{"goal":"a.mul_nat(n.suc) = a.mul_nat(n) + a","proof":["--(a.mul_nat(n) + a) = a.mul_nat(n) + a"]}
{"goal":"a.mul_nat(n.suc) = a.mul_nat(n) + a","proof":["a.mul_nat(n) + a = a.mul_nat(n.suc) or a.is_negative"]}
{"goal":"mul_nat_suc","proof":[]}
{"goal":"(a + b).mul_nat(Nat.0) = 0","proof":["(a + b).mul_nat(Nat.0) = 0"]}
{"goal":"a.mul_nat(Nat.0) = 0","proof":["a.mul_nat(Nat.0) = 0"]}
{"goal":"b.mul_nat(Nat.0) = 0","proof":["b.mul_nat(Nat.0) = 0"]}
{"goal":"a.mul_nat(Nat.0) + b.mul_nat(Nat.0) = 0","proof":["a.mul_nat(Nat.0) + 0 != 0","0 + 0 != 0","0 + 0 - 0 = 0","0 + 0 - 0 != 0 or 0 + 0 = 0"]}
{"goal":"(a + b).mul_nat(Nat.0) = a.mul_nat(Nat.0) + b.mul_nat(Nat.0)","proof":["a.mul_nat(Nat.0) + b.mul_nat(Nat.0) != 0"]}
{"goal":"f(Nat.0)","proof":["mul_nat_distrib_right(a, b, Nat.0) = f(Nat.0)","a.mul_nat(Nat.0) + b.mul_nat(Nat.0) != (a + b).mul_nat(Nat.0) or mul_nat_distrib_right(a, b, Nat.0)","not mul_nat_distrib_right(a, b, Nat.0)","mul_nat_distrib_right(a, b, Nat.0)"]}
{"goal":"(a + b).mul_nat(x) = a.mul_nat(x) + b.mul_nat(x)","proof":["mul_nat_distrib_right(a, b, x) = f(x)","not mul_nat_distrib_right(a, b, x) or a.mul_nat(x) + b.mul_nat(x) = (a + b).mul_nat(x)","mul_nat_distrib_right(a, b, x)","not mul_nat_distrib_right(a, b, x)"]}
{"goal":"(a + b).mul_nat(x.suc) = a.mul_nat(x) + a + (b.mul_nat(x) + b)","proof":["a.mul_nat(x) + a + (b.mul_nat(x) + b) = a.mul_nat(x) + b.mul_nat(x) + (a + b)","(a + b).mul_nat(x) + (a + b) = (a + b).mul_nat(x.suc)"]}
{"goal":"(a + b).mul_nat(x.suc) = a.mul_nat(x.suc) + (b.mul_nat(x) + b)","proof":["a.mul_nat(x) + a = a.mul_nat(x.suc)"]}
{"goal":"(a + b).mul_nat(x.suc) = a.mul_nat(x.suc) + b.mul_nat(x.suc)","proof":["b.mul_nat(x) + b = b.mul_nat(x.suc)"]}
{"goal":"f(x.suc)","proof":["mul_nat_distrib_right(a, b, x.suc) = f(x.suc)","a.mul_nat(x.suc) + b.mul_nat(x.suc) != (a + b).mul_nat(x.suc) or mul_nat_distrib_right(a, b, x.suc)","not mul_nat_distrib_right(a, b, x.suc)","mul_nat_distrib_right(a, b, x.suc)"]}
{"goal":"mul_nat_distrib_right","proof":["let s0: Nat satisfy { forall(x0: Nat) { not f(Nat.0) or f(s0) or f(x0) } and forall(x1: Nat) { not f(s0.suc) or not f(Nat.0) or f(x1) } }","not f(Nat.0) or f(s0) or f(s0)","f(s0) or f(s0)","not f(s0.suc) or not f(Nat.0) or f(n)","not f(s0.suc) or f(n)","not f(s0) or f(s0.suc)","mul_nat_distrib_right(a, b, n) = f(n)","not mul_nat_distrib_right(a, b, n) or a.mul_nat(n) + b.mul_nat(n) = (a + b).mul_nat(n)","f(s0)","not mul_nat_distrib_right(a, b, n)","not f(n)","f(s0.suc)","not f(s0.suc)"]}
{"goal":"Int.from_nat(a).mul_nat(b) = Int.from_nat(a * b)","proof":["sub_nat(Nat.0 * b, Nat.0) = Int.from_nat(Nat.0 * b)","sub_nat(Nat.0, Nat.0) = Int.from_nat(Nat.0)","-Int.from_nat(Nat.0) = neg_nat(Nat.0)","0.mul_nat(b) = 0","--Int.from_nat(Nat.0) = Int.from_nat(Nat.0)","Nat.0 * b = Nat.0"]}
{"goal":"Int.from_nat(a).is_positive","proof":["Int.from_nat(a).is_positive or Int.from_nat(a).pos_part = Nat.0","Int.from_nat(a).pos_part = Nat.0","Int.from_nat(a).pos_part = a"]}
{"goal":"not Int.from_nat(a).is_negative","proof":["Int.from_nat(abs(Int.from_nat(a))) != Int.from_nat(a) or not Int.from_nat(a).is_negative","Int.from_nat(a) != Int.from_nat(a) or abs(Int.from_nat(a)) = a","Int.from_nat(abs(Int.from_nat(a))) != Int.from_nat(a)","abs(Int.from_nat(a)) != a"]}
{"goal":"Int.from_nat(abs(Int.from_nat(a)) * b) = Int.from_nat(a).mul_nat(b)","proof":["Int.from_nat(abs(Int.from_nat(a)) * b) = Int.from_nat(a).mul_nat(b) or Int.from_nat(a).is_negative"]}
{"goal":"Int.from_nat(a).mul_nat(b) = Int.from_nat(a * b)","proof":["b * a = a * b","b * abs(Int.from_nat(a)) = abs(Int.from_nat(a)) * b","let s0: Nat -> Nat satisfy { forall(x0: Nat) { s0(x0).suc = x0 or Nat.0 = x0 } }","s0(a).suc = a or a = Nat.0","s0(a).suc = a","sub_nat(a * b, Nat.0) = Int.from_nat(a * b)","sub_nat(abs(Int.from_nat(a)) * b, Nat.0) = Int.from_nat(abs(Int.from_nat(a)) * b)","abs(-Int.from_nat(a)) = abs(Int.from_nat(a))","-Int.from_nat(a) = neg_nat(a)","abs(neg_nat(s0(a).suc)) = s0(a).suc"]}
{"goal":"mul_nat_from_nat_left","proof":[]}
{"goal":"not 0.is_positive","proof":[]}
{"goal":"a * 0 = -a.mul_nat(Nat.0)","proof":["-a.mul_nat(abs(0)) = a * 0 or 0.is_positive","-a.mul_nat(abs(0)) != a * 0"]}
{"goal":"a * 0 = -0","proof":["-a.mul_nat(Nat.0) != -0","a.mul_nat(Nat.0) != 0","a.mul_nat(Nat.0) = 0"]}
{"goal":"mul_zero_right","proof":["-0 != 0"]}
{"goal":"a * Int.from_nat(n) = a.mul_nat(abs(Int.from_nat(n)))","proof":["a * 0 = 0","a.mul_nat(Nat.0) = 0","abs(Int.from_nat(n)) = n"]}
{"goal":"a * Int.from_nat(n) = a.mul_nat(abs(Int.from_nat(n)))","proof":["not Int.from_nat(n).is_positive or a.mul_nat(abs(Int.from_nat(n))) = a * Int.from_nat(n)","not Int.from_nat(n).is_positive","-Int.from_nat(abs(Int.from_nat(n))) = Int.from_nat(n) or Int.from_nat(n).is_positive","-Int.from_nat(abs(Int.from_nat(n))) != Int.from_nat(n) or Nat.0 = n","-Int.from_nat(abs(Int.from_nat(n))) != Int.from_nat(n)"]}
{"goal":"mul_nat_from_nat_right","proof":["abs(Int.from_nat(n)) = n"]}
{"goal":"a * b = 0","proof":["a * 0 != 0","a * 0 = 0"]}
{"goal":"a.mul_nat(abs(b)) = 0","proof":["a.mul_nat(abs(0)) != 0","a.mul_nat(Nat.0) = 0"]}
{"goal":"a * b = a.mul_nat(abs(b))","proof":["a.mul_nat(abs(b)) != 0"]}
{"goal":"a * b = a.mul_nat(abs(b))","proof":["not b.is_positive or a.mul_nat(abs(b)) = a * b","not b.is_positive","b.is_negative or b.is_positive or 0 = b"]}
{"goal":"mul_nonneg_right","proof":[]}
{"goal":"a * b = a.mul_nat(abs(b))","proof":["a.mul_nat(abs(b)) = a * b or b.is_negative"]}
{"goal":"mul_nonneg_nonneg","proof":["Int.from_nat(abs(a)).mul_nat(abs(b)) = Int.from_nat(abs(a) * abs(b))","Int.from_nat(abs(a)) = a or a.is_negative","Int.from_nat(abs(a)) = a"]}
{"goal":"a * b = -a.mul_nat(abs(b))","proof":["-a.mul_nat(abs(b)) = a * b or b.is_positive"]}
{"goal":"mul_nonneg_nonpos","proof":["Int.from_nat(abs(a)).mul_nat(abs(b)) = Int.from_nat(abs(a) * abs(b))","Int.from_nat(abs(a)) = a or a.is_negative","0 - Int.from_nat(abs(a) * abs(b)) = -Int.from_nat(abs(a) * abs(b))","0 - a.mul_nat(abs(b)) = -a.mul_nat(abs(b))","Int.from_nat(abs(a)) = a"]}
{"goal":"a * b = a.mul_nat(abs(b))","proof":["a.mul_nat(abs(b)) = a * b or b.is_negative"]}
{"goal":"mul_nonpos_nonneg","proof":["Int.from_nat(abs(a)).mul_nat(abs(b)) = Int.from_nat(abs(a) * abs(b))","(-Int.from_nat(abs(a))).mul_nat(abs(b)) = -Int.from_nat(abs(a)).mul_nat(abs(b))","-Int.from_nat(abs(a)) = a or a.is_positive","-Int.from_nat(abs(a)) = a"]}
{"goal":"a * b = -a.mul_nat(abs(b))","proof":["-a.mul_nat(abs(b)) = a * b or b.is_positive"]}
{"goal":"a * b = --Int.from_nat(abs(a) * abs(b))","proof":["Int.from_nat(abs(a)).mul_nat(abs(b)) = Int.from_nat(abs(a) * abs(b))","(-a).mul_nat(abs(b)) = -a.mul_nat(abs(b))","-Int.from_nat(abs(a)) = a or a.is_positive","-sub_nat(Nat.0, abs(a) * abs(b)) = sub_nat(abs(a) * abs(b), Nat.0)","-Int.from_nat(abs(a) * abs(b)) = sub_nat(Nat.0, abs(a) * abs(b))","sub_nat(abs(a) * abs(b), Nat.0) = Int.from_nat(abs(a) * abs(b))","--Int.from_nat(abs(a)) = Int.from_nat(abs(a))","-Int.from_nat(abs(a)) = a"]}
{"goal":"mul_nonpos_nonpos","proof":["--Int.from_nat(abs(a) * abs(b)) = Int.from_nat(abs(a) * abs(b))"]}
{"goal":"a * b = Int.from_nat(abs(a) * abs(b))","proof":["Int.from_nat(abs(a) * abs(b)) = a * b or a.is_negative or b.is_negative"]}
{"goal":"not Int.from_nat(abs(a) * abs(b)).is_negative","proof":["(a * b).is_negative","Int.from_nat(abs(a * b)) != a * b or not (a * b).is_negative","abs(Int.from_nat(abs(a) * abs(b))) = abs(a) * abs(b)","Int.from_nat(abs(a * b)) != a * b"]}
{"goal":"mul_nonneg_nonneg_nonneg","proof":[]}
{"goal":"a * b = -Int.from_nat(abs(a) * abs(b))","proof":["-Int.from_nat(abs(a) * abs(b)) = a * b or a.is_negative or b.is_positive"]}
{"goal":"not (-Int.from_nat(abs(a) * abs(b))).is_positive","proof":["(a * b).is_positive","-Int.from_nat(abs(a) * abs(b)) = sub_nat(Nat.0, abs(a) * abs(b))","(-(a * b)).pos_part = (a * b).neg_part","not (a * b).is_positive or (a * b).neg_part = Nat.0","(--Int.from_nat(abs(a) * abs(b))).is_negative = (-Int.from_nat(abs(a) * abs(b))).is_positive","sub_nat(abs(a) * abs(b), Nat.0) = Int.from_nat(abs(a) * abs(b))","Int.from_nat(abs(a) * abs(b)).pos_part = abs(a) * abs(b)","not (a * b).is_negative or not (a * b).is_positive","not (a * b).is_negative","--Int.from_nat(abs(a) * abs(b)) = Int.from_nat(abs(a) * abs(b))","(a * b).neg_part = Nat.0"]}
{"goal":"mul_nonneg_nonpos_nonpos","proof":[]}
{"goal":"a * b = -Int.from_nat(abs(a) * abs(b))","proof":["-Int.from_nat(abs(a) * abs(b)) = a * b or b.is_negative or a.is_positive"]}
{"goal":"not (-Int.from_nat(abs(a) * abs(b))).is_positive","proof":["(a * b).is_positive","-Int.from_nat(abs(a) * abs(b)) = sub_nat(Nat.0, abs(a) * abs(b))","(-(a * b)).pos_part = (a * b).neg_part","not (a * b).is_positive or (a * b).neg_part = Nat.0","(--Int.from_nat(abs(a) * abs(b))).is_negative = (-Int.from_nat(abs(a) * abs(b))).is_positive","sub_nat(abs(a) * abs(b), Nat.0) = Int.from_nat(abs(a) * abs(b))","Int.from_nat(abs(a) * abs(b)).pos_part = abs(a) * abs(b)","not (a * b).is_negative or not (a * b).is_positive","not (a * b).is_negative","--Int.from_nat(abs(a) * abs(b)) = Int.from_nat(abs(a) * abs(b))","(a * b).neg_part = Nat.0"]}
{"goal":"mul_nonpos_nonneg_nonpos","proof":[]}
{"goal":"a * b = Int.from_nat(abs(a) * abs(b))","proof":["Int.from_nat(abs(a) * abs(b)) = a * b or a.is_positive or b.is_positive"]}
{"goal":"not Int.from_nat(abs(a) * abs(b)).is_negative","proof":["(a * b).is_negative","Int.from_nat(abs(a * b)) != a * b or not (a * b).is_negative","abs(Int.from_nat(abs(a) * abs(b))) = abs(a) * abs(b)","Int.from_nat(abs(a * b)) != a * b"]}
{"goal":"mul_nonpos_nonpos_nonneg","proof":[]}
{"goal":"0 * a = 0","proof":["not a.is_positive or 0.mul_nat(abs(a)) = 0 * a","0.mul_nat(abs(a)) = 0","0.mul_nat(abs(a)) != 0 * a"]}
{"goal":"-0.mul_nat(abs(a)) = 0","proof":["0.mul_nat(abs(a)) = 0","-0 != 0"]}
{"goal":"0 * a = 0","proof":["not (0 * a).is_negative or 0.is_positive or a.is_positive","not (a * 0).is_negative or a.is_positive or 0.is_positive","not (0 * a).is_positive or 0.is_negative or a.is_positive","(0 * a).is_negative or (0 * a).is_positive or 0 * a = 0","not (0 * a).is_positive or 0.is_negative","not (0 * a).is_negative or 0.is_positive","not (a * 0).is_negative or 0.is_positive","a * 0 = 0","not (a * 0).is_negative","not (0 * a).is_negative","not 0.is_negative","(0 * a).is_positive","not (0 * a).is_positive"]}
{"goal":"mul_zero_left","proof":[]}
{"goal":"a * b = Int.from_nat(abs(a) * abs(b))","proof":["Int.from_nat(abs(a) * abs(b)) = a * b or a.is_negative or b.is_negative","b.is_negative or a.is_negative","not a.is_negative or not a.is_positive","not b.is_negative or not b.is_positive","not b.is_negative","not a.is_negative","a.is_negative"]}
{"goal":"b * a = Int.from_nat(abs(b) * abs(a))","proof":["Int.from_nat(abs(b) * abs(a)) = b * a or b.is_negative or a.is_negative","b.is_negative or a.is_negative","not a.is_negative or not a.is_positive","not b.is_negative or not b.is_positive","not b.is_negative","not a.is_negative","a.is_negative"]}
{"goal":"a * b = b * a","proof":["let s0: Nat satisfy { true }","sub_nat(abs(a) * abs(b) + s0, s0) = Int.from_nat(abs(a) * abs(b))","sub_nat(abs(b) * abs(a) + s0, s0) = Int.from_nat(abs(b) * abs(a))","abs(b) * abs(a) = abs(a) * abs(b)"]}
{"goal":"a * b = -Int.from_nat(abs(a) * abs(b))","proof":["-Int.from_nat(abs(a) * abs(b)) = a * b or a.is_negative or b.is_positive","a.is_negative","not a.is_negative or not a.is_positive"]}
{"goal":"b * a = -Int.from_nat(abs(b) * abs(a))","proof":["-Int.from_nat(abs(b) * abs(a)) = b * a or a.is_negative or b.is_positive","a.is_negative","not a.is_negative or not a.is_positive"]}
{"goal":"a * b = b * a","proof":["-Int.from_nat(abs(a) * abs(b)) = sub_nat(Nat.0, abs(a) * abs(b))","-Int.from_nat(abs(b) * abs(a)) = sub_nat(Nat.0, abs(b) * abs(a))","abs(b) * abs(a) = abs(a) * abs(b)"]}
{"goal":"a * b = -Int.from_nat(abs(a) * abs(b))","proof":["-Int.from_nat(abs(a) * abs(b)) = a * b or b.is_negative or a.is_positive","b.is_negative","not b.is_negative or not b.is_positive"]}
{"goal":"b * a = -Int.from_nat(abs(b) * abs(a))","proof":["-Int.from_nat(abs(b) * abs(a)) = b * a or b.is_negative or a.is_positive","b.is_negative","not b.is_negative or not b.is_positive"]}
{"goal":"a * b = b * a","proof":["-Int.from_nat(abs(a) * abs(b)) = sub_nat(Nat.0, abs(a) * abs(b))","-Int.from_nat(abs(b) * abs(a)) = sub_nat(Nat.0, abs(b) * abs(a))","abs(b) * abs(a) = abs(a) * abs(b)"]}
{"goal":"a * b = Int.from_nat(abs(a) * abs(b))","proof":["Int.from_nat(abs(a) * abs(b)) = a * b or a.is_positive or b.is_positive"]}
{"goal":"b * a = Int.from_nat(abs(b) * abs(a))","proof":["Int.from_nat(abs(b) * abs(a)) = b * a or b.is_positive or a.is_positive"]}
{"goal":"a * b = b * a","proof":["let s0: Nat satisfy { true }","sub_nat(abs(a) * abs(b) + s0, s0) = Int.from_nat(abs(a) * abs(b))","sub_nat(abs(b) * abs(a) + s0, s0) = Int.from_nat(abs(b) * abs(a))","abs(b) * abs(a) = abs(a) * abs(b)"]}
{"goal":"mul_comm","proof":[]}
{"goal":"1.is_positive","proof":[]}
{"goal":"a * 1 = a.mul_nat(Nat.1)","proof":["a * Int.from_nat(Nat.1) = a.mul_nat(Nat.1)"]}
{"goal":"a * 1 = Int.from_nat(abs(a) * Nat.1)","proof":["Int.from_nat(abs(a) * Nat.1) != a.mul_nat(Nat.1)","Int.from_nat(abs(a) * Nat.1) = a.mul_nat(Nat.1) or a.is_negative","a.is_negative","not a.is_positive or not a.is_negative"]}
{"goal":"a * 1 = Int.from_nat(abs(a))","proof":["abs(a) * Nat.1 = Nat.1 * abs(a)","sub_nat(abs(a) * Nat.1, Nat.0) = Int.from_nat(abs(a) * Nat.1)","sub_nat(abs(a), Nat.0) = Int.from_nat(abs(a))","Nat.1 * abs(a) = abs(a)"]}
{"goal":"a * 1 = a","proof":["Int.from_nat(abs(a)) != a","Int.from_nat(abs(a)) = a or a.is_negative","a.is_negative","not a.is_positive or not a.is_negative"]}
{"goal":"a * 1 = -Int.from_nat(abs(a) * Nat.1)","proof":["-Int.from_nat(abs(a) * Nat.1) != a.mul_nat(Nat.1)","-Int.from_nat(abs(a) * Nat.1) = a.mul_nat(Nat.1) or a.is_positive"]}
{"goal":"-Int.from_nat(abs(a)) = 0 + a","proof":["-Int.from_nat(abs(a)) = a or a.is_positive","0 + a = a","-Int.from_nat(abs(a)) = a","-Int.from_nat(abs(a)) != a"]}
{"goal":"a.mul_nat(Nat.0) + a = -Int.from_nat(abs(a))","proof":["a.mul_nat(Nat.0) + a != 0 + a","a.mul_nat(Nat.0) != 0","a.mul_nat(Nat.0) = 0"]}
{"goal":"a * 1 = -Int.from_nat(abs(a))","proof":["abs(a) * Nat.1 = Nat.1 * abs(a)","-Int.from_nat(abs(a) * Nat.1) = neg_nat(abs(a) * Nat.1)","-Int.from_nat(abs(a)) = neg_nat(abs(a))","Nat.1 * abs(a) = abs(a)"]}
{"goal":"a * 1 = a","proof":["-Int.from_nat(abs(a)) != a","-Int.from_nat(abs(a)) = a or a.is_positive"]}
{"goal":"mul_one_right","proof":[]}
{"goal":"mul_one_left","proof":["a * 1 = 1 * a","a * 1 != a","a * 1 = a"]}
{"goal":"-a * b = -(a * b)","proof":["not b.is_positive or (-a).mul_nat(abs(b)) = -a * b","not b.is_positive or a.mul_nat(abs(b)) = a * b","(-a).mul_nat(abs(b)) = -a.mul_nat(abs(b))","(-a).mul_nat(abs(b)) = -a * b","a.mul_nat(abs(b)) = a * b","-a.mul_nat(abs(b)) != -a * b"]}
{"goal":"--a.mul_nat(abs(b)) = -a * b","proof":["-(-a).mul_nat(abs(b)) = -a * b or b.is_positive","(-a).mul_nat(abs(b)) = -a.mul_nat(abs(b))","-(-a).mul_nat(abs(b)) != -a * b"]}
{"goal":"-a * b = -(a * b)","proof":["-a.mul_nat(abs(b)) = a * b or b.is_positive","-a.mul_nat(abs(b)) = a * b"]}
{"goal":"--b.mul_nat(abs(a)) = -a * b","proof":["b * Int.from_nat(abs(a)) = b.mul_nat(abs(a))","-Int.from_nat(abs(a)) = a or a.is_positive","b * -a = -a * b","--Int.from_nat(abs(a)) = Int.from_nat(abs(a))","--b.mul_nat(abs(a)) = b.mul_nat(abs(a))","-Int.from_nat(abs(a)) = a"]}
{"goal":"-a * b = -(a * b)","proof":["-b.mul_nat(abs(a)) = b * a or a.is_positive","b * a = a * b","-a * b != -(b * a)","-b.mul_nat(abs(a)) = b * a"]}
{"goal":"--a.mul_nat(abs(b)) = -a * b","proof":["-(-a).mul_nat(abs(b)) = -a * b or b.is_positive","(-a).mul_nat(abs(b)) = -a.mul_nat(abs(b))","-(-a).mul_nat(abs(b)) != -a * b"]}
{"goal":"-a * b = -(a * b)","proof":["-a.mul_nat(abs(b)) = a * b or b.is_positive","-a.mul_nat(abs(b)) = a * b"]}
{"goal":"mul_neg_left","proof":[]}
{"goal":"mul_neg_right","proof":["-b * a = -(b * a)","a * -b = -b * a","b * a = a * b","-b * a != -(a * b)"]}
{"goal":"(a + b) * c = (a + b).mul_nat(abs(c))","proof":["(a + b).mul_nat(abs(c)) = (a + b) * c or c.is_negative"]}
{"goal":"(a + b) * c = a.mul_nat(abs(c)) + b.mul_nat(abs(c))","proof":["a.mul_nat(abs(c)) + b.mul_nat(abs(c)) = (a + b).mul_nat(abs(c))"]}
{"goal":"(a + b) * c = a * c + b.mul_nat(abs(c))","proof":["a * Int.from_nat(abs(c)) = a.mul_nat(abs(c))","a * c = c * a","b.mul_nat(abs(c)) + a.mul_nat(abs(c)) = a.mul_nat(abs(c)) + b.mul_nat(abs(c))","c * a + b.mul_nat(abs(c)) = b.mul_nat(abs(c)) + c * a","Int.from_nat(abs(c)) = c or c.is_negative","Int.from_nat(abs(c)) = c"]}
{"goal":"(a + b) * c = a * c + b * c","proof":["b * Int.from_nat(abs(c)) = b.mul_nat(abs(c))","a * c = c * a","a * c + b.mul_nat(abs(c)) = b.mul_nat(abs(c)) + a * c","b * c + c * a = c * a + b * c","Int.from_nat(abs(c)) = c or c.is_negative","Int.from_nat(abs(c)) = c"]}
{"goal":"mul_distrib_nonneg_right","proof":[]}
{"goal":"(-c).is_positive","proof":["(--c).is_negative = (-c).is_positive","not (--c).is_negative","--c = c"]}
{"goal":"(a + b) * -c = a * -c + b * -c","proof":["a * -c + b * -c = (a + b) * -c or (-c).is_negative","(-c).is_negative","not (-c).is_negative or not (-c).is_positive"]}
{"goal":"(a + b) * -c = -(a * c) + b * -c","proof":["a * -c = -(a * c)"]}
{"goal":"(a + b) * -c = -(a * c) + -(b * c)","proof":["b * -c = -(b * c)"]}
{"goal":"(a + b) * -c = -(a * c + b * c)","proof":["-(a * c) + -(b * c) = -(a * c + b * c)"]}
{"goal":"-((a + b) * c) = -(a * c + b * c)","proof":["(a + b) * -c != -((a + b) * c)","(a + b) * -c = -((a + b) * c)"]}
{"goal":"(a + b) * c = a * c + b * c","proof":["a * c = c * a","--((a + b) * c) = (a + b) * c","--(c * a + b * c) = c * a + b * c"]}
{"goal":"(a + b) * c = a * c + b * c","proof":["a * c + b * c = (a + b) * c or c.is_negative"]}
{"goal":"mul_distrib_right","proof":[]}
{"goal":"a * (b + c) = (b + c) * a","proof":["a * (b + c) = (b + c) * a"]}
{"goal":"a * (b + c) = b * a + c * a","proof":["b * a + c * a != (b + c) * a","b * a + c * a = (b + c) * a"]}
{"goal":"a * (b + c) = a * b + c * a","proof":["b * a = a * b"]}
{"goal":"mul_distrib_left","proof":["c * a = a * c"]}
{"goal":"(a - b) * c = (a + -b) * c","proof":["a + -b != a - b","a + -b = a - b"]}
{"goal":"(a - b) * c = a * c + -b * c","proof":["a * c + -b * c = (a + -b) * c"]}
{"goal":"(a - b) * c = a * c + -(b * c)","proof":["-b * c = -(b * c)"]}
{"goal":"(a - b) * c = a * c - b * c","proof":["a * c + -(b * c) = a * c - b * c"]}
{"goal":"mul_sub_distrib_right","proof":[]}
{"goal":"a * (b - c) = a * (b + -c)","proof":["b + -c != b - c","b + -c = b - c"]}
{"goal":"a * (b - c) = a * b + a * -c","proof":["a * b + a * -c = a * (b + -c)"]}
{"goal":"a * (b - c) = a * b + -(a * c)","proof":["a * -c = -(a * c)"]}
{"goal":"a * (b - c) = a * b - a * c","proof":["a * b + -(a * c) = a * b - a * c"]}
{"goal":"mul_sub_distrib_left","proof":[]}
{"goal":"abs(a * b) = abs(a) * abs(b)","proof":["Int.from_nat(abs(a) * abs(b)) = a * b or a.is_negative or b.is_negative","Int.from_nat(abs(a) * abs(b)) != a * b or abs(a) * abs(b) = abs(a * b)","not a.is_negative or not a.is_positive","not b.is_negative or not b.is_positive","not b.is_negative","not a.is_negative","Int.from_nat(abs(a) * abs(b)) != a * b"]}
{"goal":"abs(a.mul_nat(abs(b))) = abs(a * b)","proof":["a * -b = -(a * b)","a * Int.from_nat(abs(b)) = a.mul_nat(abs(b))","-Int.from_nat(abs(b)) = b or b.is_positive","abs(-a.mul_nat(abs(b))) = abs(a.mul_nat(abs(b)))","--(a * b) = a * b","--Int.from_nat(abs(b)) = Int.from_nat(abs(b))","-Int.from_nat(abs(b)) = b"]}
{"goal":"abs(a * b) = abs(a) * abs(b)","proof":["Int.from_nat(abs(a)).mul_nat(abs(b)) = Int.from_nat(abs(a) * abs(b))","sub_nat(a.pos_part, a.neg_part) = a","not a.is_positive or a.pos_part = abs(a)","not a.is_positive or a.neg_part = Nat.0","sub_nat(abs(a), Nat.0) = Int.from_nat(abs(a))","abs(Int.from_nat(abs(a) * abs(b))) = abs(a) * abs(b)","a.neg_part = Nat.0","a.pos_part = abs(a)"]}
{"goal":"abs(a * b) = abs(b * a)","proof":["b * a != a * b","b * a = a * b"]}
{"goal":"abs(a) * abs(b) = abs(b) * abs(a)","proof":["abs(b) * abs(a) = abs(a) * abs(b)"]}
{"goal":"abs(b.mul_nat(abs(a))) = abs(b * a)","proof":["b * -a = -(b * a)","b * Int.from_nat(abs(a)) = b.mul_nat(abs(a))","-Int.from_nat(abs(a)) = a or a.is_positive","b * a = a * b","abs(-b.mul_nat(abs(a))) = abs(b.mul_nat(abs(a)))","--(a * b) = a * b","--Int.from_nat(abs(a)) = Int.from_nat(abs(a))","-Int.from_nat(abs(a)) = a"]}
{"goal":"b.pos_part * abs(a) = abs(a * b)","proof":["Int.from_nat(b.pos_part).mul_nat(abs(a)) = Int.from_nat(b.pos_part * abs(a))","sub_nat(b.pos_part, b.neg_part) = b","not b.is_positive or b.pos_part = abs(b)","b.pos_part * abs(a) = abs(a) * b.pos_part","not b.is_positive or b.neg_part = Nat.0","sub_nat(b.pos_part, Nat.0) = Int.from_nat(b.pos_part)","abs(Int.from_nat(abs(a) * abs(b))) = abs(a) * abs(b)","b.neg_part = Nat.0","b.pos_part = abs(b)"]}
{"goal":"abs(a * b) = abs(a) * abs(b)","proof":["not b.is_positive or b.pos_part = abs(b)","b.pos_part * abs(a) = abs(a) * b.pos_part","abs(a) * b.pos_part = abs(a * b)","b.pos_part = abs(b)"]}
{"goal":"abs(a * b) = abs(a) * abs(b)","proof":["Int.from_nat(abs(a) * abs(b)) = a * b or a.is_positive or b.is_positive","Int.from_nat(abs(a) * abs(b)) != a * b or abs(a) * abs(b) = abs(a * b)","Int.from_nat(abs(a) * abs(b)) != a * b"]}
{"goal":"abs_mul","proof":[]}
