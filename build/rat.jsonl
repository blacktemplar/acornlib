{"goal":"Rat.0 <= Rat.from_nat(n)","proof":["Rat.0 <= Rat.from_nat(n)"]}
{"goal":"Rat.1 + Rat.0 <= Rat.1 + Rat.from_nat(n)","proof":["not Rat.0 <= Rat.from_nat(n) or (Rat.from_nat(n) - Rat.0).is_positive or Rat.from_nat(n) = Rat.0","not (Rat.1 + Rat.from_nat(n) - (Rat.1 + Rat.0)).is_positive or Rat.1 + Rat.0 <= Rat.1 + Rat.from_nat(n)","Rat.from_nat(n) + Rat.1 - Rat.1 = Rat.from_nat(n)","Rat.from_nat(n) + Rat.1 = Rat.1 + Rat.from_nat(n)","Rat.1 + Rat.from_nat(n) != Rat.1 + Rat.0 or Rat.1 + Rat.0 <= Rat.1 + Rat.from_nat(n)","Rat.from_nat(n) - Rat.0 = Rat.from_nat(n)","Rat.1 + Rat.0 = Rat.1","Rat.1 + Rat.from_nat(n) != Rat.1 + Rat.0","Rat.from_nat(n) != Rat.0","(Rat.from_nat(n) - Rat.0).is_positive","Rat.from_nat(n).is_positive","not (Rat.1 + Rat.from_nat(n) - (Rat.1 + Rat.0)).is_positive","not (Rat.1 + Rat.from_nat(n) - Rat.1).is_positive","not (Rat.from_nat(n) + Rat.1 - Rat.1).is_positive"]}
{"goal":"Rat.0 < Rat.1 + Rat.from_nat(n)","proof":["not (Rat.1 + Rat.0).is_positive or not Rat.1 + Rat.0 <= Rat.1 + Rat.from_nat(n) or (Rat.1 + Rat.from_nat(n)).is_positive","not (Rat.1 + Rat.from_nat(n)).is_positive or Rat.0 < Rat.1 + Rat.from_nat(n)","not (Rat.1 + Rat.from_nat(n)).is_positive","not (Rat.1 + Rat.0).is_positive","Rat.1 + Rat.0 = Rat.1","not Rat.1.is_positive"]}
{"goal":"(Rat.1 + Rat.from_nat(n)).is_positive","proof":["not Rat.0 < Rat.1 + Rat.from_nat(n) or (Rat.1 + Rat.from_nat(n)).is_positive"]}
{"goal":"Rat.1.is_positive","proof":[]}
{"goal":"iop_pos","proof":["Rat.1 / (Rat.1 + Rat.from_nat(n)) = iop(n)","Rat.1 * (Rat.1 + Rat.from_nat(n)).reciprocal = Rat.1 / (Rat.1 + Rat.from_nat(n))","not (Rat.1 + Rat.from_nat(n)).is_positive or (Rat.1 + Rat.from_nat(n)).reciprocal.is_positive","Rat.1 * (Rat.1 + Rat.from_nat(n)).reciprocal = (Rat.1 + Rat.from_nat(n)).reciprocal","(Rat.1 + Rat.from_nat(n)).reciprocal.is_positive"]}
{"goal":"pos_ne_zero","proof":["Rat.0.is_positive","not Rat.0.is_positive or Rat.0 < Rat.0","not Rat.0 < Rat.0"]}
{"goal":"iop_ne_zero","proof":["not iop(n).is_positive or iop(n) != Rat.0","not iop(n).is_positive","iop(n).is_positive"]}
{"goal":"Rat.1.is_positive","proof":[]}
{"goal":"Rat.from_nat(n) >= Rat.0","proof":["Rat.0 <= Rat.from_nat(n) = Rat.from_nat(n) >= Rat.0","not Rat.0 <= Rat.from_nat(n)","Rat.0 <= Rat.from_nat(n)"]}
{"goal":"Rat.0 <= Rat.from_nat(n)","proof":["Rat.0 <= Rat.from_nat(n) = Rat.from_nat(n) >= Rat.0"]}
{"goal":"(Rat.1 + Rat.from_nat(n)).is_positive","proof":["not Rat.from_nat(n) < Rat.from_nat(n) + Rat.1 or not Rat.0 <= Rat.from_nat(n) or Rat.0 < Rat.from_nat(n) + Rat.1","not Rat.1.is_positive or Rat.from_nat(n) < Rat.from_nat(n) + Rat.1","Rat.from_nat(n) + Rat.1 = Rat.1 + Rat.from_nat(n)","not (Rat.from_nat(n) + Rat.1).is_positive","not Rat.0 < Rat.from_nat(n) + Rat.1 or (Rat.from_nat(n) + Rat.1).is_positive","Rat.from_nat(n) < Rat.from_nat(n) + Rat.1","not Rat.from_nat(n) < Rat.from_nat(n) + Rat.1 or Rat.0 < Rat.from_nat(n) + Rat.1","not Rat.0 < Rat.from_nat(n) + Rat.1","Rat.0 < Rat.from_nat(n) + Rat.1"]}
{"goal":"Rat.1 + Rat.from_nat(n) != Rat.0","proof":["Rat.0.is_positive","let s0: Rat -> Rat satisfy { forall(x0: Rat) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Rat) { not x1.is_positive or s0(x1) < x1 } }","not Rat.0.is_positive or s0(Rat.0) < Rat.0","s0(Rat.0) < Rat.0","not s0(Rat.0) < Rat.0 or not Rat.0 < s0(Rat.0)","not Rat.0.is_positive or s0(Rat.0).is_positive","s0(Rat.0).is_positive","not s0(Rat.0).is_positive or Rat.0 < s0(Rat.0)","not Rat.0 < s0(Rat.0)","Rat.0 < s0(Rat.0)"]}
{"goal":"(Rat.1 + Rat.from_nat(n)).reciprocal = iop(n)","proof":["Rat.1 / (Rat.1 + Rat.from_nat(n)) = iop(n)","Rat.1 / (Rat.1 + Rat.from_nat(n)) = (Rat.1 + Rat.from_nat(n)).reciprocal or Rat.1 + Rat.from_nat(n) = Rat.0","Rat.1 / (Rat.1 + Rat.from_nat(n)) != (Rat.1 + Rat.from_nat(n)).reciprocal","Rat.1 / (Rat.1 + Rat.from_nat(n)) = (Rat.1 + Rat.from_nat(n)).reciprocal"]}
{"goal":"iop_recip","proof":["(Rat.1 + Rat.from_nat(n)).reciprocal.reciprocal = Rat.1 + Rat.from_nat(n) or Rat.1 + Rat.from_nat(n) = Rat.0","(Rat.1 + Rat.from_nat(n)).reciprocal.reciprocal != Rat.1 + Rat.from_nat(n)","(Rat.1 + Rat.from_nat(n)).reciprocal.reciprocal = Rat.1 + Rat.from_nat(n)"]}
{"goal":"iop(n) * iop(n).reciprocal = Rat.1","proof":["iop(n) * iop(n).reciprocal = Rat.1 or iop(n) = Rat.0","iop(n) = Rat.0","iop(n) != Rat.0"]}
{"goal":"iop(n) * (Rat.1 + Rat.from_nat(n)) = Rat.1","proof":["Rat.1 + Rat.from_nat(n) = iop(n).reciprocal"]}
{"goal":"iop(n) * Rat.1 + iop(n) * Rat.from_nat(n) = Rat.1","proof":["iop(n) * Rat.1 + iop(n) * Rat.from_nat(n) = iop(n) * (Rat.1 + Rat.from_nat(n))"]}
{"goal":"iop(n) + iop(n) * Rat.from_nat(n) = Rat.1","proof":["iop(n) * Rat.1 = Rat.1 * iop(n)","iop(n) * Rat.from_nat(n) + iop(n) * Rat.1 = iop(n) * Rat.1 + iop(n) * Rat.from_nat(n)","iop(n) + iop(n) * Rat.from_nat(n) = iop(n) * Rat.from_nat(n) + iop(n)","Rat.1 * iop(n) = iop(n)"]}
{"goal":"iop(n) * Rat.from_nat(n) < iop(n) * Rat.from_nat(n) + iop(n)","proof":["not iop(n).is_positive or iop(n) * Rat.from_nat(n) < iop(n) * Rat.from_nat(n) + iop(n)","not iop(n).is_positive","iop(n).is_positive"]}
{"goal":"iop_mul_lt_one","proof":["iop(n) * Rat.from_nat(n) < Rat.1 = Rat.1 > iop(n) * Rat.from_nat(n)","iop(n) * Rat.from_nat(n) < iop(n) * Rat.from_nat(n) + iop(n) = iop(n) * Rat.from_nat(n) + iop(n) > iop(n) * Rat.from_nat(n)","iop(n) + iop(n) * Rat.from_nat(n) = iop(n) * Rat.from_nat(n) + iop(n)"]}
{"goal":"a.num.is_positive","proof":["a.num.is_positive = a.is_positive"]}
{"goal":"a.num <= a.denom * a.num","proof":["not a.num.divides(a.denom * a.num) or not (a.denom * a.num).is_positive or a.num <= a.denom * a.num","not a.denom.is_positive or not a.num.is_positive or (a.denom * a.num).is_positive","a.denom * a.num != a.denom * a.num or a.num.divides(a.denom * a.num)","a.denom.is_positive","a.num.divides(a.denom * a.num)","not (a.denom * a.num).is_positive"]}
{"goal":"a.num <= a.num * a.denom","proof":["a.num * a.denom = a.denom * a.num"]}
{"goal":"pos_lte_num","proof":["not a.num <= a.num * a.denom or a <= Rat.from_int(a.num)"]}
{"goal":"lt_some_int","proof":["not a < Rat.from_int(rat_base.floor_impl(a) + Int.1)","a < Rat.from_int(rat_base.floor_impl(a) + Int.1)"]}
{"goal":"exists(k0: Int) { a < Rat.from_int(k0) }","proof":["not a < Rat.from_int(rat_base.floor_impl(a) + Int.1)","a < Rat.from_int(rat_base.floor_impl(a) + Int.1)"]}
{"goal":"i <= Int.from_nat(n)","proof":["not i <= Int.from_nat(lib(int.int_base).abs(i))","i <= Int.from_nat(lib(int.int_base).abs(i))"]}
{"goal":"Rat.from_int(i) <= Rat.from_nat(n)","proof":["not i <= Int.from_nat(n) or Rat.from_int(i) <= Rat.from_int(Int.from_nat(n))","Rat.from_int(Int.from_nat(n)) = Rat.from_nat(n)","Rat.from_int(i) <= Rat.from_int(Int.from_nat(n))","not Rat.from_int(i) <= Rat.from_int(Int.from_nat(n))"]}
{"goal":"lt_some_nat","proof":["not a < Rat.from_nat(n)","not a < Rat.from_int(i) or not Rat.from_int(i) <= Rat.from_nat(n) or a < Rat.from_nat(n)","not Rat.from_int(i) <= Rat.from_nat(n) or not a < Rat.from_int(i)"]}
{"goal":"eps.reciprocal.is_positive","proof":["not eps.is_positive or eps.reciprocal.is_positive"]}
{"goal":"exists(k0: Nat) { eps.reciprocal < Rat.from_nat(k0) }","proof":["let s0: Rat -> Nat satisfy { forall(x0: Rat) { x0 < Rat.from_nat(s0(x0)) } }","not eps.reciprocal < Rat.from_nat(s0(eps.reciprocal))","eps.reciprocal < Rat.from_nat(s0(eps.reciprocal))"]}
{"goal":"Rat.from_nat(n) <= Rat.from_nat(i)","proof":["not n < i or Rat.from_nat(n) < Rat.from_nat(i)","not i <= n or not n <= i or i = n","not Rat.from_nat(n) < Rat.from_nat(i) or Rat.from_nat(n) <= Rat.from_nat(i)","not Rat.from_nat(n) < Rat.from_nat(i)","i <= n or n < i","Rat.from_nat(i) != Rat.from_nat(n) or Rat.from_nat(n) <= Rat.from_nat(i)","Rat.from_nat(i) != Rat.from_nat(n)","i != n","not i <= n","not n < i","n < i"]}
{"goal":"eps.reciprocal < Rat.from_nat(i)","proof":["not eps.reciprocal < Rat.from_nat(n) or not Rat.from_nat(n) <= Rat.from_nat(i) or eps.reciprocal < Rat.from_nat(i)","not Rat.from_nat(n) <= Rat.from_nat(i) or not eps.reciprocal < Rat.from_nat(n)"]}
{"goal":"eps.reciprocal * eps < Rat.from_nat(i) * eps","proof":["not eps.is_positive or not eps.reciprocal < Rat.from_nat(i) or eps.reciprocal * eps < Rat.from_nat(i) * eps"]}
{"goal":"Rat.1 < Rat.from_nat(i) * eps","proof":["not eps.reciprocal * eps < Rat.from_nat(i) * eps or not Rat.1 <= eps.reciprocal * eps or Rat.1 < Rat.from_nat(i) * eps","eps.reciprocal * eps = Rat.1 or Rat.0 = eps","eps.reciprocal * eps != Rat.1 or Rat.1 <= eps.reciprocal * eps","not eps.is_positive or Rat.0 != eps","Rat.0 != eps","not eps.reciprocal * eps < Rat.from_nat(i) * eps or not Rat.1 <= eps.reciprocal * eps","not Rat.1 <= eps.reciprocal * eps","eps.reciprocal * eps = Rat.1","eps.reciprocal * eps != Rat.1"]}
{"goal":"Rat.from_nat(i) * iop(i) < Rat.1","proof":["iop(i) * Rat.from_nat(i) < Rat.1","iop(i) * Rat.from_nat(i) = Rat.from_nat(i) * iop(i)"]}
{"goal":"Rat.from_nat(i) * iop(i) < Rat.from_nat(i) * eps","proof":["not Rat.from_nat(i) * iop(i) < Rat.1 or not Rat.1 < Rat.from_nat(i) * eps or Rat.from_nat(i) * iop(i) < Rat.from_nat(i) * eps","not Rat.from_nat(i) * iop(i) < Rat.1 or not Rat.1 < Rat.from_nat(i) * eps"]}
{"goal":"iop(i) < eps","proof":["not Rat.from_nat(i) * iop(i) < Rat.from_nat(i) * eps or not Rat.from_nat(i).is_positive or iop(i) < eps","not Rat.from_nat(i).is_positive","not eps.reciprocal <= Rat.from_nat(i) or not eps.reciprocal.is_positive or Rat.from_nat(i).is_positive","not eps.reciprocal < Rat.from_nat(i) or eps.reciprocal <= Rat.from_nat(i)","eps.reciprocal <= Rat.from_nat(i)"]}
{"goal":"iop_gets_lt","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not iop(s0(x1)) < eps } }","not iop(s0(n)) < eps","n <= s0(n)","not n <= s0(n) or iop(s0(n)) < eps"]}
{"goal":"three_is_positive","proof":["Rat.3.num.is_positive = Rat.3.is_positive","not Rat.3.num.is_positive","Rat.3.num.is_positive or Rat.3.num.pos_part = Nat.0","Rat.from_int(Int.3).num = Int.3","Int.from_nat(Nat.3).pos_part = Nat.3","Rat.3.num.pos_part = Nat.0"]}
{"goal":"Int.3 = Int.2 + Int.1","proof":["Int.from_nat(Nat.2) + Int.from_nat(Nat.1) = Int.from_nat(Nat.2 + Nat.1)","Nat.2 + Nat.1 = Nat.1 + Nat.2"]}
{"goal":"Rat.3 = Rat.2 + Rat.1","proof":["Rat.from_int(Int.2) + Rat.from_int(Int.1) = Rat.from_int(Int.2 + Int.1)"]}
{"goal":"Rat.3 * x = (Rat.2 + Rat.1) * x","proof":["Rat.2 + Rat.1 != Rat.3"]}
{"goal":"Rat.3 * x = Rat.2 * x + Rat.1 * x","proof":["Rat.2 * x + Rat.1 * x = (Rat.2 + Rat.1) * x"]}
{"goal":"times_three","proof":["x + (x + x) = x + x + x","Rat.2 * x = x + x","Rat.2 * x + Rat.1 * x = Rat.1 * x + Rat.2 * x","Rat.1 * x = x"]}
{"goal":"x / Rat.3 + x / Rat.3 + x / Rat.3 = x / Rat.3 + x / Rat.3 + x / Rat.3","proof":[]}
{"goal":"x / Rat.3 + x / Rat.3 + x / Rat.3 = (x + x + x) / Rat.3","proof":["Rat.3 * (x * Rat.3.reciprocal) = Rat.3 * x * Rat.3.reciprocal","x + x + x = Rat.3 * x","x / Rat.3 + x / Rat.3 + x / Rat.3 = Rat.3 * (x / Rat.3)","x / Rat.3 + x / Rat.3 + x / Rat.3 != Rat.3 * x / Rat.3","Rat.3 * x * Rat.3.reciprocal = Rat.3 * x / Rat.3","x * Rat.3.reciprocal = x / Rat.3","Rat.3 * (x / Rat.3) != Rat.3 * x / Rat.3","Rat.3 * x * Rat.3.reciprocal != Rat.3 * (x / Rat.3)"]}
{"goal":"x / Rat.3 + x / Rat.3 + x / Rat.3 = Rat.3 * x / Rat.3","proof":["(x + x + x) / Rat.3 != Rat.3 * x / Rat.3","x + x + x != Rat.3 * x","x + x + x = Rat.3 * x"]}
{"goal":"Rat.3 != Rat.0","proof":["not Rat.3.is_positive or Rat.3 != Rat.0","not Rat.3.is_positive"]}
{"goal":"x * Rat.3 / Rat.3 = x","proof":["x * Rat.3 / Rat.3 = x or Rat.3 = Rat.0"]}
{"goal":"x / Rat.3 + x / Rat.3 + x / Rat.3 = x","proof":["x / Rat.3 + x / Rat.3 + x / Rat.3 = Rat.3 * (x / Rat.3)","Rat.3 * (x / Rat.3) != x","Rat.3 * (x / Rat.3) = x or Rat.3 = Rat.0"]}
{"goal":"three_thirds","proof":[]}
{"goal":"b.is_positive","proof":[]}
{"goal":"a * b = Rat.0","proof":["b * a = a * b","b * a != Rat.0","b * Rat.0 = Rat.0"]}
{"goal":"a * b < b","proof":["not Rat.0 < b","not b.is_positive or Rat.0 < b"]}
{"goal":"b.is_positive and a * b < b","proof":["not a * b < b"]}
{"goal":"a.is_positive","proof":["not Rat.0 <= a or Rat.0 < a or Rat.0 = a","not Rat.0 < a or a.is_positive","Rat.0 < a","not Rat.0 < a"]}
{"goal":"exists(k0: Rat) { k0.is_positive and k0 < b }","proof":["let s0: Nat satisfy { true }","let s1: (Nat, Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat, x2: Nat) { x0 <= s1(x0, x1, x2) } and forall(x3: Nat, x4: Nat, x5: Nat) { x3 <= s1(x4, x3, x5) } and forall(x6: Nat, x7: Nat, x8: Nat) { x6 <= s1(x7, x8, x6) } }","let s2: Rat -> Nat satisfy { forall(x9: Rat, x10: Nat) { not s2(x9) <= x10 or not x9.is_positive or iop(x10) < x9 } }","not iop(s1(s0, s0, s2(b))) < b or not iop(s1(s0, s0, s2(b))).is_positive","not s2(b) <= s1(s0, s0, s2(b)) or not b.is_positive or iop(s1(s0, s0, s2(b))) < b","s2(b) <= s1(s0, s0, s2(b))","iop(s1(s0, s0, s2(b))).is_positive","not iop(s1(s0, s0, s2(b))) < b","not s2(b) <= s1(s0, s0, s2(b))"]}
{"goal":"eps.is_positive","proof":["not (c / a).is_positive","not c.is_positive or not a.reciprocal.is_positive or (c * a.reciprocal).is_positive","c * a.reciprocal = c / a","not a.is_positive or a.reciprocal.is_positive","a.reciprocal.is_positive","not a.reciprocal.is_positive or (c * a.reciprocal).is_positive","not (c * a.reciprocal).is_positive","(c * a.reciprocal).is_positive"]}
{"goal":"a * eps = c","proof":["a * (c / a) = c or Rat.0 = a","a * (c / a) != c"]}
{"goal":"a * eps < b","proof":[]}
{"goal":"eps.is_positive and a * eps < b","proof":["not a * eps < b"]}
{"goal":"some_mul_lt","proof":["let s0: Rat satisfy { s0.is_positive or Rat.0 = a and (a * s0 < b or Rat.0 = a) }","not a * b < b or not b.is_positive","not a * s0 < b or not s0.is_positive","not a * b < b","Rat.0 != a","s0.is_positive","a * s0 < b","not a * s0 < b"]}
{"goal":"a < b + eps","proof":["not a.is_close(b, eps) or a < b + eps"]}
{"goal":"a * r < b * r + eps * r","proof":["not r.is_positive or not a < b + eps or a * r < (b + eps) * r","b * r + eps * r = (b + eps) * r","not a * r < (b + eps) * r"]}
{"goal":"b < a + eps","proof":["not b.is_close(a, eps) or b < a + eps","not b.is_close(a, eps)","not a.is_close(b, eps) or b.is_close(a, eps)"]}
{"goal":"b * r < a * r + eps * r","proof":["not r.is_positive or not b < a + eps or b * r < (a + eps) * r","a * r + eps * r = (a + eps) * r","not b * r < (a + eps) * r"]}
{"goal":"b - eps < a","proof":["not a.is_close(b, eps) or a > b - eps","b - eps < a = a > b - eps","a > b - eps","not a > b - eps"]}
{"goal":"r * (b - eps) < a * r","proof":["not r.is_positive or not b - eps < a or (b - eps) * r < a * r","(b - eps) * r = r * (b - eps)","not (b - eps) * r < a * r"]}
{"goal":"close_mul_pos","proof":["not a * r < b * r + eps * r or not a * r > b * r - eps * r or (a * r).is_close(b * r, eps * r)","r * b - r * eps = r * (b - eps)","r * (b - eps) < a * r = a * r > r * (b - eps)","b * r = r * b","eps * r = r * eps","not a * r > b * r - eps * r"]}
{"goal":"(a - b).abs < eps","proof":["(a - b).abs < eps = a.is_close(b, eps)"]}
{"goal":"(-a - -b).abs = (b - a).abs","proof":["-a - -b != b - a","Rat.0 - (a + -b) = Rat.0 - a - -b","a + -b = a - b","-(a - b) = b - a","Rat.0 - (a - b) = -(a - b)","Rat.0 - a = -a"]}
{"goal":"(-a - -b).abs < eps","proof":["not (b - a).abs < eps","(b - a).abs < eps = b.is_close(a, eps)","not b.is_close(a, eps)","not a.is_close(b, eps) or b.is_close(a, eps)"]}
{"goal":"close_neg","proof":["(-a - -b).abs < eps = (-a).is_close(-b, eps)"]}
{"goal":"a * c = Rat.0","proof":["a * Rat.0 != Rat.0","a * Rat.0 = Rat.0"]}
{"goal":"b * c = Rat.0","proof":["b * Rat.0 != Rat.0","b * Rat.0 = Rat.0"]}
{"goal":"a * c <= b * c","proof":[]}
{"goal":"c.is_positive","proof":["not Rat.0 <= c or (c - Rat.0).is_positive or Rat.0 = c","c - Rat.0 = c","(c - Rat.0).is_positive","not (c - Rat.0).is_positive"]}
{"goal":"a * c <= b * c","proof":["not c.is_positive or not a <= b or a * c <= b * c"]}
{"goal":"lte_mul_nonneg","proof":[]}
{"goal":"not b < a","proof":["let s0: Rat -> Int satisfy { forall(x0: Rat) { Rat.from_int(s0(x0)) <= x0 } and forall(x1: Rat) { x1 < Rat.from_int(s0(x1) + Int.1) } }","not b < Rat.from_int(s0(a) + Int.1) or not a < Rat.from_int(s0(a) + Int.1)","not b < a or not a < Rat.from_int(s0(a) + Int.1) or b < Rat.from_int(s0(a) + Int.1)","a < Rat.from_int(s0(a) + Int.1)","not a < Rat.from_int(s0(a) + Int.1) or b < Rat.from_int(s0(a) + Int.1)","not b < Rat.from_int(s0(a) + Int.1)","b < Rat.from_int(s0(a) + Int.1)"]}
{"goal":"not a <= b","proof":["let s0: Rat -> Int satisfy { forall(x0: Rat) { Rat.from_int(s0(x0)) <= x0 } and forall(x1: Rat) { x1 < Rat.from_int(s0(x1) + Int.1) } }","not b < Rat.from_int(s0(b) + Int.1) or not a < Rat.from_int(s0(b) + Int.1)","not b < Rat.from_int(s0(b) + Int.1) or not a <= b or a < Rat.from_int(s0(b) + Int.1)","b < Rat.from_int(s0(b) + Int.1)","not b < Rat.from_int(s0(b) + Int.1) or a < Rat.from_int(s0(b) + Int.1)","not a < Rat.from_int(s0(b) + Int.1)","a < Rat.from_int(s0(b) + Int.1)"]}
{"goal":"b != a","proof":["b != a or a <= b"]}
{"goal":"not a < b","proof":["let s0: Rat -> Int satisfy { forall(x0: Rat) { Rat.from_int(s0(x0)) <= x0 } and forall(x1: Rat) { x1 < Rat.from_int(s0(x1) + Int.1) } }","not b < Rat.from_int(s0(b) + Int.1) or not a < Rat.from_int(s0(b) + Int.1)","not a < b or not b < Rat.from_int(s0(b) + Int.1) or a < Rat.from_int(s0(b) + Int.1)","b < Rat.from_int(s0(b) + Int.1)","not b < Rat.from_int(s0(b) + Int.1) or a < Rat.from_int(s0(b) + Int.1)","not a < Rat.from_int(s0(b) + Int.1)","a < Rat.from_int(s0(b) + Int.1)"]}
{"goal":"false","proof":["a > b or a < b or b = a","a > b = b < a","a > b","not a > b"]}
{"goal":"bounding_both","proof":["let s0: Rat satisfy { a < s0 and b < s0 }","not b < s0 or not a < s0","not a < s0"]}
{"goal":"exists(k0: Rat) { a(Nat.0).abs < k0 }","proof":["let s0: Rat satisfy { true }","let s1: (Rat, Rat) -> Rat satisfy { forall(x0: Rat, x1: Rat) { x0 < s1(x0, x1) } and forall(x2: Rat, x3: Rat) { x2 < s1(x3, x2) } }","not a(Nat.0).abs < s1(s0, a(Nat.0).abs)","a(Nat.0).abs < s1(s0, a(Nat.0).abs)"]}
{"goal":"i <= Nat.0 implies a(i).abs < zero_bound","proof":["not i <= Nat.0 or i = Nat.0","i = Nat.0"]}
{"goal":"finite_seq_abs_bounded(a, Nat.0)","proof":["let (s0: (Nat -> Rat, Nat) -> Rat, s1: (Nat -> Rat, Nat, Rat) -> Nat) satisfy { forall(x0: Nat, x1: Nat, x2: Nat -> Rat) { not x0 <= x1 or not finite_seq_abs_bounded(x2, x1) or x2(x0).abs < s0(x2, x1) } and forall(x3: Nat -> Rat, x4: Nat, x5: Rat) { s1(x3, x4, x5) <= x4 or finite_seq_abs_bounded(x3, x4) } and forall(x6: Nat -> Rat, x7: Nat, x8: Rat) { not x6(s1(x6, x7, x8)).abs < x8 or finite_seq_abs_bounded(x6, x7) } }","not s1(a, Nat.0, zero_bound) <= Nat.0 or a(s1(a, Nat.0, zero_bound)).abs < zero_bound","s1(a, Nat.0, zero_bound) <= Nat.0 or finite_seq_abs_bounded(a, Nat.0)","not a(s1(a, Nat.0, zero_bound)).abs < zero_bound or finite_seq_abs_bounded(a, Nat.0)","s1(a, Nat.0, zero_bound) <= Nat.0","not a(s1(a, Nat.0, zero_bound)).abs < zero_bound"]}
{"goal":"f(Nat.0)","proof":["finite_seq_abs_bounded(a, Nat.0) = f(Nat.0)"]}
{"goal":"exists(k0: Rat) { forall(x0: Nat) { x0 <= k implies a(x0).abs < k0 } }","proof":["let (s1: (Nat -> Rat, Nat) -> Rat, s2: (Nat -> Rat, Nat, Rat) -> Nat) satisfy { forall(x2: Nat, x3: Nat, x4: Nat -> Rat) { not x2 <= x3 or not finite_seq_abs_bounded(x4, x3) or x4(x2).abs < s1(x4, x3) } and forall(x5: Nat -> Rat, x6: Nat, x7: Rat) { s2(x5, x6, x7) <= x6 or finite_seq_abs_bounded(x5, x6) } and forall(x8: Nat -> Rat, x9: Nat, x10: Rat) { not x8(s2(x8, x9, x10)).abs < x10 or finite_seq_abs_bounded(x8, x9) } }","let s0: Rat -> Nat satisfy { forall(x0: Rat) { s0(x0) <= k } and forall(x1: Rat) { not a(s0(x1)).abs < x1 } }","not a(s0(s1(a, k))).abs < s1(a, k)","s0(s1(a, k)) <= k","finite_seq_abs_bounded(a, k) = f(k)","not s0(s1(a, k)) <= k or not finite_seq_abs_bounded(a, k) or a(s0(s1(a, k))).abs < s1(a, k)","finite_seq_abs_bounded(a, k)","not s0(s1(a, k)) <= k or not finite_seq_abs_bounded(a, k)"]}
{"goal":"exists(k0: Rat) { a(k.suc).abs < k0 }","proof":["let s0: Rat satisfy { true }","let s1: (Rat, Rat) -> Rat satisfy { forall(x0: Rat, x1: Rat) { x0 < s1(x0, x1) } and forall(x2: Rat, x3: Rat) { x2 < s1(x3, x2) } }","not a(k.suc).abs < s1(s0, a(k.suc).abs)","a(k.suc).abs < s1(s0, a(k.suc).abs)"]}
{"goal":"exists(k0: Rat) { base_bound < k0 and extra_bound < k0 }","proof":["let s0: (Rat, Rat) -> Rat satisfy { forall(x0: Rat, x1: Rat) { x0 < s0(x0, x1) } and forall(x2: Rat, x3: Rat) { x2 < s0(x3, x2) } }","not extra_bound < s0(base_bound, extra_bound) or not base_bound < s0(base_bound, extra_bound)","extra_bound < s0(base_bound, extra_bound)","not base_bound < s0(base_bound, extra_bound)","base_bound < s0(base_bound, extra_bound)"]}
{"goal":"a(i).abs < bound","proof":["not i <= k or a(i).abs < base_bound","not a(i).abs < base_bound or not base_bound < bound or a(i).abs < bound","not a(i).abs < base_bound or not base_bound < bound","a(i).abs < base_bound","not a(i).abs < base_bound"]}
{"goal":"i = k.suc","proof":["not i <= k.suc or not k.suc <= i or k.suc = i","not k.suc <= i","not k < i or k.suc <= i","i <= k or k < i","not k < i","k < i"]}
{"goal":"a(i).abs < extra_bound","proof":["not a(k.suc).abs < extra_bound"]}
{"goal":"a(i).abs < bound","proof":["not a(i).abs < extra_bound or not extra_bound < bound or a(i).abs < bound","not a(i).abs < extra_bound or not extra_bound < bound"]}
{"goal":"finite_seq_abs_bounded(a, k.suc)","proof":["let (s0: (Nat -> Rat, Nat) -> Rat, s1: (Nat -> Rat, Nat, Rat) -> Nat) satisfy { forall(x0: Nat, x1: Nat, x2: Nat -> Rat) { not x0 <= x1 or not finite_seq_abs_bounded(x2, x1) or x2(x0).abs < s0(x2, x1) } and forall(x3: Nat -> Rat, x4: Nat, x5: Rat) { s1(x3, x4, x5) <= x4 or finite_seq_abs_bounded(x3, x4) } and forall(x6: Nat -> Rat, x7: Nat, x8: Rat) { not x6(s1(x6, x7, x8)).abs < x8 or finite_seq_abs_bounded(x6, x7) } }","not s1(a, k.suc, bound) <= k.suc or a(s1(a, k.suc, bound)).abs < bound","s1(a, k.suc, bound) <= k.suc or finite_seq_abs_bounded(a, k.suc)","not a(s1(a, k.suc, bound)).abs < bound or finite_seq_abs_bounded(a, k.suc)","s1(a, k.suc, bound) <= k.suc","not a(s1(a, k.suc, bound)).abs < bound"]}
{"goal":"f(k.suc)","proof":["finite_seq_abs_bounded(a, k.suc) = f(k.suc)"]}
{"goal":"finite_seq_abs_bounded","proof":["let (s1: (Nat -> Rat, Nat) -> Rat, s2: (Nat -> Rat, Nat, Rat) -> Nat) satisfy { forall(x2: Nat, x3: Nat, x4: Nat -> Rat) { not x2 <= x3 or not finite_seq_abs_bounded(x4, x3) or x4(x2).abs < s1(x4, x3) } and forall(x5: Nat -> Rat, x6: Nat, x7: Rat) { s2(x5, x6, x7) <= x6 or finite_seq_abs_bounded(x5, x6) } and forall(x8: Nat -> Rat, x9: Nat, x10: Rat) { not x8(s2(x8, x9, x10)).abs < x10 or finite_seq_abs_bounded(x8, x9) } }","let s0: Rat -> Nat satisfy { forall(x0: Rat) { s0(x0) <= n } and forall(x1: Rat) { not a(s0(x1)).abs < x1 } }","not a(s0(s1(a, n))).abs < s1(a, n)","s0(s1(a, n)) <= n","let s3: Nat -> Bool -> Nat satisfy { forall(x11: Nat -> Bool, x12: Nat) { not x11(Nat.0) or x11(s3(x11)) or x11(x12) } and forall(x13: Nat -> Bool, x14: Nat) { not x13(s3(x13).suc) or not x13(Nat.0) or x13(x14) } }","not f(s3(f)) or f(s3(f).suc)","finite_seq_abs_bounded(a, n) = f(n)","not s0(s1(a, n)) <= n or not finite_seq_abs_bounded(a, n) or a(s0(s1(a, n))).abs < s1(a, n)","not f(s3(f).suc) or not f(Nat.0) or f(n)","not f(Nat.0) or f(s3(f)) or f(s3(f))","not s0(s1(a, n)) <= n or not finite_seq_abs_bounded(a, n)","not finite_seq_abs_bounded(a, n)","not f(n)","f(s3(f)) or f(s3(f))","f(s3(f))","not f(s3(f).suc)","f(s3(f).suc)"]}
{"goal":"a.abs = -a","proof":["not a.is_negative or a.abs = -a"]}
{"goal":"reduce(a.abs, b).abs = reduce(a, b).abs","proof":["Rat.from_int(lattice.unit_sign(a)) * reduce(Int.from_nat(abs(a)), b) = reduce(lattice.unit_sign(a) * Int.from_nat(abs(a)), b)","lattice.unit_sign(a) * Int.from_nat(abs(a)) = a","-Rat.1 * reduce(a.abs, b) = -reduce(a.abs, b)","not a.is_negative or -Int.1 = lattice.unit_sign(a)","(-reduce(a.abs, b)).abs = reduce(a.abs, b).abs","Int.from_nat(abs(a)) = a.abs","-Int.1 = lattice.unit_sign(a)","(-reduce(a.abs, b)).abs != reduce(a, b).abs","-reduce(a.abs, b) != reduce(a, b)"]}
{"goal":"a.abs = a","proof":["a.abs = a or a.is_negative"]}
{"goal":"reduce(a.abs, b).abs = reduce(a, b).abs","proof":["Rat.from_int(int.unit_sign(a)) * reduce(Int.from_nat(lib(int.int_base).abs(a)), b) = reduce(int.unit_sign(a) * Int.from_nat(lib(int.int_base).abs(a)), b)","int.unit_sign(a) * Int.from_nat(lib(int.int_base).abs(a)) = a","-Rat.1 * reduce(a.abs, b) = -reduce(a.abs, b)","not a.is_negative or -Int.1 = int.unit_sign(a)","(-reduce(a.abs, b)).abs = reduce(a.abs, b).abs","Int.from_nat(lib(int.int_base).abs(a)) = a.abs","-Int.1 = int.unit_sign(a)","(-reduce(a.abs, b)).abs != reduce(a, b).abs","-reduce(a.abs, b) != reduce(a, b)"]}
{"goal":"abs_reduce_left","proof":[]}
{"goal":"reduce_neg_num","proof":["Rat.from_int(-Int.1) * reduce(a, b) = reduce(-Int.1 * a, b)","-Int.1 * a = -(Int.1 * a)","-Rat.1 * reduce(a, b) = -reduce(a, b)","Int.1 * a = a"]}
{"goal":"reduce(a, -b) = reduce(-Int.1 * a, -Int.1 * -b)","proof":["reduce(-Int.1, -Int.1) * reduce(a, -b) = reduce(-Int.1 * a, -Int.1 * -b)","reduce(-Int.1 * a, -Int.1 * -b) = reduce(a, -b) or -Int.1 = Int.0","-Int.1 = Int.0","reduce(Rat.from_int(-Int.1).num, Rat.from_int(-Int.1).denom) = Rat.from_int(-Int.1)","Rat.new(-Int.1, Int.1) = Rat.from_int(-Int.1)","Rat.new(Int.1, Int.1) = Rat.from_int(Int.1)","Rat.1 * reduce(a, -b) = reduce(a, -b)","Rat.from_int(-Int.1).num = -Int.1","--Int.1 = Int.1"]}
{"goal":"-Int.1 * -b = b","proof":["-Int.1 * -b = -(Int.1 * -b)","-(Int.1 * -b) != b","b + -b != Int.0 or --b = b","b + -b = Int.0","Int.1 * -b = -b","--b != b"]}
{"goal":"reduce_neg_denom","proof":["Rat.from_int(-Int.1) * reduce(a, -Int.1 * -b) = reduce(-Int.1 * a, -Int.1 * -b)","-Rat.1 * reduce(a, b) = -reduce(a, b)"]}
{"goal":"b.abs = -b","proof":["not b.is_negative or b.abs = -b"]}
{"goal":"reduce(a, b.abs).abs = reduce(a, b).abs","proof":["-reduce(a, b) = reduce(a, -b)","(-reduce(a, b)).abs = reduce(a, b).abs"]}
{"goal":"b.abs = b","proof":["b.abs = b or b.is_negative"]}
{"goal":"reduce(a, b.abs).abs = reduce(a, b).abs","proof":[]}
{"goal":"abs_reduce_right","proof":[]}
{"goal":"not reduce(a, b).is_negative","proof":["Rat.0 - reduce(a, b) = -reduce(a, b)","not reduce(a, b).is_negative or (-reduce(a, b)).is_positive","(-reduce(a, b)).is_positive","(-reduce(a, b)).num.is_positive = (-reduce(a, b)).is_positive","reduce(a, b).num.is_positive = reduce(a, b).is_positive","not reduce(a, b).is_negative or not reduce(a, b).is_positive","not reduce(a, b).is_positive","Rat.0 - Rat.0 = Rat.0","reduce(Int.0, b) = Rat.0"]}
{"goal":"not reduce(a, b).is_negative","proof":["-reduce(a, b) = reduce(a, -b)","-(Int.0 - Int.0) = Int.0 - Int.0","not reduce(a, b).is_negative or (-reduce(a, b)).is_positive","(-reduce(a, b)).is_positive","(-reduce(a, b)).num.is_positive = (-reduce(a, b)).is_positive","reduce(a, b).num.is_positive = reduce(a, b).is_positive","not reduce(a, b).is_negative or not reduce(a, b).is_positive","not reduce(a, b).is_positive","Int.0 - Int.0 = Int.0"]}
{"goal":"a.is_positive","proof":["a.is_negative or a.is_positive or Int.0 = a"]}
{"goal":"b.is_positive","proof":["b.is_negative or b.is_positive or Int.0 = b"]}
{"goal":"reduce(a, b).is_positive","proof":["not a.is_positive or not b.is_positive or reduce(a, b).is_positive"]}
{"goal":"not reduce(a, b).is_negative","proof":["not reduce(a, b) < Rat.0 or not Rat.0 < reduce(a, b)","not reduce(a, b).is_negative or reduce(a, b) < Rat.0","reduce(a, b) < Rat.0","not reduce(a, b).is_positive or Rat.0 < reduce(a, b)","not Rat.0 < reduce(a, b)","Rat.0 < reduce(a, b)"]}
{"goal":"reduce_nonneg","proof":[]}
{"goal":"not a.abs.is_negative","proof":["Int.from_nat(lib(int.int_base).abs(a.abs)) != a.abs or not a.abs.is_negative","Int.from_nat(lib(int.int_base).abs(a.abs)) != a.abs","Int.from_nat(lib(int.int_base).abs(a)) = a.abs","lib(int.int_base).sub_nat(lib(int.int_base).abs(a), Nat.0) = Int.from_nat(lib(int.int_base).abs(a))","lib(int.int_base).sub_nat(lib(int.int_base).abs(a.abs), Nat.0) = Int.from_nat(lib(int.int_base).abs(a.abs))","lib(int.int_base).abs(Int.from_nat(lib(int.int_base).abs(a))) = lib(int.int_base).abs(a)"]}
{"goal":"not b.abs.is_negative","proof":["Int.from_nat(lib(int.int_base).abs(b.abs)) != b.abs or not b.abs.is_negative","Int.from_nat(lib(int.int_base).abs(b.abs)) != b.abs","Int.from_nat(lib(int.int_base).abs(b)) = b.abs","lib(int.int_base).sub_nat(lib(int.int_base).abs(b), Nat.0) = Int.from_nat(lib(int.int_base).abs(b))","lib(int.int_base).sub_nat(lib(int.int_base).abs(b.abs), Nat.0) = Int.from_nat(lib(int.int_base).abs(b.abs))","lib(int.int_base).abs(Int.from_nat(lib(int.int_base).abs(b))) = lib(int.int_base).abs(b)"]}
{"goal":"not reduce(a.abs, b.abs).is_negative","proof":["not reduce(a.abs, b.abs).is_negative or a.abs.is_negative or b.abs.is_negative"]}
{"goal":"reduce_abs","proof":["reduce(a.abs, b.abs).abs = reduce(a.abs, b).abs","reduce(a.abs, b).abs = reduce(a, b).abs","reduce(a.abs, b.abs).abs = reduce(a.abs, b.abs) or reduce(a.abs, b.abs).is_negative","reduce(a.abs, b).abs != reduce(a.abs, b.abs)","reduce(a.abs, b.abs).abs = reduce(a.abs, b.abs)","reduce(a.abs, b.abs).abs != reduce(a.abs, b.abs)"]}
{"goal":"p = q","proof":["q * r != p * r or Rat.0 = r or q = p","Rat.0 = r","not r.is_positive or Rat.0 != r"]}
{"goal":"p <= q","proof":["q != p or p <= q"]}
{"goal":"p * r < q * r","proof":["not p * r <= q * r or p * r < q * r or q * r = p * r"]}
{"goal":"p < q","proof":["not p * r < q * r or not r.is_positive or p < q"]}
{"goal":"p <= q","proof":["not p < q or p <= q"]}
{"goal":"lte_cancel_mul_pos","proof":[]}
{"goal":"reduce(a, c) = reduce(b, c)","proof":["Int.0 != Int.0 or reduce(a, Int.0) = Rat.0","Int.0 != Int.0 or reduce(b, Int.0) = Rat.0","reduce(a, Int.0) = Rat.0","reduce(b, Int.0) = Rat.0"]}
{"goal":"reduce(a, c) <= reduce(b, c)","proof":["reduce(b, c) != reduce(a, c) or reduce(a, c) <= reduce(b, c)"]}
{"goal":"c.is_positive","proof":["c.is_negative or c.is_positive or Int.0 = c"]}
{"goal":"reduce(a, c) * Rat.from_int(c) = Rat.from_int(a)","proof":["Rat.from_int(c) * reduce(a, c) = reduce(c * a, c)","reduce(c, c) * Rat.from_int(a) = reduce(c * a, c)","reduce(c, c) = Rat.1 or Int.0 = c","reduce(a, c) * Rat.from_int(c) = Rat.from_int(c) * reduce(a, c)","Rat.1 * Rat.from_int(a) = Rat.from_int(a)","reduce(c, c) = Rat.1"]}
{"goal":"reduce(b, c) * Rat.from_int(c) = Rat.from_int(b)","proof":["Rat.from_int(c) * reduce(b, c) = reduce(c * b, c)","reduce(c, c) * Rat.from_int(b) = reduce(c * b, c)","reduce(c, c) = Rat.1 or Int.0 = c","reduce(b, c) * Rat.from_int(c) = Rat.from_int(c) * reduce(b, c)","Rat.1 * Rat.from_int(b) = Rat.from_int(b)","reduce(c, c) = Rat.1"]}
{"goal":"Rat.from_int(a) <= Rat.from_int(b)","proof":["not a <= b or Rat.from_int(a) <= Rat.from_int(b)"]}
{"goal":"reduce(a, c) * Rat.from_int(c) <= reduce(b, c) * Rat.from_int(c)","proof":[]}
{"goal":"Rat.from_int(c).is_positive","proof":["Rat.from_int(c).num.is_positive = Rat.from_int(c).is_positive","not Rat.from_int(c).num.is_positive","Rat.from_int(c).num = c"]}
{"goal":"reduce(a, c) <= reduce(b, c)","proof":["not reduce(a, c) * Rat.from_int(c) <= reduce(b, c) * Rat.from_int(c) or not Rat.from_int(c).is_positive or reduce(a, c) <= reduce(b, c)"]}
{"goal":"reduce_lte","proof":[]}
{"goal":"exists(k0: Int, k1: Int, k2: Int) { a = reduce(k0, k2) and b = reduce(k1, k2) }","proof":["let (s0: (Rat, Rat) -> Int, s1: (Rat, Rat) -> Int, s2: (Rat, Rat) -> Int) satisfy { forall(x0: Rat, x1: Rat) { reduce(s0(x0, x1), s2(x0, x1)) = x0 } and forall(x2: Rat, x3: Rat) { reduce(s1(x2, x3), s2(x2, x3)) = x3 } }","reduce(s1(b, a), s2(b, a)) != a or reduce(s0(b, a), s2(b, a)) != b","reduce(s1(b, a), s2(b, a)) = a","reduce(s0(b, a), s2(b, a)) = b","reduce(s1(b, a), s2(b, a)) != a"]}
{"goal":"a + b = reduce(an + bn, c)","proof":["reduce(an, c) + reduce(bn, c) = reduce(an + bn, c)"]}
{"goal":"(a + b).abs = reduce((an + bn).abs, c.abs)","proof":["reduce((an + bn).abs, c.abs) = reduce(an + bn, c).abs"]}
{"goal":"(an + bn).abs <= an.abs + bn.abs","proof":["(an + bn).abs <= an.abs + bn.abs"]}
{"goal":"Int.from_nat(abs(c.abs)) = c.abs","proof":["Int.from_nat(abs(c)) = c.abs","abs(Int.from_nat(abs(c))) = abs(c)"]}
{"goal":"not c.abs.is_negative","proof":["Int.from_nat(lib(int.int_base).abs(c.abs)) != c.abs or not c.abs.is_negative"]}
{"goal":"reduce((an + bn).abs, c.abs) <= reduce(an.abs + bn.abs, c.abs)","proof":["not (an + bn).abs <= an.abs + bn.abs or reduce((an + bn).abs, c.abs) <= reduce(an.abs + bn.abs, c.abs) or c.abs.is_negative"]}
{"goal":"(a + b).abs <= reduce(an.abs + bn.abs, c.abs)","proof":["not reduce((an + bn).abs, c.abs) <= reduce(an.abs + bn.abs, c.abs)"]}
{"goal":"reduce(an.abs + bn.abs, c.abs) = reduce(an, c).abs + reduce(bn, c).abs","proof":["reduce(an.abs, c.abs) + reduce(bn.abs, c.abs) = reduce(an.abs + bn.abs, c.abs)","reduce(an.abs, c.abs) = reduce(an, c).abs","reduce(bn.abs, c.abs) = reduce(bn, c).abs"]}
{"goal":"reduce(an.abs + bn.abs, c.abs) = a.abs + b.abs","proof":[]}
{"goal":"triangle_ineq","proof":["not (a + b).abs <= reduce(an.abs + bn.abs, c.abs)"]}
{"goal":"a0 * (b0 - b1) + b1 * (a0 - a1) = a0 * b0 - a0 * b1 + b1 * a0 - b1 * a1","proof":["a0 * b0 - a0 * b1 = a0 * (b0 - b1)","b1 * a0 - b1 * a1 = b1 * (a0 - a1)","a0 * b0 - a0 * b1 + (b1 * a0 + -(b1 * a1)) = a0 * b0 - a0 * b1 + b1 * a0 + -(b1 * a1)","a0 * (b0 - b1) + b1 * a0 + -(b1 * a1) = a0 * (b0 - b1) + b1 * a0 - b1 * a1","b1 * a0 + -(b1 * a1) = b1 * a0 - b1 * a1"]}
{"goal":"a0 * (b0 - b1) + b1 * (a0 - a1) = a0 * b0 - a1 * b1","proof":["a0 * b0 - a0 * b1 + a0 * b1 = a0 * b0","a1 * b1 = b1 * a1","b1 * a0 = a0 * b1","a0 * (b0 - b1) + b1 * (a0 - a1) != a0 * b0 - b1 * a1","a0 * b0 - a0 * b1 + a0 * b1 - b1 * a1 = a0 * (b0 - b1) + b1 * (a0 - a1)"]}
{"goal":"(a0 * b0 - a1 * b1).abs = (a0 * (b0 - b1) + b1 * (a0 - a1)).abs","proof":["a0 * (b0 - b1) + b1 * (a0 - a1) != a0 * b0 - a1 * b1"]}
{"goal":"(a0 * (b0 - b1) + b1 * (a0 - a1)).abs <= (a0 * (b0 - b1)).abs + (b1 * (a0 - a1)).abs","proof":["(a0 * (b0 - b1) + b1 * (a0 - a1)).abs <= (a0 * (b0 - b1)).abs + (b1 * (a0 - a1)).abs"]}
{"goal":"diff_mul_bound","proof":["reduce((a0 * (b0 - b1)).abs.num * (b1 * (a0 - a1)).abs.denom + (b1 * (a0 - a1)).abs.num * (a0 * (b0 - b1)).abs.denom, (a0 * (b0 - b1)).abs.denom * (b1 * (a0 - a1)).abs.denom) = (a0 * (b0 - b1)).abs + (b1 * (a0 - a1)).abs","reduce((a0.abs * (b0 - b1).abs).num * (b1.abs * (a0 - a1).abs).denom + (b1.abs * (a0 - a1).abs).num * (a0.abs * (b0 - b1).abs).denom, (a0.abs * (b0 - b1).abs).denom * (b1.abs * (a0 - a1).abs).denom) = a0.abs * (b0 - b1).abs + b1.abs * (a0 - a1).abs","a0.abs * (b0 - b1).abs = (a0 * (b0 - b1)).abs","b1.abs * (a0 - a1).abs = (b1 * (a0 - a1)).abs"]}
{"goal":"nonneg_lt_imp_pos","proof":["not Rat.0 <= a or not a < b or Rat.0 < b","a.is_negative or a.abs = a","not Rat.0 < b or b.is_positive","not Rat.0 < b","Rat.0 <= a.abs","a.abs = a","not Rat.0 <= a or Rat.0 < b","not Rat.0 <= a"]}
{"goal":"a * c <= b * c","proof":["not Rat.0 <= c or not a <= b or a * c <= b * c","not a < b or a <= b","not Rat.0 <= c or not a <= b","c.is_negative or c.abs = c","Rat.0 <= c.abs","c.abs = c","a <= b","not Rat.0 <= c"]}
{"goal":"b.is_positive","proof":["not a < b or a.is_negative or b.is_positive"]}
{"goal":"b * c < b * d","proof":["not c < d or not b.is_positive or c * b < d * b","b * c = c * b","d * b = b * d","not b * c < d * b","not c * b < d * b"]}
{"goal":"lt_pos_mul_lt_pos","proof":["not a * c < b * c or not b * c < b * d or a * c < b * d","not a * c <= b * c or a * c < b * c or b * c = a * c","not b * c < b * d or not a * c < b * c","not a * c < b * c","b * c = a * c"]}
{"goal":"abs_nonneg","proof":["(Rat.1 * a.abs).abs = (Rat.1 * a).abs","not a.abs.is_negative or a.abs.abs = -a.abs","a.abs.abs = -a.abs","(-a).abs = a.abs","not a.abs.is_negative or (-a.abs).is_positive","(-a.abs).is_positive","not a.abs.is_negative or not a.abs.is_positive","not a.abs.is_positive","Rat.1 * (-a).abs = (-a).abs","Rat.1 * a = a"]}
{"goal":"not b.is_negative","proof":["not b < a or not a <= b or b < b","not a.is_positive or not a <= b or b.is_positive","a.is_negative or a.is_positive or Rat.0 = a","not b.is_negative or b < Rat.0","b < Rat.0","not b.is_negative or not b.is_positive","not b.is_positive","not a.is_positive","Rat.0 = a","not b < b","b < a","not b < a or b < b"]}
{"goal":"not d.is_negative","proof":["not d < c or not c <= d or d < d","not c.is_positive or not c <= d or d.is_positive","c.is_negative or c.is_positive or Rat.0 = c","not d.is_negative or d < Rat.0","d < Rat.0","not d.is_negative or not d.is_positive","not d.is_positive","not c.is_positive","Rat.0 = c","not d < d","d < c","not d < c or d < d"]}
{"goal":"c * b <= d * b","proof":["not Rat.0 <= b or not c <= d or c * b <= d * b","not Rat.0 <= b","not b.is_positive or not c <= d or c * b <= d * b","not b.is_positive","b.is_negative or b.is_positive or Rat.0 = b","Rat.0 = b"]}
{"goal":"a * c <= b * d","proof":["c * a = a * c","d * a = a * d"]}
{"goal":"a < b","proof":["not a <= b or a < b or b = a"]}
{"goal":"a * c <= b * d","proof":["not a * c <= b * c","c <= c","not Rat.0 <= c or not a <= b or a * c <= b * c","not Rat.0 <= c","not c.is_positive or not a <= b or a * c <= b * c","not c.is_positive","c.is_negative or c.is_positive or Rat.0 = c","Rat.0 = c"]}
{"goal":"c < d","proof":["not c <= d or c < d or d = c"]}
{"goal":"a * c < b * d","proof":["not a < b or not c < d or a * c < b * d or a.is_negative or c.is_negative"]}
{"goal":"a * c <= b * d","proof":["not a * c < b * d or a * c <= b * d"]}
{"goal":"lte_mul_lte","proof":[]}
{"goal":"add_div_distrib","proof":["a * c.reciprocal + b * c.reciprocal = (a + b) * c.reciprocal","(a + b) * c.reciprocal = (a + b) / c","a * c.reciprocal = a / c","b * c.reciprocal = b / c"]}
{"goal":"sub_div_distrib","proof":["c.reciprocal * a - c.reciprocal * b = c.reciprocal * (a - b)","(a - b) * c.reciprocal = (a - b) / c","a * c.reciprocal = a / c","b * c.reciprocal = b / c","(a - b) * c.reciprocal = c.reciprocal * (a - b)","a * c.reciprocal = c.reciprocal * a","b * c.reciprocal = c.reciprocal * b"]}
{"goal":"a * b = Rat.0","proof":["b * a = a * b","b * a != Rat.0","b * Rat.0 = Rat.0"]}
{"goal":"(a * b).reciprocal = Rat.0","proof":["Rat.0.reciprocal != Rat.0","reduce(Rat.0.denom, Rat.0.num) = Rat.0.reciprocal","Rat.0.num != Int.0 or reduce(Rat.0.denom, Rat.0.num) = Rat.0","reduce(Rat.0.denom, Rat.0.num) != Rat.0"]}
{"goal":"(a * b).reciprocal = a.reciprocal * b.reciprocal","proof":["reduce(a.denom, a.num) = a.reciprocal","b.reciprocal * Rat.0 = Rat.0 * b.reciprocal","a.num != Int.0 or reduce(a.denom, a.num) = Rat.0","b.reciprocal * Rat.0 = Rat.0","a.num = Int.0","reduce(a.denom, a.num) * b.reciprocal != (a * b).reciprocal","reduce(a.denom, a.num) * b.reciprocal != Rat.0","reduce(a.denom, a.num) = Rat.0","Rat.0 * b.reciprocal != Rat.0"]}
{"goal":"(a * b).reciprocal = a.reciprocal * b.reciprocal","proof":["a * b * a / a = a * b or Rat.0 = a","Rat.0 * a.reciprocal = Rat.0 / a","reduce((a * b).denom, (a * b).num) = (a * b).reciprocal","reduce(b.denom, b.num) = b.reciprocal","b * a = a * b","b.reciprocal * a.reciprocal = a.reciprocal * b.reciprocal","b.num != Int.0 or reduce(b.denom, b.num) = Rat.0","Rat.new(Rat.0.num, Rat.0.denom) = Rat.0","a * b * a / a = a * b","a * Rat.0 = Rat.0","b.num = Int.0","reduce(b.denom, b.num) = Rat.0"]}
{"goal":"(a * b).reciprocal * (a * b) = Rat.1","proof":["a * Rat.0 + a * b = a * (Rat.0 + b)","a * (Rat.0 * a / a) = Rat.0 * a or Rat.0 = a","Rat.0 * a * a / a = Rat.0 * a or Rat.0 = a","Rat.new(Int.0, Int.1) * a / a = Rat.new(Int.0, Int.1) or Rat.0 = a","Rat.new(b.num, b.denom) * a / a = Rat.new(b.num, b.denom) or Rat.0 = a","(a * b).reciprocal * (a * b) = Rat.1 or a * b = Rat.0","a * b = Rat.0","b * a = a * b","Rat.new(b.num, b.denom) = b","Rat.0 + b = b","Rat.0 * a + Rat.0 = Rat.0 * a","Rat.0 * a * a / a = Rat.0 * a","Rat.new(Int.0, Int.1) * a / a = Rat.new(Int.0, Int.1)","Rat.new(b.num, b.denom) * a / a = Rat.new(b.num, b.denom)","a * (Rat.0 * a / a) = Rat.0 * a"]}
{"goal":"(a * b).reciprocal = a.reciprocal * b.reciprocal","proof":["(a * b).reciprocal * a * b = (a * b).reciprocal * (a * b)","(a * b).reciprocal * a * b / b = (a * b).reciprocal * a or Rat.0 = b","(a * b).reciprocal * a / a = (a * b).reciprocal or Rat.0 = a","Rat.1 / b = b.reciprocal or Rat.0 = b","Rat.1 / b = b.reciprocal","b.reciprocal * a.reciprocal = b.reciprocal / a","b.reciprocal * a.reciprocal = a.reciprocal * b.reciprocal","(a * b).reciprocal * a / a = (a * b).reciprocal","(a * b).reciprocal * a * b / b = (a * b).reciprocal * a"]}
{"goal":"recip_mul","proof":[]}
{"goal":"a / b * (c / d) = a * b.reciprocal * (c * d.reciprocal)","proof":["reduce((a * b.reciprocal).num * (c * d.reciprocal).num, (a * b.reciprocal).denom * (c * d.reciprocal).denom) = a * b.reciprocal * (c * d.reciprocal)","reduce((a / b).num * (c / d).num, (a / b).denom * (c / d).denom) = a / b * (c / d)","a * b.reciprocal = a / b","c * d.reciprocal = c / d"]}
{"goal":"a / b * (c / d) = a * c * (b.reciprocal * d.reciprocal)","proof":["a * b.reciprocal * (c * d.reciprocal) = a * b.reciprocal * c * d.reciprocal","a * c * (b.reciprocal * d.reciprocal) = a * c * b.reciprocal * d.reciprocal","b.reciprocal * (a * c) = b.reciprocal * a * c","a * b.reciprocal = b.reciprocal * a","b.reciprocal * (a * c) = a * c * b.reciprocal","d.reciprocal * (a * b.reciprocal * c) = a * b.reciprocal * c * d.reciprocal","d.reciprocal * (a * c * b.reciprocal) = a * c * b.reciprocal * d.reciprocal"]}
{"goal":"b.reciprocal * d.reciprocal = (b * d).reciprocal","proof":["b.reciprocal * d.reciprocal = (b * d).reciprocal"]}
{"goal":"a / b * (c / d) = a * c * (b * d).reciprocal","proof":["a * c * (b.reciprocal * d.reciprocal) != a / b * (c / d)"]}
{"goal":"mul_fractions","proof":["a * c * (b * d).reciprocal = a * c / (b * d)"]}
{"goal":"a / a * (b / c) = a * b / (a * c)","proof":["a * b / (a * c) = a / a * (b / c)"]}
{"goal":"cancel_left_num_denom","proof":["a * a.reciprocal = Rat.1 or Rat.0 = a","a * a.reciprocal = a / a","b / c * (a / a) = a / a * (b / c)","b / c * Rat.1 = b / c","a * a.reciprocal = Rat.1"]}
{"goal":"cancel_to_reciprocal","proof":["a * Rat.1 / (a * b) = a / a * (Rat.1 / b)","a * a.reciprocal = Rat.1 or Rat.0 = a","Rat.1 * b.reciprocal = Rat.1 / b","a * a.reciprocal = a / a","Rat.1 * b.reciprocal = b.reciprocal","a * Rat.1 = a","a * a.reciprocal = Rat.1"]}
{"goal":"(b - a) / (a * b) = b / (a * b) - a / (a * b)","proof":["b / (a * b) - a / (a * b) = (b - a) / (a * b)"]}
{"goal":"b / (a * b) = a.reciprocal","proof":["b / (b * a) = a.reciprocal or Rat.0 = b or Rat.0 = a","b * a = a * b","b / (b * a) != a.reciprocal"]}
{"goal":"a / (a * b) = b.reciprocal","proof":["a / (a * b) = b.reciprocal or Rat.0 = a or Rat.0 = b"]}
{"goal":"recip_diff","proof":[]}
{"goal":"lt_mul_lte","proof":["not a + a < b or not c / Rat.2 < d or (a + a) * (c / Rat.2) < b * d or (a + a).is_negative or (c / Rat.2).is_negative","not Rat.2.reciprocal < Rat.1 or not c <= d or not Rat.2.reciprocal.is_positive or not c.is_positive or c * Rat.2.reciprocal < d * Rat.1","not Rat.2.reciprocal < Rat.1 or not c <= d or not c.is_positive or not Rat.2.reciprocal.is_positive or c * Rat.2.reciprocal < d * Rat.1","not a < b or not c <= d or not a.is_positive or not c.is_positive or a * c < b * d","not a.is_positive","a * (Rat.2 * (c / Rat.2)) = a * Rat.2 * (c / Rat.2)","c / Rat.2 + c / Rat.2 = c","c * Rat.2.reciprocal = c / Rat.2","not c.is_positive or (c / Rat.2).is_positive","a.is_negative or a.is_positive or Rat.0 = a","Rat.0 = a","Rat.2 * a = a + a","c / Rat.2 + c / Rat.2 = Rat.2 * (c / Rat.2)","a * Rat.2 = Rat.2 * a","not (c / Rat.2).is_negative or not (c / Rat.2).is_positive","d * Rat.1 = d","a + Rat.0 = a","not (a + Rat.0).is_negative","not (a + a).is_negative","(c / Rat.2).is_positive","a + Rat.0 < b","a + a < b","not a * (c / Rat.2 + c / Rat.2) < b * d","not a * (Rat.2 * (c / Rat.2)) < b * d","not a * Rat.2 * (c / Rat.2) < b * d","not Rat.2.reciprocal < Rat.1 or not Rat.2.reciprocal.is_positive or c * Rat.2.reciprocal < d * Rat.1","c * Rat.2.reciprocal < d * Rat.1","c * Rat.2.reciprocal < d","c / Rat.2 < d","not Rat.2 * a * (c / Rat.2) < b * d","not (a + a) * (c / Rat.2) < b * d","not (c / Rat.2).is_negative","(c / Rat.2).is_negative"]}
{"goal":"a * reduce(Rat.0.denom, Int.0) = Rat.0","proof":["Int.0 != Int.0 or reduce(Int.1, Int.0) = Rat.0","a * Rat.0 = Rat.0","a * reduce(Int.1, Int.0) != Rat.0","reduce(Int.1, Int.0) = Rat.0"]}
{"goal":"a * Rat.0.reciprocal = Rat.0","proof":["reduce(Rat.0.denom, Rat.0.num) = Rat.0.reciprocal","a * Rat.0.reciprocal = Rat.0.reciprocal * a","a * reduce(Rat.0.denom, Int.0) = reduce(Rat.0.denom, Int.0) * a","Rat.new(Int.0, Int.1) = Rat.from_int(Int.0)","Rat.from_int(Int.0).num = Int.0"]}
{"goal":"div_zero","proof":["a * Rat.0.reciprocal = a / Rat.0"]}
{"goal":"pos_recip","proof":["not a.is_positive or a.reciprocal.is_positive"]}
{"goal":"recip_recip","proof":["(a.reciprocal + a.reciprocal) / Rat.3 + a.reciprocal / Rat.3 = (a.reciprocal + a.reciprocal + a.reciprocal) / Rat.3","(a.reciprocal.reciprocal + a.reciprocal.reciprocal) / Rat.3 + a.reciprocal.reciprocal / Rat.3 = (a.reciprocal.reciprocal + a.reciprocal.reciprocal + a.reciprocal.reciprocal) / Rat.3","a.reciprocal / Rat.3 + a.reciprocal / Rat.3 = (a.reciprocal + a.reciprocal) / Rat.3","a.reciprocal.reciprocal / Rat.3 + a.reciprocal.reciprocal / Rat.3 = (a.reciprocal.reciprocal + a.reciprocal.reciprocal) / Rat.3","a.reciprocal / Rat.3 + a.reciprocal / Rat.3 + a.reciprocal / Rat.3 = a.reciprocal","a.reciprocal.reciprocal / Rat.3 + a.reciprocal.reciprocal / Rat.3 + a.reciprocal.reciprocal / Rat.3 = a.reciprocal.reciprocal","a.reciprocal + a.reciprocal + a.reciprocal = Rat.3 * a.reciprocal","a.reciprocal.reciprocal + a.reciprocal.reciprocal + a.reciprocal.reciprocal = Rat.3 * a.reciprocal.reciprocal","(a.reciprocal + a.reciprocal + a.reciprocal) * Rat.3.reciprocal = (a.reciprocal + a.reciprocal + a.reciprocal) / Rat.3","(a.reciprocal.reciprocal + a.reciprocal.reciprocal + a.reciprocal.reciprocal) * Rat.3.reciprocal = (a.reciprocal.reciprocal + a.reciprocal.reciprocal + a.reciprocal.reciprocal) / Rat.3","Rat.3 * a.reciprocal = Rat.3 / a","Rat.3 * a.reciprocal.reciprocal = Rat.3 / a.reciprocal","reduce(a.denom, a.num) = a.reciprocal","a.reciprocal.reciprocal = a or Rat.0 = a","Rat.0 = a","a.num != Int.0 or reduce(a.denom, a.num) = Rat.0","a.num = Int.0","reduce(a.denom, a.num) = Rat.0"]}
{"goal":"a.reciprocal.reciprocal.is_positive","proof":["not a.reciprocal.is_positive or a.reciprocal.reciprocal.is_positive"]}
{"goal":"a.is_positive","proof":["a.reciprocal.reciprocal = a"]}
{"goal":"false","proof":["not a.is_negative or not a.is_positive"]}
{"goal":"false","proof":["not Rat.0.is_positive","not a.is_negative or not Rat.0.is_negative or (a * Rat.0).is_positive","Rat.1 * Rat.0.reciprocal = Rat.1 / Rat.0","a.reciprocal.reciprocal = a","Rat.1 / Rat.0 = Rat.0","a * Rat.0 = Rat.0","Rat.1 * a.reciprocal.reciprocal = a.reciprocal.reciprocal","a.reciprocal.reciprocal.is_negative","not (a * Rat.0).is_positive","not Rat.0.is_negative or (a * Rat.0).is_positive","not Rat.0.is_negative","(Rat.1 * a.reciprocal.reciprocal).is_negative","(Rat.1 * Rat.0.reciprocal).is_negative","(Rat.1 / Rat.0).is_negative"]}
{"goal":"neg_recip","proof":["a.reciprocal.is_negative or a.reciprocal.is_positive or a.reciprocal = Rat.0"]}
{"goal":"a < Rat.0","proof":["not a.is_negative or a < Rat.0"]}
{"goal":"b.reciprocal.is_negative","proof":["not b.is_negative or b.reciprocal.is_negative"]}
{"goal":"div_neg_neg","proof":["not a.is_negative or not b.reciprocal.is_negative or (a * b.reciprocal).is_positive","a * b.reciprocal = a / b","not (a * b.reciprocal).is_positive"]}
{"goal":"-Rat.1 != Rat.0","proof":["-(Rat.0 - -Rat.1) = -Rat.1 - Rat.0","-(Rat.0 - Rat.1) = Rat.1 - Rat.0","reduce(Rat.2.denom, Rat.2.num) = Rat.2.reciprocal","Rat.2 * Rat.0 = Rat.0 + Rat.0","Rat.0 - Rat.1 = -Rat.1","not (-Rat.1).is_positive or -Rat.1 != Rat.0","not (-Rat.1).is_positive","Rat.0 - Rat.0 = Rat.0","Rat.1 - Rat.0 = Rat.1","Rat.2 * Rat.1 = Rat.2","Rat.0 + Rat.0 = Rat.0","Rat.from_int(Int.1).num = Int.1"]}
{"goal":"-Rat.1 * a / (-Rat.1 * b) = a / b","proof":["-Rat.1 * a / (-Rat.1 * b) = a / b or -Rat.1 = Rat.0"]}
{"goal":"-Rat.1 * a / -b = a / b","proof":["-Rat.1 * b = -b"]}
{"goal":"div_negs_cancel","proof":["-Rat.1 * a = -a"]}
{"goal":"a.abs = -a","proof":["not a.is_negative or a.abs = -a"]}
{"goal":"(a / b).is_positive","proof":["not a.is_negative or not b.is_negative or (a / b).is_positive"]}
{"goal":"(a / b).abs = a / b","proof":["(a / b).abs = a / b or (a / b).is_negative","(a / b).is_negative","not (a / b).is_negative or not (a / b).is_positive"]}
{"goal":"b.abs = -b","proof":["not b.is_negative or b.abs = -b"]}
{"goal":"a.abs / b.abs = -a / -b","proof":[]}
{"goal":"-a / -b = a / b","proof":["-a / -b = a / b"]}
{"goal":"(a / b).abs = a.abs / b.abs","proof":[]}
{"goal":"b.abs = b","proof":["b.abs = b or b.is_negative"]}
{"goal":"not (a / b).is_positive","proof":["not (a * b.reciprocal).is_positive or not b.reciprocal.is_positive or a.is_positive","a * b.reciprocal = a / b","(a * b.reciprocal).is_positive","b.is_negative or b.is_positive or Rat.0 = b","b.is_positive","not b.is_positive or b.reciprocal.is_positive","not a.is_negative or not a.is_positive","not a.is_positive","b.reciprocal.is_positive","not b.reciprocal.is_positive"]}
{"goal":"(a / b).abs = -(a / b)","proof":["(a / b).abs = -(a / b) or (a / b).is_positive"]}
{"goal":"(a / b).abs = a.abs / b.abs","proof":["-(a * b.abs.reciprocal) = -a * b.abs.reciprocal","-a * b.abs.reciprocal = -a / b.abs","a * b.reciprocal = a / b"]}
{"goal":"a.abs = a","proof":["a.abs = a or a.is_negative"]}
{"goal":"b.abs = -b","proof":["not b.is_negative or b.abs = -b"]}
{"goal":"not (a / b).is_positive","proof":["not b.is_negative or not (a / b).is_positive or (a / b * b).is_negative","a / b * b = a or Rat.0 = b","not b.is_negative or (a / b * b).is_negative","(a / b * b).is_negative","a / b * b = a"]}
{"goal":"(a / b).abs = -(a / b)","proof":["(a / b).abs = -(a / b) or (a / b).is_positive"]}
{"goal":"(a / b).abs = a.abs / b.abs","proof":["-a.abs / --b = a.abs / -b","-(a * b.reciprocal) = -a * b.reciprocal","-(Rat.0 - b) = b - Rat.0","-a.abs * (-b.abs).reciprocal = -a.abs / -b.abs","a * b.reciprocal = a / b","Rat.0 - b = -b","b - Rat.0 = b"]}
{"goal":"b.abs = b","proof":["b.abs = b or b.is_negative"]}
{"goal":"not (a / b).is_negative","proof":["not (a * b.reciprocal).is_negative or a.is_negative or b.reciprocal.is_negative","a * b.reciprocal = a / b","(a * b.reciprocal).is_negative","not b.reciprocal.is_negative or b.reciprocal.reciprocal.is_negative","b.reciprocal.reciprocal = b","not b.reciprocal.reciprocal.is_negative","b.reciprocal.is_negative","not b.reciprocal.is_negative"]}
{"goal":"(a / b).abs = a / b","proof":["(a / b).abs = a / b or (a / b).is_negative"]}
{"goal":"(a / b).abs = a.abs / b.abs","proof":[]}
{"goal":"abs_div","proof":[]}
{"goal":"lt_make_left_denom","proof":["not a < b / c.reciprocal or not c.reciprocal.is_positive or a * c.reciprocal < b","a * c.reciprocal = a / c","b * c.reciprocal.reciprocal = b / c.reciprocal","not a * c.reciprocal < b","not c.is_positive or c.reciprocal.is_positive","c.reciprocal.reciprocal = c","c.reciprocal.is_positive","a < b * c.reciprocal.reciprocal","not a < b / c.reciprocal","a < b / c.reciprocal"]}
{"goal":"b.reciprocal.is_positive","proof":["not b.is_positive or b.reciprocal.is_positive"]}
{"goal":"a * b * b.reciprocal < c * b.reciprocal","proof":["not b.reciprocal.is_positive or not a * b < c or a * b * b.reciprocal < c * b.reciprocal"]}
{"goal":"a * b * b.reciprocal = a","proof":["a * b / b = a or Rat.0 = b","a * b * b.reciprocal = a * b / b","a * b / b != a","Rat.0 = b","not b.is_positive or Rat.0 != b"]}
{"goal":"a < c * b.reciprocal","proof":["not a * b * b.reciprocal < c * b.reciprocal"]}
{"goal":"lt_make_right_denom","proof":["c * b.reciprocal = c / b"]}
{"goal":"lt_elim_left_denom","proof":["not a * b.reciprocal < c or not b.reciprocal.is_positive or a < c / b.reciprocal","a * b.reciprocal = a / b","c * b.reciprocal.reciprocal = c / b.reciprocal","not b.is_positive or b.reciprocal.is_positive","b.reciprocal.reciprocal = b","not a < c * b.reciprocal.reciprocal","b.reciprocal.is_positive","not a < c / b.reciprocal","a * b.reciprocal < c","not a * b.reciprocal < c"]}
{"goal":"not b.is_positive","proof":["a.abs / b.abs = (a / b).abs or Rat.0 = b","not b < b or not b < b","Rat.0 = b","not b.is_positive or Rat.0 < b","Rat.0 < b","b < b"]}
{"goal":"b.abs = -b","proof":["b.abs = -b or b.is_positive"]}
{"goal":"false","proof":["a / b / Rat.3 + a / b / Rat.3 = (a / b + a / b) / Rat.3","b / Rat.3 + b / Rat.3 = (b + b) / Rat.3","-b / Rat.3 + -b / Rat.3 + -b / Rat.3 = -b","a / b / Rat.3 + a / b / Rat.3 + a / b / Rat.3 = a / b","a.abs / b.abs = (a / b).abs or Rat.0 = b","(Rat.3 * (a / b / Rat.3).abs).abs = (Rat.3 * (a / b / Rat.3)).abs","a / b / Rat.3 + a / b / Rat.3 + a / b / Rat.3 = Rat.3 * (a / b / Rat.3)","b + b + b = Rat.3 * b","Rat.0 = b","Rat.0 - b = -b","a / Rat.0 = Rat.0","a.abs / Rat.0 = Rat.0","Rat.0 - Rat.0 = Rat.0","Rat.0 + Rat.0 = Rat.0","Rat.0 + a / b / Rat.3 = a / b / Rat.3"]}
{"goal":"abs_of_div","proof":[]}
{"goal":"mul_div_swap","proof":["c.reciprocal * (a * b) = c.reciprocal * a * b","a * b * c.reciprocal = a * b / c","a * c.reciprocal = a / c","a * c.reciprocal = c.reciprocal * a","c.reciprocal * (a * b) = a * b * c.reciprocal"]}
{"goal":"zero_recip","proof":["let s0: Rat satisfy { true }","not zero_recip(s0) or Rat.0.reciprocal = Rat.0","not zero_recip(s0)","Rat.0.reciprocal != Rat.0 or zero_recip(s0)","reduce(Rat.0.denom, Rat.0.num) = Rat.0.reciprocal","Rat.0.num != Int.0 or reduce(Rat.0.denom, Rat.0.num) = Rat.0","reduce(Rat.0.denom, Rat.0.num) != Rat.0","Rat.0.num != Int.0"]}
{"goal":"forall(x0: Rat, x1: Rat, x2: Rat) { x0 * (x1 * x2) = x0 * x1 * x2 }","proof":["let (s0: Rat, s1: Rat, s2: Rat) satisfy { s0 * (s1 * s2) != s0 * s1 * s2 }","s0 * (s1 * s2) = s0 * s1 * s2"]}
{"goal":"forall(x0: Rat) { Semigroup.mul[Rat](Rat.1, x0) = x0 } and forall(x1: Rat) { Semigroup.mul[Rat](x1, Rat.1) = x1 }","proof":["let (s0: Rat, s1: Rat) satisfy { s1 * Rat.1 != s1 or Rat.1 * s0 != s0 }","s1 * Rat.1 = Rat.1 * s1","Rat.1 * s0 = s0","Rat.1 * s1 = s1","s1 * Rat.1 != s1"]}
{"goal":"forall(x0: Rat, x1: Rat, x2: Rat) { Semigroup.mul[Rat](x0, lib(add_semigroup).AddSemigroup.add[Rat](x1, x2)) = lib(add_semigroup).AddSemigroup.add[Rat](Semigroup.mul[Rat](x0, x1), Semigroup.mul[Rat](x0, x2)) } and forall(x3: Rat, x4: Rat, x5: Rat) { Semigroup.mul[Rat](lib(add_semigroup).AddSemigroup.add[Rat](x3, x4), x5) = lib(add_semigroup).AddSemigroup.add[Rat](Semigroup.mul[Rat](x3, x5), Semigroup.mul[Rat](x4, x5)) } and forall(x6: Rat) { Semigroup.mul[Rat](x6, lib(add_monoid).AddMonoid.0[Rat]) = lib(add_monoid).AddMonoid.0[Rat] } and forall(x7: Rat) { Semigroup.mul[Rat](lib(add_monoid).AddMonoid.0[Rat], x7) = lib(add_monoid).AddMonoid.0[Rat] }","proof":["let (s0: Rat, s1: Rat, s2: Rat, s3: Rat, s4: Rat, s5: Rat, s6: Rat, s7: Rat) satisfy { s3 * s5 + s4 * s5 != (s3 + s4) * s5 or s0 * s1 + s0 * s2 != s0 * (s1 + s2) or Rat.0 * s7 != Rat.0 or s6 * Rat.0 != Rat.0 }","s3 * s5 + s4 * s5 = (s3 + s4) * s5","s0 * s1 + s0 * s2 = s0 * (s1 + s2)","s7 * Rat.0 = Rat.0 * s7","s6 * Rat.0 = Rat.0","s7 * Rat.0 = Rat.0","Rat.0 * s7 != Rat.0"]}
{"goal":"forall(x0: Rat, x1: Rat) { Semigroup.mul[Rat](x0, x1) = Semigroup.mul[Rat](x1, x0) }","proof":["let (s0: Rat, s1: Rat) satisfy { s1 * s0 != s0 * s1 }","s1 * s0 = s0 * s1"]}
{"goal":"forall(x0: Rat) { x0 != lib(add_monoid).AddMonoid.0[Rat] implies Semigroup.mul[Rat](x0, x0.reciprocal) = monoid.Monoid.1[Rat] } and lib(add_monoid).AddMonoid.0[Rat].reciprocal = lib(add_monoid).AddMonoid.0[Rat]","proof":["let s0: Rat satisfy { Rat.0.reciprocal != Rat.0 or Rat.0 != s0 and (s0 * s0.reciprocal != Rat.1 or Rat.0.reciprocal != Rat.0) }","s0 * s0.reciprocal = Rat.1 or Rat.0 = s0","Rat.0 != s0","s0 * s0.reciprocal != Rat.1","s0 * s0.reciprocal = Rat.1"]}
{"goal":"a <= b","proof":["not a < b or a <= b"]}
{"goal":"a <= b","proof":["b != a or a <= b"]}
{"goal":"b < a","proof":["b > a or b < a or b = a","b > a","b > a = a < b"]}
{"goal":"b <= a","proof":["not b < a or b <= a"]}
{"goal":"rat_total","proof":["b = a","b != a or a <= b"]}
{"goal":"forall(x0: Rat, x1: Rat) { order.PartialOrder.lte[Rat](x0, x1) or order.PartialOrder.lte[Rat](x1, x0) }","proof":["let (s0: Rat, s1: Rat) satisfy { not s0 <= s1 and not s1 <= s0 }","s0 <= s1 or s1 <= s0"]}
