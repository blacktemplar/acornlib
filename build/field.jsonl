{"goal":"F.0.zpow(n) = F.0.pow(k)","proof":["Int.from_nat(k) != n or F.0.zpow(n) = F.0.pow(k)"]}
{"goal":"F.0.zpow(n) = F.0","proof":["F.0.pow(k) != F.0","F.0.pow(k) = F.0 or k = Nat.0","k = Nat.0","Int.from_nat(Nat.0) = n","n > Int.0 = Int.0 < n","Int.0 < n","not Int.from_nat(Nat.0) < n or Int.from_nat(Nat.0) != n","not Int.from_nat(Nat.0) < n","Int.from_nat(Nat.0) < n"]}
{"goal":"n < Int.0","proof":["not Int.neg_suc(k) < Int.0","not Int.neg_suc(k).is_negative or Int.0.is_negative or Int.neg_suc(k) < Int.0","Int.from_nat(lib(int.int_base).abs(Int.neg_suc(k))) = Int.neg_suc(k) or Int.neg_suc(k).is_negative","Int.from_nat(lib(int.int_base).abs(Int.neg_suc(k))) != Int.neg_suc(k)","not Int.neg_suc(k).is_negative"]}
{"goal":"zero_pow","proof":["not Int.0 < n or not n < Int.0 or Int.0 < Int.0","n > Int.0 = Int.0 < n","Int.0 < n","not Int.0 < n or Int.0 < Int.0","Int.0 < Int.0","not Int.0 < Int.0 or Int.0 != Int.0"]}
{"goal":"b = F.0","proof":["F.0 != F.1 or F.0 = b","F.0 = b"]}
{"goal":"a.inverse = F.0","proof":["F.0 != F.1 or a.inverse = F.0","a.inverse = F.0"]}
{"goal":"a != F.0","proof":["F.0 * b = F.1","F.0 * b = b * F.0","b * F.0 = F.1","b * F.0 = F.0"]}
{"goal":"a.inverse * a * b = a.inverse * F.1","proof":["a.inverse * (a * b) = a.inverse * a * b"]}
{"goal":"a * a.inverse * b = a.inverse","proof":["lib(list.list_sum).scalar_mul(a * a.inverse, b) = a * a.inverse * b","lib(list.list_sum).scalar_mul(a.inverse * a, b) = a.inverse * a * b","a.inverse * a = a * a.inverse","a.inverse * F.1 = a.inverse"]}
{"goal":"F.1 * b = a.inverse","proof":["a * a.inverse = F.1 or F.0 = a","a * a.inverse * b != F.1 * b","a * a.inverse = F.1","a * a.inverse != F.1"]}
{"goal":"unique_inverse","proof":["F.0 != F.1 or F.0 = b","F.0 != F.1 or a.inverse = F.0","F.1 * b = b","F.1 * b != a.inverse","F.0 = F.1","F.0 = b","a.inverse = F.0"]}
{"goal":"inverse_inverse","proof":["a.inverse * a != F.1 or a.inverse.inverse = a","a.inverse * a != F.1","a * a.inverse = F.1 or F.0 = a","a.inverse * a = a * a.inverse","a * a.inverse != F.1","F.0 = a"]}
{"goal":"(a * b).inverse = F.0.inverse","proof":["a * b != F.0","F.0 * b != F.0","F.0 * b = b * F.0","b * F.0 = F.0"]}
{"goal":"(a * b).inverse = F.0","proof":["F.0.inverse != F.0"]}
{"goal":"a.inverse * b.inverse = F.0 * b.inverse","proof":["a.inverse != F.0","F.0.inverse != F.0"]}
{"goal":"a.inverse * b.inverse = F.0","proof":["F.0 * b.inverse != F.0","b.inverse * F.0 = F.0 * b.inverse","b.inverse * F.0 = F.0"]}
{"goal":"(a * b).inverse = a.inverse * b.inverse","proof":["a.inverse * b.inverse != F.0"]}
{"goal":"(a * b).inverse = F.0.inverse","proof":["a * b != F.0","a * F.0 != F.0","a * F.0 = F.0"]}
{"goal":"(a * b).inverse = F.0","proof":["F.0.inverse != F.0"]}
{"goal":"a.inverse * b.inverse = a.inverse * F.0","proof":["b.inverse != F.0","F.0.inverse != F.0"]}
{"goal":"a.inverse * b.inverse = F.0","proof":["a.inverse * F.0 != F.0","a.inverse * F.0 = F.0"]}
{"goal":"a * b * a.inverse * b.inverse = a * a.inverse * b * b.inverse","proof":["a * a.inverse * b != a * b * a.inverse","a * a.inverse * b = a * (a.inverse * b)","a * b * a.inverse = a * (b * a.inverse)","a.inverse * b * a = a * (a.inverse * b)","a.inverse * b = b * a.inverse","b * a.inverse * a = a * (b * a.inverse)"]}
{"goal":"a * b * a.inverse * b.inverse = F.1 * b * b.inverse","proof":["a * a.inverse = F.1 or F.0 = a","a * a.inverse = F.1"]}
{"goal":"a * b * (a.inverse * b.inverse) = F.1 * F.1","proof":["a * b * a.inverse * b.inverse = a * b * (a.inverse * b.inverse)","b * b.inverse = F.1 or F.0 = b","F.1 * b = b * F.1","F.1 * F.1 = F.1","b * F.1 = b","b * b.inverse = F.1"]}
{"goal":"a * b * (a.inverse * b.inverse) = F.1","proof":["F.1 * F.1 != F.1","F.1 * F.1 = F.1"]}
{"goal":"a.inverse * b.inverse = (a * b).inverse","proof":["a * b * (a.inverse * b.inverse) != F.1 or a.inverse * b.inverse = (a * b).inverse"]}
{"goal":"inverse_dist","proof":["F.0 = b","a * F.0 = F.0","a.inverse * F.0 = F.0"]}
{"goal":"f(Nat.0)","proof":["a.inverse.zpow(Int.from_nat(Nat.0.suc)) != a.zpow(Int.neg_suc(Nat.0)) or f(Nat.0)","Int.neg_suc(Nat.0) != Int.neg_suc(Nat.0) or a.pow(Nat.0.suc).inverse = a.zpow(Int.neg_suc(Nat.0))","Int.from_nat(Nat.0.suc) != Int.from_nat(Nat.0.suc) or a.inverse.zpow(Int.from_nat(Nat.0.suc)) = a.inverse.pow(Nat.0.suc)","Nat.0 + Nat.1 = Nat.0.suc","a.inverse.pow(Nat.1) = a.inverse","a.pow(Nat.1) = a","Nat.0 + Nat.1 = Nat.1","a.inverse.zpow(Int.from_nat(Nat.0.suc)) = a.inverse.pow(Nat.0.suc)","a.inverse.zpow(Int.from_nat(Nat.0.suc)) != a.zpow(Int.neg_suc(Nat.0))","a.pow(Nat.0.suc).inverse = a.zpow(Int.neg_suc(Nat.0))"]}
{"goal":"a.pow(l.suc.suc) = a.pow(l.suc) * a","proof":["l.suc.suc != l.suc.suc or a * a.pow(l.suc) = a.pow(l.suc.suc)","a.pow(l.suc) * a = a * a.pow(l.suc)","a * a.pow(l.suc) != a.pow(l.suc.suc)"]}
{"goal":"(a.pow(l.suc) * a).inverse = a.pow(l.suc).inverse * a.inverse","proof":["a.pow(l.suc).inverse * a.inverse = (a.pow(l.suc) * a).inverse"]}
{"goal":"f(l.suc)","proof":["a.inverse.zpow(Int.from_nat(l.suc.suc)) != a.zpow(Int.neg_suc(l.suc)) or f(l.suc)","not f(l) or a.inverse.zpow(Int.from_nat(l.suc)) = a.zpow(Int.neg_suc(l))","Int.neg_suc(l) != Int.neg_suc(l) or a.pow(l.suc).inverse = a.zpow(Int.neg_suc(l))","Int.neg_suc(l.suc) != Int.neg_suc(l.suc) or a.pow(l.suc.suc).inverse = a.zpow(Int.neg_suc(l.suc))","l.suc.suc != l.suc.suc or a.inverse * a.inverse.pow(l.suc) = a.inverse.pow(l.suc.suc)","Int.from_nat(l.suc) != Int.from_nat(l.suc) or a.inverse.zpow(Int.from_nat(l.suc)) = a.inverse.pow(l.suc)","Int.from_nat(l.suc.suc) != Int.from_nat(l.suc.suc) or a.inverse.zpow(Int.from_nat(l.suc.suc)) = a.inverse.pow(l.suc.suc)","a.pow(l.suc).inverse * a.inverse = a.inverse * a.pow(l.suc).inverse","a.inverse.zpow(Int.from_nat(l.suc)) = a.inverse.pow(l.suc)","a.inverse.zpow(Int.from_nat(l.suc.suc)) = a.inverse.pow(l.suc.suc)","a.inverse * a.inverse.pow(l.suc) = a.inverse.pow(l.suc.suc)","a.pow(l.suc).inverse = a.zpow(Int.neg_suc(l))","a.pow(l.suc.suc).inverse = a.zpow(Int.neg_suc(l.suc))","a.inverse.zpow(Int.from_nat(l.suc.suc)) != a.zpow(Int.neg_suc(l.suc))","a.inverse.zpow(Int.from_nat(l.suc)) = a.zpow(Int.neg_suc(l))"]}
{"goal":"pow_inverse_nat","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(Nat.0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(Nat.0) or x2(x3) } }","not f(s0(f)) or f(s0(f).suc)","not f(k) or a.inverse.zpow(Int.from_nat(k.suc)) = a.zpow(Int.neg_suc(k))","not f(k)","not f(s0(f).suc) or not f(Nat.0) or f(k)","not f(Nat.0) or f(s0(f)) or f(k)","f(s0(f)) or f(k)","f(s0(f))","not f(s0(f).suc)","f(s0(f).suc)"]}
{"goal":"-n = Int.0","proof":["Int.from_nat(Nat.0) = n","Int.from_nat(Nat.0) != n or lib(int.int_base).abs(n) = Nat.0","lib(int.int_base).abs(-n) != Nat.0 or -n = Int.0","lib(int.int_base).abs(-n) != Nat.0","lib(int.int_base).abs(-n) = lib(int.int_base).abs(n)","lib(int.int_base).abs(n) = Nat.0","lib(int.int_base).abs(n) != Nat.0"]}
{"goal":"a.zpow(-n) = F.1","proof":["-n != Int.from_nat(Nat.0) or a.zpow(-n) = a.pow(Nat.0)","Nat.0 != Nat.0 or a.pow(Nat.0) = F.1","a.pow(Nat.0) = F.1","-n = Int.from_nat(Nat.0)","a.zpow(-n) != a.pow(Nat.0)"]}
{"goal":"a.inverse.zpow(n) = F.1","proof":["Int.from_nat(Nat.0) = n","Int.from_nat(Nat.0) != n or a.inverse.zpow(n) = a.inverse.pow(Nat.0)","Nat.0 != Nat.0 or a.inverse.pow(Nat.0) = F.1","a.inverse.pow(Nat.0) = F.1","a.inverse.zpow(n) != a.inverse.pow(Nat.0)"]}
{"goal":"a.zpow(-n) = a.inverse.zpow(n)","proof":["a.zpow(-n) != F.1"]}
{"goal":"exists(k0: Nat) { k0.suc = k }","proof":["let s0: Nat -> Nat satisfy { forall(x0: Nat) { s0(x0).suc = x0 or Nat.0 = x0 } }","s0(k).suc != k","s0(k).suc = k or k = Nat.0"]}
{"goal":"-n = Int.neg_suc(l)","proof":["-Int.from_nat(k) = lib(int.int_base).neg_nat(k)","lib(int.int_base).neg_nat(l.suc) = Int.neg_suc(l)"]}
{"goal":"a.zpow(-n) = a.inverse.zpow(Int.from_nat(l.suc))","proof":["a.inverse.zpow(Int.from_nat(l.suc)) != a.zpow(Int.neg_suc(l))","a.inverse.zpow(Int.from_nat(l.suc)) = a.zpow(Int.neg_suc(l))"]}
{"goal":"a.zpow(-n) = a.inverse.zpow(n)","proof":[]}
{"goal":"-n = Int.from_nat(k.suc)","proof":["Int.neg_suc(k) != n or Int.from_nat(k.suc) = -n"]}
{"goal":"a.inverse.zpow(n) = a.inverse.inverse.zpow(Int.from_nat(k.suc))","proof":["a.inverse.inverse.zpow(Int.from_nat(k.suc)) = a.inverse.zpow(Int.neg_suc(k))"]}
{"goal":"a.inverse.zpow(n) = a.zpow(Int.from_nat(k.suc))","proof":["a.inverse.inverse = a"]}
{"goal":"a.zpow(-n) = a.inverse.zpow(n)","proof":["a.zpow(Int.from_nat(k.suc)) != a.inverse.zpow(n)"]}
{"goal":"pow_inverse","proof":[]}
{"goal":"f(Nat.0)","proof":["a.pow(Nat.0.suc) * a.inverse != a.pow(Nat.0) or f(Nat.0)","a * a.inverse = F.1 or F.0 = a","Nat.0 != Nat.0 or a.pow(Nat.0) = F.1","Nat.1 + Nat.0 = Nat.0.suc","Nat.1 + Nat.0 = Nat.1","a.pow(Nat.1) = a","a.pow(Nat.0) = F.1","a * a.inverse = F.1","a.pow(Nat.0.suc) * a.inverse != a.pow(Nat.0)"]}
{"goal":"a.pow(l.suc) = a.pow(l) * a","proof":["l.suc != l.suc or a * a.pow(l) = a.pow(l.suc)","a.pow(l) * a = a * a.pow(l)","a * a.pow(l) != a.pow(l.suc)"]}
{"goal":"a.pow(l.suc) * a.inverse = a.pow(l)","proof":["not f(l) or a.pow(l.suc) * a.inverse = a.pow(l)"]}
{"goal":"f(l.suc)","proof":["a.pow(l.suc.suc) * a.inverse != a.pow(l.suc) or f(l.suc)","l.suc.suc != l.suc.suc or a * a.pow(l.suc) = a.pow(l.suc.suc)","a * a.pow(l.suc) * a.inverse = a * (a.pow(l.suc) * a.inverse)","a.pow(l) * a = a * a.pow(l)","a * a.pow(l.suc) = a.pow(l.suc.suc)","a.pow(l.suc.suc) * a.inverse != a.pow(l.suc)"]}
{"goal":"pow_nat_times_inverse","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(Nat.0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(Nat.0) or x2(x3) } }","not f(s0(f)) or f(s0(f).suc)","not f(n) or a.pow(n.suc) * a.inverse = a.pow(n)","not f(n)","not f(s0(f).suc) or not f(Nat.0) or f(n)","not f(Nat.0) or f(s0(f)) or f(n)","f(s0(f)) or f(n)","f(s0(f))","not f(s0(f).suc)","f(s0(f).suc)"]}
{"goal":"f(Nat.0)","proof":["a.pow(n) * a.inverse.pow(Nat.0) != a.pow(n - Nat.0) or f(Nat.0)","Nat.0 != Nat.0 or a.inverse.pow(Nat.0) = F.1","a.pow(n) * F.1 = a.pow(n)","n - Nat.0 = n","a.inverse.pow(Nat.0) = F.1","a.pow(n) * a.inverse.pow(Nat.0) != a.pow(n - Nat.0)"]}
{"goal":"l.suc > n","proof":["not n <= l or not l < l.suc or n < l.suc","n <= l = l >= n","l.suc > n = n < l.suc","not n < l.suc","l < l.suc","n <= l","not l < l.suc or not n <= l"]}
{"goal":"f(l.suc)","proof":["not l.suc > n or f(l.suc)"]}
{"goal":"l.suc <= n","proof":["not l < n or l.suc <= n","not l < n","n <= l = l >= n","n <= l or l < n","not n <= l","n <= l"]}
{"goal":"a.inverse.pow(l.suc) = a.inverse.pow(l) * a.inverse","proof":["l.suc != l.suc or a.inverse * a.inverse.pow(l) = a.inverse.pow(l.suc)","a.inverse * a.inverse.pow(l) = a.inverse.pow(l) * a.inverse","a.inverse * a.inverse.pow(l) = a.inverse.pow(l.suc)"]}
{"goal":"a.pow(n) * a.inverse.pow(l.suc) = a.pow(n) * a.inverse.pow(l) * a.inverse","proof":["a.pow(n) * (a.inverse.pow(l) * a.inverse) = a.pow(n) * a.inverse.pow(l) * a.inverse"]}
{"goal":"a.pow(n) * a.inverse.pow(l.suc) = a.pow(n - l) * a.inverse","proof":["not f(l) or a.pow(n) * a.inverse.pow(l) = a.pow(n - l) or l > n","n <= l = l >= n","l > n = n < l","not n < l or n <= l","not n <= l","a.pow(n) * a.inverse.pow(l) * a.inverse != a.pow(n - l) * a.inverse","a.pow(n) * a.inverse.pow(l) != a.pow(n - l)","l > n","not n < l","n < l"]}
{"goal":"n - l = (n - l.suc).suc","proof":["not l.suc <= n or n - l.suc + l.suc = n","(n - l.suc).suc + l != n or (n - l.suc).suc = n - l","(n - l.suc).suc + l = (n - l.suc + l).suc","n - l.suc + l.suc = (n - l.suc + l).suc","(n - l.suc).suc + l != n","(n - l.suc + l).suc != n","n - l.suc + l.suc = n","n - l.suc + l.suc != n"]}
{"goal":"a.pow(n) * a.inverse.pow(l.suc) = a.pow(n - l.suc)","proof":["a.pow((Nat.0 + (n - l.suc)).suc) * a.inverse = a.pow(Nat.0 + (n - l.suc)) or F.0 = a","n - l.suc = lib(nat.nat_base).bounded_sub(n, l.suc)","Nat.0 + lib(nat.nat_base).bounded_sub(n, l.suc) = lib(nat.nat_base).bounded_sub(n, l.suc)","a.pow((Nat.0 + (n - l.suc)).suc) * a.inverse = a.pow(Nat.0 + (n - l.suc))"]}
{"goal":"f(l.suc)","proof":["a.pow(n) * a.inverse.pow(l.suc) != a.pow(n - l.suc) or f(l.suc)"]}
{"goal":"pow_nat_sub_inverse","proof":["let s0: Nat -> Bool -> Nat satisfy { forall(x0: Nat -> Bool, x1: Nat) { not x0(Nat.0) or x0(s0(x0)) or x0(x1) } and forall(x2: Nat -> Bool, x3: Nat) { not x2(s0(x2).suc) or not x2(Nat.0) or x2(x3) } }","not f(s0(f)) or f(s0(f).suc)","not f(m) or a.pow(n) * a.inverse.pow(m) = a.pow(n - m) or m > n","not f(m) or m > n","not f(s0(f).suc) or not f(Nat.0) or f(m)","not f(Nat.0) or f(s0(f)) or f(s0(f))","m > n = n < m","not m <= n or not n < m","not n < m","f(s0(f)) or f(s0(f))","f(s0(f))","not m > n","not f(m)","f(s0(f).suc)","not f(s0(f).suc)"]}
{"goal":"exists(k0: Nat) { n = Int.from_nat(k0) }","proof":["Int.from_nat(lib(int.int_base).abs(n)) != n","not n >= Int.0 or n.max(Int.0) = n","not n < Int.0 or n.max(Int.0) = Int.0","Int.from_nat(lib(int.int_base).abs(n)) = n or n.is_negative","n.is_negative","not n < Int.0 or Int.0 != n","not n.is_negative or n < Int.0","n.max(Int.0) = n","n < Int.0","Int.0 != n","n.max(Int.0) = Int.0","n.max(Int.0) != Int.0"]}
{"goal":"exists(k0: Nat) { m = Int.from_nat(k0) }","proof":["Int.from_nat(lib(int.int_base).abs(m)) != m","not m >= Int.0 or m.max(Int.0) = m","not m < Int.0 or m.max(Int.0) = Int.0","Int.from_nat(lib(int.int_base).abs(m)) = m or m.is_negative","m.is_negative","not m < Int.0 or Int.0 != m","not m.is_negative or m < Int.0","m.max(Int.0) = m","m < Int.0","Int.0 != m","m.max(Int.0) = Int.0","m.max(Int.0) != Int.0"]}
{"goal":"a.zpow(n) * a.inverse.zpow(m) = a.pow(l) * a.inverse.pow(k)","proof":["Int.from_nat(k) != Int.from_nat(k) or a.inverse.zpow(Int.from_nat(k)) = a.inverse.pow(k)","Int.from_nat(l) != Int.from_nat(l) or a.zpow(Int.from_nat(l)) = a.pow(l)","a.inverse.zpow(m) = a.zpow(-m)","a.inverse.pow(k) * a.pow(l) = a.pow(l) * a.inverse.pow(k)","a.zpow(n) * a.zpow(-m) = a.zpow(-m) * a.zpow(n)","a.inverse.zpow(Int.from_nat(k)) = a.inverse.pow(k)","a.zpow(Int.from_nat(l)) = a.pow(l)"]}
{"goal":"k <= l","proof":["not Int.from_nat(k) <= Int.from_nat(l) or k <= l","not Int.from_nat(k) <= Int.from_nat(l)"]}
{"goal":"a.zpow(n) * a.inverse.zpow(m) = a.pow(l - k)","proof":["a.pow(l) * a.inverse.pow(k) != a.pow(l - k)","not k <= l or a.pow(l) * a.inverse.pow(k) = a.pow(l - k) or F.0 = a"]}
{"goal":"a.zpow(n) * a.inverse.zpow(m) = a.zpow(n - m)","proof":["let s0: Nat satisfy { Int.from_nat(s0) = m }","let s1: Nat satisfy { Int.from_nat(s1) = n }","a.zpow(n - m) != a.pow(l - k)","lib(int.int_base).sub_nat(n.pos_part + (-m).pos_part, n.neg_part + (-m).neg_part) = n + -m","not k <= l or Int.from_nat(l - k) = lib(int.int_base).sub_nat(l, k)","Int.from_nat(l - k) != n - m or a.zpow(n - m) = a.pow(l - k)","n + -m = n - m","(-Int.from_nat(s0)).neg_part = Int.from_nat(s0).pos_part","(-m).pos_part = m.neg_part","Int.from_nat(s0).neg_part = Nat.0","Int.from_nat(s1).neg_part = Nat.0","Int.from_nat(k).pos_part = k","Int.from_nat(l).pos_part = l","Nat.0 + k = k","l + Nat.0 = l","Int.from_nat(l - k) != n - m","Int.from_nat(l - k) = lib(int.int_base).sub_nat(l, k)"]}
{"goal":"a.zpow(n) * a.inverse.zpow(m) = a.inverse.zpow(m) * a.inverse.inverse.zpow(n)","proof":["a.inverse.zpow(m) * a.zpow(n) = a.zpow(n) * a.inverse.zpow(m)","a.inverse.inverse = a"]}
{"goal":"a.zpow(n) * a.inverse.zpow(m) = a.inverse.pow(k) * a.inverse.inverse.pow(l)","proof":["Int.from_nat(k) != Int.from_nat(k) or a.inverse.zpow(Int.from_nat(k)) = a.inverse.pow(k)","Int.from_nat(l) != Int.from_nat(l) or a.zpow(Int.from_nat(l)) = a.pow(l)","a.inverse.inverse.pow(l) * a.inverse.pow(k) = a.inverse.pow(k) * a.inverse.inverse.pow(l)","a.inverse.inverse.zpow(n) * a.inverse.zpow(m) = a.inverse.zpow(m) * a.inverse.inverse.zpow(n)","a.inverse.inverse = a","a.inverse.zpow(Int.from_nat(k)) = a.inverse.pow(k)","a.zpow(Int.from_nat(l)) = a.pow(l)"]}
{"goal":"l <= k","proof":["not Int.from_nat(l) <= Int.from_nat(k) or l <= k","not Int.from_nat(l) <= Int.from_nat(k)","not n <= Int.from_nat(k)","not n <= m","n <= m or m <= n"]}
{"goal":"a.inverse != F.0","proof":["a.inverse.inverse = a"]}
{"goal":"a.zpow(n) * a.inverse.zpow(m) = a.inverse.pow(k - l)","proof":["not l <= k or a.inverse.pow(k) * a.inverse.inverse.pow(l) = a.inverse.pow(k - l) or a.inverse = F.0","a.inverse.pow(k) * a.inverse.inverse.pow(l) != a.inverse.pow(k - l)"]}
{"goal":"a.zpow(n) * a.inverse.zpow(m) = a.inverse.zpow(m - n)","proof":["let s0: Nat satisfy { Int.from_nat(s0) = m }","let s1: Nat satisfy { Int.from_nat(s1) = n }","a.inverse.zpow(m - n) != a.inverse.pow(k - l)","lib(int.int_base).sub_nat(m.pos_part + (-n).pos_part, m.neg_part + (-n).neg_part) = m + -n","not l <= k or Int.from_nat(k - l) = lib(int.int_base).sub_nat(k, l)","Int.from_nat(k - l) != m - n or a.inverse.zpow(m - n) = a.inverse.pow(k - l)","m + -n = m - n","Int.from_nat(s1) != n or lib(int.int_base).neg_nat(s1) = -n","(-Int.from_nat(s1)).neg_part = Int.from_nat(s1).pos_part","(-n).pos_part = n.neg_part","Int.from_nat(s0).neg_part = Nat.0","Int.from_nat(s1).neg_part = Nat.0","Int.from_nat(k).pos_part = k","Int.from_nat(l).pos_part = l","Nat.0 + l = l","k + Nat.0 = k","lib(int.int_base).neg_nat(s1) = -n","Int.from_nat(k - l) != m - n","Int.from_nat(k - l) = lib(int.int_base).sub_nat(k, l)"]}
{"goal":"a.zpow(n) * a.inverse.zpow(m) = a.zpow(n - m)","proof":["a.inverse.zpow(m - n) != a.zpow(n - m)","a.inverse.zpow(m - n) = a.zpow(-(m - n))","-(m - n) = n - m"]}
{"goal":"pow_sub_inverse","proof":[]}
{"goal":"exists(k0: Nat) { n = Int.from_nat(k0) }","proof":["Int.from_nat(lib(int.int_base).abs(n)) != n","not n >= Int.0 or n.max(Int.0) = n","not n < Int.0 or n.max(Int.0) = Int.0","Int.from_nat(lib(int.int_base).abs(n)) = n or n.is_negative","n.is_negative","not n < Int.0 or Int.0 != n","not n.is_negative or n < Int.0","n.max(Int.0) = n","n < Int.0","Int.0 != n","n.max(Int.0) = Int.0","n.max(Int.0) != Int.0"]}
{"goal":"exists(k0: Nat) { m = Int.from_nat(k0) }","proof":["Int.from_nat(lib(int.int_base).abs(m)) != m","not m >= Int.0 or m.max(Int.0) = m","not m < Int.0 or m.max(Int.0) = Int.0","Int.from_nat(lib(int.int_base).abs(m)) = m or m.is_negative","m.is_negative","not m < Int.0 or Int.0 != m","not m.is_negative or m < Int.0","m.max(Int.0) = m","m < Int.0","Int.0 != m","m.max(Int.0) = Int.0","m.max(Int.0) != Int.0"]}
{"goal":"a.zpow(n) * a.zpow(m) = a.pow(l) * a.pow(k)","proof":["Int.from_nat(k) != Int.from_nat(k) or a.zpow(Int.from_nat(k)) = a.pow(k)","Int.from_nat(l) != Int.from_nat(l) or a.zpow(Int.from_nat(l)) = a.pow(l)","a.pow(k) * a.pow(l) = a.pow(l) * a.pow(k)","a.zpow(m) * a.zpow(n) = a.zpow(n) * a.zpow(m)","a.zpow(Int.from_nat(k)) = a.pow(k)","a.zpow(Int.from_nat(l)) = a.pow(l)"]}
{"goal":"pow_add_nonnegative","proof":["a.pow(l) * a.pow(k) != a.zpow(n + m)","a.pow(l) * a.pow(k) = a.pow(l + k)","Int.from_nat(l + k) != n + m or a.zpow(n + m) = a.pow(l + k)","Int.from_nat(l) + Int.from_nat(k) = Int.from_nat(l + k)","a.zpow(n + m) != a.pow(l + k)","Int.from_nat(l + k) != n + m"]}
{"goal":"a.zpow(n) * a.zpow(m) = a.zpow(n + m)","proof":["not n >= Int.0 or not m >= Int.0 or a.zpow(n) * a.zpow(m) = a.zpow(n + m)"]}
{"goal":"a.zpow(n) * a.zpow(m) = a.zpow(n) * a.inverse.zpow(-m)","proof":["a.inverse.zpow(-m) != a.zpow(m)","a.zpow(--m) = a.inverse.zpow(-m)","--m = m"]}
{"goal":"a.zpow(n) * a.zpow(m) = a.zpow(n - -m)","proof":["not n >= Int.0 or not -m >= Int.0 or a.zpow(n) * a.inverse.zpow(-m) = a.zpow(n - -m) or F.0 = a","Int.0 <= -m or Int.0.is_positive or (-m).is_negative","not (m - Int.0).is_positive or Int.0 <= m","Int.0 <= -m = -m >= Int.0","Int.0 <= m = m >= Int.0","(-m).is_negative = m.is_positive","m - Int.0 = m","not Int.0 <= m","not (-m).is_negative or m.is_positive","a.zpow(n) * a.inverse.zpow(-m) != a.zpow(n - -m)","not -m >= Int.0","not (m - Int.0).is_positive","not m.is_positive","not Int.0 <= -m","not (-m).is_negative","(-m).is_negative"]}
{"goal":"a.zpow(n) * a.zpow(m) = a.zpow(n + m)","proof":["a.zpow(n - -m) != a.zpow(n + m)","n - -m != n + m","n + --m = n - -m","--m = m"]}
{"goal":"-n >= Int.0","proof":["Int.0 <= -n or Int.0.is_positive or (-n).is_negative","not (n - Int.0).is_positive or Int.0 <= n","Int.0 <= -n = -n >= Int.0","Int.0 <= n = n >= Int.0","not Int.0 <= -n","(-n).is_negative = n.is_positive","n - Int.0 = n","not Int.0 <= n","(-n).is_negative","n.is_positive","not (n - Int.0).is_positive","(n - Int.0).is_positive"]}
{"goal":"a.zpow(n) * a.zpow(m) = a.inverse.zpow(-n) * a.zpow(m)","proof":["a.inverse.zpow(-n) != a.zpow(n)","a.zpow(--n) = a.inverse.zpow(-n)","--n = n"]}
{"goal":"a.zpow(n) * a.zpow(m) = a.zpow(m) * a.inverse.zpow(-n)","proof":["a.inverse.zpow(-n) * a.zpow(m) = a.zpow(m) * a.inverse.zpow(-n)"]}
{"goal":"a.zpow(n) * a.zpow(m) = a.zpow(m - -n)","proof":["not m >= Int.0 or not -n >= Int.0 or a.zpow(m) * a.inverse.zpow(-n) = a.zpow(m - -n) or F.0 = a","a.zpow(m) * a.inverse.zpow(-n) != a.zpow(m - -n)"]}
{"goal":"a.zpow(n) * a.zpow(m) = a.zpow(n + m)","proof":["a.zpow(m - -n) != a.zpow(n + m)","m - -n != n + m","m + --n = m - -n","m + n = n + m","Int.1 * n = n","--(Int.1 * n) = Int.1 * n"]}
{"goal":"-m >= Int.0","proof":["Int.0 <= -m or Int.0.is_positive or (-m).is_negative","not (m - Int.0).is_positive or Int.0 <= m","Int.0 <= -m = -m >= Int.0","Int.0 <= m = m >= Int.0","not Int.0 <= -m","(-m).is_negative = m.is_positive","m - Int.0 = m","not Int.0 <= m","(-m).is_negative","m.is_positive","not (m - Int.0).is_positive","(m - Int.0).is_positive"]}
{"goal":"a.zpow(n) * a.zpow(m) = a.inverse.zpow(-n) * a.inverse.zpow(-m)","proof":["a.zpow(--m) = a.inverse.zpow(-m)","a.zpow(--n) = a.inverse.zpow(-n)","a.inverse.zpow(-m) * a.inverse.zpow(-n) = a.inverse.zpow(-n) * a.inverse.zpow(-m)","a.zpow(m) * a.zpow(n) = a.zpow(n) * a.zpow(m)","--m = m","--n = n"]}
{"goal":"a.zpow(n) * a.zpow(m) = a.inverse.zpow(-n + -m)","proof":["not -n >= Int.0 or not -m >= Int.0 or a.inverse.zpow(-n) * a.inverse.zpow(-m) = a.inverse.zpow(-n + -m)","a.inverse.zpow(-n) * a.inverse.zpow(-m) != a.inverse.zpow(-n + -m)"]}
{"goal":"a.zpow(n) * a.zpow(m) = a.zpow(n + m)","proof":["-n + -m = -(n + m)","a.zpow(-(-n + -m)) = a.inverse.zpow(-n + -m)","--(n + m) = n + m"]}
{"goal":"pow_add","proof":["not m >= n or a.pow(m) * a.pow(n) = a.pow(m + n) or F.0 = a","not n >= m or a.pow(n) * a.pow(m) = a.pow(n + m) or F.0 = a","not n >= m","a.pow(m) * a.pow(n) = a.pow(n) * a.pow(m)","m <= n = n >= m","n <= m = m >= n","n <= m or m <= n","m + n = n + m","a.pow(n) * a.pow(m) != a.pow(m + n)","not m >= n or a.pow(m) * a.pow(n) = a.pow(m + n)","not m <= n","n <= m","m >= n","a.pow(m) * a.pow(n) != a.pow(m + n)","a.pow(m) * a.pow(n) = a.pow(m + n)"]}
