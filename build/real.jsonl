{"goal":"exists(k0: Rat) { k0.is_positive and rat_condition(f, k0, eps) }","proof":["let (s0: (Rat -> Real, Real) -> Rat, s1: Rat -> Real -> Real) satisfy { forall(x0: Rat -> Real, x1: Real) { not rat_uniform(x0) or not x1.is_positive or s0(x0, x1).is_positive } and forall(x2: Rat -> Real, x3: Real) { not rat_uniform(x2) or not x3.is_positive or rat_condition(x2, s0(x2, x3), x3) } and forall(x4: Rat -> Real) { s1(x4).is_positive or rat_uniform(x4) } and forall(x5: Rat -> Real, x6: Rat) { not rat_condition(x5, x6, s1(x5)) or not x6.is_positive or rat_uniform(x5) } }","not rat_condition(f, s0(f, eps), eps) or not s0(f, eps).is_positive","not rat_uniform(f) or not eps.is_positive or rat_condition(f, s0(f, eps), eps)","not rat_uniform(f) or not eps.is_positive or s0(f, eps).is_positive","not rat_uniform(f) or s0(f, eps).is_positive","s0(f, eps).is_positive","not rat_uniform(f) or rat_condition(f, s0(f, eps), eps)","not rat_condition(f, s0(f, eps), eps)","rat_condition(f, s0(f, eps), eps)"]}
{"goal":"exists(k0: Nat) { cauchy_bound(lift_seq(q), k0, Real.from_rat(delta)) }","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: Nat -> Real -> Real) satisfy { forall(x0: Real, x1: Nat -> Real) { not x0.is_positive or not converges(x1) or cauchy_bound(x1, s0(x1, x0), x0) } and forall(x2: Nat -> Real) { s1(x2).is_positive or converges(x2) } and forall(x3: Nat -> Real, x4: Nat) { not cauchy_bound(x3, x4, s1(x3)) or converges(x3) } }","not cauchy_bound(lift_seq(q), s0(lift_seq(q), Real.from_rat(delta)), Real.from_rat(delta))","not Real.from_rat(delta).is_positive or not converges(lift_seq(q)) or cauchy_bound(lift_seq(q), s0(lift_seq(q), Real.from_rat(delta)), Real.from_rat(delta))","not Real.from_rat(delta).is_positive","not delta.is_positive or Real.from_rat(delta).is_positive"]}
{"goal":"lift_seq(q)(i).is_close(lift_seq(q)(j), Real.from_rat(delta))","proof":["not cauchy_bound(lift_seq(q), n, Real.from_rat(delta)) or not n <= i or not n <= j or lift_seq(q, i).is_close(lift_seq(q, j), Real.from_rat(delta))","not cauchy_bound(lift_seq(q), n, Real.from_rat(delta)) or not n <= j or lift_seq(q, i).is_close(lift_seq(q, j), Real.from_rat(delta))","not cauchy_bound(lift_seq(q), n, Real.from_rat(delta)) or lift_seq(q, i).is_close(lift_seq(q, j), Real.from_rat(delta))"]}
{"goal":"Real.from_rat(q(i)).is_close(Real.from_rat(q(j)), Real.from_rat(delta))","proof":["(Real.from_rat(q(i)) - Real.from_rat(q(j))).abs < Real.from_rat(delta) = Real.from_rat(q(i)).is_close(Real.from_rat(q(j)), Real.from_rat(delta))","(lift_seq(q, i) - lift_seq(q, j)).abs < Real.from_rat(delta) = lift_seq(q, i).is_close(lift_seq(q, j), Real.from_rat(delta))","compose[Nat, Rat, Real](Real.from_rat, q, i) = Real.from_rat(q(i))","compose[Nat, Rat, Real](Real.from_rat, q, j) = Real.from_rat(q(j))","compose[Nat, Rat, Real](Real.from_rat, q, i) = lift_seq(q, i)","compose[Nat, Rat, Real](Real.from_rat, q, j) = lift_seq(q, j)"]}
{"goal":"q(i).is_close(q(j), delta)","proof":["not Real.from_rat(q(i)).is_close(Real.from_rat(q(j)), Real.from_rat(delta)) or q(i).is_close(q(j), delta)"]}
{"goal":"f(q(i)).is_close(f(q(j)), eps)","proof":["not rat_condition(f, delta, eps) or not q(i).is_close(q(j), delta) or f(q(i)).is_close(f(q(j)), eps)","not q(i).is_close(q(j), delta) or not rat_condition(f, delta, eps)"]}
{"goal":"compose[Nat, Rat, Real](f, q)(i).is_close(compose[Nat, Rat, Real](f, q)(j), eps)","proof":["(compose[Nat, Rat, Real](f, q, i) - compose[Nat, Rat, Real](f, q, j)).abs < eps = compose[Nat, Rat, Real](f, q, i).is_close(compose[Nat, Rat, Real](f, q, j), eps)","(f(q(i)) - f(q(j))).abs < eps = f(q(i)).is_close(f(q(j)), eps)","compose[Nat, Rat, Real](f, q, i) = f(q(i))","compose[Nat, Rat, Real](f, q, j) = f(q(j))"]}
{"goal":"cauchy_bound(compose[Nat, Rat, Real](f, q), n, eps)","proof":["let (s0: (Nat -> Real, Nat, Real) -> Nat, s1: (Nat -> Real, Nat, Real) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Nat, x2: Real, x3: Nat, x4: Nat) { not cauchy_bound(x0, x1, x2) or not x1 <= x3 or not x1 <= x4 or x0(x3).is_close(x0(x4), x2) } and forall(x5: Nat, x6: Nat -> Real, x7: Real) { x5 <= s0(x6, x5, x7) or cauchy_bound(x6, x5, x7) } and forall(x8: Nat, x9: Nat -> Real, x10: Real) { x8 <= s1(x9, x8, x10) or cauchy_bound(x9, x8, x10) } and forall(x11: Nat -> Real, x12: Nat, x13: Real) { not x11(s0(x11, x12, x13)).is_close(x11(s1(x11, x12, x13)), x13) or cauchy_bound(x11, x12, x13) } }","not n <= s0(compose[Nat, Rat, Real](f, q), n, eps) or not n <= s1(compose[Nat, Rat, Real](f, q), n, eps) or compose[Nat, Rat, Real](f, q, s0(compose[Nat, Rat, Real](f, q), n, eps)).is_close(compose[Nat, Rat, Real](f, q, s1(compose[Nat, Rat, Real](f, q), n, eps)), eps)","not compose[Nat, Rat, Real](f, q, s0(compose[Nat, Rat, Real](f, q), n, eps)).is_close(compose[Nat, Rat, Real](f, q, s1(compose[Nat, Rat, Real](f, q), n, eps)), eps) or cauchy_bound(compose[Nat, Rat, Real](f, q), n, eps)","n <= s1(compose[Nat, Rat, Real](f, q), n, eps) or cauchy_bound(compose[Nat, Rat, Real](f, q), n, eps)","n <= s0(compose[Nat, Rat, Real](f, q), n, eps) or cauchy_bound(compose[Nat, Rat, Real](f, q), n, eps)","n <= s0(compose[Nat, Rat, Real](f, q), n, eps)","n <= s1(compose[Nat, Rat, Real](f, q), n, eps)","not compose[Nat, Rat, Real](f, q, s0(compose[Nat, Rat, Real](f, q), n, eps)).is_close(compose[Nat, Rat, Real](f, q, s1(compose[Nat, Rat, Real](f, q), n, eps)), eps)"]}
{"goal":"uniform_imp_seq","proof":["let (s0: (Nat -> Real, Real) -> Nat, s1: Nat -> Real -> Real) satisfy { forall(x0: Real, x1: Nat -> Real) { not x0.is_positive or not converges(x1) or cauchy_bound(x1, s0(x1, x0), x0) } and forall(x2: Nat -> Real) { s1(x2).is_positive or converges(x2) } and forall(x3: Nat -> Real, x4: Nat) { not cauchy_bound(x3, x4, s1(x3)) or converges(x3) } }","let s2: Real -> Nat satisfy { forall(x5: Real) { not x5.is_positive or cauchy_bound(compose[Nat, Rat, Real](f, q), s2(x5), x5) } }","not s1(compose[Nat, Rat, Real](f, q)).is_positive or cauchy_bound(compose[Nat, Rat, Real](f, q), s2(s1(compose[Nat, Rat, Real](f, q))), s1(compose[Nat, Rat, Real](f, q)))","not cauchy_bound(compose[Nat, Rat, Real](f, q), s2(s1(compose[Nat, Rat, Real](f, q))), s1(compose[Nat, Rat, Real](f, q))) or converges(compose[Nat, Rat, Real](f, q))","s1(compose[Nat, Rat, Real](f, q)).is_positive or converges(compose[Nat, Rat, Real](f, q))","s1(compose[Nat, Rat, Real](f, q)).is_positive","not cauchy_bound(compose[Nat, Rat, Real](f, q), s2(s1(compose[Nat, Rat, Real](f, q))), s1(compose[Nat, Rat, Real](f, q)))"]}
{"goal":"exists(k0: Real) { k0.is_positive and uniform_condition(f, k0, eps) }","proof":["let (s0: (Real -> Real, Real) -> Real, s1: Real -> Real -> Real) satisfy { forall(x0: Real -> Real, x1: Real) { not uniform(x0) or not x1.is_positive or s0(x0, x1).is_positive } and forall(x2: Real -> Real, x3: Real) { not uniform(x2) or not x3.is_positive or uniform_condition(x2, s0(x2, x3), x3) } and forall(x4: Real -> Real) { s1(x4).is_positive or uniform(x4) } and forall(x5: Real -> Real, x6: Real) { not uniform_condition(x5, x6, s1(x5)) or not x6.is_positive or uniform(x5) } }","not uniform_condition(f, s0(f, eps), eps) or not s0(f, eps).is_positive","not uniform(f) or not eps.is_positive or uniform_condition(f, s0(f, eps), eps)","not uniform(f) or not eps.is_positive or s0(f, eps).is_positive","not uniform(f) or s0(f, eps).is_positive","s0(f, eps).is_positive","not uniform(f) or uniform_condition(f, s0(f, eps), eps)","not uniform_condition(f, s0(f, eps), eps)","uniform_condition(f, s0(f, eps), eps)"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies a(x0).is_close(limit(a), delta) } }","proof":["let (s1: (Nat -> Real, Real, Real) -> Nat, s2: (Nat -> Real, Real) -> Real) satisfy { forall(x2: Real, x3: Nat -> Real, x4: Real) { not x2.is_positive or not converges_to(x3, x4) or tail_bound(x3, x4, s1(x3, x4, x2), x2) } and forall(x5: Nat -> Real, x6: Real) { s2(x5, x6).is_positive or converges_to(x5, x6) } and forall(x7: Nat -> Real, x8: Real, x9: Nat) { not tail_bound(x7, x8, x9, s2(x7, x8)) or converges_to(x7, x8) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not a(s0(x1)).is_close(limit(a), delta) } }","not a(s0(s1(a, limit(a), delta))).is_close(limit(a), delta)","s1(a, limit(a), delta) <= s0(s1(a, limit(a), delta))","not delta.is_positive or not converges_to(a, limit(a)) or tail_bound(a, limit(a), s1(a, limit(a), delta), delta)","not tail_bound(a, limit(a), s1(a, limit(a), delta), delta) or not s1(a, limit(a), delta) <= s0(s1(a, limit(a), delta)) or a(s0(s1(a, limit(a), delta))).is_close(limit(a), delta)","not converges(a) or converges_to(a, limit(a))","converges_to(a, limit(a))","not tail_bound(a, limit(a), s1(a, limit(a), delta), delta) or not s1(a, limit(a), delta) <= s0(s1(a, limit(a), delta))","not tail_bound(a, limit(a), s1(a, limit(a), delta), delta)"]}
{"goal":"a(i).is_close(limit(a), delta)","proof":["not n <= i or a(i).is_close(limit(a), delta)"]}
{"goal":"compose[Nat, Real, Real](f, a)(i).is_close(f(limit(a)), eps)","proof":["not uniform_condition(f, delta, eps) or not a(i).is_close(limit(a), delta) or f(a(i)).is_close(f(limit(a)), eps)","compose[Nat, Real, Real](f, a, i) = f(a(i))","not f(a(i)).is_close(f(limit(a)), eps)","not a(i).is_close(limit(a), delta) or not uniform_condition(f, delta, eps)"]}
{"goal":"fa(i).is_close(f(limit(a)), eps)","proof":["compose[Nat, Real, Real](f, a, i) = fa(i)","not compose[Nat, Real, Real](f, a, i).is_close(f(limit(a)), eps)"]}
{"goal":"tail_bound(fa, f(limit(a)), n, eps)","proof":["let s0: (Nat -> Real, Real, Nat, Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat, x3: Real, x4: Nat) { not tail_bound(x0, x1, x2, x3) or not x2 <= x4 or x0(x4).is_close(x1, x3) } and forall(x5: Nat, x6: Nat -> Real, x7: Real, x8: Real) { x5 <= s0(x6, x7, x5, x8) or tail_bound(x6, x7, x5, x8) } and forall(x9: Nat -> Real, x10: Real, x11: Nat, x12: Real) { not x9(s0(x9, x10, x11, x12)).is_close(x10, x12) or tail_bound(x9, x10, x11, x12) } }","not n <= s0(fa, f(limit(a)), n, eps) or fa(s0(fa, f(limit(a)), n, eps)).is_close(f(limit(a)), eps)","not fa(s0(fa, f(limit(a)), n, eps)).is_close(f(limit(a)), eps) or tail_bound(fa, f(limit(a)), n, eps)","n <= s0(fa, f(limit(a)), n, eps) or tail_bound(fa, f(limit(a)), n, eps)","n <= s0(fa, f(limit(a)), n, eps)","not fa(s0(fa, f(limit(a)), n, eps)).is_close(f(limit(a)), eps)","fa(s0(fa, f(limit(a)), n, eps)).is_close(f(limit(a)), eps)"]}
{"goal":"converges_to(fa, f(limit(a)))","proof":["let (s0: (Nat -> Real, Real, Real) -> Nat, s1: (Nat -> Real, Real) -> Real) satisfy { forall(x0: Real, x1: Nat -> Real, x2: Real) { not x0.is_positive or not converges_to(x1, x2) or tail_bound(x1, x2, s0(x1, x2, x0), x0) } and forall(x3: Nat -> Real, x4: Real) { s1(x3, x4).is_positive or converges_to(x3, x4) } and forall(x5: Nat -> Real, x6: Real, x7: Nat) { not tail_bound(x5, x6, x7, s1(x5, x6)) or converges_to(x5, x6) } }","let s2: Real -> Nat satisfy { forall(x8: Real) { not x8.is_positive or tail_bound(fa, f(limit(a)), s2(x8), x8) } }","not s1(fa, f(limit(a))).is_positive or tail_bound(fa, f(limit(a)), s2(s1(fa, f(limit(a)))), s1(fa, f(limit(a))))","not tail_bound(fa, f(limit(a)), s2(s1(fa, f(limit(a)))), s1(fa, f(limit(a)))) or converges_to(fa, f(limit(a)))","s1(fa, f(limit(a))).is_positive or converges_to(fa, f(limit(a)))","s1(fa, f(limit(a))).is_positive","not tail_bound(fa, f(limit(a)), s2(s1(fa, f(limit(a)))), s1(fa, f(limit(a))))"]}
{"goal":"limit_compose_uniform","proof":["not converges_to(fa, f(limit(a)))"]}
{"goal":"exists(k0: Rat) { k0.is_positive and rat_condition(f, k0, eps) }","proof":["let (s0: (Rat -> Real, Real) -> Rat, s1: Rat -> Real -> Real) satisfy { forall(x0: Rat -> Real, x1: Real) { not rat_uniform(x0) or not x1.is_positive or s0(x0, x1).is_positive } and forall(x2: Rat -> Real, x3: Real) { not rat_uniform(x2) or not x3.is_positive or rat_condition(x2, s0(x2, x3), x3) } and forall(x4: Rat -> Real) { s1(x4).is_positive or rat_uniform(x4) } and forall(x5: Rat -> Real, x6: Rat) { not rat_condition(x5, x6, s1(x5)) or not x6.is_positive or rat_uniform(x5) } }","not rat_condition(f, s0(f, eps), eps) or not s0(f, eps).is_positive","not rat_uniform(f) or not eps.is_positive or rat_condition(f, s0(f, eps), eps)","not rat_uniform(f) or not eps.is_positive or s0(f, eps).is_positive","not rat_uniform(f) or s0(f, eps).is_positive","s0(f, eps).is_positive","not rat_uniform(f) or rat_condition(f, s0(f, eps), eps)","not rat_condition(f, s0(f, eps), eps)","rat_condition(f, s0(f, eps), eps)"]}
{"goal":"Real.from_rat(delta).is_positive","proof":["let s0: Real satisfy { true }","not delta.is_positive or s0.is_close(Real.from_rat(real_seq.rat_approx(s0, delta)), Real.from_rat(delta))","not s0.is_close(Real.from_rat(real_seq.rat_approx(s0, delta)), Real.from_rat(delta)) or Real.from_rat(delta).is_positive","not s0.is_close(Real.from_rat(real_seq.rat_approx(s0, delta)), Real.from_rat(delta))"]}
{"goal":"exists(k0: Nat) { tail_bound(lift_seq(a), Real.from_rat(r), k0, Real.from_rat(delta)) }","proof":["let (s0: (Nat -> Real, Real, Real) -> Nat, s1: (Nat -> Real, Real) -> Real) satisfy { forall(x0: Nat -> Real, x1: Real, x2: Real) { not converges_to(x0, x1) or not x2.is_positive or tail_bound(x0, x1, s0(x0, x1, x2), x2) } and forall(x3: Nat -> Real, x4: Real) { s1(x3, x4).is_positive or converges_to(x3, x4) } and forall(x5: Nat -> Real, x6: Real, x7: Nat) { not tail_bound(x5, x6, x7, s1(x5, x6)) or converges_to(x5, x6) } }","not tail_bound(lift_seq(a), Real.from_rat(r), s0(lift_seq(a), Real.from_rat(r), Real.from_rat(delta)), Real.from_rat(delta))","not converges_to(lift_seq(a), Real.from_rat(r)) or not Real.from_rat(delta).is_positive or tail_bound(lift_seq(a), Real.from_rat(r), s0(lift_seq(a), Real.from_rat(r), Real.from_rat(delta)), Real.from_rat(delta))"]}
{"goal":"tail_bound(s, Real.from_rat(r), n, Real.from_rat(delta))","proof":["not tail_bound(lift_seq(a), Real.from_rat(r), n, Real.from_rat(delta))"]}
{"goal":"s(i).is_close(Real.from_rat(r), Real.from_rat(delta))","proof":["not tail_bound(s, Real.from_rat(r), n, Real.from_rat(delta)) or not n <= i or s(i).is_close(Real.from_rat(r), Real.from_rat(delta))","not tail_bound(s, Real.from_rat(r), n, Real.from_rat(delta)) or not n <= i"]}
{"goal":"a(i).is_close(r, delta)","proof":["lift_seq(a, i) = s(i)","not Real.from_rat(a(i)).is_close(Real.from_rat(r), Real.from_rat(delta)) or a(i).is_close(r, delta)","lift_seq(a, i) = Real.from_rat(a(i))","not Real.from_rat(a(i)).is_close(Real.from_rat(r), Real.from_rat(delta))"]}
{"goal":"f(a(i)).is_close(f(r), eps)","proof":["not rat_condition(f, delta, eps) or not a(i).is_close(r, delta) or f(a(i)).is_close(f(r), eps)","not a(i).is_close(r, delta) or not rat_condition(f, delta, eps)"]}
{"goal":"compose[Nat, Rat, Real](f, a)(i).is_close(f(r), eps)","proof":["compose[Nat, Rat, Real](f, a, i) = f(a(i))"]}
{"goal":"fa(i).is_close(f(r), eps)","proof":["compose[Nat, Rat, Real](f, a, i) = fa(i)","not compose[Nat, Rat, Real](f, a, i).is_close(f(r), eps)"]}
{"goal":"tail_bound(fa, f(r), n, eps)","proof":["let s0: (Nat -> Real, Real, Nat, Real) -> Nat satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat, x3: Real, x4: Nat) { not tail_bound(x0, x1, x2, x3) or not x2 <= x4 or x0(x4).is_close(x1, x3) } and forall(x5: Nat, x6: Nat -> Real, x7: Real, x8: Real) { x5 <= s0(x6, x7, x5, x8) or tail_bound(x6, x7, x5, x8) } and forall(x9: Nat -> Real, x10: Real, x11: Nat, x12: Real) { not x9(s0(x9, x10, x11, x12)).is_close(x10, x12) or tail_bound(x9, x10, x11, x12) } }","not n <= s0(fa, f(r), n, eps) or fa(s0(fa, f(r), n, eps)).is_close(f(r), eps)","not fa(s0(fa, f(r), n, eps)).is_close(f(r), eps) or tail_bound(fa, f(r), n, eps)","n <= s0(fa, f(r), n, eps) or tail_bound(fa, f(r), n, eps)","n <= s0(fa, f(r), n, eps)","not fa(s0(fa, f(r), n, eps)).is_close(f(r), eps)","fa(s0(fa, f(r), n, eps)).is_close(f(r), eps)"]}
{"goal":"converges_to(fa, f(r))","proof":["let (s0: (Nat -> Real, Real, Real) -> Nat, s1: (Nat -> Real, Real) -> Real) satisfy { forall(x0: Nat -> Real, x1: Real, x2: Real) { not converges_to(x0, x1) or not x2.is_positive or tail_bound(x0, x1, s0(x0, x1, x2), x2) } and forall(x3: Nat -> Real, x4: Real) { s1(x3, x4).is_positive or converges_to(x3, x4) } and forall(x5: Nat -> Real, x6: Real, x7: Nat) { not tail_bound(x5, x6, x7, s1(x5, x6)) or converges_to(x5, x6) } }","let s2: Real -> Nat satisfy { forall(x8: Real) { not x8.is_positive or tail_bound(fa, f(r), s2(x8), x8) } }","not s1(fa, f(r)).is_positive or tail_bound(fa, f(r), s2(s1(fa, f(r))), s1(fa, f(r)))","not tail_bound(fa, f(r), s2(s1(fa, f(r))), s1(fa, f(r))) or converges_to(fa, f(r))","s1(fa, f(r)).is_positive or converges_to(fa, f(r))","s1(fa, f(r)).is_positive","not tail_bound(fa, f(r), s2(s1(fa, f(r))), s1(fa, f(r)))"]}
{"goal":"limit_compose_rat_uniform","proof":[]}
{"goal":"converges_to(lift_seq(rat_seq(Real.from_rat(r))), Real.from_rat(r))","proof":["converges_to(lift_seq(rat_seq(Real.from_rat(r))), Real.from_rat(r))"]}
{"goal":"converges_to(compose[Nat, Rat, Real](f, rat_seq(Real.from_rat(r))), f(r))","proof":["not converges_to(lift_seq(rat_seq(Real.from_rat(r))), Real.from_rat(r)) or not rat_uniform(f) or converges_to(compose[Nat, Rat, Real](f, rat_seq(Real.from_rat(r))), f(r))"]}
{"goal":"limit(compose[Nat, Rat, Real](f, rat_seq(Real.from_rat(r)))) = f(r)","proof":["not converges_to(compose[Nat, Rat, Real](f, rat_seq(Real.from_rat(r))), f(r)) or not converges_to(compose[Nat, Rat, Real](f, rat_seq(Real.from_rat(r))), limit(compose[Nat, Rat, Real](f, rat_seq(Real.from_rat(r))))) or limit(compose[Nat, Rat, Real](f, rat_seq(Real.from_rat(r)))) = f(r)","not converges(compose[Nat, Rat, Real](f, rat_seq(Real.from_rat(r)))) or converges_to(compose[Nat, Rat, Real](f, rat_seq(Real.from_rat(r))), limit(compose[Nat, Rat, Real](f, rat_seq(Real.from_rat(r)))))","not converges_to(compose[Nat, Rat, Real](f, rat_seq(Real.from_rat(r))), f(r)) or converges(compose[Nat, Rat, Real](f, rat_seq(Real.from_rat(r))))","not converges_to(compose[Nat, Rat, Real](f, rat_seq(Real.from_rat(r))), limit(compose[Nat, Rat, Real](f, rat_seq(Real.from_rat(r))))) or not converges_to(compose[Nat, Rat, Real](f, rat_seq(Real.from_rat(r))), f(r))","converges(compose[Nat, Rat, Real](f, rat_seq(Real.from_rat(r))))","not converges_to(compose[Nat, Rat, Real](f, rat_seq(Real.from_rat(r))), limit(compose[Nat, Rat, Real](f, rat_seq(Real.from_rat(r)))))","converges_to(compose[Nat, Rat, Real](f, rat_seq(Real.from_rat(r))), limit(compose[Nat, Rat, Real](f, rat_seq(Real.from_rat(r)))))"]}
{"goal":"lift_fixes_rats","proof":["limit(compose[Nat, Rat, Real](f, rat_seq(Real.from_rat(r)))) = lift_uc(f, Real.from_rat(r))"]}
{"goal":"exists(k0: Real) { k0.is_positive and k0 + k0 + k0 < eps }","proof":["let s0: Real -> Real satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or s0(x1) + s0(x1) + s0(x1) < x1 } }","not s0(eps) + s0(eps) + s0(eps) < eps or not s0(eps).is_positive","not eps.is_positive or s0(eps) + s0(eps) + s0(eps) < eps","not eps.is_positive or s0(eps).is_positive","s0(eps).is_positive","s0(eps) + s0(eps) + s0(eps) < eps","not s0(eps) + s0(eps) + s0(eps) < eps"]}
{"goal":"exists(k0: Rat) { k0.is_positive and rat_condition(f, k0, eps3) }","proof":["let (s0: (Rat -> Real, Real) -> Rat, s1: Rat -> Real -> Real) satisfy { forall(x0: Rat -> Real, x1: Real) { not rat_uniform(x0) or not x1.is_positive or s0(x0, x1).is_positive } and forall(x2: Rat -> Real, x3: Real) { not rat_uniform(x2) or not x3.is_positive or rat_condition(x2, s0(x2, x3), x3) } and forall(x4: Rat -> Real) { s1(x4).is_positive or rat_uniform(x4) } and forall(x5: Rat -> Real, x6: Rat) { not rat_condition(x5, x6, s1(x5)) or not x6.is_positive or rat_uniform(x5) } }","not rat_condition(f, s0(f, eps3), eps3) or not s0(f, eps3).is_positive","not rat_uniform(f) or not eps3.is_positive or rat_condition(f, s0(f, eps3), eps3)","not rat_uniform(f) or not eps3.is_positive or s0(f, eps3).is_positive","not rat_uniform(f) or s0(f, eps3).is_positive","s0(f, eps3).is_positive","not rat_uniform(f) or rat_condition(f, s0(f, eps3), eps3)","not rat_condition(f, s0(f, eps3), eps3)","rat_condition(f, s0(f, eps3), eps3)"]}
{"goal":"converges(fas)","proof":["not converges(compose[Nat, Rat, Real](f, rat_seq(a)))","not converges(lift_seq(rat_seq(a))) or not rat_uniform(f) or converges(compose[Nat, Rat, Real](f, rat_seq(a)))","converges(lift_seq(rat_seq(a)))"]}
{"goal":"converges_to(fas, limit(fas))","proof":["not converges(fas) or converges_to(fas, limit(fas))"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies fas(x0).is_close(limit(fas), eps3) } }","proof":["let (s1: (Nat -> Real, Real, Real) -> Nat, s2: (Nat -> Real, Real) -> Real) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Real) { not converges_to(x2, x3) or not x4.is_positive or tail_bound(x2, x3, s1(x2, x3, x4), x4) } and forall(x5: Nat -> Real, x6: Real) { s2(x5, x6).is_positive or converges_to(x5, x6) } and forall(x7: Nat -> Real, x8: Real, x9: Nat) { not tail_bound(x7, x8, x9, s2(x7, x8)) or converges_to(x7, x8) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not fas(s0(x1)).is_close(limit(fas), eps3) } }","not fas(s0(s1(fas, limit(fas), eps3))).is_close(limit(fas), eps3)","s1(fas, limit(fas), eps3) <= s0(s1(fas, limit(fas), eps3))","not converges_to(fas, limit(fas)) or not eps3.is_positive or tail_bound(fas, limit(fas), s1(fas, limit(fas), eps3), eps3)","not tail_bound(fas, limit(fas), s1(fas, limit(fas), eps3), eps3) or not s1(fas, limit(fas), eps3) <= s0(s1(fas, limit(fas), eps3)) or fas(s0(s1(fas, limit(fas), eps3))).is_close(limit(fas), eps3)","not tail_bound(fas, limit(fas), s1(fas, limit(fas), eps3), eps3) or not s1(fas, limit(fas), eps3) <= s0(s1(fas, limit(fas), eps3))","not tail_bound(fas, limit(fas), s1(fas, limit(fas), eps3), eps3)"]}
{"goal":"converges(fbs)","proof":["not converges(compose[Nat, Rat, Real](f, rat_seq(b)))","not converges(lift_seq(rat_seq(b))) or not rat_uniform(f) or converges(compose[Nat, Rat, Real](f, rat_seq(b)))","converges(lift_seq(rat_seq(b)))"]}
{"goal":"converges_to(fbs, limit(fbs))","proof":["not converges(fbs) or converges_to(fbs, limit(fbs))"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies fbs(x0).is_close(limit(fbs), eps3) } }","proof":["let (s1: (Nat -> Real, Real, Real) -> Nat, s2: (Nat -> Real, Real) -> Real) satisfy { forall(x2: Nat -> Real, x3: Real, x4: Real) { not converges_to(x2, x3) or not x4.is_positive or tail_bound(x2, x3, s1(x2, x3, x4), x4) } and forall(x5: Nat -> Real, x6: Real) { s2(x5, x6).is_positive or converges_to(x5, x6) } and forall(x7: Nat -> Real, x8: Real, x9: Nat) { not tail_bound(x7, x8, x9, s2(x7, x8)) or converges_to(x7, x8) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not fbs(s0(x1)).is_close(limit(fbs), eps3) } }","not fbs(s0(s1(fbs, limit(fbs), eps3))).is_close(limit(fbs), eps3)","s1(fbs, limit(fbs), eps3) <= s0(s1(fbs, limit(fbs), eps3))","not converges_to(fbs, limit(fbs)) or not eps3.is_positive or tail_bound(fbs, limit(fbs), s1(fbs, limit(fbs), eps3), eps3)","not tail_bound(fbs, limit(fbs), s1(fbs, limit(fbs), eps3), eps3) or not s1(fbs, limit(fbs), eps3) <= s0(s1(fbs, limit(fbs), eps3)) or fbs(s0(s1(fbs, limit(fbs), eps3))).is_close(limit(fbs), eps3)","not tail_bound(fbs, limit(fbs), s1(fbs, limit(fbs), eps3), eps3) or not s1(fbs, limit(fbs), eps3) <= s0(s1(fbs, limit(fbs), eps3))","not tail_bound(fbs, limit(fbs), s1(fbs, limit(fbs), eps3), eps3)"]}
{"goal":"limit(lift_seq(rat_seq(a))) = a","proof":["limit(lift_seq(rat_seq(a))) = limit_rat(rat_seq(a))","limit_rat(rat_seq(a)) != a","limit_rat(rat_seq(a)) = a"]}
{"goal":"limit_rat(rat_seq(a)) = a","proof":["limit(lift_seq(rat_seq(a))) = limit_rat(rat_seq(a))"]}
{"goal":"limit(lift_seq(rat_seq(b))) = b","proof":["limit(lift_seq(rat_seq(b))) = limit_rat(rat_seq(b))","limit_rat(rat_seq(b)) != b","limit_rat(rat_seq(b)) = b"]}
{"goal":"limit_rat(rat_seq(b)) = b","proof":["limit(lift_seq(rat_seq(b))) = limit_rat(rat_seq(b))"]}
{"goal":"limit_rat(rat_seq(a)).is_close(limit_rat(rat_seq(b)), Real.from_rat(delta))","proof":[]}
{"goal":"converges(lift_seq(rat_seq(a)))","proof":["converges_to(lift_seq(rat_seq(a)), a)","not converges_to(lift_seq(rat_seq(a)), a) or converges(lift_seq(rat_seq(a)))","not converges_to(lift_seq(rat_seq(a)), a)"]}
{"goal":"converges(lift_seq(rat_seq(b)))","proof":["converges_to(lift_seq(rat_seq(b)), b)","not converges_to(lift_seq(rat_seq(b)), b) or converges(lift_seq(rat_seq(b)))","not converges_to(lift_seq(rat_seq(b)), b)"]}
{"goal":"seq_close(lift_seq(rat_seq(a)), lift_seq(rat_seq(b)), Real.from_rat(delta))","proof":["not limit(lift_seq(rat_seq(a))).is_close(limit(lift_seq(rat_seq(b))), Real.from_rat(delta)) or not converges(lift_seq(rat_seq(a))) or not converges(lift_seq(rat_seq(b))) or seq_close(lift_seq(rat_seq(a)), lift_seq(rat_seq(b)), Real.from_rat(delta))","not limit(lift_seq(rat_seq(a))).is_close(limit(lift_seq(rat_seq(b))), Real.from_rat(delta))"]}
{"goal":"exists(k0: Nat) { forall(x0: Nat) { k0 <= x0 implies lift_seq(rat_seq(a))(x0).is_close(lift_seq(rat_seq(b))(x0), Real.from_rat(delta)) } }","proof":["let (s1: (Nat -> Real, Nat -> Real, Real) -> Nat, s2: (Nat -> Real, Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x2: Nat -> Real, x3: Nat -> Real, x4: Real, x5: Nat) { not s1(x2, x3, x4) <= x5 or not seq_close(x2, x3, x4) or x2(x5).is_close(x3(x5), x4) } and forall(x6: Nat, x7: Nat -> Real, x8: Nat -> Real, x9: Real) { x6 <= s2(x7, x8, x9, x6) or seq_close(x7, x8, x9) } and forall(x10: Nat -> Real, x11: Nat -> Real, x12: Real, x13: Nat) { not x10(s2(x10, x11, x12, x13)).is_close(x11(s2(x10, x11, x12, x13)), x12) or seq_close(x10, x11, x12) } }","let s0: Nat -> Nat satisfy { forall(x0: Nat) { x0 <= s0(x0) } and forall(x1: Nat) { not lift_seq(rat_seq(a), s0(x1)).is_close(lift_seq(rat_seq(b), s0(x1)), Real.from_rat(delta)) } }","not lift_seq(rat_seq(a), s0(s1(lift_seq(rat_seq(a)), lift_seq(rat_seq(b)), Real.from_rat(delta)))).is_close(lift_seq(rat_seq(b), s0(s1(lift_seq(rat_seq(a)), lift_seq(rat_seq(b)), Real.from_rat(delta)))), Real.from_rat(delta))","s1(lift_seq(rat_seq(a)), lift_seq(rat_seq(b)), Real.from_rat(delta)) <= s0(s1(lift_seq(rat_seq(a)), lift_seq(rat_seq(b)), Real.from_rat(delta)))","not s1(lift_seq(rat_seq(a)), lift_seq(rat_seq(b)), Real.from_rat(delta)) <= s0(s1(lift_seq(rat_seq(a)), lift_seq(rat_seq(b)), Real.from_rat(delta))) or not seq_close(lift_seq(rat_seq(a)), lift_seq(rat_seq(b)), Real.from_rat(delta)) or lift_seq(rat_seq(a), s0(s1(lift_seq(rat_seq(a)), lift_seq(rat_seq(b)), Real.from_rat(delta)))).is_close(lift_seq(rat_seq(b), s0(s1(lift_seq(rat_seq(a)), lift_seq(rat_seq(b)), Real.from_rat(delta)))), Real.from_rat(delta))","not seq_close(lift_seq(rat_seq(a)), lift_seq(rat_seq(b)), Real.from_rat(delta)) or lift_seq(rat_seq(a), s0(s1(lift_seq(rat_seq(a)), lift_seq(rat_seq(b)), Real.from_rat(delta)))).is_close(lift_seq(rat_seq(b), s0(s1(lift_seq(rat_seq(a)), lift_seq(rat_seq(b)), Real.from_rat(delta)))), Real.from_rat(delta))"]}
{"goal":"exists(k0: Nat) { n1 <= k0 and n2 <= k0 and n3 <= k0 }","proof":["let s0: (Nat, Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat, x2: Nat) { x0 <= s0(x0, x1, x2) } and forall(x3: Nat, x4: Nat, x5: Nat) { x3 <= s0(x4, x3, x5) } and forall(x6: Nat, x7: Nat, x8: Nat) { x6 <= s0(x7, x8, x6) } }","not n3 <= s0(n3, n1, n2) or not n2 <= s0(n3, n1, n2) or not n1 <= s0(n3, n1, n2)","n2 <= s0(n3, n1, n2)","n1 <= s0(n3, n1, n2)","n3 <= s0(n3, n1, n2)","not n2 <= s0(n3, n1, n2) or not n1 <= s0(n3, n1, n2)","not n2 <= s0(n3, n1, n2)"]}
{"goal":"fas(n).is_close(limit(fas), eps3)","proof":["not n1 <= n or fas(n).is_close(limit(fas), eps3)"]}
{"goal":"fbs(n).is_close(limit(fbs), eps3)","proof":["not n2 <= n or fbs(n).is_close(limit(fbs), eps3)"]}
{"goal":"lift_seq(rat_seq(a))(n).is_close(lift_seq(rat_seq(b))(n), Real.from_rat(delta))","proof":["not n3 <= n or lift_seq(rat_seq(a), n).is_close(lift_seq(rat_seq(b), n), Real.from_rat(delta))"]}
{"goal":"rat_seq(a)(n).is_close(rat_seq(b)(n), delta)","proof":["not Real.from_rat(rat_seq(a, n)).is_close(Real.from_rat(rat_seq(b, n)), Real.from_rat(delta)) or rat_seq(a, n).is_close(rat_seq(b, n), delta)","lift_seq(rat_seq(a), n) = Real.from_rat(rat_seq(a, n))","lift_seq(rat_seq(b), n) = Real.from_rat(rat_seq(b, n))","lift_seq(rat_seq(a), n).is_close(Real.from_rat(rat_seq(b, n)), Real.from_rat(delta))","not Real.from_rat(rat_seq(a, n)).is_close(Real.from_rat(rat_seq(b, n)), Real.from_rat(delta))","Real.from_rat(rat_seq(a, n)).is_close(Real.from_rat(rat_seq(b, n)), Real.from_rat(delta))"]}
{"goal":"f(rat_seq(a)(n)).is_close(f(rat_seq(b)(n)), eps3)","proof":["not rat_condition(f, delta, eps3) or not rat_seq(a, n).is_close(rat_seq(b, n), delta) or f(rat_seq(a, n)).is_close(f(rat_seq(b, n)), eps3)","not rat_seq(a, n).is_close(rat_seq(b, n), delta) or not rat_condition(f, delta, eps3)"]}
{"goal":"limit(fas).is_close(fas(n), eps3)","proof":["not fas(n).is_close(limit(fas), eps3) or limit(fas).is_close(fas(n), eps3)"]}
{"goal":"fas(n).is_close(fbs(n), eps3)","proof":["compose[Nat, Rat, Real](f, rat_seq(b), n) = fbs(n)","compose[Nat, Rat, Real](f, rat_seq(a), n) = fas(n)","(f(rat_seq(a, n)) - f(rat_seq(b, n))).abs < eps3 = f(rat_seq(a, n)).is_close(f(rat_seq(b, n)), eps3)","(fas(n) - fbs(n)).abs < eps3 = fas(n).is_close(fbs(n), eps3)","compose[Nat, Rat, Real](f, rat_seq(a), n) = f(rat_seq(a, n))","compose[Nat, Rat, Real](f, rat_seq(b), n) = f(rat_seq(b, n))"]}
{"goal":"limit(fas).is_close(fbs(n), eps3 + eps3)","proof":["not limit(fas).is_close(fas(n), eps3) or not fbs(n).is_close(fas(n), eps3) or limit(fas).is_close(fbs(n), eps3 + eps3)","not fas(n).is_close(fbs(n), eps3) or fbs(n).is_close(fas(n), eps3)","not limit(fas).is_close(fas(n), eps3) or not fbs(n).is_close(fas(n), eps3)","fbs(n).is_close(fas(n), eps3)","not fbs(n).is_close(fas(n), eps3)"]}
{"goal":"limit(fas).is_close(limit(fbs), eps3 + eps3 + eps3)","proof":["not limit(fas).is_close(fbs(n), eps3 + eps3) or not limit(fbs).is_close(fbs(n), eps3) or limit(fas).is_close(limit(fbs), eps3 + eps3 + eps3)","not fbs(n).is_close(limit(fbs), eps3) or limit(fbs).is_close(fbs(n), eps3)","not limit(fas).is_close(fbs(n), eps3 + eps3) or not limit(fbs).is_close(fbs(n), eps3)","limit(fbs).is_close(fbs(n), eps3)","not limit(fbs).is_close(fbs(n), eps3)"]}
{"goal":"limit(fas).is_close(limit(fbs), eps)","proof":["not eps3 + eps3 + eps3 < eps or not limit(fas).is_close(limit(fbs), eps3 + eps3 + eps3) or limit(fas).is_close(limit(fbs), eps)","not limit(fas).is_close(limit(fbs), eps3 + eps3 + eps3) or not eps3 + eps3 + eps3 < eps"]}
{"goal":"lift_uc(f)(a).is_close(lift_uc(f)(b), eps)","proof":["(lift_uc(f, a) - lift_uc(f, b)).abs < eps = lift_uc(f, a).is_close(lift_uc(f, b), eps)","(limit(fas) - limit(fbs)).abs < eps = limit(fas).is_close(limit(fbs), eps)","limit(compose[Nat, Rat, Real](f, rat_seq(a))) = lift_uc(f, a)","limit(compose[Nat, Rat, Real](f, rat_seq(b))) = lift_uc(f, b)"]}
{"goal":"uniform_condition(lift_uc(f), Real.from_rat(delta), eps)","proof":["let (s0: (Real -> Real, Real, Real) -> Real, s1: (Real -> Real, Real, Real) -> Real) satisfy { forall(x0: Real -> Real, x1: Real, x2: Real, x3: Real, x4: Real) { not uniform_condition(x0, x1, x2) or not x3.is_close(x4, x1) or x0(x3).is_close(x0(x4), x2) } and forall(x5: Real -> Real, x6: Real, x7: Real) { s0(x5, x6, x7).is_close(s1(x5, x6, x7), x6) or uniform_condition(x5, x6, x7) } and forall(x8: Real -> Real, x9: Real, x10: Real) { not x8(s0(x8, x9, x10)).is_close(x8(s1(x8, x9, x10)), x10) or uniform_condition(x8, x9, x10) } }","not s0(lift_uc(f), Real.from_rat(delta), eps).is_close(s1(lift_uc(f), Real.from_rat(delta), eps), Real.from_rat(delta)) or lift_uc(f, s0(lift_uc(f), Real.from_rat(delta), eps)).is_close(lift_uc(f, s1(lift_uc(f), Real.from_rat(delta), eps)), eps)","not lift_uc(f, s0(lift_uc(f), Real.from_rat(delta), eps)).is_close(lift_uc(f, s1(lift_uc(f), Real.from_rat(delta), eps)), eps) or uniform_condition(lift_uc(f), Real.from_rat(delta), eps)","s0(lift_uc(f), Real.from_rat(delta), eps).is_close(s1(lift_uc(f), Real.from_rat(delta), eps), Real.from_rat(delta)) or uniform_condition(lift_uc(f), Real.from_rat(delta), eps)","s0(lift_uc(f), Real.from_rat(delta), eps).is_close(s1(lift_uc(f), Real.from_rat(delta), eps), Real.from_rat(delta))","not lift_uc(f, s0(lift_uc(f), Real.from_rat(delta), eps)).is_close(lift_uc(f, s1(lift_uc(f), Real.from_rat(delta), eps)), eps)","lift_uc(f, s0(lift_uc(f), Real.from_rat(delta), eps)).is_close(lift_uc(f, s1(lift_uc(f), Real.from_rat(delta), eps)), eps)"]}
{"goal":"delta.is_positive and uniform_condition(lift_uc(f), Real.from_rat(delta), eps)","proof":["not uniform_condition(lift_uc(f), Real.from_rat(delta), eps)"]}
{"goal":"lift_uniform_is_uniform","proof":["let (s0: (Real -> Real, Real) -> Real, s1: Real -> Real -> Real) satisfy { forall(x0: Real -> Real, x1: Real) { not uniform(x0) or not x1.is_positive or s0(x0, x1).is_positive } and forall(x2: Real -> Real, x3: Real) { not uniform(x2) or not x3.is_positive or uniform_condition(x2, s0(x2, x3), x3) } and forall(x4: Real -> Real) { s1(x4).is_positive or uniform(x4) } and forall(x5: Real -> Real, x6: Real) { not uniform_condition(x5, x6, s1(x5)) or not x6.is_positive or uniform(x5) } }","let s2: Real -> Rat satisfy { forall(x7: Real) { not x7.is_positive or s2(x7).is_positive } and forall(x8: Real) { not x8.is_positive or uniform_condition(lift_uc(f), Real.from_rat(s2(x8)), x8) } }","not s1(lift_uc(f)).is_positive or s2(s1(lift_uc(f))).is_positive","not s1(lift_uc(f)).is_positive or uniform_condition(lift_uc(f), Real.from_rat(s2(s1(lift_uc(f)))), s1(lift_uc(f)))","not uniform_condition(lift_uc(f), Real.from_rat(s2(s1(lift_uc(f)))), s1(lift_uc(f))) or not Real.from_rat(s2(s1(lift_uc(f)))).is_positive or uniform(lift_uc(f))","s1(lift_uc(f)).is_positive or uniform(lift_uc(f))","s1(lift_uc(f)).is_positive","not s2(s1(lift_uc(f))).is_positive or Real.from_rat(s2(s1(lift_uc(f)))).is_positive","not uniform_condition(lift_uc(f), Real.from_rat(s2(s1(lift_uc(f)))), s1(lift_uc(f))) or not Real.from_rat(s2(s1(lift_uc(f)))).is_positive","s2(s1(lift_uc(f))).is_positive","Real.from_rat(s2(s1(lift_uc(f)))).is_positive","uniform_condition(lift_uc(f), Real.from_rat(s2(s1(lift_uc(f)))), s1(lift_uc(f)))","not uniform_condition(lift_uc(f), Real.from_rat(s2(s1(lift_uc(f)))), s1(lift_uc(f)))"]}
{"goal":"exists(k0: Real) { f(k0) != g(k0) }","proof":["let s0: Real satisfy { uniform(f) and uniform(g) and g(s0) != f(s0) }","g(s0) = f(s0)"]}
{"goal":"eps.is_positive","proof":["(f(x) - g(x)).abs.is_positive or g(x) = f(x)","not (f(x) - g(x)).abs.is_positive","(f(x) - g(x)).abs.is_positive"]}
{"goal":"not f(x).is_close(g(x), eps)","proof":["(f(x) - g(x)).abs < eps = f(x).is_close(g(x), eps)","not eps < eps or not eps >= eps","eps >= eps","(f(x) - g(x)).abs < eps","eps < eps"]}
{"goal":"exists(k0: Real) { k0.is_positive and k0 + k0 < eps }","proof":["let s0: Real -> Real satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or s0(x1) + s0(x1) < x1 } }","not s0(eps) + s0(eps) < eps or not s0(eps).is_positive","not eps.is_positive or s0(eps) + s0(eps) < eps","not eps.is_positive or s0(eps).is_positive","s0(eps).is_positive","s0(eps) + s0(eps) < eps","not s0(eps) + s0(eps) < eps"]}
{"goal":"exists(k0: Real) { k0.is_positive and uniform_condition(f, k0, eps2) }","proof":["let (s0: (Real -> Real, Real) -> Real, s1: Real -> Real -> Real) satisfy { forall(x0: Real -> Real, x1: Real) { not uniform(x0) or not x1.is_positive or s0(x0, x1).is_positive } and forall(x2: Real -> Real, x3: Real) { not uniform(x2) or not x3.is_positive or uniform_condition(x2, s0(x2, x3), x3) } and forall(x4: Real -> Real) { s1(x4).is_positive or uniform(x4) } and forall(x5: Real -> Real, x6: Real) { not uniform_condition(x5, x6, s1(x5)) or not x6.is_positive or uniform(x5) } }","not uniform_condition(f, s0(f, eps2), eps2) or not s0(f, eps2).is_positive","not uniform(f) or not eps2.is_positive or uniform_condition(f, s0(f, eps2), eps2)","not uniform(f) or not eps2.is_positive or s0(f, eps2).is_positive","not uniform(f) or s0(f, eps2).is_positive","s0(f, eps2).is_positive","not uniform(f) or uniform_condition(f, s0(f, eps2), eps2)","not uniform_condition(f, s0(f, eps2), eps2)","uniform_condition(f, s0(f, eps2), eps2)"]}
{"goal":"exists(k0: Real) { k0.is_positive and uniform_condition(g, k0, eps2) }","proof":["let (s0: (Real -> Real, Real) -> Real, s1: Real -> Real -> Real) satisfy { forall(x0: Real -> Real, x1: Real) { not uniform(x0) or not x1.is_positive or s0(x0, x1).is_positive } and forall(x2: Real -> Real, x3: Real) { not uniform(x2) or not x3.is_positive or uniform_condition(x2, s0(x2, x3), x3) } and forall(x4: Real -> Real) { s1(x4).is_positive or uniform(x4) } and forall(x5: Real -> Real, x6: Real) { not uniform_condition(x5, x6, s1(x5)) or not x6.is_positive or uniform(x5) } }","not uniform_condition(g, s0(g, eps2), eps2) or not s0(g, eps2).is_positive","not uniform(g) or not eps2.is_positive or uniform_condition(g, s0(g, eps2), eps2)","not uniform(g) or not eps2.is_positive or s0(g, eps2).is_positive","not uniform(g) or s0(g, eps2).is_positive","s0(g, eps2).is_positive","not uniform(g) or uniform_condition(g, s0(g, eps2), eps2)","not uniform_condition(g, s0(g, eps2), eps2)","uniform_condition(g, s0(g, eps2), eps2)"]}
{"goal":"exists(k0: Real) { k0.is_positive and k0 < delta1 and k0 < delta2 }","proof":["let s0: (Real, Real) -> Real satisfy { forall(x0: Real, x1: Real) { not x0.is_positive or not x1.is_positive or s0(x0, x1).is_positive } and forall(x2: Real, x3: Real) { not x2.is_positive or not x3.is_positive or s0(x2, x3) < x2 } and forall(x4: Real, x5: Real) { not x4.is_positive or not x5.is_positive or s0(x4, x5) < x5 } }","not s0(delta1, delta2) < delta2 or not s0(delta1, delta2) < delta1 or not s0(delta1, delta2).is_positive","not delta1.is_positive or not delta2.is_positive or s0(delta1, delta2) < delta2","not delta1.is_positive or not delta2.is_positive or s0(delta1, delta2) < delta1","not delta1.is_positive or not delta2.is_positive or s0(delta1, delta2).is_positive","not delta1.is_positive or s0(delta1, delta2).is_positive","s0(delta1, delta2).is_positive","not delta1.is_positive or s0(delta1, delta2) < delta1","s0(delta1, delta2) < delta1","not delta1.is_positive or s0(delta1, delta2) < delta2","not s0(delta1, delta2) < delta2","s0(delta1, delta2) < delta2"]}
{"goal":"exists(k0: Rat) { Real.from_rat(k0).is_close(x, delta) }","proof":["let s0: Nat satisfy { true }","let s1: (Real, Real, Real, Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real, x2: Real, x3: Real, x4: Real) { not x0.is_close(x1, x2) or not x0.is_close(x3, x4) or Real.from_rat(s1(x0, x1, x2, x3, x4)).is_close(x1, x2) } and forall(x5: Real, x6: Real, x7: Real, x8: Real, x9: Real) { not x5.is_close(x6, x7) or not x5.is_close(x8, x9) or Real.from_rat(s1(x5, x6, x7, x8, x9)).is_close(x8, x9) } }","not Real.from_rat(s1(x, x, delta, Real.from_rat(rat_seq(x, s0)), Real.from_rat(rat.iop(s0)))).is_close(x, delta)","not x.is_close(x, delta) or not x.is_close(Real.from_rat(rat_seq(x, s0)), Real.from_rat(rat.iop(s0))) or Real.from_rat(s1(x, x, delta, Real.from_rat(rat_seq(x, s0)), Real.from_rat(rat.iop(s0)))).is_close(x, delta)","x.is_close(Real.from_rat(rat_seq(x, s0)), Real.from_rat(rat.iop(s0)))","not delta.is_positive or x.is_close(x, delta)","not x.is_close(x, delta) or not x.is_close(Real.from_rat(rat_seq(x, s0)), Real.from_rat(rat.iop(s0)))","not x.is_close(x, delta)"]}
{"goal":"Real.from_rat(r).is_close(x, delta1)","proof":["not Real.from_rat(r).is_close(x, delta) or not delta < delta1 or Real.from_rat(r).is_close(x, delta1)","not Real.from_rat(r).is_close(x, delta) or not delta < delta1"]}
{"goal":"f(Real.from_rat(r)).is_close(f(x), eps2)","proof":["not uniform_condition(f, delta1, eps2) or not Real.from_rat(r).is_close(x, delta1) or f(Real.from_rat(r)).is_close(f(x), eps2)","not Real.from_rat(r).is_close(x, delta1) or not uniform_condition(f, delta1, eps2)"]}
{"goal":"Real.from_rat(r).is_close(x, delta2)","proof":["not Real.from_rat(r).is_close(x, delta) or not delta < delta2 or Real.from_rat(r).is_close(x, delta2)","not Real.from_rat(r).is_close(x, delta) or not delta < delta2"]}
{"goal":"g(Real.from_rat(r)).is_close(g(x), eps2)","proof":["not uniform_condition(g, delta2, eps2) or not Real.from_rat(r).is_close(x, delta2) or g(Real.from_rat(r)).is_close(g(x), eps2)","not Real.from_rat(r).is_close(x, delta2) or not uniform_condition(g, delta2, eps2)"]}
{"goal":"f(x).is_close(f(Real.from_rat(r)), eps2)","proof":["not f(Real.from_rat(r)).is_close(f(x), eps2) or f(x).is_close(f(Real.from_rat(r)), eps2)"]}
{"goal":"f(Real.from_rat(r)).is_close(g(x), eps2)","proof":["not g(Real.from_rat(r)).is_close(g(x), eps2)"]}
{"goal":"f(x).is_close(g(x), eps2 + eps2)","proof":["not f(x).is_close(f(Real.from_rat(r)), eps2) or not g(x).is_close(f(Real.from_rat(r)), eps2) or f(x).is_close(g(x), eps2 + eps2)","not f(Real.from_rat(r)).is_close(g(x), eps2) or g(x).is_close(f(Real.from_rat(r)), eps2)","not g(x).is_close(f(Real.from_rat(r)), eps2) or not f(x).is_close(f(Real.from_rat(r)), eps2)","g(x).is_close(f(Real.from_rat(r)), eps2)","not g(x).is_close(f(Real.from_rat(r)), eps2)"]}
{"goal":"f(x).is_close(g(x), eps)","proof":["not f(x).is_close(g(x), eps2 + eps2) or not eps2 + eps2 < eps or f(x).is_close(g(x), eps)","not f(x).is_close(g(x), eps2 + eps2) or not eps2 + eps2 < eps"]}
{"goal":"false","proof":[]}
{"goal":"uniform_ne_imp_rat_ne","proof":["g(Real.from_rat(r)) = f(Real.from_rat(r))"]}
{"goal":"uni_cond_imp_rat_cond","proof":["let (s0: (Rat -> Real, Rat, Real) -> Rat, s1: (Rat -> Real, Rat, Real) -> Rat) satisfy { forall(x0: Rat -> Real, x1: Rat, x2: Real, x3: Rat, x4: Rat) { not rat_condition(x0, x1, x2) or not x3.is_close(x4, x1) or x0(x3).is_close(x0(x4), x2) } and forall(x5: Rat -> Real, x6: Rat, x7: Real) { s0(x5, x6, x7).is_close(s1(x5, x6, x7), x6) or rat_condition(x5, x6, x7) } and forall(x8: Rat -> Real, x9: Rat, x10: Real) { not x8(s0(x8, x9, x10)).is_close(x8(s1(x8, x9, x10)), x10) or rat_condition(x8, x9, x10) } }","not compose[Rat, Real, Real](f, Real.from_rat, s0(compose[Rat, Real, Real](f, Real.from_rat), delta, eps)).is_close(compose[Rat, Real, Real](f, Real.from_rat, s1(compose[Rat, Real, Real](f, Real.from_rat), delta, eps)), eps) or rat_condition(compose[Rat, Real, Real](f, Real.from_rat), delta, eps)","not uniform_condition(f, Real.from_rat(delta), eps) or not Real.from_rat(s0(compose[Rat, Real, Real](f, Real.from_rat), delta, eps)).is_close(Real.from_rat(s1(compose[Rat, Real, Real](f, Real.from_rat), delta, eps)), Real.from_rat(delta)) or f(Real.from_rat(s0(compose[Rat, Real, Real](f, Real.from_rat), delta, eps))).is_close(f(Real.from_rat(s1(compose[Rat, Real, Real](f, Real.from_rat), delta, eps))), eps)","s0(compose[Rat, Real, Real](f, Real.from_rat), delta, eps).is_close(s1(compose[Rat, Real, Real](f, Real.from_rat), delta, eps), delta) or rat_condition(compose[Rat, Real, Real](f, Real.from_rat), delta, eps)","not s0(compose[Rat, Real, Real](f, Real.from_rat), delta, eps).is_close(s1(compose[Rat, Real, Real](f, Real.from_rat), delta, eps), delta) or Real.from_rat(s0(compose[Rat, Real, Real](f, Real.from_rat), delta, eps)).is_close(Real.from_rat(s1(compose[Rat, Real, Real](f, Real.from_rat), delta, eps)), Real.from_rat(delta))","compose[Rat, Real, Real](f, Real.from_rat, s0(compose[Rat, Real, Real](f, Real.from_rat), delta, eps)) = f(Real.from_rat(s0(compose[Rat, Real, Real](f, Real.from_rat), delta, eps)))","compose[Rat, Real, Real](f, Real.from_rat, s1(compose[Rat, Real, Real](f, Real.from_rat), delta, eps)) = f(Real.from_rat(s1(compose[Rat, Real, Real](f, Real.from_rat), delta, eps)))","s0(compose[Rat, Real, Real](f, Real.from_rat), delta, eps).is_close(s1(compose[Rat, Real, Real](f, Real.from_rat), delta, eps), delta)","not compose[Rat, Real, Real](f, Real.from_rat, s0(compose[Rat, Real, Real](f, Real.from_rat), delta, eps)).is_close(compose[Rat, Real, Real](f, Real.from_rat, s1(compose[Rat, Real, Real](f, Real.from_rat), delta, eps)), eps)","not Real.from_rat(s0(compose[Rat, Real, Real](f, Real.from_rat), delta, eps)).is_close(Real.from_rat(s1(compose[Rat, Real, Real](f, Real.from_rat), delta, eps)), Real.from_rat(delta)) or f(Real.from_rat(s0(compose[Rat, Real, Real](f, Real.from_rat), delta, eps))).is_close(f(Real.from_rat(s1(compose[Rat, Real, Real](f, Real.from_rat), delta, eps))), eps)","not f(Real.from_rat(s0(compose[Rat, Real, Real](f, Real.from_rat), delta, eps))).is_close(compose[Rat, Real, Real](f, Real.from_rat, s1(compose[Rat, Real, Real](f, Real.from_rat), delta, eps)), eps)","not f(Real.from_rat(s0(compose[Rat, Real, Real](f, Real.from_rat), delta, eps))).is_close(f(Real.from_rat(s1(compose[Rat, Real, Real](f, Real.from_rat), delta, eps))), eps)","Real.from_rat(s0(compose[Rat, Real, Real](f, Real.from_rat), delta, eps)).is_close(Real.from_rat(s1(compose[Rat, Real, Real](f, Real.from_rat), delta, eps)), Real.from_rat(delta))","not Real.from_rat(s0(compose[Rat, Real, Real](f, Real.from_rat), delta, eps)).is_close(Real.from_rat(s1(compose[Rat, Real, Real](f, Real.from_rat), delta, eps)), Real.from_rat(delta))"]}
{"goal":"exists(k0: Real) { k0.is_positive and uniform_condition(f, k0, eps) }","proof":["let (s0: (Real -> Real, Real) -> Real, s1: Real -> Real -> Real) satisfy { forall(x0: Real -> Real, x1: Real) { not uniform(x0) or not x1.is_positive or s0(x0, x1).is_positive } and forall(x2: Real -> Real, x3: Real) { not uniform(x2) or not x3.is_positive or uniform_condition(x2, s0(x2, x3), x3) } and forall(x4: Real -> Real) { s1(x4).is_positive or uniform(x4) } and forall(x5: Real -> Real, x6: Real) { not uniform_condition(x5, x6, s1(x5)) or not x6.is_positive or uniform(x5) } }","not uniform_condition(f, s0(f, eps), eps) or not s0(f, eps).is_positive","not uniform(f) or not eps.is_positive or uniform_condition(f, s0(f, eps), eps)","not uniform(f) or not eps.is_positive or s0(f, eps).is_positive","not uniform(f) or s0(f, eps).is_positive","s0(f, eps).is_positive","not uniform(f) or uniform_condition(f, s0(f, eps), eps)","not uniform_condition(f, s0(f, eps), eps)","uniform_condition(f, s0(f, eps), eps)"]}
{"goal":"Real.0 < delta","proof":["not delta.is_positive or Real.0 < Real.0 + delta","Real.0 + delta = delta","not Real.0 < Real.0 + delta"]}
{"goal":"exists(k0: Rat) { k0.is_positive and Real.from_rat(k0) < delta }","proof":["let s0: Real -> Rat satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or Real.from_rat(s0(x1)) < x1 } }","not Real.from_rat(s0(delta)) < delta or not s0(delta).is_positive","not delta.is_positive or Real.from_rat(s0(delta)) < delta","not delta.is_positive or s0(delta).is_positive","s0(delta).is_positive","Real.from_rat(s0(delta)) < delta","not Real.from_rat(s0(delta)) < delta"]}
{"goal":"uniform_condition(f, Real.from_rat(rdelta), eps)","proof":["let (s0: (Real -> Real, Real, Real) -> Real, s1: (Real -> Real, Real, Real) -> Real) satisfy { forall(x0: Real -> Real, x1: Real, x2: Real, x3: Real, x4: Real) { not uniform_condition(x0, x1, x2) or not x3.is_close(x4, x1) or x0(x3).is_close(x0(x4), x2) } and forall(x5: Real -> Real, x6: Real, x7: Real) { s0(x5, x6, x7).is_close(s1(x5, x6, x7), x6) or uniform_condition(x5, x6, x7) } and forall(x8: Real -> Real, x9: Real, x10: Real) { not x8(s0(x8, x9, x10)).is_close(x8(s1(x8, x9, x10)), x10) or uniform_condition(x8, x9, x10) } }","not f(s0(f, Real.from_rat(rdelta), eps)).is_close(f(s1(f, Real.from_rat(rdelta), eps)), eps) or uniform_condition(f, Real.from_rat(rdelta), eps)","s0(f, Real.from_rat(rdelta), eps).is_close(s1(f, Real.from_rat(rdelta), eps), Real.from_rat(rdelta)) or uniform_condition(f, Real.from_rat(rdelta), eps)","not uniform_condition(f, delta, eps) or not s0(f, Real.from_rat(rdelta), eps).is_close(s1(f, Real.from_rat(rdelta), eps), delta) or f(s0(f, Real.from_rat(rdelta), eps)).is_close(f(s1(f, Real.from_rat(rdelta), eps)), eps)","not s0(f, Real.from_rat(rdelta), eps).is_close(s1(f, Real.from_rat(rdelta), eps), Real.from_rat(rdelta)) or not Real.from_rat(rdelta) < delta or s0(f, Real.from_rat(rdelta), eps).is_close(s1(f, Real.from_rat(rdelta), eps), delta)","s0(f, Real.from_rat(rdelta), eps).is_close(s1(f, Real.from_rat(rdelta), eps), Real.from_rat(rdelta))","not f(s0(f, Real.from_rat(rdelta), eps)).is_close(f(s1(f, Real.from_rat(rdelta), eps)), eps)","not s0(f, Real.from_rat(rdelta), eps).is_close(s1(f, Real.from_rat(rdelta), eps), Real.from_rat(rdelta)) or s0(f, Real.from_rat(rdelta), eps).is_close(s1(f, Real.from_rat(rdelta), eps), delta)","not s0(f, Real.from_rat(rdelta), eps).is_close(s1(f, Real.from_rat(rdelta), eps), delta) or f(s0(f, Real.from_rat(rdelta), eps)).is_close(f(s1(f, Real.from_rat(rdelta), eps)), eps)","s0(f, Real.from_rat(rdelta), eps).is_close(s1(f, Real.from_rat(rdelta), eps), delta)","not s0(f, Real.from_rat(rdelta), eps).is_close(s1(f, Real.from_rat(rdelta), eps), delta)"]}
{"goal":"rdelta.is_positive and rat_condition(compose[Rat, Real, Real](f, Real.from_rat), rdelta, eps)","proof":["not rat_condition(compose[Rat, Real, Real](f, Real.from_rat), rdelta, eps)","not uniform_condition(f, Real.from_rat(rdelta), eps) or rat_condition(compose[Rat, Real, Real](f, Real.from_rat), rdelta, eps)"]}
{"goal":"uniform_imp_rat_uniform","proof":["let (s0: (Rat -> Real, Real) -> Rat, s1: Rat -> Real -> Real) satisfy { forall(x0: Rat -> Real, x1: Real) { not rat_uniform(x0) or not x1.is_positive or s0(x0, x1).is_positive } and forall(x2: Rat -> Real, x3: Real) { not rat_uniform(x2) or not x3.is_positive or rat_condition(x2, s0(x2, x3), x3) } and forall(x4: Rat -> Real) { s1(x4).is_positive or rat_uniform(x4) } and forall(x5: Rat -> Real, x6: Rat) { not rat_condition(x5, x6, s1(x5)) or not x6.is_positive or rat_uniform(x5) } }","let s2: Real -> Rat satisfy { forall(x7: Real) { not x7.is_positive or s2(x7).is_positive } and forall(x8: Real) { not x8.is_positive or rat_condition(compose[Rat, Real, Real](f, Real.from_rat), s2(x8), x8) } }","not s1(compose[Rat, Real, Real](f, Real.from_rat)).is_positive or s2(s1(compose[Rat, Real, Real](f, Real.from_rat))).is_positive","not s1(compose[Rat, Real, Real](f, Real.from_rat)).is_positive or rat_condition(compose[Rat, Real, Real](f, Real.from_rat), s2(s1(compose[Rat, Real, Real](f, Real.from_rat))), s1(compose[Rat, Real, Real](f, Real.from_rat)))","not rat_condition(compose[Rat, Real, Real](f, Real.from_rat), s2(s1(compose[Rat, Real, Real](f, Real.from_rat))), s1(compose[Rat, Real, Real](f, Real.from_rat))) or not s2(s1(compose[Rat, Real, Real](f, Real.from_rat))).is_positive or rat_uniform(compose[Rat, Real, Real](f, Real.from_rat))","s1(compose[Rat, Real, Real](f, Real.from_rat)).is_positive or rat_uniform(compose[Rat, Real, Real](f, Real.from_rat))","s1(compose[Rat, Real, Real](f, Real.from_rat)).is_positive","not rat_condition(compose[Rat, Real, Real](f, Real.from_rat), s2(s1(compose[Rat, Real, Real](f, Real.from_rat))), s1(compose[Rat, Real, Real](f, Real.from_rat))) or not s2(s1(compose[Rat, Real, Real](f, Real.from_rat))).is_positive","s2(s1(compose[Rat, Real, Real](f, Real.from_rat))).is_positive","rat_condition(compose[Rat, Real, Real](f, Real.from_rat), s2(s1(compose[Rat, Real, Real](f, Real.from_rat))), s1(compose[Rat, Real, Real](f, Real.from_rat)))","not rat_condition(compose[Rat, Real, Real](f, Real.from_rat), s2(s1(compose[Rat, Real, Real](f, Real.from_rat))), s1(compose[Rat, Real, Real](f, Real.from_rat)))"]}
{"goal":"tighten_uc","proof":["let (s0: (Real -> Real, Real, Real) -> Real, s1: (Real -> Real, Real, Real) -> Real) satisfy { forall(x0: Real -> Real, x1: Real, x2: Real, x3: Real, x4: Real) { not uniform_condition(x0, x1, x2) or not x3.is_close(x4, x1) or x0(x3).is_close(x0(x4), x2) } and forall(x5: Real -> Real, x6: Real, x7: Real) { s0(x5, x6, x7).is_close(s1(x5, x6, x7), x6) or uniform_condition(x5, x6, x7) } and forall(x8: Real -> Real, x9: Real, x10: Real) { not x8(s0(x8, x9, x10)).is_close(x8(s1(x8, x9, x10)), x10) or uniform_condition(x8, x9, x10) } }","not f(s0(f, delta2, eps)).is_close(f(s1(f, delta2, eps)), eps) or uniform_condition(f, delta2, eps)","s0(f, delta2, eps).is_close(s1(f, delta2, eps), delta2) or uniform_condition(f, delta2, eps)","not uniform_condition(f, delta1, eps) or not s0(f, delta2, eps).is_close(s1(f, delta2, eps), delta1) or f(s0(f, delta2, eps)).is_close(f(s1(f, delta2, eps)), eps)","not delta2 < delta1 or not s0(f, delta2, eps).is_close(s1(f, delta2, eps), delta2) or s0(f, delta2, eps).is_close(s1(f, delta2, eps), delta1)","s0(f, delta2, eps).is_close(s1(f, delta2, eps), delta2)","not f(s0(f, delta2, eps)).is_close(f(s1(f, delta2, eps)), eps)","not s0(f, delta2, eps).is_close(s1(f, delta2, eps), delta2) or s0(f, delta2, eps).is_close(s1(f, delta2, eps), delta1)","not s0(f, delta2, eps).is_close(s1(f, delta2, eps), delta1) or f(s0(f, delta2, eps)).is_close(f(s1(f, delta2, eps)), eps)","s0(f, delta2, eps).is_close(s1(f, delta2, eps), delta1)","not s0(f, delta2, eps).is_close(s1(f, delta2, eps), delta1)"]}
{"goal":"exists(k0: Real) { k0.is_positive and a + k0 < b }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or s0(x0, x1).is_positive } and forall(x2: Real, x3: Real) { not x2 < x3 or x2 + Real.from_rat(s0(x2, x3)) < x3 } }","not a + Real.from_rat(s0(a, b)) < b or not Real.from_rat(s0(a, b)).is_positive","not a < b or a + Real.from_rat(s0(a, b)) < b","not a < b or s0(a, b).is_positive","not s0(a, b).is_positive or Real.from_rat(s0(a, b)).is_positive","s0(a, b).is_positive","a + Real.from_rat(s0(a, b)) < b","Real.from_rat(s0(a, b)).is_positive","not Real.from_rat(s0(a, b)).is_positive"]}
{"goal":"a + eps < b","proof":[]}
{"goal":"add_real_eps_between","proof":["not a + eps < b or not eps.is_positive","not a + eps < b"]}
{"goal":"uniform(lf)","proof":["not uniform(lift_uc(f))","not rat_uniform(f) or uniform(lift_uc(f))"]}
{"goal":"lf(Real.from_rat(r)) = f(r)","proof":["lift_uc(f, Real.from_rat(r)) = lf(Real.from_rat(r))","not rat_uniform(f) or lift_uc(f, Real.from_rat(r)) = f(r)","lift_uc(f, Real.from_rat(r)) != f(r)"]}
{"goal":"exists(k0: Rat) { x < Real.from_rat(k0) and Real.from_rat(k0) < y }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or x0 < Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 < x3 or Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(s0(x, y)) < y or not x < Real.from_rat(s0(x, y))","not x < y or Real.from_rat(s0(x, y)) < y","not x < y or x < Real.from_rat(s0(x, y))","x < Real.from_rat(s0(x, y))","Real.from_rat(s0(x, y)) < y","not Real.from_rat(s0(x, y)) < y"]}
{"goal":"exists(k0: Rat) { r1 < k0 and Real.from_rat(k0) < y }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or s0(x0, x1).is_positive } and forall(x2: Real, x3: Real) { not x2 < x3 or x2 + Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(r1 + s0(Real.from_rat(r1), y)) < y or not r1 < r1 + s0(Real.from_rat(r1), y)","not Real.from_rat(r1) < y or Real.from_rat(r1) + Real.from_rat(s0(Real.from_rat(r1), y)) < y","Real.from_rat(r1) + Real.from_rat(s0(Real.from_rat(r1), y)) = Real.from_rat(r1 + s0(Real.from_rat(r1), y))","not Real.from_rat(r1) < y or s0(Real.from_rat(r1), y).is_positive","not s0(Real.from_rat(r1), y).is_positive or r1 < r1 + s0(Real.from_rat(r1), y)","s0(Real.from_rat(r1), y).is_positive","Real.from_rat(r1) + Real.from_rat(s0(Real.from_rat(r1), y)) < y","Real.from_rat(r1 + s0(Real.from_rat(r1), y)) < y","not r1 < r1 + s0(Real.from_rat(r1), y)"]}
{"goal":"f(r1) < f(r2)","proof":["not rat_increasing(f) or not r1 < r2 or f(r1) < f(r2)"]}
{"goal":"exists(k0: Real) { k0.is_positive and f(r1) + k0 < f(r2) }","proof":["let s0: (Real, Real) -> Real satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or s0(x0, x1).is_positive } and forall(x2: Real, x3: Real) { not x2 < x3 or x2 + s0(x2, x3) < x3 } }","not f(r1) + s0(f(r1), f(r2)) < f(r2) or not s0(f(r1), f(r2)).is_positive","not f(r1) < f(r2) or f(r1) + s0(f(r1), f(r2)) < f(r2)","not f(r1) < f(r2) or s0(f(r1), f(r2)).is_positive","s0(f(r1), f(r2)).is_positive","f(r1) + s0(f(r1), f(r2)) < f(r2)","not f(r1) + s0(f(r1), f(r2)) < f(r2)"]}
{"goal":"exists(k0: Real) { k0.is_positive and k0 + k0 < eps }","proof":["let s0: Real -> Real satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or s0(x1) + s0(x1) < x1 } }","not s0(eps) + s0(eps) < eps or not s0(eps).is_positive","not eps.is_positive or s0(eps) + s0(eps) < eps","not eps.is_positive or s0(eps).is_positive","s0(eps).is_positive","s0(eps) + s0(eps) < eps","not s0(eps) + s0(eps) < eps"]}
{"goal":"exists(k0: Real) { k0.is_positive and uniform_condition(lf, k0, eps2) }","proof":["let (s0: (Real -> Real, Real) -> Real, s1: Real -> Real -> Real) satisfy { forall(x0: Real -> Real, x1: Real) { not uniform(x0) or not x1.is_positive or s0(x0, x1).is_positive } and forall(x2: Real -> Real, x3: Real) { not uniform(x2) or not x3.is_positive or uniform_condition(x2, s0(x2, x3), x3) } and forall(x4: Real -> Real) { s1(x4).is_positive or uniform(x4) } and forall(x5: Real -> Real, x6: Real) { not uniform_condition(x5, x6, s1(x5)) or not x6.is_positive or uniform(x5) } }","not uniform_condition(lf, s0(lf, eps2), eps2) or not s0(lf, eps2).is_positive","not uniform(lf) or not eps2.is_positive or uniform_condition(lf, s0(lf, eps2), eps2)","not uniform(lf) or not eps2.is_positive or s0(lf, eps2).is_positive","not uniform(lf) or s0(lf, eps2).is_positive","s0(lf, eps2).is_positive","not uniform(lf) or uniform_condition(lf, s0(lf, eps2), eps2)","not uniform_condition(lf, s0(lf, eps2), eps2)","uniform_condition(lf, s0(lf, eps2), eps2)"]}
{"goal":"exists(k0: Real) { k0.is_positive and x + k0 < Real.from_rat(r1) }","proof":["let s0: (Real, Real) -> Real satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or s0(x0, x1).is_positive } and forall(x2: Real, x3: Real) { not x2 < x3 or x2 + s0(x2, x3) < x3 } }","not x + s0(x, Real.from_rat(r1)) < Real.from_rat(r1) or not s0(x, Real.from_rat(r1)).is_positive","not x < Real.from_rat(r1) or x + s0(x, Real.from_rat(r1)) < Real.from_rat(r1)","not x < Real.from_rat(r1) or s0(x, Real.from_rat(r1)).is_positive","s0(x, Real.from_rat(r1)).is_positive","x + s0(x, Real.from_rat(r1)) < Real.from_rat(r1)","not x + s0(x, Real.from_rat(r1)) < Real.from_rat(r1)"]}
{"goal":"exists(k0: Real) { k0.is_positive and Real.from_rat(r2) + k0 < y }","proof":["let s0: (Real, Real) -> Real satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or s0(x0, x1).is_positive } and forall(x2: Real, x3: Real) { not x2 < x3 or x2 + s0(x2, x3) < x3 } }","not Real.from_rat(r2) + s0(Real.from_rat(r2), y) < y or not s0(Real.from_rat(r2), y).is_positive","not Real.from_rat(r2) < y or Real.from_rat(r2) + s0(Real.from_rat(r2), y) < y","not Real.from_rat(r2) < y or s0(Real.from_rat(r2), y).is_positive","s0(Real.from_rat(r2), y).is_positive","Real.from_rat(r2) + s0(Real.from_rat(r2), y) < y","not Real.from_rat(r2) + s0(Real.from_rat(r2), y) < y"]}
{"goal":"exists(k0: Real) { k0.is_positive and k0 < delta2a and k0 < delta2b }","proof":["let s0: Real satisfy { not delta2b.is_positive or not delta2a.is_positive or s0.is_positive and (not delta2b.is_positive or not delta2a.is_positive or s0 < delta2a) and (not delta2b.is_positive or not delta2a.is_positive or s0 < delta2b) }","not s0 < delta2b or not s0 < delta2a or not s0.is_positive","not s0.is_positive"]}
{"goal":"delta_min.is_positive","proof":["not delta1.min(delta2).is_positive","not delta1.is_positive or not delta2.is_positive or delta1.min(delta2).is_positive"]}
{"goal":"exists(k0: Real) { k0.is_positive and k0 < delta_min }","proof":["let s0: Real -> Real satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or s0(x1) < x1 } }","not s0(delta_min) < delta_min or not s0(delta_min).is_positive","not delta_min.is_positive or s0(delta_min) < delta_min","not delta_min.is_positive or s0(delta_min).is_positive","s0(delta_min).is_positive","s0(delta_min) < delta_min","not s0(delta_min) < delta_min"]}
{"goal":"delta < delta1","proof":["not delta < delta1.min(delta2) or delta < delta1","not delta < delta1.min(delta2)"]}
{"goal":"delta < delta2","proof":["not delta < delta1.min(delta2) or delta < delta2","not delta < delta1.min(delta2)"]}
{"goal":"delta < delta2a","proof":["not delta < delta2 or not delta2 <= delta2a or delta < delta2a","not delta2 < delta2a or delta2 <= delta2a","not delta < delta2 or not delta2 <= delta2a","delta2 <= delta2a","not delta2 <= delta2a"]}
{"goal":"delta < delta2b","proof":["not delta < delta2 or not delta2 <= delta2b or delta < delta2b","not delta2 < delta2b or delta2 <= delta2b","not delta < delta2 or not delta2 <= delta2b","delta2 <= delta2b","not delta2 <= delta2b"]}
{"goal":"exists(k0: Rat) { Real.from_rat(k0).is_close(x, delta) }","proof":["let s0: Nat satisfy { true }","let s1: (Real, Real, Real, Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real, x2: Real, x3: Real, x4: Real) { not x0.is_close(x1, x2) or not x0.is_close(x3, x4) or Real.from_rat(s1(x0, x1, x2, x3, x4)).is_close(x1, x2) } and forall(x5: Real, x6: Real, x7: Real, x8: Real, x9: Real) { not x5.is_close(x6, x7) or not x5.is_close(x8, x9) or Real.from_rat(s1(x5, x6, x7, x8, x9)).is_close(x8, x9) } }","not Real.from_rat(s1(x, x, delta, Real.from_rat(rat_seq(x, s0)), Real.from_rat(rat.iop(s0)))).is_close(x, delta)","not x.is_close(x, delta) or not x.is_close(Real.from_rat(rat_seq(x, s0)), Real.from_rat(rat.iop(s0))) or Real.from_rat(s1(x, x, delta, Real.from_rat(rat_seq(x, s0)), Real.from_rat(rat.iop(s0)))).is_close(x, delta)","x.is_close(Real.from_rat(rat_seq(x, s0)), Real.from_rat(rat.iop(s0)))","not delta.is_positive or x.is_close(x, delta)","not x.is_close(x, delta) or not x.is_close(Real.from_rat(rat_seq(x, s0)), Real.from_rat(rat.iop(s0)))","not x.is_close(x, delta)"]}
{"goal":"Real.from_rat(xr) < x + delta","proof":["not Real.from_rat(xr).is_close(x, delta) or Real.from_rat(xr) < x + delta"]}
{"goal":"x + delta <= x + delta2a","proof":["not delta <= delta2a or x + delta <= x + delta2a","not delta <= delta2a","not delta < delta2a or delta <= delta2a"]}
{"goal":"Real.from_rat(xr) < x + delta2a","proof":["not Real.from_rat(xr) < x + delta or not x + delta <= x + delta2a or Real.from_rat(xr) < x + delta2a","not x + delta <= x + delta2a or not Real.from_rat(xr) < x + delta"]}
{"goal":"Real.from_rat(xr) < Real.from_rat(r1)","proof":["not Real.from_rat(xr) < x + delta2a or not x + delta2a <= Real.from_rat(r1) or Real.from_rat(xr) < Real.from_rat(r1)","not x + delta2a < Real.from_rat(r1) or x + delta2a <= Real.from_rat(r1)","not Real.from_rat(xr) < x + delta2a or not x + delta2a <= Real.from_rat(r1)","x + delta2a <= Real.from_rat(r1)","not x + delta2a <= Real.from_rat(r1)"]}
{"goal":"xr < r1","proof":["not Real.from_rat(xr) <= Real.from_rat(r1) or xr <= r1","not xr <= r1 or xr < r1 or xr = r1","not xr <= r1 or xr = r1","not Real.from_rat(xr) < Real.from_rat(r1) or Real.from_rat(xr) <= Real.from_rat(r1)","not Real.from_rat(xr) < Real.from_rat(r1) or Real.from_rat(xr) != Real.from_rat(r1)","Real.from_rat(xr) != Real.from_rat(r1)","xr != r1","not xr <= r1","Real.from_rat(xr) <= Real.from_rat(r1)","not Real.from_rat(xr) <= Real.from_rat(r1)"]}
{"goal":"exists(k0: Rat) { Real.from_rat(k0).is_close(y, delta) }","proof":["let s0: Nat satisfy { true }","let s1: (Real, Real, Real, Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real, x2: Real, x3: Real, x4: Real) { not x0.is_close(x1, x2) or not x0.is_close(x3, x4) or Real.from_rat(s1(x0, x1, x2, x3, x4)).is_close(x1, x2) } and forall(x5: Real, x6: Real, x7: Real, x8: Real, x9: Real) { not x5.is_close(x6, x7) or not x5.is_close(x8, x9) or Real.from_rat(s1(x5, x6, x7, x8, x9)).is_close(x8, x9) } }","not Real.from_rat(s1(y, y, delta, Real.from_rat(rat_seq(y, s0)), Real.from_rat(rat.iop(s0)))).is_close(y, delta)","not y.is_close(y, delta) or not y.is_close(Real.from_rat(rat_seq(y, s0)), Real.from_rat(rat.iop(s0))) or Real.from_rat(s1(y, y, delta, Real.from_rat(rat_seq(y, s0)), Real.from_rat(rat.iop(s0)))).is_close(y, delta)","y.is_close(Real.from_rat(rat_seq(y, s0)), Real.from_rat(rat.iop(s0)))","not delta.is_positive or y.is_close(y, delta)","not y.is_close(y, delta) or not y.is_close(Real.from_rat(rat_seq(y, s0)), Real.from_rat(rat.iop(s0)))","not y.is_close(y, delta)"]}
{"goal":"Real.from_rat(r2) + delta < Real.from_rat(r2) + delta2b","proof":["not delta < delta2b or Real.from_rat(r2) + delta < Real.from_rat(r2) + delta2b"]}
{"goal":"Real.from_rat(r2) + delta < y","proof":["not Real.from_rat(r2) + delta < Real.from_rat(r2) + delta2b or not Real.from_rat(r2) + delta2b <= y or Real.from_rat(r2) + delta < y","not Real.from_rat(r2) + delta2b < y or Real.from_rat(r2) + delta2b <= y","not Real.from_rat(r2) + delta < Real.from_rat(r2) + delta2b or not Real.from_rat(r2) + delta2b <= y","Real.from_rat(r2) + delta2b <= y","not Real.from_rat(r2) + delta2b <= y"]}
{"goal":"y < Real.from_rat(yr) + delta","proof":["not Real.from_rat(yr).is_close(y, delta) or y < Real.from_rat(yr) + delta"]}
{"goal":"Real.from_rat(r2) + delta < Real.from_rat(yr) + delta","proof":["not Real.from_rat(r2) + delta < y or not y <= Real.from_rat(yr) + delta or Real.from_rat(r2) + delta < Real.from_rat(yr) + delta","not y < Real.from_rat(yr) + delta or y <= Real.from_rat(yr) + delta","not y <= Real.from_rat(yr) + delta or not Real.from_rat(r2) + delta < y","y <= Real.from_rat(yr) + delta","not y <= Real.from_rat(yr) + delta"]}
{"goal":"Real.from_rat(r2) < Real.from_rat(yr)","proof":["not Real.from_rat(r2) + delta < Real.from_rat(yr) + delta or Real.from_rat(r2) < Real.from_rat(yr)"]}
{"goal":"r2 < yr","proof":["not Real.from_rat(r2) <= Real.from_rat(yr) or r2 <= yr","not r2 <= yr or r2 < yr or yr = r2","not r2 <= yr or yr = r2","not Real.from_rat(r2) < Real.from_rat(yr) or Real.from_rat(r2) <= Real.from_rat(yr)","not Real.from_rat(r2) < Real.from_rat(yr) or Real.from_rat(yr) != Real.from_rat(r2)","Real.from_rat(yr) != Real.from_rat(r2)","yr != r2","not r2 <= yr","Real.from_rat(r2) <= Real.from_rat(yr)","not Real.from_rat(r2) <= Real.from_rat(yr)"]}
{"goal":"lf(Real.from_rat(zr)).is_close(lf(z), eps2)","proof":["not uniform_condition(lf, delta1, eps2) or not Real.from_rat(zr).is_close(z, delta1) or lf(Real.from_rat(zr)).is_close(lf(z), eps2)","not Real.from_rat(zr).is_close(z, delta1) or not uniform_condition(lf, delta1, eps2)"]}
{"goal":"f(zr).is_close(lf(z), eps2)","proof":["lf(Real.from_rat(zr)) = f(zr)","not lf(Real.from_rat(zr)).is_close(lf(z), eps2)"]}
{"goal":"Real.from_rat(xr).is_close(x, delta1)","proof":["not Real.from_rat(xr).is_close(x, delta) or not delta < delta1 or Real.from_rat(xr).is_close(x, delta1)","not Real.from_rat(xr).is_close(x, delta) or not delta < delta1"]}
{"goal":"f(xr).is_close(lf(x), eps2)","proof":["not Real.from_rat(xr).is_close(x, delta1) or f(xr).is_close(lf(x), eps2)"]}
{"goal":"Real.from_rat(yr).is_close(y, delta1)","proof":["not Real.from_rat(yr).is_close(y, delta) or not delta < delta1 or Real.from_rat(yr).is_close(y, delta1)","not Real.from_rat(yr).is_close(y, delta) or not delta < delta1"]}
{"goal":"f(yr).is_close(lf(y), eps2)","proof":["not Real.from_rat(yr).is_close(y, delta1) or f(yr).is_close(lf(y), eps2)"]}
{"goal":"f(xr) < f(r1)","proof":["not rat_increasing(f) or not xr < r1 or f(xr) < f(r1)"]}
{"goal":"f(r2) < f(yr)","proof":["not rat_increasing(f) or not r2 < yr or f(r2) < f(yr)"]}
{"goal":"f(r1) + eps <= f(r2)","proof":["not f(r1) + eps < f(r2) or f(r1) + eps <= f(r2)"]}
{"goal":"f(xr) + eps < f(r1) + eps","proof":["not f(xr) < f(r1) or f(xr) + eps < f(r1) + eps"]}
{"goal":"f(r2) <= f(yr)","proof":["not f(r2) < f(yr) or f(r2) <= f(yr)"]}
{"goal":"f(r1) + eps < f(yr)","proof":["not f(r1) + eps < f(r2) or not f(r2) <= f(yr) or f(r1) + eps < f(yr)","not f(r1) + eps < f(r2) or not f(r2) <= f(yr)"]}
{"goal":"f(xr) + eps < f(yr)","proof":["not f(xr) + eps < f(r1) + eps or not f(r1) + eps <= f(yr) or f(xr) + eps < f(yr)","not f(r1) + eps < f(yr) or f(r1) + eps <= f(yr)","not f(xr) + eps < f(r1) + eps or not f(r1) + eps <= f(yr)","f(r1) + eps <= f(yr)","not f(r1) + eps <= f(yr)"]}
{"goal":"lf(x) < f(xr) + eps2","proof":["not f(xr).is_close(lf(x), eps2) or lf(x) < f(xr) + eps2"]}
{"goal":"f(xr) + (eps2 + eps2) < f(xr) + eps","proof":["not eps2 + eps2 < eps or f(xr) + (eps2 + eps2) < f(xr) + eps"]}
{"goal":"f(xr) + eps2 + eps2 < f(xr) + eps","proof":["f(xr) + (eps2 + eps2) = f(xr) + eps2 + eps2"]}
{"goal":"f(xr) + eps2 + eps2 < f(yr)","proof":["not f(xr) + eps2 + eps2 < f(xr) + eps or not f(xr) + eps <= f(yr) or f(xr) + eps2 + eps2 < f(yr)","not f(xr) + eps < f(yr) or f(xr) + eps <= f(yr)","not f(xr) + eps2 + eps2 < f(xr) + eps or not f(xr) + eps <= f(yr)","f(xr) + eps <= f(yr)","not f(xr) + eps <= f(yr)"]}
{"goal":"lf(x) + eps2 < f(xr) + eps2 + eps2","proof":["not lf(x) < f(xr) + eps2 or lf(x) + eps2 < f(xr) + eps2 + eps2"]}
{"goal":"lf(x) + eps2 < f(yr)","proof":["not lf(x) + eps2 < f(xr) + eps2 + eps2 or not f(xr) + eps2 + eps2 <= f(yr) or lf(x) + eps2 < f(yr)","not f(xr) + eps2 + eps2 < f(yr) or f(xr) + eps2 + eps2 <= f(yr)","not lf(x) + eps2 < f(xr) + eps2 + eps2 or not f(xr) + eps2 + eps2 <= f(yr)","f(xr) + eps2 + eps2 <= f(yr)","not f(xr) + eps2 + eps2 <= f(yr)"]}
{"goal":"f(yr) < lf(y) + eps2","proof":["not f(yr).is_close(lf(y), eps2) or f(yr) < lf(y) + eps2"]}
{"goal":"lf(x) + eps2 < lf(y) + eps2","proof":["not lf(x) + eps2 < f(yr) or not f(yr) <= lf(y) + eps2 or lf(x) + eps2 < lf(y) + eps2","not f(yr) < lf(y) + eps2 or f(yr) <= lf(y) + eps2","not lf(x) + eps2 < f(yr) or not f(yr) <= lf(y) + eps2","f(yr) <= lf(y) + eps2","not f(yr) <= lf(y) + eps2"]}
{"goal":"lf(x) < lf(y)","proof":["not lf(x) + eps2 < lf(y) + eps2 or lf(x) < lf(y)"]}
{"goal":"lift_uc(f)(x) < lift_uc(f)(y)","proof":["lift_uc(f, x) = lf(x)","lift_uc(f, y) = lf(y)"]}
{"goal":"lift_inc_is_inc","proof":["let (s0: Real -> Real -> Real, s1: Real -> Real -> Real) satisfy { forall(x0: Real -> Real, x1: Real, x2: Real) { not increasing(x0) or not x1 < x2 or x0(x1) < x0(x2) } and forall(x3: Real -> Real) { s0(x3) < s1(x3) or increasing(x3) } and forall(x4: Real -> Real) { not x4(s0(x4)) < x4(s1(x4)) or increasing(x4) } }","not s0(lift_uc(f)) < s1(lift_uc(f)) or lift_uc(f, s0(lift_uc(f))) < lift_uc(f, s1(lift_uc(f)))","not lift_uc(f, s0(lift_uc(f))) < lift_uc(f, s1(lift_uc(f))) or increasing(lift_uc(f))","s0(lift_uc(f)) < s1(lift_uc(f)) or increasing(lift_uc(f))","s0(lift_uc(f)) < s1(lift_uc(f))","not lift_uc(f, s0(lift_uc(f))) < lift_uc(f, s1(lift_uc(f)))","lift_uc(f, s0(lift_uc(f))) < lift_uc(f, s1(lift_uc(f)))"]}
{"goal":"Rat.1.is_positive and rat_condition(f, Rat.1, eps)","proof":["let (s0: (Rat -> Real, Rat, Real) -> Rat, s1: (Rat -> Real, Rat, Real) -> Rat) satisfy { forall(x0: Rat, x1: Rat, x2: Rat, x3: Rat -> Real, x4: Real) { not x0.is_close(x1, x2) or not rat_condition(x3, x2, x4) or x3(x0).is_close(x3(x1), x4) } and forall(x5: Rat -> Real, x6: Rat, x7: Real) { s0(x5, x6, x7).is_close(s1(x5, x6, x7), x6) or rat_condition(x5, x6, x7) } and forall(x8: Rat -> Real, x9: Rat, x10: Real) { not x8(s0(x8, x9, x10)).is_close(x8(s1(x8, x9, x10)), x10) or rat_condition(x8, x9, x10) } }","not f(s0(f, Rat.1, eps)).is_close(f(s1(f, Rat.1, eps)), eps) or rat_condition(f, Rat.1, eps)","let (s2: Rat -> Real -> Real, s3: (Rat -> Real, Real) -> Rat) satisfy { forall(x11: Rat -> Real, x12: Rat) { not is_constant<Rat, Real>(x11) or s2(x11) = x11(x12) } and forall(x13: Rat -> Real, x14: Real) { x13(s3(x13, x14)) != x14 or is_constant<Rat, Real>(x13) } }","not is_constant<Rat, Real>(f) or f(s0(f, Rat.1, eps)) = s2(f)","not is_constant<Rat, Real>(f) or f(s1(f, Rat.1, eps)) = s2(f)","not eps.is_positive or s2(f).is_close(s2(f), eps)","not rat_condition(f, Rat.1, eps)","s2(f).is_close(s2(f), eps)","f(s0(f, Rat.1, eps)) = s2(f)","f(s1(f, Rat.1, eps)) = s2(f)","not f(s0(f, Rat.1, eps)).is_close(f(s1(f, Rat.1, eps)), eps)","not f(s0(f, Rat.1, eps)).is_close(s2(f), eps)"]}
{"goal":"constant_is_rat_uniform","proof":["let (s0: (Rat -> Real, Real) -> Rat, s1: Rat -> Real -> Real) satisfy { forall(x0: Rat -> Real, x1: Real) { not rat_uniform(x0) or not x1.is_positive or s0(x0, x1).is_positive } and forall(x2: Rat -> Real, x3: Real) { not rat_uniform(x2) or not x3.is_positive or rat_condition(x2, s0(x2, x3), x3) } and forall(x4: Rat -> Real) { s1(x4).is_positive or rat_uniform(x4) } and forall(x5: Rat -> Real, x6: Rat) { not rat_condition(x5, x6, s1(x5)) or not x6.is_positive or rat_uniform(x5) } }","not s1(f).is_positive or rat_condition(f, Rat.1, s1(f))","not rat_condition(f, Rat.1, s1(f)) or not Rat.1.is_positive or rat_uniform(f)","s1(f).is_positive or rat_uniform(f)","s1(f).is_positive","not rat_condition(f, Rat.1, s1(f)) or not Rat.1.is_positive","rat_condition(f, Rat.1, s1(f))","not rat_condition(f, Rat.1, s1(f))"]}
{"goal":"f(x).is_close(f(y), eps)","proof":["let (s0: Real -> Real -> Real, s1: (Real -> Real, Real) -> Real) satisfy { forall(x0: Real -> Real, x1: Real) { not is_constant<Real, Real>(x0) or s0(x0) = x0(x1) } and forall(x2: Real -> Real, x3: Real) { x2(s1(x2, x3)) != x3 or is_constant<Real, Real>(x2) } }","not is_constant<Real, Real>(f) or f(y * Real.1) = s0(f)","not is_constant<Real, Real>(f) or s0(f) = f(x)","not eps.is_positive or s0(f).is_close(s0(f), eps)","y * Real.1 = y","not f(x).is_close(f(y * Real.1), eps)","s0(f).is_close(s0(f), eps)","f(y * Real.1) = s0(f)","s0(f) = f(x)","not f(x).is_close(s0(f), eps)"]}
{"goal":"uniform_condition(f, eps, eps)","proof":["let (s0: (Real -> Real, Real, Real) -> Real, s1: (Real -> Real, Real, Real) -> Real) satisfy { forall(x0: Real -> Real, x1: Real, x2: Real, x3: Real, x4: Real) { not uniform_condition(x0, x1, x2) or not x3.is_close(x4, x1) or x0(x3).is_close(x0(x4), x2) } and forall(x5: Real -> Real, x6: Real, x7: Real) { s0(x5, x6, x7).is_close(s1(x5, x6, x7), x6) or uniform_condition(x5, x6, x7) } and forall(x8: Real -> Real, x9: Real, x10: Real) { not x8(s0(x8, x9, x10)).is_close(x8(s1(x8, x9, x10)), x10) or uniform_condition(x8, x9, x10) } }","f(s0(f, eps, eps)).is_close(f(s1(f, eps, eps)), eps)","not f(s0(f, eps, eps)).is_close(f(s1(f, eps, eps)), eps) or uniform_condition(f, eps, eps)"]}
{"goal":"constant_is_uniform","proof":["let (s0: (Real -> Real, Real) -> Real, s1: Real -> Real -> Real) satisfy { forall(x0: Real -> Real, x1: Real) { not uniform(x0) or not x1.is_positive or s0(x0, x1).is_positive } and forall(x2: Real -> Real, x3: Real) { not uniform(x2) or not x3.is_positive or uniform_condition(x2, s0(x2, x3), x3) } and forall(x4: Real -> Real) { s1(x4).is_positive or uniform(x4) } and forall(x5: Real -> Real, x6: Real) { not uniform_condition(x5, x6, s1(x5)) or not x6.is_positive or uniform(x5) } }","not s1(f).is_positive or uniform_condition(f, s1(f), s1(f))","not uniform_condition(f, s1(f), s1(f)) or not s1(f).is_positive or uniform(f)","s1(f).is_positive or uniform(f)","s1(f).is_positive","not uniform_condition(f, s1(f), s1(f)) or not s1(f).is_positive","uniform_condition(f, s1(f), s1(f))","not uniform_condition(f, s1(f), s1(f))"]}
{"goal":"rat_uniform(f)","proof":["not is_constant<Rat, Real>(f) or rat_uniform(f)"]}
{"goal":"exists(k0: Real) { forall(x0: Rat) { f(x0) = k0 } }","proof":["let (s1: Rat -> Real -> Real, s2: (Rat -> Real, Real) -> Rat) satisfy { forall(x1: Rat -> Real, x2: Rat) { not is_constant<Rat, Real>(x1) or s1(x1) = x1(x2) } and forall(x3: Rat -> Real, x4: Real) { x3(s2(x3, x4)) != x4 or is_constant<Rat, Real>(x3) } }","let s0: Real -> Rat satisfy { forall(x0: Real) { f(s0(x0)) != x0 } }","f(s0(s1(f))) != s1(f)","not is_constant<Rat, Real>(f) or f(s0(s1(f))) = s1(f)"]}
{"goal":"compose[Nat, Rat, Real](f, rat_seq(x))(n) = y","proof":["f(rat_seq(x, n)) = y","compose[Nat, Rat, Real](f, rat_seq(x), n) != f(rat_seq(x, n))","compose[Nat, Rat, Real](f, rat_seq(x), n) = f(rat_seq(x, n))"]}
{"goal":"limit(compose[Nat, Rat, Real](f, rat_seq(x))) = y","proof":["let (s1: (Nat -> Real, Real) -> Nat, s2: (Nat -> Real, Real, Nat) -> Nat) satisfy { forall(x0: Nat -> Real, x1: Real, x2: Nat) { not s1(x0, x1) <= x2 or not real_seq.eventual_eq(x0, x1) or x1 = x0(x2) } and forall(x3: Nat, x4: Nat -> Real, x5: Real) { x3 <= s2(x4, x5, x3) or real_seq.eventual_eq(x4, x5) } and forall(x6: Nat -> Real, x7: Real, x8: Nat) { x6(s2(x6, x7, x8)) != x7 or real_seq.eventual_eq(x6, x7) } }","let s0: Nat satisfy { true }","compose[Nat, Rat, Real](f, rat_seq(x), s2(compose[Nat, Rat, Real](f, rat_seq(x)), y, s0)) = y","compose[Nat, Rat, Real](f, rat_seq(x), s2(compose[Nat, Rat, Real](f, rat_seq(x)), y, s0)) != y or real_seq.eventual_eq(compose[Nat, Rat, Real](f, rat_seq(x)), y)","not real_seq.eventual_eq(compose[Nat, Rat, Real](f, rat_seq(x)), y) or limit(compose[Nat, Rat, Real](f, rat_seq(x))) = y","not real_seq.eventual_eq(compose[Nat, Rat, Real](f, rat_seq(x)), y)"]}
{"goal":"lift_uc(f)(x) = y","proof":["limit(compose[Nat, Rat, Real](f, rat_seq(x))) = lift_uc(f, x)"]}
{"goal":"lift_constant_is_constant","proof":["let (s0: Real -> Real -> Real, s1: (Real -> Real, Real) -> Real) satisfy { forall(x0: Real -> Real, x1: Real) { not is_constant<Real, Real>(x0) or s0(x0) = x0(x1) } and forall(x2: Real -> Real, x3: Real) { x2(s1(x2, x3)) != x3 or is_constant<Real, Real>(x2) } }","lift_uc(f, s1(lift_uc(f), y)) = y","lift_uc(f, s1(lift_uc(f), y)) != y or is_constant<Real, Real>(lift_uc(f))","lift_uc(f, s1(lift_uc(f), y)) != y"]}
{"goal":"exists(k0: Real) { k0.is_positive and uniform_condition(f, k0, eps) }","proof":["let (s0: (Real -> Real, Real) -> Real, s1: Real -> Real -> Real) satisfy { forall(x0: Real, x1: Real -> Real) { not x0.is_positive or not uniform(x1) or s0(x1, x0).is_positive } and forall(x2: Real, x3: Real -> Real) { not x2.is_positive or not uniform(x3) or uniform_condition(x3, s0(x3, x2), x2) } and forall(x4: Real -> Real) { s1(x4).is_positive or uniform(x4) } and forall(x5: Real -> Real, x6: Real) { not uniform_condition(x5, x6, s1(x5)) or not x6.is_positive or uniform(x5) } }","not uniform_condition(f, s0(f, eps), eps) or not s0(f, eps).is_positive","not eps.is_positive or not uniform(f) or uniform_condition(f, s0(f, eps), eps)","not eps.is_positive or not uniform(f) or s0(f, eps).is_positive","not eps.is_positive or s0(f, eps).is_positive","s0(f, eps).is_positive","not eps.is_positive or uniform_condition(f, s0(f, eps), eps)","not uniform_condition(f, s0(f, eps), eps)","uniform_condition(f, s0(f, eps), eps)"]}
{"goal":"exists(k0: Real) { k0.is_positive and uniform_condition(g, k0, delta1) }","proof":["let (s0: (Real -> Real, Real) -> Real, s1: Real -> Real -> Real) satisfy { forall(x0: Real, x1: Real -> Real) { not x0.is_positive or not uniform(x1) or s0(x1, x0).is_positive } and forall(x2: Real, x3: Real -> Real) { not x2.is_positive or not uniform(x3) or uniform_condition(x3, s0(x3, x2), x2) } and forall(x4: Real -> Real) { s1(x4).is_positive or uniform(x4) } and forall(x5: Real -> Real, x6: Real) { not uniform_condition(x5, x6, s1(x5)) or not x6.is_positive or uniform(x5) } }","not uniform_condition(g, s0(g, delta1), delta1) or not s0(g, delta1).is_positive","not delta1.is_positive or not uniform(g) or uniform_condition(g, s0(g, delta1), delta1)","not delta1.is_positive or not uniform(g) or s0(g, delta1).is_positive","not delta1.is_positive or s0(g, delta1).is_positive","s0(g, delta1).is_positive","not delta1.is_positive or uniform_condition(g, s0(g, delta1), delta1)","not uniform_condition(g, s0(g, delta1), delta1)","uniform_condition(g, s0(g, delta1), delta1)"]}
{"goal":"g(x).is_close(g(y), delta1)","proof":["not uniform_condition(g, delta2, delta1) or not x.is_close(y, delta2) or g(x).is_close(g(y), delta1)","not x.is_close(y, delta2) or not uniform_condition(g, delta2, delta1)"]}
{"goal":"f(g(x)).is_close(f(g(y)), eps)","proof":["not uniform_condition(f, delta1, eps) or not g(x).is_close(g(y), delta1) or f(g(x)).is_close(f(g(y)), eps)","not g(x).is_close(g(y), delta1) or not uniform_condition(f, delta1, eps)"]}
{"goal":"compose[Real, Real, Real](f, g)(x).is_close(compose[Real, Real, Real](f, g)(y), eps)","proof":["(compose(f, g, x) - compose(f, g, y)).abs < eps = compose(f, g, x).is_close(compose(f, g, y), eps)","(f(g(x)) - f(g(y))).abs < eps = f(g(x)).is_close(f(g(y)), eps)","compose(f, g, x) = f(g(x))","compose(f, g, y) = f(g(y))"]}
{"goal":"delta2.is_positive and uniform_condition(compose[Real, Real, Real](f, g), delta2, eps)","proof":["let (s0: (Real -> Real, Real, Real) -> Real, s1: (Real -> Real, Real, Real) -> Real) satisfy { forall(x0: Real -> Real, x1: Real, x2: Real, x3: Real, x4: Real) { not uniform_condition(x0, x1, x2) or not x3.is_close(x4, x1) or x0(x3).is_close(x0(x4), x2) } and forall(x5: Real -> Real, x6: Real, x7: Real) { s0(x5, x6, x7).is_close(s1(x5, x6, x7), x6) or uniform_condition(x5, x6, x7) } and forall(x8: Real -> Real, x9: Real, x10: Real) { not x8(s0(x8, x9, x10)).is_close(x8(s1(x8, x9, x10)), x10) or uniform_condition(x8, x9, x10) } }","not s0(compose[Real, Real, Real](f, g), delta2, eps).is_close(s1(compose[Real, Real, Real](f, g), delta2, eps), delta2) or compose(f, g, s0(compose[Real, Real, Real](f, g), delta2, eps)).is_close(compose(f, g, s1(compose[Real, Real, Real](f, g), delta2, eps)), eps)","not uniform_condition(compose[Real, Real, Real](f, g), delta2, eps)","not compose(f, g, s0(compose[Real, Real, Real](f, g), delta2, eps)).is_close(compose(f, g, s1(compose[Real, Real, Real](f, g), delta2, eps)), eps) or uniform_condition(compose[Real, Real, Real](f, g), delta2, eps)","s0(compose[Real, Real, Real](f, g), delta2, eps).is_close(s1(compose[Real, Real, Real](f, g), delta2, eps), delta2) or uniform_condition(compose[Real, Real, Real](f, g), delta2, eps)","s0(compose[Real, Real, Real](f, g), delta2, eps).is_close(s1(compose[Real, Real, Real](f, g), delta2, eps), delta2)","not compose(f, g, s0(compose[Real, Real, Real](f, g), delta2, eps)).is_close(compose(f, g, s1(compose[Real, Real, Real](f, g), delta2, eps)), eps)","compose(f, g, s0(compose[Real, Real, Real](f, g), delta2, eps)).is_close(compose(f, g, s1(compose[Real, Real, Real](f, g), delta2, eps)), eps)"]}
{"goal":"compose_uniform","proof":["let (s0: (Real -> Real, Real) -> Real, s1: Real -> Real -> Real) satisfy { forall(x0: Real, x1: Real -> Real) { not x0.is_positive or not uniform(x1) or s0(x1, x0).is_positive } and forall(x2: Real, x3: Real -> Real) { not x2.is_positive or not uniform(x3) or uniform_condition(x3, s0(x3, x2), x2) } and forall(x4: Real -> Real) { s1(x4).is_positive or uniform(x4) } and forall(x5: Real -> Real, x6: Real) { not uniform_condition(x5, x6, s1(x5)) or not x6.is_positive or uniform(x5) } }","let s2: Real -> Real satisfy { forall(x7: Real) { not x7.is_positive or s2(x7).is_positive } and forall(x8: Real) { not x8.is_positive or uniform_condition(compose[Real, Real, Real](f, g), s2(x8), x8) } }","not s1(compose[Real, Real, Real](f, g)).is_positive or s2(s1(compose[Real, Real, Real](f, g))).is_positive","not s1(compose[Real, Real, Real](f, g)).is_positive or uniform_condition(compose[Real, Real, Real](f, g), s2(s1(compose[Real, Real, Real](f, g))), s1(compose[Real, Real, Real](f, g)))","not uniform_condition(compose[Real, Real, Real](f, g), s2(s1(compose[Real, Real, Real](f, g))), s1(compose[Real, Real, Real](f, g))) or not s2(s1(compose[Real, Real, Real](f, g))).is_positive or uniform(compose[Real, Real, Real](f, g))","s1(compose[Real, Real, Real](f, g)).is_positive or uniform(compose[Real, Real, Real](f, g))","s1(compose[Real, Real, Real](f, g)).is_positive","not uniform_condition(compose[Real, Real, Real](f, g), s2(s1(compose[Real, Real, Real](f, g))), s1(compose[Real, Real, Real](f, g))) or not s2(s1(compose[Real, Real, Real](f, g))).is_positive","s2(s1(compose[Real, Real, Real](f, g))).is_positive","uniform_condition(compose[Real, Real, Real](f, g), s2(s1(compose[Real, Real, Real](f, g))), s1(compose[Real, Real, Real](f, g)))","not uniform_condition(compose[Real, Real, Real](f, g), s2(s1(compose[Real, Real, Real](f, g))), s1(compose[Real, Real, Real](f, g)))"]}
{"goal":"Real.0 < eps","proof":["not eps.is_positive or Real.0 < Real.0 + eps","Real.0 + eps = eps","not Real.0 < Real.0 + eps"]}
{"goal":"exists(k0: Rat) { Real.from_rat(k0) < eps and k0.is_positive }","proof":["let s0: Real -> Rat satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or Real.from_rat(s0(x1)) < x1 } }","not Real.from_rat(s0(eps)) < eps or not s0(eps).is_positive","not eps.is_positive or Real.from_rat(s0(eps)) < eps","not eps.is_positive or s0(eps).is_positive","s0(eps).is_positive","Real.from_rat(s0(eps)) < eps","not Real.from_rat(s0(eps)) < eps"]}
{"goal":"exists(k0: Rat) { k0 < reps1 and k0.is_positive }","proof":["let s0: Nat satisfy { true }","let s1: (Nat, Nat, Nat) -> Nat satisfy { forall(x0: Nat, x1: Nat, x2: Nat) { x0 <= s1(x0, x1, x2) } and forall(x3: Nat, x4: Nat, x5: Nat) { x3 <= s1(x4, x3, x5) } and forall(x6: Nat, x7: Nat, x8: Nat) { x6 <= s1(x7, x8, x6) } }","let s2: Rat -> Nat satisfy { forall(x9: Rat, x10: Nat) { not s2(x9) <= x10 or not x9.is_positive or rat.iop(x10) < x9 } }","not rat.iop(s1(s0, s0, s2(reps1))) < reps1 or not rat.iop(s1(s0, s0, s2(reps1))).is_positive","not s2(reps1) <= s1(s0, s0, s2(reps1)) or not reps1.is_positive or rat.iop(s1(s0, s0, s2(reps1))) < reps1","s2(reps1) <= s1(s0, s0, s2(reps1))","rat.iop(s1(s0, s0, s2(reps1))).is_positive","not rat.iop(s1(s0, s0, s2(reps1))) < reps1","not s2(reps1) <= s1(s0, s0, s2(reps1))"]}
{"goal":"Rat.0 <= r.abs","proof":["(-r).abs = r.abs","not Rat.0 <= (-r).abs","Rat.0 <= (-r).abs"]}
{"goal":"exists(k0: Rat) { k0.is_positive and r.abs * k0 < reps2 }","proof":["let s0: (Rat, Rat) -> Rat satisfy { forall(x0: Rat, x1: Rat) { not Rat.0 <= x0 or not x1.is_positive or s0(x0, x1).is_positive } and forall(x2: Rat, x3: Rat) { not Rat.0 <= x2 or not x3.is_positive or x2 * s0(x2, x3) < x3 } }","not r.abs * s0(r.abs, reps2) < reps2 or not s0(r.abs, reps2).is_positive","not Rat.0 <= r.abs or not reps2.is_positive or r.abs * s0(r.abs, reps2) < reps2","not Rat.0 <= r.abs or not reps2.is_positive or s0(r.abs, reps2).is_positive","not Rat.0 <= r.abs or s0(r.abs, reps2).is_positive","s0(r.abs, reps2).is_positive","not reps2.is_positive or r.abs * s0(r.abs, reps2) < reps2","r.abs * s0(r.abs, reps2) < reps2"]}
{"goal":"(r1 - r2).abs < delta","proof":["(r1 - r2).abs < delta = r1.is_close(r2, delta)"]}
{"goal":"(r1 - r2).abs <= delta","proof":["not (r1 - r2).abs < delta or (r1 - r2).abs <= delta"]}
{"goal":"(r1 - r2).abs * r.abs <= delta * r.abs","proof":["not Rat.0 <= r.abs or not (r1 - r2).abs <= delta or (r1 - r2).abs * r.abs <= delta * r.abs"]}
{"goal":"r.abs * (r1 - r2).abs <= r.abs * delta","proof":["delta * r.abs >= (r1 - r2).abs * r.abs = (r1 - r2).abs * r.abs <= delta * r.abs","r.abs * delta >= r.abs * (r1 - r2).abs = r.abs * (r1 - r2).abs <= r.abs * delta","(r1 - r2).abs * r.abs = r.abs * (r1 - r2).abs","delta * r.abs = r.abs * delta"]}
{"goal":"(r * (r1 - r2)).abs <= r.abs * delta","proof":["r.abs * (r1 - r2).abs = (r * (r1 - r2)).abs"]}
{"goal":"(r * r1 - r * r2).abs <= r.abs * delta","proof":["r * r1 - r * r2 = r * (r1 - r2)"]}
{"goal":"r.abs * delta <= reps2","proof":["not r.abs * delta < reps2 or r.abs * delta <= reps2"]}
{"goal":"(r * r1 - r * r2).abs <= reps2","proof":["not (r * r1 - r * r2).abs <= r.abs * delta or not r.abs * delta <= reps2 or (r * r1 - r * r2).abs <= reps2","not (r * r1 - r * r2).abs <= r.abs * delta or not r.abs * delta <= reps2"]}
{"goal":"(r * r1 - r * r2).abs < reps1","proof":["r * r1 - r * r2 = r * (r1 - r2)","not (r * (r1 - r2)).abs < reps1","not reps2 < reps1 or not (r * (r1 - r2)).abs <= reps2 or (r * (r1 - r2)).abs < reps1","(r * (r1 - r2)).abs <= reps2","not (r * (r1 - r2)).abs <= reps2 or (r * (r1 - r2)).abs < reps1"]}
{"goal":"Real.from_rat(r * r1).is_close(Real.from_rat(r * r2), Real.from_rat(reps1))","proof":["not (r * r1).is_close(r * r2, reps1) or Real.from_rat(r * r1).is_close(Real.from_rat(r * r2), Real.from_rat(reps1))","(r * r1 - r * r2).abs < reps1 = (r * r1).is_close(r * r2, reps1)","not (r * r1).is_close(r * r2, reps1)","(r * r1).is_close(r * r2, reps1)"]}
{"goal":"Real.from_rat(r * r1).is_close(Real.from_rat(r * r2), eps)","proof":["not Real.from_rat(r * r1).is_close(Real.from_rat(r * r2), Real.from_rat(reps1)) or not Real.from_rat(reps1) < eps or Real.from_rat(r * r1).is_close(Real.from_rat(r * r2), eps)","not Real.from_rat(r * r1).is_close(Real.from_rat(r * r2), Real.from_rat(reps1)) or not Real.from_rat(reps1) < eps"]}
{"goal":"mul_r(r1).is_close(mul_r(r2), eps)","proof":["compose<Rat, Rat, Real>(Real.from_rat, r.mul, r1) = mul_r(r1)","compose<Rat, Rat, Real>(Real.from_rat, r.mul, r2) = mul_r(r2)","not mul_r(r1).is_close(mul_r(r2), Real.from_rat(reps1)) or not Real.from_rat(reps1) < eps or mul_r(r1).is_close(mul_r(r2), eps)","(Real.from_rat(r * r1) - Real.from_rat(r * r2)).abs < Real.from_rat(reps1) = Real.from_rat(r * r1).is_close(Real.from_rat(r * r2), Real.from_rat(reps1))","(mul_r(r1) - mul_r(r2)).abs < Real.from_rat(reps1) = mul_r(r1).is_close(mul_r(r2), Real.from_rat(reps1))","compose<Rat, Rat, Real>(Real.from_rat, r.mul, r1) = Real.from_rat(r * r1)","compose<Rat, Rat, Real>(Real.from_rat, r.mul, r2) = Real.from_rat(r * r2)","not mul_r(r1).is_close(mul_r(r2), Real.from_rat(reps1)) or not Real.from_rat(reps1) < eps","not mul_r(r1).is_close(mul_r(r2), Real.from_rat(reps1))"]}
{"goal":"delta.is_positive and rat_condition(mul_r, delta, eps)","proof":["not rat_condition(mul_r, delta, eps)","let (s0: (Rat -> Real, Rat, Real) -> Rat, s1: (Rat -> Real, Rat, Real) -> Rat) satisfy { forall(x0: Rat -> Real, x1: Rat, x2: Real, x3: Rat, x4: Rat) { not rat_condition(x0, x1, x2) or not x3.is_close(x4, x1) or x0(x3).is_close(x0(x4), x2) } and forall(x5: Rat -> Real, x6: Rat, x7: Real) { s0(x5, x6, x7).is_close(s1(x5, x6, x7), x6) or rat_condition(x5, x6, x7) } and forall(x8: Rat -> Real, x9: Rat, x10: Real) { not x8(s0(x8, x9, x10)).is_close(x8(s1(x8, x9, x10)), x10) or rat_condition(x8, x9, x10) } }","not s0(mul_r, delta, eps).is_close(s1(mul_r, delta, eps), delta) or mul_r(s0(mul_r, delta, eps)).is_close(mul_r(s1(mul_r, delta, eps)), eps)","not mul_r(s0(mul_r, delta, eps)).is_close(mul_r(s1(mul_r, delta, eps)), eps) or rat_condition(mul_r, delta, eps)","s0(mul_r, delta, eps).is_close(s1(mul_r, delta, eps), delta) or rat_condition(mul_r, delta, eps)","s0(mul_r, delta, eps).is_close(s1(mul_r, delta, eps), delta)","not mul_r(s0(mul_r, delta, eps)).is_close(mul_r(s1(mul_r, delta, eps)), eps)","mul_r(s0(mul_r, delta, eps)).is_close(mul_r(s1(mul_r, delta, eps)), eps)"]}
{"goal":"rat_uniform(mul_r)","proof":["let (s0: (Rat -> Real, Real) -> Rat, s1: Rat -> Real -> Real) satisfy { forall(x0: Rat -> Real, x1: Real) { not rat_uniform(x0) or not x1.is_positive or s0(x0, x1).is_positive } and forall(x2: Rat -> Real, x3: Real) { not rat_uniform(x2) or not x3.is_positive or rat_condition(x2, s0(x2, x3), x3) } and forall(x4: Rat -> Real) { s1(x4).is_positive or rat_uniform(x4) } and forall(x5: Rat -> Real, x6: Rat) { not rat_condition(x5, x6, s1(x5)) or not x6.is_positive or rat_uniform(x5) } }","let s2: Real -> Rat satisfy { forall(x7: Real) { not x7.is_positive or s2(x7).is_positive } and forall(x8: Real) { not x8.is_positive or rat_condition(mul_r, s2(x8), x8) } }","not s1(mul_r).is_positive or s2(s1(mul_r)).is_positive","not s1(mul_r).is_positive or rat_condition(mul_r, s2(s1(mul_r)), s1(mul_r))","not rat_condition(mul_r, s2(s1(mul_r)), s1(mul_r)) or not s2(s1(mul_r)).is_positive or rat_uniform(mul_r)","s1(mul_r).is_positive or rat_uniform(mul_r)","s1(mul_r).is_positive","not rat_condition(mul_r, s2(s1(mul_r)), s1(mul_r)) or not s2(s1(mul_r)).is_positive","s2(s1(mul_r)).is_positive","rat_condition(mul_r, s2(s1(mul_r)), s1(mul_r))","not rat_condition(mul_r, s2(s1(mul_r)), s1(mul_r))"]}
{"goal":"rat_mul_uniform","proof":[]}
{"goal":"(a - b).abs < eps","proof":["(a - b).abs < eps = a.is_close(b, eps)"]}
{"goal":"(a + c - (c + b)).abs < eps","proof":["a + c - (c + b) = a + c - c - b","not (a + c - c - b).abs < eps","a + c - c = a"]}
{"goal":"(a + c - (b + c)).abs < eps","proof":["a + c - (b + c) = a + c - b - c","a + c - (c + b) = a + c - c - b","a + c - c - b = a + c - b - c"]}
{"goal":"close_add","proof":["(a + c - (b + c)).abs < eps = (a + c).is_close(b + c, eps)"]}
{"goal":"(x + a).is_close(x + b, eps)","proof":["not a.is_close(b, eps) or (a + x).is_close(b + x, eps)","x + a = a + x","x + b = b + x","not (a + x).is_close(x + b, eps)","not (a + x).is_close(b + x, eps)"]}
{"goal":"x.add(a).is_close(x.add(b), eps)","proof":[]}
{"goal":"uniform_condition(x.add, eps, eps)","proof":["let (s0: (Real -> Real, Real, Real) -> Real, s1: (Real -> Real, Real, Real) -> Real) satisfy { forall(x0: Real, x1: Real, x2: Real, x3: Real -> Real, x4: Real) { not x0.is_close(x1, x2) or not uniform_condition(x3, x2, x4) or x3(x0).is_close(x3(x1), x4) } and forall(x5: Real -> Real, x6: Real, x7: Real) { s0(x5, x6, x7).is_close(s1(x5, x6, x7), x6) or uniform_condition(x5, x6, x7) } and forall(x8: Real -> Real, x9: Real, x10: Real) { not x8(s0(x8, x9, x10)).is_close(x8(s1(x8, x9, x10)), x10) or uniform_condition(x8, x9, x10) } }","not s0(x.add, eps, eps).is_close(s1(x.add, eps, eps), eps) or (x + s0(x.add, eps, eps)).is_close(x + s1(x.add, eps, eps), eps)","not (x + s0(x.add, eps, eps)).is_close(x + s1(x.add, eps, eps), eps) or uniform_condition(x.add, eps, eps)","s0(x.add, eps, eps).is_close(s1(x.add, eps, eps), eps) or uniform_condition(x.add, eps, eps)","s0(x.add, eps, eps).is_close(s1(x.add, eps, eps), eps)","not (x + s0(x.add, eps, eps)).is_close(x + s1(x.add, eps, eps), eps)","(x + s0(x.add, eps, eps)).is_close(x + s1(x.add, eps, eps), eps)"]}
{"goal":"add_real_uniform","proof":["let (s0: (Real -> Real, Real) -> Real, s1: Real -> Real -> Real) satisfy { forall(x0: Real, x1: Real -> Real) { not x0.is_positive or not uniform(x1) or s0(x1, x0).is_positive } and forall(x2: Real, x3: Real -> Real) { not x2.is_positive or not uniform(x3) or uniform_condition(x3, s0(x3, x2), x2) } and forall(x4: Real -> Real) { s1(x4).is_positive or uniform(x4) } and forall(x5: Real -> Real, x6: Real) { not uniform_condition(x5, x6, s1(x5)) or not x6.is_positive or uniform(x5) } }","not s1(x.add).is_positive or uniform_condition(x.add, s1(x.add), s1(x.add))","not uniform_condition(x.add, s1(x.add), s1(x.add)) or not s1(x.add).is_positive or uniform(x.add)","s1(x.add).is_positive or uniform(x.add)","s1(x.add).is_positive","not uniform_condition(x.add, s1(x.add), s1(x.add)) or not s1(x.add).is_positive","uniform_condition(x.add, s1(x.add), s1(x.add))","not uniform_condition(x.add, s1(x.add), s1(x.add))"]}
{"goal":"(-x).is_close(-y, eps)","proof":["not x.is_close(y, eps) or (-x).is_close(-y, eps)"]}
{"goal":"(-x).is_close(-y, eps)","proof":[]}
{"goal":"uniform_condition(Real.neg, eps, eps)","proof":["let (s0: (Real -> Real, Real, Real) -> Real, s1: (Real -> Real, Real, Real) -> Real) satisfy { forall(x0: Real -> Real, x1: Real, x2: Real, x3: Real, x4: Real) { not uniform_condition(x0, x1, x2) or not x3.is_close(x4, x1) or x0(x3).is_close(x0(x4), x2) } and forall(x5: Real -> Real, x6: Real, x7: Real) { s0(x5, x6, x7).is_close(s1(x5, x6, x7), x6) or uniform_condition(x5, x6, x7) } and forall(x8: Real -> Real, x9: Real, x10: Real) { not x8(s0(x8, x9, x10)).is_close(x8(s1(x8, x9, x10)), x10) or uniform_condition(x8, x9, x10) } }","not (-s0(Real.neg, eps, eps)).is_close(-s1(Real.neg, eps, eps), eps) or uniform_condition(Real.neg, eps, eps)","s0(Real.neg, eps, eps).is_close(s1(Real.neg, eps, eps), eps) or uniform_condition(Real.neg, eps, eps)","not s0(Real.neg, eps, eps).is_close(s1(Real.neg, eps, eps), eps) or (-s0(Real.neg, eps, eps)).is_close(-s1(Real.neg, eps, eps), eps)","s0(Real.neg, eps, eps).is_close(s1(Real.neg, eps, eps), eps)","not (-s0(Real.neg, eps, eps)).is_close(-s1(Real.neg, eps, eps), eps)","(-s0(Real.neg, eps, eps)).is_close(-s1(Real.neg, eps, eps), eps)"]}
{"goal":"neg_uniform","proof":["let (s0: (Real -> Real, Real) -> Real, s1: Real -> Real -> Real) satisfy { forall(x0: Real, x1: Real -> Real) { not x0.is_positive or not uniform(x1) or s0(x1, x0).is_positive } and forall(x2: Real, x3: Real -> Real) { not x2.is_positive or not uniform(x3) or uniform_condition(x3, s0(x3, x2), x2) } and forall(x4: Real -> Real) { s1(x4).is_positive or uniform(x4) } and forall(x5: Real -> Real, x6: Real) { not uniform_condition(x5, x6, s1(x5)) or not x6.is_positive or uniform(x5) } }","not s1(Real.neg).is_positive or uniform_condition(Real.neg, s1(Real.neg), s1(Real.neg))","not uniform_condition(Real.neg, s1(Real.neg), s1(Real.neg)) or not s1(Real.neg).is_positive or uniform(Real.neg)","s1(Real.neg).is_positive or uniform(Real.neg)","s1(Real.neg).is_positive","not uniform_condition(Real.neg, s1(Real.neg), s1(Real.neg)) or not s1(Real.neg).is_positive","uniform_condition(Real.neg, s1(Real.neg), s1(Real.neg))","not uniform_condition(Real.neg, s1(Real.neg), s1(Real.neg))"]}
{"goal":"exists(k0: Real) { k0.is_positive and k0 + k0 < eps }","proof":["let s0: Real -> Real satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or s0(x1) + s0(x1) < x1 } }","not s0(eps) + s0(eps) < eps or not s0(eps).is_positive","not eps.is_positive or s0(eps) + s0(eps) < eps","not eps.is_positive or s0(eps).is_positive","s0(eps).is_positive","s0(eps) + s0(eps) < eps","not s0(eps) + s0(eps) < eps"]}
{"goal":"exists(k0: Real) { k0.is_positive and uniform_condition(f, k0, eps2) }","proof":["let (s0: (Real -> Real, Real) -> Real, s1: Real -> Real -> Real) satisfy { forall(x0: Real -> Real, x1: Real) { not uniform(x0) or not x1.is_positive or s0(x0, x1).is_positive } and forall(x2: Real -> Real, x3: Real) { not uniform(x2) or not x3.is_positive or uniform_condition(x2, s0(x2, x3), x3) } and forall(x4: Real -> Real) { s1(x4).is_positive or uniform(x4) } and forall(x5: Real -> Real, x6: Real) { not uniform_condition(x5, x6, s1(x5)) or not x6.is_positive or uniform(x5) } }","not uniform_condition(f, s0(f, eps2), eps2) or not s0(f, eps2).is_positive","not uniform(f) or not eps2.is_positive or uniform_condition(f, s0(f, eps2), eps2)","not uniform(f) or not eps2.is_positive or s0(f, eps2).is_positive","not uniform(f) or s0(f, eps2).is_positive","s0(f, eps2).is_positive","not uniform(f) or uniform_condition(f, s0(f, eps2), eps2)","not uniform_condition(f, s0(f, eps2), eps2)","uniform_condition(f, s0(f, eps2), eps2)"]}
{"goal":"exists(k0: Real) { k0.is_positive and uniform_condition(g, k0, eps2) }","proof":["let (s0: (Real -> Real, Real) -> Real, s1: Real -> Real -> Real) satisfy { forall(x0: Real -> Real, x1: Real) { not uniform(x0) or not x1.is_positive or s0(x0, x1).is_positive } and forall(x2: Real -> Real, x3: Real) { not uniform(x2) or not x3.is_positive or uniform_condition(x2, s0(x2, x3), x3) } and forall(x4: Real -> Real) { s1(x4).is_positive or uniform(x4) } and forall(x5: Real -> Real, x6: Real) { not uniform_condition(x5, x6, s1(x5)) or not x6.is_positive or uniform(x5) } }","not uniform_condition(g, s0(g, eps2), eps2) or not s0(g, eps2).is_positive","not uniform(g) or not eps2.is_positive or uniform_condition(g, s0(g, eps2), eps2)","not uniform(g) or not eps2.is_positive or s0(g, eps2).is_positive","not uniform(g) or s0(g, eps2).is_positive","s0(g, eps2).is_positive","not uniform(g) or uniform_condition(g, s0(g, eps2), eps2)","not uniform_condition(g, s0(g, eps2), eps2)","uniform_condition(g, s0(g, eps2), eps2)"]}
{"goal":"exists(k0: Real) { k0.is_positive and k0 < delta1 and k0 < delta2 }","proof":["let s0: (Real, Real) -> Real satisfy { forall(x0: Real, x1: Real) { not x0.is_positive or not x1.is_positive or s0(x0, x1).is_positive } and forall(x2: Real, x3: Real) { not x2.is_positive or not x3.is_positive or s0(x2, x3) < x2 } and forall(x4: Real, x5: Real) { not x4.is_positive or not x5.is_positive or s0(x4, x5) < x5 } }","not s0(delta1, delta2) < delta2 or not s0(delta1, delta2) < delta1 or not s0(delta1, delta2).is_positive","not delta1.is_positive or not delta2.is_positive or s0(delta1, delta2) < delta2","not delta1.is_positive or not delta2.is_positive or s0(delta1, delta2) < delta1","not delta1.is_positive or not delta2.is_positive or s0(delta1, delta2).is_positive","not delta1.is_positive or s0(delta1, delta2).is_positive","s0(delta1, delta2).is_positive","not delta1.is_positive or s0(delta1, delta2) < delta1","s0(delta1, delta2) < delta1","not delta1.is_positive or s0(delta1, delta2) < delta2","not s0(delta1, delta2) < delta2","s0(delta1, delta2) < delta2"]}
{"goal":"x.is_close(y, delta1)","proof":["not delta < delta1 or not x.is_close(y, delta) or x.is_close(y, delta1)","not x.is_close(y, delta) or not delta < delta1"]}
{"goal":"f(x).is_close(f(y), eps2)","proof":["not uniform_condition(f, delta1, eps2) or not x.is_close(y, delta1) or f(x).is_close(f(y), eps2)","not x.is_close(y, delta1) or not uniform_condition(f, delta1, eps2)"]}
{"goal":"x.is_close(y, delta2)","proof":["not delta < delta2 or not x.is_close(y, delta) or x.is_close(y, delta2)","not x.is_close(y, delta) or not delta < delta2"]}
{"goal":"g(x).is_close(g(y), eps2)","proof":["not uniform_condition(g, delta2, eps2) or not x.is_close(y, delta2) or g(x).is_close(g(y), eps2)","not x.is_close(y, delta2) or not uniform_condition(g, delta2, eps2)"]}
{"goal":"(f(x) + g(x)).is_close(f(y) + g(y), eps2 + eps2)","proof":["not f(x).is_close(f(y), eps2) or not g(x).is_close(g(y), eps2) or (f(x) + g(x)).is_close(f(y) + g(y), eps2 + eps2)"]}
{"goal":"(f(x) + g(x)).is_close(f(y) + g(y), eps)","proof":["not eps2 + eps2 < eps or not (f(x) + g(x)).is_close(f(y) + g(y), eps2 + eps2) or (f(x) + g(x)).is_close(f(y) + g(y), eps)","not (f(x) + g(x)).is_close(f(y) + g(y), eps2 + eps2) or not eps2 + eps2 < eps"]}
{"goal":"add_fns(f, g, x).is_close(add_fns(f, g, y), eps)","proof":["(add_fns(f, g, x) - add_fns(f, g, y)).abs < eps = add_fns(f, g, x).is_close(add_fns(f, g, y), eps)","(f(x) + g(x) - (f(y) + g(y))).abs < eps = (f(x) + g(x)).is_close(f(y) + g(y), eps)","f(x) + g(x) = add_fns(f, g, x)","f(y) + g(y) = add_fns(f, g, y)"]}
{"goal":"uniform_condition(add_fns[Real](f, g), delta, eps)","proof":["let (s0: (Real -> Real, Real, Real) -> Real, s1: (Real -> Real, Real, Real) -> Real) satisfy { forall(x0: Real -> Real, x1: Real, x2: Real, x3: Real, x4: Real) { not uniform_condition(x0, x1, x2) or not x3.is_close(x4, x1) or x0(x3).is_close(x0(x4), x2) } and forall(x5: Real -> Real, x6: Real, x7: Real) { s0(x5, x6, x7).is_close(s1(x5, x6, x7), x6) or uniform_condition(x5, x6, x7) } and forall(x8: Real -> Real, x9: Real, x10: Real) { not x8(s0(x8, x9, x10)).is_close(x8(s1(x8, x9, x10)), x10) or uniform_condition(x8, x9, x10) } }","not s0(add_fns[Real](f, g), delta, eps).is_close(s1(add_fns[Real](f, g), delta, eps), delta) or add_fns(f, g, s0(add_fns[Real](f, g), delta, eps)).is_close(add_fns(f, g, s1(add_fns[Real](f, g), delta, eps)), eps)","not add_fns(f, g, s0(add_fns[Real](f, g), delta, eps)).is_close(add_fns(f, g, s1(add_fns[Real](f, g), delta, eps)), eps) or uniform_condition(add_fns[Real](f, g), delta, eps)","s0(add_fns[Real](f, g), delta, eps).is_close(s1(add_fns[Real](f, g), delta, eps), delta) or uniform_condition(add_fns[Real](f, g), delta, eps)","s0(add_fns[Real](f, g), delta, eps).is_close(s1(add_fns[Real](f, g), delta, eps), delta)","not add_fns(f, g, s0(add_fns[Real](f, g), delta, eps)).is_close(add_fns(f, g, s1(add_fns[Real](f, g), delta, eps)), eps)","add_fns(f, g, s0(add_fns[Real](f, g), delta, eps)).is_close(add_fns(f, g, s1(add_fns[Real](f, g), delta, eps)), eps)"]}
{"goal":"delta.is_positive and uniform_condition(add_fns[Real](f, g), delta, eps)","proof":["not uniform_condition(add_fns[Real](f, g), delta, eps)"]}
{"goal":"add_fns_uniform","proof":["let (s0: (Real -> Real, Real) -> Real, s1: Real -> Real -> Real) satisfy { forall(x0: Real -> Real, x1: Real) { not uniform(x0) or not x1.is_positive or s0(x0, x1).is_positive } and forall(x2: Real -> Real, x3: Real) { not uniform(x2) or not x3.is_positive or uniform_condition(x2, s0(x2, x3), x3) } and forall(x4: Real -> Real) { s1(x4).is_positive or uniform(x4) } and forall(x5: Real -> Real, x6: Real) { not uniform_condition(x5, x6, s1(x5)) or not x6.is_positive or uniform(x5) } }","let s2: Real -> Real satisfy { forall(x7: Real) { not x7.is_positive or s2(x7).is_positive } and forall(x8: Real) { not x8.is_positive or uniform_condition(add_fns[Real](f, g), s2(x8), x8) } }","not s1(add_fns[Real](f, g)).is_positive or s2(s1(add_fns[Real](f, g))).is_positive","not s1(add_fns[Real](f, g)).is_positive or uniform_condition(add_fns[Real](f, g), s2(s1(add_fns[Real](f, g))), s1(add_fns[Real](f, g)))","not uniform_condition(add_fns[Real](f, g), s2(s1(add_fns[Real](f, g))), s1(add_fns[Real](f, g))) or not s2(s1(add_fns[Real](f, g))).is_positive or uniform(add_fns[Real](f, g))","s1(add_fns[Real](f, g)).is_positive or uniform(add_fns[Real](f, g))","s1(add_fns[Real](f, g)).is_positive","not uniform_condition(add_fns[Real](f, g), s2(s1(add_fns[Real](f, g))), s1(add_fns[Real](f, g))) or not s2(s1(add_fns[Real](f, g))).is_positive","s2(s1(add_fns[Real](f, g))).is_positive","uniform_condition(add_fns[Real](f, g), s2(s1(add_fns[Real](f, g))), s1(add_fns[Real](f, g)))","not uniform_condition(add_fns[Real](f, g), s2(s1(add_fns[Real](f, g))), s1(add_fns[Real](f, g)))"]}
{"goal":"exists(k0: Real) { k0.is_positive and k0 + k0 < eps }","proof":["let s0: Real -> Real satisfy { forall(x0: Real) { not x0.is_positive or s0(x0).is_positive } and forall(x1: Real) { not x1.is_positive or s0(x1) + s0(x1) < x1 } }","not s0(eps) + s0(eps) < eps or not s0(eps).is_positive","not eps.is_positive or s0(eps) + s0(eps) < eps","not eps.is_positive or s0(eps).is_positive","s0(eps).is_positive","s0(eps) + s0(eps) < eps","not s0(eps) + s0(eps) < eps"]}
{"goal":"(x1 + y1).is_close(x + y, delta + delta)","proof":["not x1.is_close(x, delta) or not y1.is_close(y, delta) or (x1 + y1).is_close(x + y, delta + delta)"]}
{"goal":"(x1 + y1).is_close(x + y, eps)","proof":["not (x1 + y1).is_close(x + y, delta + delta) or not delta + delta < eps or (x1 + y1).is_close(x + y, eps)","not (x1 + y1).is_close(x + y, delta + delta) or not delta + delta < eps"]}
{"goal":"continuous2_condition(Real.add, x, y, delta, eps)","proof":["let (s0: ((Real, Real) -> Real, Real, Real, Real, Real) -> Real, s1: ((Real, Real) -> Real, Real, Real, Real, Real) -> Real) satisfy { forall(x0: (Real, Real) -> Real, x1: Real, x2: Real, x3: Real, x4: Real, x5: Real, x6: Real) { not continuous2_condition(x0, x1, x2, x3, x4) or not x5.is_close(x1, x3) or not x6.is_close(x2, x3) or x0(x5, x6).is_close(x0(x1, x2), x4) } and forall(x7: (Real, Real) -> Real, x8: Real, x9: Real, x10: Real, x11: Real) { s0(x7, x8, x9, x10, x11).is_close(x8, x10) or continuous2_condition(x7, x8, x9, x10, x11) } and forall(x12: (Real, Real) -> Real, x13: Real, x14: Real, x15: Real, x16: Real) { s1(x12, x13, x14, x15, x16).is_close(x14, x15) or continuous2_condition(x12, x13, x14, x15, x16) } and forall(x17: (Real, Real) -> Real, x18: Real, x19: Real, x20: Real, x21: Real) { not x17(s0(x17, x18, x19, x20, x21), s1(x17, x18, x19, x20, x21)).is_close(x17(x18, x19), x21) or continuous2_condition(x17, x18, x19, x20, x21) } }","not s1(Real.add, x, y, delta, eps).is_close(y, delta) or not s0(Real.add, x, y, delta, eps).is_close(x, delta) or (s0(Real.add, x, y, delta, eps) + s1(Real.add, x, y, delta, eps)).is_close(x + y, eps)","s1(Real.add, x, y, delta, eps).is_close(y, delta) or continuous2_condition(Real.add, x, y, delta, eps)","s0(Real.add, x, y, delta, eps).is_close(x, delta) or continuous2_condition(Real.add, x, y, delta, eps)","not (s0(Real.add, x, y, delta, eps) + s1(Real.add, x, y, delta, eps)).is_close(x + y, eps) or continuous2_condition(Real.add, x, y, delta, eps)","s0(Real.add, x, y, delta, eps).is_close(x, delta)","s1(Real.add, x, y, delta, eps).is_close(y, delta)","not (s0(Real.add, x, y, delta, eps) + s1(Real.add, x, y, delta, eps)).is_close(x + y, eps)"]}
{"goal":"delta.is_positive and continuous2_condition(Real.add, x, y, delta, eps)","proof":["not continuous2_condition(Real.add, x, y, delta, eps)"]}
{"goal":"continuous2_at(Real.add, x, y)","proof":["let (s0: ((Real, Real) -> Real, Real, Real, Real) -> Real, s1: ((Real, Real) -> Real, Real, Real) -> Real) satisfy { forall(x0: (Real, Real) -> Real, x1: Real, x2: Real, x3: Real) { not continuous2_at(x0, x1, x2) or not x3.is_positive or s0(x0, x1, x2, x3).is_positive } and forall(x4: (Real, Real) -> Real, x5: Real, x6: Real, x7: Real) { not continuous2_at(x4, x5, x6) or not x7.is_positive or continuous2_condition(x4, x5, x6, s0(x4, x5, x6, x7), x7) } and forall(x8: (Real, Real) -> Real, x9: Real, x10: Real) { s1(x8, x9, x10).is_positive or continuous2_at(x8, x9, x10) } and forall(x11: (Real, Real) -> Real, x12: Real, x13: Real, x14: Real) { not continuous2_condition(x11, x12, x13, x14, s1(x11, x12, x13)) or not x14.is_positive or continuous2_at(x11, x12, x13) } }","let s2: Real -> Real satisfy { forall(x15: Real) { not x15.is_positive or s2(x15).is_positive } and forall(x16: Real) { not x16.is_positive or continuous2_condition(Real.add, x, y, s2(x16), x16) } }","not s1(Real.add, x, y).is_positive or s2(s1(Real.add, x, y)).is_positive","not s1(Real.add, x, y).is_positive or continuous2_condition(Real.add, x, y, s2(s1(Real.add, x, y)), s1(Real.add, x, y))","not continuous2_condition(Real.add, x, y, s2(s1(Real.add, x, y)), s1(Real.add, x, y)) or not s2(s1(Real.add, x, y)).is_positive or continuous2_at(Real.add, x, y)","s1(Real.add, x, y).is_positive or continuous2_at(Real.add, x, y)","s1(Real.add, x, y).is_positive","not continuous2_condition(Real.add, x, y, s2(s1(Real.add, x, y)), s1(Real.add, x, y)) or not s2(s1(Real.add, x, y)).is_positive","s2(s1(Real.add, x, y)).is_positive","continuous2_condition(Real.add, x, y, s2(s1(Real.add, x, y)), s1(Real.add, x, y))","not continuous2_condition(Real.add, x, y, s2(s1(Real.add, x, y)), s1(Real.add, x, y))"]}
{"goal":"add_continuous2","proof":["let (s0: (Real, Real) -> Real -> Real, s1: (Real, Real) -> Real -> Real) satisfy { forall(x0: (Real, Real) -> Real, x1: Real, x2: Real) { not continuous2(x0) or continuous2_at(x0, x1, x2) } and forall(x3: (Real, Real) -> Real) { not continuous2_at(x3, s0(x3), s1(x3)) or continuous2(x3) } }","continuous2_at(Real.add, s0(Real.add), s1(Real.add))","not continuous2_at(Real.add, s0(Real.add), s1(Real.add)) or continuous2(Real.add)"]}
{"goal":"exists(k0: Real) { k0.is_positive and uniform_condition(f, k0, eps) }","proof":["let (s0: (Real -> Real, Real) -> Real, s1: Real -> Real -> Real) satisfy { forall(x0: Real, x1: Real -> Real) { not x0.is_positive or not uniform(x1) or s0(x1, x0).is_positive } and forall(x2: Real, x3: Real -> Real) { not x2.is_positive or not uniform(x3) or uniform_condition(x3, s0(x3, x2), x2) } and forall(x4: Real -> Real) { s1(x4).is_positive or uniform(x4) } and forall(x5: Real -> Real, x6: Real) { not uniform_condition(x5, x6, s1(x5)) or not x6.is_positive or uniform(x5) } }","not uniform_condition(f, s0(f, eps), eps) or not s0(f, eps).is_positive","not eps.is_positive or not uniform(f) or uniform_condition(f, s0(f, eps), eps)","not eps.is_positive or not uniform(f) or s0(f, eps).is_positive","not eps.is_positive or s0(f, eps).is_positive","s0(f, eps).is_positive","not eps.is_positive or uniform_condition(f, s0(f, eps), eps)","not uniform_condition(f, s0(f, eps), eps)","uniform_condition(f, s0(f, eps), eps)"]}
{"goal":"f(x1).is_close(f(x), eps)","proof":["not x1.is_close(x, delta) or not uniform_condition(f, delta, eps) or f(x1).is_close(f(x), eps)","not x1.is_close(x, delta) or not uniform_condition(f, delta, eps)"]}
{"goal":"continuous_condition(f, x, delta, eps)","proof":["let s0: (Real -> Real, Real, Real, Real) -> Real satisfy { forall(x0: Real -> Real, x1: Real, x2: Real, x3: Real, x4: Real) { not continuous_condition(x0, x1, x2, x3) or not x4.is_close(x1, x2) or x0(x4).is_close(x0(x1), x3) } and forall(x5: Real -> Real, x6: Real, x7: Real, x8: Real) { s0(x5, x6, x7, x8).is_close(x6, x7) or continuous_condition(x5, x6, x7, x8) } and forall(x9: Real -> Real, x10: Real, x11: Real, x12: Real) { not x9(s0(x9, x10, x11, x12)).is_close(x9(x10), x12) or continuous_condition(x9, x10, x11, x12) } }","not s0(f, x, delta, eps).is_close(x, delta) or f(s0(f, x, delta, eps)).is_close(f(x), eps)","not f(s0(f, x, delta, eps)).is_close(f(x), eps) or continuous_condition(f, x, delta, eps)","s0(f, x, delta, eps).is_close(x, delta) or continuous_condition(f, x, delta, eps)","s0(f, x, delta, eps).is_close(x, delta)","not f(s0(f, x, delta, eps)).is_close(f(x), eps)","f(s0(f, x, delta, eps)).is_close(f(x), eps)"]}
{"goal":"delta.is_positive and continuous_condition(f, x, delta, eps)","proof":["not continuous_condition(f, x, delta, eps)"]}
{"goal":"continuous_at(f, x)","proof":["let (s0: (Real -> Real, Real, Real) -> Real, s1: (Real -> Real, Real) -> Real) satisfy { forall(x0: Real -> Real, x1: Real, x2: Real) { not continuous_at(x0, x1) or not x2.is_positive or s0(x0, x1, x2).is_positive } and forall(x3: Real -> Real, x4: Real, x5: Real) { not continuous_at(x3, x4) or not x5.is_positive or continuous_condition(x3, x4, s0(x3, x4, x5), x5) } and forall(x6: Real -> Real, x7: Real) { s1(x6, x7).is_positive or continuous_at(x6, x7) } and forall(x8: Real -> Real, x9: Real, x10: Real) { not continuous_condition(x8, x9, x10, s1(x8, x9)) or not x10.is_positive or continuous_at(x8, x9) } }","let s2: Real -> Real satisfy { forall(x11: Real) { not x11.is_positive or s2(x11).is_positive } and forall(x12: Real) { not x12.is_positive or continuous_condition(f, x, s2(x12), x12) } }","not s1(f, x).is_positive or s2(s1(f, x)).is_positive","not s1(f, x).is_positive or continuous_condition(f, x, s2(s1(f, x)), s1(f, x))","not continuous_condition(f, x, s2(s1(f, x)), s1(f, x)) or not s2(s1(f, x)).is_positive or continuous_at(f, x)","s1(f, x).is_positive or continuous_at(f, x)","s1(f, x).is_positive","not continuous_condition(f, x, s2(s1(f, x)), s1(f, x)) or not s2(s1(f, x)).is_positive","s2(s1(f, x)).is_positive","continuous_condition(f, x, s2(s1(f, x)), s1(f, x))","not continuous_condition(f, x, s2(s1(f, x)), s1(f, x))"]}
{"goal":"uniform_imp_continuous","proof":["let s0: Real -> Real -> Real satisfy { forall(x0: Real -> Real, x1: Real) { not continuous(x0) or continuous_at(x0, x1) } and forall(x2: Real -> Real) { not continuous_at(x2, s0(x2)) or continuous(x2) } }","continuous_at(f, s0(f))","not continuous_at(f, s0(f)) or continuous(f)"]}
